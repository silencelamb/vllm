module {
  tt.func @gemm_fusion_dot_7_0_impl(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf32>
    %0 = tt.get_program_id x : i32
    %c8_i32 = arith.constant 8 : i32
    %1 = arith.divsi %0, %c8_i32 : i32
    %c8_i32_0 = arith.constant 8 : i32
    %2 = arith.muli %1, %c8_i32_0 : i32
    %c128_i32 = arith.constant 128 : i32
    %3 = arith.subi %c128_i32, %2 : i32
    %4 = arith.cmpi slt, %3, %c8_i32_0 : i32
    %5 = arith.select %4, %3, %c8_i32_0 : i32
    %6 = arith.remsi %0, %5 : i32
    %7 = arith.addi %2, %6 : i32
    %c8_i32_1 = arith.constant 8 : i32
    %8 = arith.remsi %0, %c8_i32_1 : i32
    %9 = arith.divsi %8, %5 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.muli %7, %c16_i32 : i32
    %11 = arith.cmpi slt, %10, %c1024_i32 : i32
    %12 = arith.select %11, %arg0, %arg1 : !tt.ptr<bf16>
    %c16_i32_2 = arith.constant 16 : i32
    %13 = arith.muli %7, %c16_i32_2 : i32
    %c2048_i64 = arith.constant 2048 : i64
    %c0_i32 = arith.constant 0 : i32
    %14 = arith.addi %13, %c0_i32 : i32
    %c1024_i64 = arith.constant 1024 : i64
    %c2048_i64_3 = arith.constant 2048 : i64
    %c-1024_i32 = arith.constant -1024 : i32
    %15 = arith.addi %13, %c-1024_i32 : i32
    %c1024_i64_4 = arith.constant 1024 : i64
    %16 = arith.cmpi slt, %10, %c1024_i32 : i32
    %17 = arith.select %16, %c2048_i64, %c2048_i64_3 : i64
    %18 = arith.cmpi slt, %13, %c1024_i32 : i32
    %19 = arith.select %18, %14, %15 : i32
    %20 = arith.cmpi slt, %13, %c1024_i32 : i32
    %21 = arith.select %20, %c1024_i64, %c1024_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.addi %c0_i32_6, %c0_i32_7 : i32
    %c2048_i64_8 = arith.constant 2048 : i64
    %c1_i64_9 = arith.constant 1 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %23 = arith.addi %c0_i32_6, %c0_i32_10 : i32
    %c2048_i64_11 = arith.constant 2048 : i64
    %24 = arith.cmpi slt, %10, %c1024_i32 : i32
    %25 = arith.select %24, %c1_i64, %c1_i64_9 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %c2048_i64_13 = arith.constant 2048 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %26 = arith.cmpi slt, %10, %c1024_i32 : i32
    %27 = arith.select %26, %c0_i32_14, %c0_i32_15 : i32
    %28 = tt.make_tensor_ptr %12, [%21, %c2048_i64_13], [%17, %25], [%c0_i32_5, %c0_i32_12] {order = array<i32: 1, 0>} : <tensor<16x256xbf16>>
    %29 = tt.advance %28, [%19, %c0_i32_6] : <tensor<16x256xbf16>>
    %c256_i32 = arith.constant 256 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32_16 = arith.constant 0 : i32
    %30:2 = scf.for %arg3 = %c0_i32_16 to %c2048_i32 step %c256_i32 iter_args(%arg4 = %29, %arg5 = %cst) -> (!tt.ptr<tensor<16x256xbf16>>, tensor<16x16xf32>)  : i32 {
      %38 = tt.load %arg4 : !tt.ptr<tensor<16x256xbf16>>
      %c0_i32_29 = arith.constant 0 : i32
      %c256_i32_30 = arith.constant 256 : i32
      %39 = tt.advance %arg4, [%c0_i32_29, %c256_i32_30] : <tensor<16x256xbf16>>
      %cst_31 = arith.constant 0.000000e+00 : bf16
      %40 = tt.splat %cst_31 : bf16 -> tensor<bf16>
      %41 = tt.expand_dims %40 {axis = 0 : i32} : tensor<bf16> -> tensor<1xbf16>
      %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<1xbf16> -> tensor<1x1xbf16>
      %43 = tt.broadcast %42 : tensor<1x1xbf16> -> tensor<256x16xbf16>
      %44 = tt.dot %38, %43, %arg5, inputPrecision = tf32 : tensor<16x256xbf16> * tensor<256x16xbf16> -> tensor<16x16xf32>
      scf.yield %39, %44 : !tt.ptr<tensor<16x256xbf16>>, tensor<16x16xf32>
    }
    %31 = arith.truncf %30#1 : tensor<16x16xf32> to tensor<16x16xbf16>
    %c16_i32_17 = arith.constant 16 : i32
    %32 = arith.muli %7, %c16_i32_17 : i32
    %c1_i64_18 = arith.constant 1 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %33 = arith.addi %32, %c0_i32_19 : i32
    %c2048_i64_20 = arith.constant 2048 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %c2048_i64_22 = arith.constant 2048 : i64
    %c16_i32_23 = arith.constant 16 : i32
    %34 = arith.muli %9, %c16_i32_23 : i32
    %c2048_i64_24 = arith.constant 2048 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %35 = arith.addi %34, %c0_i32_25 : i32
    %c16_i64 = arith.constant 16 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %c16_i64_27 = arith.constant 16 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %36 = tt.make_tensor_ptr %arg2, [%c2048_i64_22, %c16_i64_27], [%c1_i64_18, %c2048_i64_24], [%c0_i32_21, %c0_i32_26] {order = array<i32: 1, 0>} : <tensor<16x16xbf16>>
    %37 = tt.advance %36, [%32, %34] : <tensor<16x16xbf16>>
    tt.store %37, %31 : !tt.ptr<tensor<16x16xbf16>>
    tt.return
  }
}

#indexing_map = #xla.indexing_map<"(d0) -> (0), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
module {
  tt.func @fusion_23_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %c1_i64 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %4 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64 = arith.constant 64 : i64
    %5 = arith.index_castui %2 : index to i64
    %6 = arith.subi %c64_i64, %5 : i64
    %c1024_i64_0 = arith.constant 1024 : i64
    %7 = arith.index_castui %4 : index to i64
    %8 = arith.subi %c1024_i64_0, %7 : i64
    %9 = xla.apply_indexing #indexing_map2(%2, %3)
    %10 = arith.index_castui %9 : index to i64
    %11 = tt.addptr %arg3, %10 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %12 = tt.make_tensor_ptr %11, [%6, %8], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %13 = tt.load %12 : !tt.ptr<tensor<1x1024xbf16>>
    %14 = arith.extf %13 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_1 = arith.constant 1 : i64
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_3 = arith.constant 64 : i64
    %16 = arith.index_castui %2 : index to i64
    %17 = arith.subi %c64_i64_3, %16 : i64
    %c1024_i64_4 = arith.constant 1024 : i64
    %18 = arith.index_castui %15 : index to i64
    %19 = arith.subi %c1024_i64_4, %18 : i64
    %20 = xla.apply_indexing #indexing_map2(%2, %3)
    %21 = arith.index_castui %20 : index to i64
    %22 = tt.addptr %arg2, %21 : !tt.ptr<bf16>, i64
    %c0_i32_5 = arith.constant 0 : i32
    %23 = tt.make_tensor_ptr %22, [%17, %19], [%c1024_i64_2, %c1_i64_1], [%c0_i32_5, %c0_i32_5] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %24 = tt.load %23 : !tt.ptr<tensor<1x1024xbf16>>
    %25 = arith.extf %24 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_6 = arith.constant 1 : i64
    %c1024_i64_7 = arith.constant 1024 : i64
    %c0_i64 = arith.constant 0 : i64
    %26 = xla.apply_indexing #indexing_map1(%2, %3)
    %27 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_8 = arith.constant 64 : i64
    %28 = arith.index_castui %2 : index to i64
    %29 = arith.subi %c64_i64_8, %28 : i64
    %c1_i64_9 = arith.constant 1 : i64
    %30 = arith.index_castui %26 : index to i64
    %31 = arith.subi %c1_i64_9, %30 : i64
    %c1024_i64_10 = arith.constant 1024 : i64
    %32 = arith.index_castui %27 : index to i64
    %33 = arith.subi %c1024_i64_10, %32 : i64
    %34 = xla.apply_indexing #indexing_map2(%2, %3)
    %35 = arith.index_castui %34 : index to i64
    %36 = tt.addptr %arg1, %35 : !tt.ptr<bf16>, i64
    %c0_i32_11 = arith.constant 0 : i32
    %37 = tt.make_tensor_ptr %36, [%29, %31, %33], [%c1024_i64_7, %c0_i64, %c1_i64_6], [%c0_i32_11, %c0_i32_11, %c0_i32_11] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %38 = tt.load %37 : !tt.ptr<tensor<1x1x1024xbf16>>
    %39 = tt.trans %38 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %40 = tt.reshape %39 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %41 = arith.extf %40 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %42 = arith.addf %25, %41 : tensor<1x1024xf32>
    %43 = arith.addf %14, %42 : tensor<1x1024xf32>
    %44 = arith.mulf %43, %43 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %45 = "tt.reduce"(%44) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %81 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %81 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_12 = arith.constant 9.765625E-4 : f32
    %46 = tt.splat %cst_12 : f32 -> tensor<1xf32>
    %47 = arith.mulf %45, %46 : tensor<1xf32>
    %48 = xla.apply_indexing #indexing_map1(%2, %3)
    %49 = arith.index_castui %48 : index to i64
    %50 = tt.addptr %arg0, %49 : !tt.ptr<f32>, i64
    %c0_i32_13 = arith.constant 0 : i32
    %51 = tt.make_tensor_ptr %50, [], [], [] {order = array<i32>} : <tensor<f32>>
    %52 = tt.load %50 : !tt.ptr<f32>
    %53 = tt.splat %52 : f32 -> tensor<1xf32>
    %54 = arith.addf %47, %53 : tensor<1xf32>
    %55 = tt.extern_elementwise %54 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %56 = tt.expand_dims %55 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %57 = tt.broadcast %56 : tensor<1x1xf32> -> tensor<1x1024xf32>
    %58 = arith.mulf %43, %57 : tensor<1x1024xf32>
    %c1_i64_14 = arith.constant 1 : i64
    %59 = xla.apply_indexing #indexing_map1(%2, %3)
    %c1024_i64_15 = arith.constant 1024 : i64
    %60 = arith.index_castui %59 : index to i64
    %61 = arith.subi %c1024_i64_15, %60 : i64
    %62 = xla.apply_indexing #indexing_map1(%2, %3)
    %63 = arith.index_castui %62 : index to i64
    %64 = tt.addptr %arg4, %63 : !tt.ptr<bf16>, i64
    %c0_i32_16 = arith.constant 0 : i32
    %65 = tt.make_tensor_ptr %64, [%61], [%c1_i64_14], [%c0_i32_16] {order = array<i32: 0>} : <tensor<1024xbf16>>
    %66 = tt.load %65 : !tt.ptr<tensor<1024xbf16>>
    %67 = arith.extf %66 : tensor<1024xbf16> to tensor<1024xf32>
    %68 = tt.expand_dims %67 {axis = 0 : i32} : tensor<1024xf32> -> tensor<1x1024xf32>
    %69 = tt.broadcast %68 : tensor<1x1024xf32> -> tensor<1x1024xf32>
    %70 = arith.mulf %58, %69 : tensor<1x1024xf32>
    %71 = arith.truncf %70 : tensor<1x1024xf32> to tensor<1x1024xbf16>
    %c1_i64_17 = arith.constant 1 : i64
    %c1024_i64_18 = arith.constant 1024 : i64
    %72 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_19 = arith.constant 64 : i64
    %73 = arith.index_castui %2 : index to i64
    %74 = arith.subi %c64_i64_19, %73 : i64
    %c1024_i64_20 = arith.constant 1024 : i64
    %75 = arith.index_castui %72 : index to i64
    %76 = arith.subi %c1024_i64_20, %75 : i64
    %77 = xla.apply_indexing #indexing_map2(%2, %3)
    %78 = arith.index_castui %77 : index to i64
    %79 = tt.addptr %arg5, %78 : !tt.ptr<bf16>, i64
    %c0_i32_21 = arith.constant 0 : i32
    %80 = tt.make_tensor_ptr %79, [%74, %76], [%c1024_i64_18, %c1_i64_17], [%c0_i32_21, %c0_i32_21] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    tt.store %80, %71 : !tt.ptr<tensor<1x1024xbf16>>
    tt.return
  }
}

#indexing_map = #xla.indexing_map<"(d0) -> (d0 floordiv 4), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(d0) -> (d0 mod 4), domain: d0 in [0, 63]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_1 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024 + tid_1 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map5 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
module {
  tt.func @fusion_21_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %c1_i64 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %5 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64 = arith.constant 16 : i64
    %6 = arith.index_castui %3 : index to i64
    %7 = arith.subi %c16_i64, %6 : i64
    %c1024_i64_0 = arith.constant 1024 : i64
    %8 = arith.index_castui %5 : index to i64
    %9 = arith.subi %c1024_i64_0, %8 : i64
    %10 = xla.apply_indexing #indexing_map3(%3, %4)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg4, %11 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %13 = tt.make_tensor_ptr %12, [%7, %9], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x256xbf16>>
    %15 = arith.extf %14 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_1 = arith.constant 1 : i64
    %c1024_i64_2 = arith.constant 1024 : i64
    %16 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64_3 = arith.constant 16 : i64
    %17 = arith.index_castui %3 : index to i64
    %18 = arith.subi %c16_i64_3, %17 : i64
    %c1024_i64_4 = arith.constant 1024 : i64
    %19 = arith.index_castui %16 : index to i64
    %20 = arith.subi %c1024_i64_4, %19 : i64
    %21 = xla.apply_indexing #indexing_map3(%3, %4)
    %22 = arith.index_castui %21 : index to i64
    %23 = tt.addptr %arg3, %22 : !tt.ptr<bf16>, i64
    %c0_i32_5 = arith.constant 0 : i32
    %24 = tt.make_tensor_ptr %23, [%18, %20], [%c1024_i64_2, %c1_i64_1], [%c0_i32_5, %c0_i32_5] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %25 = tt.load %24 : !tt.ptr<tensor<1x256xbf16>>
    %26 = arith.extf %25 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_6 = arith.constant 1 : i64
    %c1024_i64_7 = arith.constant 1024 : i64
    %c0_i64 = arith.constant 0 : i64
    %27 = xla.apply_indexing #indexing_map4(%3, %4)
    %28 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64_8 = arith.constant 16 : i64
    %29 = arith.index_castui %3 : index to i64
    %30 = arith.subi %c16_i64_8, %29 : i64
    %c1_i64_9 = arith.constant 1 : i64
    %31 = arith.index_castui %27 : index to i64
    %32 = arith.subi %c1_i64_9, %31 : i64
    %c1024_i64_10 = arith.constant 1024 : i64
    %33 = arith.index_castui %28 : index to i64
    %34 = arith.subi %c1024_i64_10, %33 : i64
    %35 = xla.apply_indexing #indexing_map3(%3, %4)
    %36 = arith.index_castui %35 : index to i64
    %37 = tt.addptr %arg2, %36 : !tt.ptr<bf16>, i64
    %c0_i32_11 = arith.constant 0 : i32
    %38 = tt.make_tensor_ptr %37, [%30, %32, %34], [%c1024_i64_7, %c0_i64, %c1_i64_6], [%c0_i32_11, %c0_i32_11, %c0_i32_11] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    %39 = tt.load %38 : !tt.ptr<tensor<1x1x256xbf16>>
    %40 = tt.trans %39 {order = array<i32: 1, 0, 2>} : tensor<1x1x256xbf16> -> tensor<1x1x256xbf16>
    %41 = tt.reshape %40 : tensor<1x1x256xbf16> -> tensor<1x256xbf16>
    %42 = arith.extf %41 : tensor<1x256xbf16> to tensor<1x256xf32>
    %43 = arith.addf %26, %42 : tensor<1x256xf32>
    %44 = arith.addf %15, %43 : tensor<1x256xf32>
    %c1_i64_12 = arith.constant 1 : i64
    %c1024_i64_13 = arith.constant 1024 : i64
    %45 = xla.apply_indexing #indexing_map4(%3, %4)
    %c16_i64_14 = arith.constant 16 : i64
    %46 = arith.index_castui %3 : index to i64
    %47 = arith.subi %c16_i64_14, %46 : i64
    %c1024_i64_15 = arith.constant 1024 : i64
    %48 = arith.index_castui %45 : index to i64
    %49 = arith.subi %c1024_i64_15, %48 : i64
    %50 = xla.apply_indexing #indexing_map5(%3, %4)
    %51 = arith.index_castui %50 : index to i64
    %52 = tt.addptr %arg4, %51 : !tt.ptr<bf16>, i64
    %c0_i32_16 = arith.constant 0 : i32
    %53 = tt.make_tensor_ptr %52, [%47, %49], [%c1024_i64_13, %c1_i64_12], [%c0_i32_16, %c0_i32_16] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %54 = tt.load %53 : !tt.ptr<tensor<1x1024xbf16>>
    %55 = arith.extf %54 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_17 = arith.constant 1 : i64
    %c1024_i64_18 = arith.constant 1024 : i64
    %56 = xla.apply_indexing #indexing_map4(%3, %4)
    %c16_i64_19 = arith.constant 16 : i64
    %57 = arith.index_castui %3 : index to i64
    %58 = arith.subi %c16_i64_19, %57 : i64
    %c1024_i64_20 = arith.constant 1024 : i64
    %59 = arith.index_castui %56 : index to i64
    %60 = arith.subi %c1024_i64_20, %59 : i64
    %61 = xla.apply_indexing #indexing_map5(%3, %4)
    %62 = arith.index_castui %61 : index to i64
    %63 = tt.addptr %arg3, %62 : !tt.ptr<bf16>, i64
    %c0_i32_21 = arith.constant 0 : i32
    %64 = tt.make_tensor_ptr %63, [%58, %60], [%c1024_i64_18, %c1_i64_17], [%c0_i32_21, %c0_i32_21] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %65 = tt.load %64 : !tt.ptr<tensor<1x1024xbf16>>
    %66 = arith.extf %65 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_22 = arith.constant 1 : i64
    %c1024_i64_23 = arith.constant 1024 : i64
    %c0_i64_24 = arith.constant 0 : i64
    %67 = xla.apply_indexing #indexing_map4(%3, %4)
    %68 = xla.apply_indexing #indexing_map4(%3, %4)
    %c16_i64_25 = arith.constant 16 : i64
    %69 = arith.index_castui %3 : index to i64
    %70 = arith.subi %c16_i64_25, %69 : i64
    %c1_i64_26 = arith.constant 1 : i64
    %71 = arith.index_castui %67 : index to i64
    %72 = arith.subi %c1_i64_26, %71 : i64
    %c1024_i64_27 = arith.constant 1024 : i64
    %73 = arith.index_castui %68 : index to i64
    %74 = arith.subi %c1024_i64_27, %73 : i64
    %75 = xla.apply_indexing #indexing_map5(%3, %4)
    %76 = arith.index_castui %75 : index to i64
    %77 = tt.addptr %arg2, %76 : !tt.ptr<bf16>, i64
    %c0_i32_28 = arith.constant 0 : i32
    %78 = tt.make_tensor_ptr %77, [%70, %72, %74], [%c1024_i64_23, %c0_i64_24, %c1_i64_22], [%c0_i32_28, %c0_i32_28, %c0_i32_28] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %79 = tt.load %78 : !tt.ptr<tensor<1x1x1024xbf16>>
    %80 = tt.trans %79 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %81 = tt.reshape %80 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %82 = arith.extf %81 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %83 = arith.addf %66, %82 : tensor<1x1024xf32>
    %84 = arith.addf %55, %83 : tensor<1x1024xf32>
    %85 = arith.mulf %84, %84 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %86 = "tt.reduce"(%85) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %122 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %122 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_29 = arith.constant 9.765625E-4 : f32
    %87 = tt.splat %cst_29 : f32 -> tensor<1xf32>
    %88 = arith.mulf %86, %87 : tensor<1xf32>
    %89 = xla.apply_indexing #indexing_map4(%3, %4)
    %90 = arith.index_castui %89 : index to i64
    %91 = tt.addptr %arg0, %90 : !tt.ptr<f32>, i64
    %c0_i32_30 = arith.constant 0 : i32
    %92 = tt.make_tensor_ptr %91, [], [], [] {order = array<i32>} : <tensor<f32>>
    %93 = tt.load %91 : !tt.ptr<f32>
    %94 = tt.splat %93 : f32 -> tensor<1xf32>
    %95 = arith.addf %88, %94 : tensor<1xf32>
    %96 = tt.extern_elementwise %95 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %97 = tt.expand_dims %96 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %98 = tt.broadcast %97 : tensor<1x1xf32> -> tensor<1x256xf32>
    %99 = arith.mulf %44, %98 : tensor<1x256xf32>
    %c1_i64_31 = arith.constant 1 : i64
    %100 = xla.apply_indexing #indexing_map2(%3, %4)
    %c1024_i64_32 = arith.constant 1024 : i64
    %101 = arith.index_castui %100 : index to i64
    %102 = arith.subi %c1024_i64_32, %101 : i64
    %103 = xla.apply_indexing #indexing_map2(%3, %4)
    %104 = arith.index_castui %103 : index to i64
    %105 = tt.addptr %arg1, %104 : !tt.ptr<bf16>, i64
    %c0_i32_33 = arith.constant 0 : i32
    %106 = tt.make_tensor_ptr %105, [%102], [%c1_i64_31], [%c0_i32_33] {order = array<i32: 0>} : <tensor<256xbf16>>
    %107 = tt.load %106 : !tt.ptr<tensor<256xbf16>>
    %108 = arith.extf %107 : tensor<256xbf16> to tensor<256xf32>
    %109 = tt.expand_dims %108 {axis = 0 : i32} : tensor<256xf32> -> tensor<1x256xf32>
    %110 = tt.broadcast %109 : tensor<1x256xf32> -> tensor<1x256xf32>
    %111 = arith.mulf %99, %110 : tensor<1x256xf32>
    %112 = arith.truncf %111 : tensor<1x256xf32> to tensor<1x256xbf16>
    %c1_i64_34 = arith.constant 1 : i64
    %c1024_i64_35 = arith.constant 1024 : i64
    %113 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64_36 = arith.constant 16 : i64
    %114 = arith.index_castui %3 : index to i64
    %115 = arith.subi %c16_i64_36, %114 : i64
    %c1024_i64_37 = arith.constant 1024 : i64
    %116 = arith.index_castui %113 : index to i64
    %117 = arith.subi %c1024_i64_37, %116 : i64
    %118 = xla.apply_indexing #indexing_map3(%3, %4)
    %119 = arith.index_castui %118 : index to i64
    %120 = tt.addptr %arg5, %119 : !tt.ptr<bf16>, i64
    %c0_i32_38 = arith.constant 0 : i32
    %121 = tt.make_tensor_ptr %120, [%115, %117], [%c1024_i64_35, %c1_i64_34], [%c0_i32_38, %c0_i32_38] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    tt.store %121, %112 : !tt.ptr<tensor<1x256xbf16>>
    tt.return
  }
}

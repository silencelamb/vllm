#indexing_map = #xla.indexing_map<"(d0) -> (d0 floordiv 4), domain: d0 in [0, 127]">
#indexing_map1 = #xla.indexing_map<"(d0) -> (d0 mod 4), domain: d0 in [0, 127]">
#indexing_map2 = #xla.indexing_map<"(tid_2) -> (tid_2 * 256), domain: tid_2 in [0, 3]">
#indexing_map3 = #xla.indexing_map<"(d0) -> (d0 * 256), domain: d0 in [0, 127]">
#indexing_map4 = #xla.indexing_map<"(tid_0) -> (tid_0 * 1024), domain: tid_0 in [0, 31]">
module {
  tt.func @fusion_11_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<9.765625E-4> : tensor<1xf32>
    %c0_i32 = arith.constant 0 : i32
    %c32_i64 = arith.constant 32 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %5 = xla.apply_indexing #indexing_map2(%4)
    %6 = arith.index_castui %3 : index to i64
    %7 = arith.subi %c32_i64, %6 : i64
    %8 = arith.index_castui %5 : index to i64
    %9 = arith.subi %c1024_i64, %8 : i64
    %10 = xla.apply_indexing #indexing_map3(%2)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg1, %11 : !tt.ptr<bf16>, i64
    %13 = tt.make_tensor_ptr %12, [%7, %c1_i64, %9], [%c1024_i64, %c0_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x1x256xbf16>>
    %15 = arith.extf %14 : tensor<1x1x256xbf16> to tensor<1x1x256xf32>
    %16 = xla.apply_indexing #indexing_map4(%3)
    %17 = arith.index_castui %16 : index to i64
    %18 = tt.addptr %arg1, %17 : !tt.ptr<bf16>, i64
    %19 = tt.make_tensor_ptr %18, [%7, %c1_i64, %c1024_i64], [%c1024_i64, %c0_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %20 = tt.load %19 : !tt.ptr<tensor<1x1x1024xbf16>>
    %21 = arith.extf %20 : tensor<1x1x1024xbf16> to tensor<1x1x1024xf32>
    %22 = arith.mulf %21, %21 : tensor<1x1x1024xf32>
    %23 = tt.reshape %22 : tensor<1x1x1024xf32> -> tensor<1x1024xf32>
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %44 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %44 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %25 = arith.mulf %24, %cst : tensor<1xf32>
    %26 = tt.load %arg0 : !tt.ptr<f32>
    %27 = tt.splat %26 : f32 -> tensor<1xf32>
    %28 = arith.addf %25, %27 : tensor<1xf32>
    %29 = tt.extern_elementwise %28 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %31 = tt.expand_dims %30 {axis = 2 : i32} : tensor<1x1xf32> -> tensor<1x1x1xf32>
    %32 = tt.broadcast %31 : tensor<1x1x1xf32> -> tensor<1x1x256xf32>
    %33 = arith.mulf %15, %32 : tensor<1x1x256xf32>
    %34 = tt.addptr %arg2, %8 : !tt.ptr<bf16>, i64
    %35 = tt.make_tensor_ptr %34, [%9], [%c1_i64], [%c0_i32] {order = array<i32: 0>} : <tensor<256xbf16>>
    %36 = tt.load %35 : !tt.ptr<tensor<256xbf16>>
    %37 = arith.extf %36 : tensor<256xbf16> to tensor<256xf32>
    %38 = tt.expand_dims %37 {axis = 0 : i32} : tensor<256xf32> -> tensor<1x256xf32>
    %39 = tt.expand_dims %38 {axis = 1 : i32} : tensor<1x256xf32> -> tensor<1x1x256xf32>
    %40 = arith.mulf %33, %39 : tensor<1x1x256xf32>
    %41 = arith.truncf %40 : tensor<1x1x256xf32> to tensor<1x1x256xbf16>
    %42 = tt.addptr %arg3, %11 : !tt.ptr<bf16>, i64
    %43 = tt.make_tensor_ptr %42, [%7, %c1_i64, %9], [%c1024_i64, %c1024_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    tt.store %43, %41 : !tt.ptr<tensor<1x1x256xbf16>>
    tt.return
  }
}

#indexing_map = #xla.indexing_map<"(d0) -> (0), domain: d0 in [0, 15]">
#indexing_map1 = #xla.indexing_map<"(tid_0, tid_1) -> (1024), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 5120 + 1024), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
#indexing_map5 = #xla.indexing_map<"(tid_0, tid_1) -> (2048), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
#indexing_map6 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 5120 + 2048), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
#indexing_map7 = #xla.indexing_map<"(tid_0, tid_1) -> (3072), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
#indexing_map8 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 5120 + 3072), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
#indexing_map9 = #xla.indexing_map<"(tid_0, tid_1) -> (4096), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
#indexing_map10 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 5120 + 4096), domain: tid_0 in [0, 15], tid_1 in [0, 0]">
module {
  tt.func @fusion_71_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %c1_i64 = arith.constant 1 : i64
    %c5120_i64 = arith.constant 5120 : i64
    %4 = xla.apply_indexing #indexing_map1(%2, %3)
    %c16_i64 = arith.constant 16 : i64
    %5 = arith.index_castui %2 : index to i64
    %6 = arith.subi %c16_i64, %5 : i64
    %c5120_i64_0 = arith.constant 5120 : i64
    %7 = arith.index_castui %4 : index to i64
    %8 = arith.subi %c5120_i64_0, %7 : i64
    %9 = xla.apply_indexing #indexing_map2(%2, %3)
    %10 = arith.index_castui %9 : index to i64
    %11 = tt.addptr %arg3, %10 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %12 = tt.make_tensor_ptr %11, [%6, %8], [%c5120_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %13 = tt.load %12 : !tt.ptr<tensor<1x1024xbf16>>
    %14 = arith.extf %13 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_1 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %15 = xla.apply_indexing #indexing_map3(%2, %3)
    %c16_i64_2 = arith.constant 16 : i64
    %16 = arith.index_castui %2 : index to i64
    %17 = arith.subi %c16_i64_2, %16 : i64
    %c1024_i64_3 = arith.constant 1024 : i64
    %18 = arith.index_castui %15 : index to i64
    %19 = arith.subi %c1024_i64_3, %18 : i64
    %20 = xla.apply_indexing #indexing_map4(%2, %3)
    %21 = arith.index_castui %20 : index to i64
    %22 = tt.addptr %arg2, %21 : !tt.ptr<bf16>, i64
    %c0_i32_4 = arith.constant 0 : i32
    %23 = tt.make_tensor_ptr %22, [%17, %19], [%c1024_i64, %c1_i64_1], [%c0_i32_4, %c0_i32_4] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %24 = tt.load %23 : !tt.ptr<tensor<1x1024xbf16>>
    %25 = arith.extf %24 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_5 = arith.constant 1 : i64
    %c5120_i64_6 = arith.constant 5120 : i64
    %26 = xla.apply_indexing #indexing_map5(%2, %3)
    %c16_i64_7 = arith.constant 16 : i64
    %27 = arith.index_castui %2 : index to i64
    %28 = arith.subi %c16_i64_7, %27 : i64
    %c5120_i64_8 = arith.constant 5120 : i64
    %29 = arith.index_castui %26 : index to i64
    %30 = arith.subi %c5120_i64_8, %29 : i64
    %31 = xla.apply_indexing #indexing_map6(%2, %3)
    %32 = arith.index_castui %31 : index to i64
    %33 = tt.addptr %arg3, %32 : !tt.ptr<bf16>, i64
    %c0_i32_9 = arith.constant 0 : i32
    %34 = tt.make_tensor_ptr %33, [%28, %30], [%c5120_i64_6, %c1_i64_5], [%c0_i32_9, %c0_i32_9] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %35 = tt.load %34 : !tt.ptr<tensor<1x1024xbf16>>
    %36 = arith.extf %35 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_10 = arith.constant 1 : i64
    %c1024_i64_11 = arith.constant 1024 : i64
    %37 = xla.apply_indexing #indexing_map3(%2, %3)
    %c16_i64_12 = arith.constant 16 : i64
    %38 = arith.index_castui %2 : index to i64
    %39 = arith.subi %c16_i64_12, %38 : i64
    %c1024_i64_13 = arith.constant 1024 : i64
    %40 = arith.index_castui %37 : index to i64
    %41 = arith.subi %c1024_i64_13, %40 : i64
    %42 = xla.apply_indexing #indexing_map4(%2, %3)
    %43 = arith.index_castui %42 : index to i64
    %44 = tt.addptr %arg6, %43 : !tt.ptr<bf16>, i64
    %c0_i32_14 = arith.constant 0 : i32
    %45 = tt.make_tensor_ptr %44, [%39, %41], [%c1024_i64_11, %c1_i64_10], [%c0_i32_14, %c0_i32_14] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %46 = tt.load %45 : !tt.ptr<tensor<1x1024xbf16>>
    %47 = arith.extf %46 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_15 = arith.constant 1 : i64
    %c5120_i64_16 = arith.constant 5120 : i64
    %48 = xla.apply_indexing #indexing_map7(%2, %3)
    %c16_i64_17 = arith.constant 16 : i64
    %49 = arith.index_castui %2 : index to i64
    %50 = arith.subi %c16_i64_17, %49 : i64
    %c5120_i64_18 = arith.constant 5120 : i64
    %51 = arith.index_castui %48 : index to i64
    %52 = arith.subi %c5120_i64_18, %51 : i64
    %53 = xla.apply_indexing #indexing_map8(%2, %3)
    %54 = arith.index_castui %53 : index to i64
    %55 = tt.addptr %arg3, %54 : !tt.ptr<bf16>, i64
    %c0_i32_19 = arith.constant 0 : i32
    %56 = tt.make_tensor_ptr %55, [%50, %52], [%c5120_i64_16, %c1_i64_15], [%c0_i32_19, %c0_i32_19] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %57 = tt.load %56 : !tt.ptr<tensor<1x1024xbf16>>
    %58 = arith.extf %57 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_20 = arith.constant 1 : i64
    %c1024_i64_21 = arith.constant 1024 : i64
    %59 = xla.apply_indexing #indexing_map3(%2, %3)
    %c16_i64_22 = arith.constant 16 : i64
    %60 = arith.index_castui %2 : index to i64
    %61 = arith.subi %c16_i64_22, %60 : i64
    %c1024_i64_23 = arith.constant 1024 : i64
    %62 = arith.index_castui %59 : index to i64
    %63 = arith.subi %c1024_i64_23, %62 : i64
    %64 = xla.apply_indexing #indexing_map4(%2, %3)
    %65 = arith.index_castui %64 : index to i64
    %66 = tt.addptr %arg5, %65 : !tt.ptr<bf16>, i64
    %c0_i32_24 = arith.constant 0 : i32
    %67 = tt.make_tensor_ptr %66, [%61, %63], [%c1024_i64_21, %c1_i64_20], [%c0_i32_24, %c0_i32_24] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %68 = tt.load %67 : !tt.ptr<tensor<1x1024xbf16>>
    %69 = arith.extf %68 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_25 = arith.constant 1 : i64
    %c5120_i64_26 = arith.constant 5120 : i64
    %70 = xla.apply_indexing #indexing_map9(%2, %3)
    %c16_i64_27 = arith.constant 16 : i64
    %71 = arith.index_castui %2 : index to i64
    %72 = arith.subi %c16_i64_27, %71 : i64
    %c5120_i64_28 = arith.constant 5120 : i64
    %73 = arith.index_castui %70 : index to i64
    %74 = arith.subi %c5120_i64_28, %73 : i64
    %75 = xla.apply_indexing #indexing_map10(%2, %3)
    %76 = arith.index_castui %75 : index to i64
    %77 = tt.addptr %arg3, %76 : !tt.ptr<bf16>, i64
    %c0_i32_29 = arith.constant 0 : i32
    %78 = tt.make_tensor_ptr %77, [%72, %74], [%c5120_i64_26, %c1_i64_25], [%c0_i32_29, %c0_i32_29] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %79 = tt.load %78 : !tt.ptr<tensor<1x1024xbf16>>
    %80 = arith.extf %79 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_30 = arith.constant 1 : i64
    %c1024_i64_31 = arith.constant 1024 : i64
    %c0_i64 = arith.constant 0 : i64
    %81 = xla.apply_indexing #indexing_map3(%2, %3)
    %82 = xla.apply_indexing #indexing_map3(%2, %3)
    %c16_i64_32 = arith.constant 16 : i64
    %83 = arith.index_castui %2 : index to i64
    %84 = arith.subi %c16_i64_32, %83 : i64
    %c1_i64_33 = arith.constant 1 : i64
    %85 = arith.index_castui %81 : index to i64
    %86 = arith.subi %c1_i64_33, %85 : i64
    %c1024_i64_34 = arith.constant 1024 : i64
    %87 = arith.index_castui %82 : index to i64
    %88 = arith.subi %c1024_i64_34, %87 : i64
    %89 = xla.apply_indexing #indexing_map4(%2, %3)
    %90 = arith.index_castui %89 : index to i64
    %91 = tt.addptr %arg4, %90 : !tt.ptr<bf16>, i64
    %c0_i32_35 = arith.constant 0 : i32
    %92 = tt.make_tensor_ptr %91, [%84, %86, %88], [%c1024_i64_31, %c0_i64, %c1_i64_30], [%c0_i32_35, %c0_i32_35, %c0_i32_35] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %93 = tt.load %92 : !tt.ptr<tensor<1x1x1024xbf16>>
    %94 = tt.trans %93 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %95 = tt.reshape %94 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %96 = arith.extf %95 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %97 = arith.addf %80, %96 : tensor<1x1024xf32>
    %98 = arith.addf %69, %97 : tensor<1x1024xf32>
    %99 = arith.addf %58, %98 : tensor<1x1024xf32>
    %100 = arith.addf %47, %99 : tensor<1x1024xf32>
    %101 = arith.addf %36, %100 : tensor<1x1024xf32>
    %102 = arith.addf %25, %101 : tensor<1x1024xf32>
    %103 = arith.addf %14, %102 : tensor<1x1024xf32>
    %104 = arith.mulf %103, %103 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %105 = "tt.reduce"(%104) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %141 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %141 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_36 = arith.constant 9.765625E-4 : f32
    %106 = tt.splat %cst_36 : f32 -> tensor<1xf32>
    %107 = arith.mulf %105, %106 : tensor<1xf32>
    %108 = xla.apply_indexing #indexing_map3(%2, %3)
    %109 = arith.index_castui %108 : index to i64
    %110 = tt.addptr %arg0, %109 : !tt.ptr<f32>, i64
    %c0_i32_37 = arith.constant 0 : i32
    %111 = tt.make_tensor_ptr %110, [], [], [] {order = array<i32>} : <tensor<f32>>
    %112 = tt.load %110 : !tt.ptr<f32>
    %113 = tt.splat %112 : f32 -> tensor<1xf32>
    %114 = arith.addf %107, %113 : tensor<1xf32>
    %115 = tt.extern_elementwise %114 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %116 = tt.expand_dims %115 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %117 = tt.broadcast %116 : tensor<1x1xf32> -> tensor<1x1024xf32>
    %118 = arith.mulf %103, %117 : tensor<1x1024xf32>
    %c1_i64_38 = arith.constant 1 : i64
    %119 = xla.apply_indexing #indexing_map3(%2, %3)
    %c1024_i64_39 = arith.constant 1024 : i64
    %120 = arith.index_castui %119 : index to i64
    %121 = arith.subi %c1024_i64_39, %120 : i64
    %122 = xla.apply_indexing #indexing_map3(%2, %3)
    %123 = arith.index_castui %122 : index to i64
    %124 = tt.addptr %arg1, %123 : !tt.ptr<bf16>, i64
    %c0_i32_40 = arith.constant 0 : i32
    %125 = tt.make_tensor_ptr %124, [%121], [%c1_i64_38], [%c0_i32_40] {order = array<i32: 0>} : <tensor<1024xbf16>>
    %126 = tt.load %125 : !tt.ptr<tensor<1024xbf16>>
    %127 = arith.extf %126 : tensor<1024xbf16> to tensor<1024xf32>
    %128 = tt.expand_dims %127 {axis = 0 : i32} : tensor<1024xf32> -> tensor<1x1024xf32>
    %129 = tt.broadcast %128 : tensor<1x1024xf32> -> tensor<1x1024xf32>
    %130 = arith.mulf %118, %129 : tensor<1x1024xf32>
    %131 = arith.truncf %130 : tensor<1x1024xf32> to tensor<1x1024xbf16>
    %c1_i64_41 = arith.constant 1 : i64
    %c1024_i64_42 = arith.constant 1024 : i64
    %132 = xla.apply_indexing #indexing_map3(%2, %3)
    %c16_i64_43 = arith.constant 16 : i64
    %133 = arith.index_castui %2 : index to i64
    %134 = arith.subi %c16_i64_43, %133 : i64
    %c1024_i64_44 = arith.constant 1024 : i64
    %135 = arith.index_castui %132 : index to i64
    %136 = arith.subi %c1024_i64_44, %135 : i64
    %137 = xla.apply_indexing #indexing_map4(%2, %3)
    %138 = arith.index_castui %137 : index to i64
    %139 = tt.addptr %arg7, %138 : !tt.ptr<bf16>, i64
    %c0_i32_45 = arith.constant 0 : i32
    %140 = tt.make_tensor_ptr %139, [%134, %136], [%c1024_i64_42, %c1_i64_41], [%c0_i32_45, %c0_i32_45] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    tt.store %140, %131 : !tt.ptr<tensor<1x1024xbf16>>
    tt.return
  }
}

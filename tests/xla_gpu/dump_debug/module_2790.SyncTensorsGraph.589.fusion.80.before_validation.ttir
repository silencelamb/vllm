#indexing_map = #xla.indexing_map<"(d0) -> (0), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 6144), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1) -> (1024), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map5 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 6144 + 1024), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map6 = #xla.indexing_map<"(tid_0, tid_1) -> (2048), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map7 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 6144 + 2048), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map8 = #xla.indexing_map<"(tid_0, tid_1) -> (3072), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map9 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 6144 + 3072), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map10 = #xla.indexing_map<"(tid_0, tid_1) -> (4096), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map11 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 6144 + 4096), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map12 = #xla.indexing_map<"(tid_0, tid_1) -> (5120), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map13 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 6144 + 5120), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
module {
  tt.func @fusion_80_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %c1_i64 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %4 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64 = arith.constant 64 : i64
    %5 = arith.index_castui %2 : index to i64
    %6 = arith.subi %c64_i64, %5 : i64
    %c1024_i64_0 = arith.constant 1024 : i64
    %7 = arith.index_castui %4 : index to i64
    %8 = arith.subi %c1024_i64_0, %7 : i64
    %9 = xla.apply_indexing #indexing_map2(%2, %3)
    %10 = arith.index_castui %9 : index to i64
    %11 = tt.addptr %arg1, %10 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %12 = tt.make_tensor_ptr %11, [%6, %8], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %13 = tt.load %12 : !tt.ptr<tensor<1x1024xbf16>>
    %14 = arith.extf %13 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_1 = arith.constant 1 : i64
    %c6144_i64 = arith.constant 6144 : i64
    %15 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_2 = arith.constant 64 : i64
    %16 = arith.index_castui %2 : index to i64
    %17 = arith.subi %c64_i64_2, %16 : i64
    %c6144_i64_3 = arith.constant 6144 : i64
    %18 = arith.index_castui %15 : index to i64
    %19 = arith.subi %c6144_i64_3, %18 : i64
    %20 = xla.apply_indexing #indexing_map3(%2, %3)
    %21 = arith.index_castui %20 : index to i64
    %22 = tt.addptr %arg4, %21 : !tt.ptr<bf16>, i64
    %c0_i32_4 = arith.constant 0 : i32
    %23 = tt.make_tensor_ptr %22, [%17, %19], [%c6144_i64, %c1_i64_1], [%c0_i32_4, %c0_i32_4] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %24 = tt.load %23 : !tt.ptr<tensor<1x1024xbf16>>
    %25 = arith.extf %24 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_5 = arith.constant 1 : i64
    %c1024_i64_6 = arith.constant 1024 : i64
    %26 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_7 = arith.constant 64 : i64
    %27 = arith.index_castui %2 : index to i64
    %28 = arith.subi %c64_i64_7, %27 : i64
    %c1024_i64_8 = arith.constant 1024 : i64
    %29 = arith.index_castui %26 : index to i64
    %30 = arith.subi %c1024_i64_8, %29 : i64
    %31 = xla.apply_indexing #indexing_map2(%2, %3)
    %32 = arith.index_castui %31 : index to i64
    %33 = tt.addptr %arg5, %32 : !tt.ptr<bf16>, i64
    %c0_i32_9 = arith.constant 0 : i32
    %34 = tt.make_tensor_ptr %33, [%28, %30], [%c1024_i64_6, %c1_i64_5], [%c0_i32_9, %c0_i32_9] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %35 = tt.load %34 : !tt.ptr<tensor<1x1024xbf16>>
    %36 = arith.extf %35 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_10 = arith.constant 1 : i64
    %c6144_i64_11 = arith.constant 6144 : i64
    %37 = xla.apply_indexing #indexing_map4(%2, %3)
    %c64_i64_12 = arith.constant 64 : i64
    %38 = arith.index_castui %2 : index to i64
    %39 = arith.subi %c64_i64_12, %38 : i64
    %c6144_i64_13 = arith.constant 6144 : i64
    %40 = arith.index_castui %37 : index to i64
    %41 = arith.subi %c6144_i64_13, %40 : i64
    %42 = xla.apply_indexing #indexing_map5(%2, %3)
    %43 = arith.index_castui %42 : index to i64
    %44 = tt.addptr %arg4, %43 : !tt.ptr<bf16>, i64
    %c0_i32_14 = arith.constant 0 : i32
    %45 = tt.make_tensor_ptr %44, [%39, %41], [%c6144_i64_11, %c1_i64_10], [%c0_i32_14, %c0_i32_14] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %46 = tt.load %45 : !tt.ptr<tensor<1x1024xbf16>>
    %47 = arith.extf %46 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_15 = arith.constant 1 : i64
    %c1024_i64_16 = arith.constant 1024 : i64
    %48 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_17 = arith.constant 64 : i64
    %49 = arith.index_castui %2 : index to i64
    %50 = arith.subi %c64_i64_17, %49 : i64
    %c1024_i64_18 = arith.constant 1024 : i64
    %51 = arith.index_castui %48 : index to i64
    %52 = arith.subi %c1024_i64_18, %51 : i64
    %53 = xla.apply_indexing #indexing_map2(%2, %3)
    %54 = arith.index_castui %53 : index to i64
    %55 = tt.addptr %arg3, %54 : !tt.ptr<bf16>, i64
    %c0_i32_19 = arith.constant 0 : i32
    %56 = tt.make_tensor_ptr %55, [%50, %52], [%c1024_i64_16, %c1_i64_15], [%c0_i32_19, %c0_i32_19] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %57 = tt.load %56 : !tt.ptr<tensor<1x1024xbf16>>
    %58 = arith.extf %57 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_20 = arith.constant 1 : i64
    %c6144_i64_21 = arith.constant 6144 : i64
    %59 = xla.apply_indexing #indexing_map6(%2, %3)
    %c64_i64_22 = arith.constant 64 : i64
    %60 = arith.index_castui %2 : index to i64
    %61 = arith.subi %c64_i64_22, %60 : i64
    %c6144_i64_23 = arith.constant 6144 : i64
    %62 = arith.index_castui %59 : index to i64
    %63 = arith.subi %c6144_i64_23, %62 : i64
    %64 = xla.apply_indexing #indexing_map7(%2, %3)
    %65 = arith.index_castui %64 : index to i64
    %66 = tt.addptr %arg4, %65 : !tt.ptr<bf16>, i64
    %c0_i32_24 = arith.constant 0 : i32
    %67 = tt.make_tensor_ptr %66, [%61, %63], [%c6144_i64_21, %c1_i64_20], [%c0_i32_24, %c0_i32_24] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %68 = tt.load %67 : !tt.ptr<tensor<1x1024xbf16>>
    %69 = arith.extf %68 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_25 = arith.constant 1 : i64
    %c1024_i64_26 = arith.constant 1024 : i64
    %70 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_27 = arith.constant 64 : i64
    %71 = arith.index_castui %2 : index to i64
    %72 = arith.subi %c64_i64_27, %71 : i64
    %c1024_i64_28 = arith.constant 1024 : i64
    %73 = arith.index_castui %70 : index to i64
    %74 = arith.subi %c1024_i64_28, %73 : i64
    %75 = xla.apply_indexing #indexing_map2(%2, %3)
    %76 = arith.index_castui %75 : index to i64
    %77 = tt.addptr %arg9, %76 : !tt.ptr<bf16>, i64
    %c0_i32_29 = arith.constant 0 : i32
    %78 = tt.make_tensor_ptr %77, [%72, %74], [%c1024_i64_26, %c1_i64_25], [%c0_i32_29, %c0_i32_29] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %79 = tt.load %78 : !tt.ptr<tensor<1x1024xbf16>>
    %80 = arith.extf %79 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_30 = arith.constant 1 : i64
    %c6144_i64_31 = arith.constant 6144 : i64
    %81 = xla.apply_indexing #indexing_map8(%2, %3)
    %c64_i64_32 = arith.constant 64 : i64
    %82 = arith.index_castui %2 : index to i64
    %83 = arith.subi %c64_i64_32, %82 : i64
    %c6144_i64_33 = arith.constant 6144 : i64
    %84 = arith.index_castui %81 : index to i64
    %85 = arith.subi %c6144_i64_33, %84 : i64
    %86 = xla.apply_indexing #indexing_map9(%2, %3)
    %87 = arith.index_castui %86 : index to i64
    %88 = tt.addptr %arg4, %87 : !tt.ptr<bf16>, i64
    %c0_i32_34 = arith.constant 0 : i32
    %89 = tt.make_tensor_ptr %88, [%83, %85], [%c6144_i64_31, %c1_i64_30], [%c0_i32_34, %c0_i32_34] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %90 = tt.load %89 : !tt.ptr<tensor<1x1024xbf16>>
    %91 = arith.extf %90 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_35 = arith.constant 1 : i64
    %c1024_i64_36 = arith.constant 1024 : i64
    %92 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_37 = arith.constant 64 : i64
    %93 = arith.index_castui %2 : index to i64
    %94 = arith.subi %c64_i64_37, %93 : i64
    %c1024_i64_38 = arith.constant 1024 : i64
    %95 = arith.index_castui %92 : index to i64
    %96 = arith.subi %c1024_i64_38, %95 : i64
    %97 = xla.apply_indexing #indexing_map2(%2, %3)
    %98 = arith.index_castui %97 : index to i64
    %99 = tt.addptr %arg8, %98 : !tt.ptr<bf16>, i64
    %c0_i32_39 = arith.constant 0 : i32
    %100 = tt.make_tensor_ptr %99, [%94, %96], [%c1024_i64_36, %c1_i64_35], [%c0_i32_39, %c0_i32_39] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %101 = tt.load %100 : !tt.ptr<tensor<1x1024xbf16>>
    %102 = arith.extf %101 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_40 = arith.constant 1 : i64
    %c6144_i64_41 = arith.constant 6144 : i64
    %103 = xla.apply_indexing #indexing_map10(%2, %3)
    %c64_i64_42 = arith.constant 64 : i64
    %104 = arith.index_castui %2 : index to i64
    %105 = arith.subi %c64_i64_42, %104 : i64
    %c6144_i64_43 = arith.constant 6144 : i64
    %106 = arith.index_castui %103 : index to i64
    %107 = arith.subi %c6144_i64_43, %106 : i64
    %108 = xla.apply_indexing #indexing_map11(%2, %3)
    %109 = arith.index_castui %108 : index to i64
    %110 = tt.addptr %arg4, %109 : !tt.ptr<bf16>, i64
    %c0_i32_44 = arith.constant 0 : i32
    %111 = tt.make_tensor_ptr %110, [%105, %107], [%c6144_i64_41, %c1_i64_40], [%c0_i32_44, %c0_i32_44] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %112 = tt.load %111 : !tt.ptr<tensor<1x1024xbf16>>
    %113 = arith.extf %112 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_45 = arith.constant 1 : i64
    %c1024_i64_46 = arith.constant 1024 : i64
    %114 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_47 = arith.constant 64 : i64
    %115 = arith.index_castui %2 : index to i64
    %116 = arith.subi %c64_i64_47, %115 : i64
    %c1024_i64_48 = arith.constant 1024 : i64
    %117 = arith.index_castui %114 : index to i64
    %118 = arith.subi %c1024_i64_48, %117 : i64
    %119 = xla.apply_indexing #indexing_map2(%2, %3)
    %120 = arith.index_castui %119 : index to i64
    %121 = tt.addptr %arg7, %120 : !tt.ptr<bf16>, i64
    %c0_i32_49 = arith.constant 0 : i32
    %122 = tt.make_tensor_ptr %121, [%116, %118], [%c1024_i64_46, %c1_i64_45], [%c0_i32_49, %c0_i32_49] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %123 = tt.load %122 : !tt.ptr<tensor<1x1024xbf16>>
    %124 = arith.extf %123 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_50 = arith.constant 1 : i64
    %c6144_i64_51 = arith.constant 6144 : i64
    %125 = xla.apply_indexing #indexing_map12(%2, %3)
    %c64_i64_52 = arith.constant 64 : i64
    %126 = arith.index_castui %2 : index to i64
    %127 = arith.subi %c64_i64_52, %126 : i64
    %c6144_i64_53 = arith.constant 6144 : i64
    %128 = arith.index_castui %125 : index to i64
    %129 = arith.subi %c6144_i64_53, %128 : i64
    %130 = xla.apply_indexing #indexing_map13(%2, %3)
    %131 = arith.index_castui %130 : index to i64
    %132 = tt.addptr %arg4, %131 : !tt.ptr<bf16>, i64
    %c0_i32_54 = arith.constant 0 : i32
    %133 = tt.make_tensor_ptr %132, [%127, %129], [%c6144_i64_51, %c1_i64_50], [%c0_i32_54, %c0_i32_54] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %134 = tt.load %133 : !tt.ptr<tensor<1x1024xbf16>>
    %135 = arith.extf %134 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_55 = arith.constant 1 : i64
    %c1024_i64_56 = arith.constant 1024 : i64
    %c0_i64 = arith.constant 0 : i64
    %136 = xla.apply_indexing #indexing_map1(%2, %3)
    %137 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_57 = arith.constant 64 : i64
    %138 = arith.index_castui %2 : index to i64
    %139 = arith.subi %c64_i64_57, %138 : i64
    %c1_i64_58 = arith.constant 1 : i64
    %140 = arith.index_castui %136 : index to i64
    %141 = arith.subi %c1_i64_58, %140 : i64
    %c1024_i64_59 = arith.constant 1024 : i64
    %142 = arith.index_castui %137 : index to i64
    %143 = arith.subi %c1024_i64_59, %142 : i64
    %144 = xla.apply_indexing #indexing_map2(%2, %3)
    %145 = arith.index_castui %144 : index to i64
    %146 = tt.addptr %arg6, %145 : !tt.ptr<bf16>, i64
    %c0_i32_60 = arith.constant 0 : i32
    %147 = tt.make_tensor_ptr %146, [%139, %141, %143], [%c1024_i64_56, %c0_i64, %c1_i64_55], [%c0_i32_60, %c0_i32_60, %c0_i32_60] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %148 = tt.load %147 : !tt.ptr<tensor<1x1x1024xbf16>>
    %149 = tt.trans %148 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %150 = tt.reshape %149 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %151 = arith.extf %150 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %152 = arith.addf %135, %151 : tensor<1x1024xf32>
    %153 = arith.addf %124, %152 : tensor<1x1024xf32>
    %154 = arith.addf %113, %153 : tensor<1x1024xf32>
    %155 = arith.addf %102, %154 : tensor<1x1024xf32>
    %156 = arith.addf %91, %155 : tensor<1x1024xf32>
    %157 = arith.addf %80, %156 : tensor<1x1024xf32>
    %158 = arith.addf %69, %157 : tensor<1x1024xf32>
    %159 = arith.addf %58, %158 : tensor<1x1024xf32>
    %160 = arith.addf %47, %159 : tensor<1x1024xf32>
    %161 = arith.addf %36, %160 : tensor<1x1024xf32>
    %162 = arith.addf %25, %161 : tensor<1x1024xf32>
    %163 = arith.addf %14, %162 : tensor<1x1024xf32>
    %164 = arith.mulf %163, %163 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %165 = "tt.reduce"(%164) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32, %arg12: f32):
      %201 = arith.addf %arg11, %arg12 : f32
      tt.reduce.return %201 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_61 = arith.constant 9.765625E-4 : f32
    %166 = tt.splat %cst_61 : f32 -> tensor<1xf32>
    %167 = arith.mulf %165, %166 : tensor<1xf32>
    %168 = xla.apply_indexing #indexing_map1(%2, %3)
    %169 = arith.index_castui %168 : index to i64
    %170 = tt.addptr %arg0, %169 : !tt.ptr<f32>, i64
    %c0_i32_62 = arith.constant 0 : i32
    %171 = tt.make_tensor_ptr %170, [], [], [] {order = array<i32>} : <tensor<f32>>
    %172 = tt.load %170 : !tt.ptr<f32>
    %173 = tt.splat %172 : f32 -> tensor<1xf32>
    %174 = arith.addf %167, %173 : tensor<1xf32>
    %175 = tt.extern_elementwise %174 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %176 = tt.expand_dims %175 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %177 = tt.broadcast %176 : tensor<1x1xf32> -> tensor<1x1024xf32>
    %178 = arith.mulf %163, %177 : tensor<1x1024xf32>
    %c1_i64_63 = arith.constant 1 : i64
    %179 = xla.apply_indexing #indexing_map1(%2, %3)
    %c1024_i64_64 = arith.constant 1024 : i64
    %180 = arith.index_castui %179 : index to i64
    %181 = arith.subi %c1024_i64_64, %180 : i64
    %182 = xla.apply_indexing #indexing_map1(%2, %3)
    %183 = arith.index_castui %182 : index to i64
    %184 = tt.addptr %arg2, %183 : !tt.ptr<bf16>, i64
    %c0_i32_65 = arith.constant 0 : i32
    %185 = tt.make_tensor_ptr %184, [%181], [%c1_i64_63], [%c0_i32_65] {order = array<i32: 0>} : <tensor<1024xbf16>>
    %186 = tt.load %185 : !tt.ptr<tensor<1024xbf16>>
    %187 = arith.extf %186 : tensor<1024xbf16> to tensor<1024xf32>
    %188 = tt.expand_dims %187 {axis = 0 : i32} : tensor<1024xf32> -> tensor<1x1024xf32>
    %189 = tt.broadcast %188 : tensor<1x1024xf32> -> tensor<1x1024xf32>
    %190 = arith.mulf %178, %189 : tensor<1x1024xf32>
    %191 = arith.truncf %190 : tensor<1x1024xf32> to tensor<1x1024xbf16>
    %c1_i64_66 = arith.constant 1 : i64
    %c1024_i64_67 = arith.constant 1024 : i64
    %192 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_68 = arith.constant 64 : i64
    %193 = arith.index_castui %2 : index to i64
    %194 = arith.subi %c64_i64_68, %193 : i64
    %c1024_i64_69 = arith.constant 1024 : i64
    %195 = arith.index_castui %192 : index to i64
    %196 = arith.subi %c1024_i64_69, %195 : i64
    %197 = xla.apply_indexing #indexing_map2(%2, %3)
    %198 = arith.index_castui %197 : index to i64
    %199 = tt.addptr %arg10, %198 : !tt.ptr<bf16>, i64
    %c0_i32_70 = arith.constant 0 : i32
    %200 = tt.make_tensor_ptr %199, [%194, %196], [%c1024_i64_67, %c1_i64_66], [%c0_i32_70, %c0_i32_70] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    tt.store %200, %191 : !tt.ptr<tensor<1x1024xbf16>>
    tt.return
  }
}

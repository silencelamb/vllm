//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	wrapped_concatenate
.visible .entry wrapped_concatenate(
	.param .u64 .ptr .align 16 wrapped_concatenate_param_0,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_1,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_2,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_3,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_4,
	.param .u64 .ptr .align 128 wrapped_concatenate_param_5
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<21>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<39>;
	.reg .b64 	%rd<150>;

	ld.param.u64 	%rd31, [wrapped_concatenate_param_0];
	ld.param.u64 	%rd32, [wrapped_concatenate_param_5];
	cvta.to.global.u64 	%rd1, %rd32;
	ld.param.u64 	%rd33, [wrapped_concatenate_param_1];
	ld.param.u64 	%rd34, [wrapped_concatenate_param_4];
	cvta.to.global.u64 	%rd2, %rd34;
	ld.param.u64 	%rd35, [wrapped_concatenate_param_2];
	ld.param.u64 	%rd36, [wrapped_concatenate_param_3];
	cvta.to.global.u64 	%rd3, %rd36;
	cvta.to.global.u64 	%rd4, %rd35;
	cvta.to.global.u64 	%rd5, %rd33;
	cvta.to.global.u64 	%rd6, %rd31;
	mov.u32 	%r14, %tid.x;
	mov.u32 	%r1, %ctaid.x;
	shr.u32 	%r2, %r1, 2;
	setp.gt.u32 	%p1, %r1, 8191;
	shl.b32 	%r3, %r14, 2;
	shl.b32 	%r4, %r1, 9;
	or.b32  	%r5, %r3, %r4;
	setp.gt.u32 	%p17, %r1, 12287;
	setp.gt.u32 	%p20, %r1, 4095;
	mul.wide.u32 	%rd145, %r5, 2;
	@%p1 bra 	$L__BB1_4;
	@%p20 bra 	$L__BB1_3;
	add.s64 	%rd146, %rd6, %rd145;
	bra.uni 	$L__BB1_9;
$L__BB1_4:
	@%p17 bra 	$L__BB1_6;
	and.b32  	%r15, %r4, 1536;
	shl.b32 	%r16, %r2, 11;
	cvt.u64.u32 	%rd51, %r3;
	or.b32  	%r17, %r16, %r15;
	cvt.u64.u32 	%rd52, %r17;
	add.s64 	%rd53, %rd52, %rd51;
	shl.b64 	%rd54, %rd53, 1;
	add.s64 	%rd55, %rd4, %rd54;
	add.s64 	%rd146, %rd55, -8388608;
	bra.uni 	$L__BB1_9;
$L__BB1_3:
	and.b32  	%r18, %r4, 1536;
	shl.b32 	%r19, %r2, 11;
	cvt.u64.u32 	%rd56, %r3;
	or.b32  	%r20, %r19, %r18;
	cvt.u64.u32 	%rd57, %r20;
	add.s64 	%rd58, %rd57, %rd56;
	shl.b64 	%rd59, %rd58, 1;
	add.s64 	%rd60, %rd5, %rd59;
	add.s64 	%rd146, %rd60, -4194304;
	bra.uni 	$L__BB1_9;
$L__BB1_6:
	setp.gt.u32 	%p3, %r1, 16383;
	and.b32  	%r6, %r4, 1536;
	shl.b32 	%r7, %r2, 11;
	@%p3 bra 	$L__BB1_8;
	cvt.u64.u32 	%rd44, %r3;
	cvt.u64.u32 	%rd45, %r6;
	cvt.u64.u32 	%rd46, %r7;
	add.s64 	%rd47, %rd46, %rd45;
	add.s64 	%rd48, %rd47, %rd44;
	shl.b64 	%rd49, %rd48, 1;
	add.s64 	%rd50, %rd3, %rd49;
	add.s64 	%rd146, %rd50, -12582912;
	bra.uni 	$L__BB1_9;
$L__BB1_8:
	cvt.u64.u32 	%rd37, %r3;
	cvt.u64.u32 	%rd38, %r6;
	cvt.u64.u32 	%rd39, %r7;
	add.s64 	%rd40, %rd39, %rd38;
	add.s64 	%rd41, %rd40, %rd37;
	shl.b64 	%rd42, %rd41, 1;
	add.s64 	%rd43, %rd2, %rd42;
	add.s64 	%rd146, %rd43, -16777216;
$L__BB1_9:
	@%p1 bra 	$L__BB1_13;
	@%p20 bra 	$L__BB1_12;
	add.s64 	%rd87, %rd6, %rd145;
	add.s64 	%rd147, %rd87, 2;
	bra.uni 	$L__BB1_18;
$L__BB1_13:
	@%p17 bra 	$L__BB1_15;
	and.b32  	%r21, %r4, 1536;
	shl.b32 	%r22, %r2, 11;
	cvt.u64.u32 	%rd76, %r3;
	or.b32  	%r23, %r22, %r21;
	cvt.u64.u32 	%rd77, %r23;
	add.s64 	%rd78, %rd77, %rd76;
	shl.b64 	%rd79, %rd78, 1;
	add.s64 	%rd80, %rd79, %rd4;
	add.s64 	%rd147, %rd80, -8388606;
	bra.uni 	$L__BB1_18;
$L__BB1_12:
	and.b32  	%r24, %r4, 1536;
	shl.b32 	%r25, %r2, 11;
	cvt.u64.u32 	%rd81, %r3;
	or.b32  	%r26, %r25, %r24;
	cvt.u64.u32 	%rd82, %r26;
	add.s64 	%rd83, %rd82, %rd81;
	shl.b64 	%rd84, %rd83, 1;
	add.s64 	%rd85, %rd84, %rd5;
	add.s64 	%rd147, %rd85, -4194302;
	bra.uni 	$L__BB1_18;
$L__BB1_15:
	setp.gt.u32 	%p7, %r1, 16383;
	and.b32  	%r8, %r4, 1536;
	shl.b32 	%r9, %r2, 11;
	@%p7 bra 	$L__BB1_17;
	cvt.u64.u32 	%rd69, %r3;
	cvt.u64.u32 	%rd70, %r8;
	cvt.u64.u32 	%rd71, %r9;
	add.s64 	%rd72, %rd71, %rd70;
	add.s64 	%rd73, %rd72, %rd69;
	shl.b64 	%rd74, %rd73, 1;
	add.s64 	%rd75, %rd74, %rd3;
	add.s64 	%rd147, %rd75, -12582910;
	bra.uni 	$L__BB1_18;
$L__BB1_17:
	cvt.u64.u32 	%rd62, %r3;
	cvt.u64.u32 	%rd63, %r8;
	cvt.u64.u32 	%rd64, %r9;
	add.s64 	%rd65, %rd64, %rd63;
	add.s64 	%rd66, %rd65, %rd62;
	shl.b64 	%rd67, %rd66, 1;
	add.s64 	%rd68, %rd67, %rd2;
	add.s64 	%rd147, %rd68, -16777214;
$L__BB1_18:
	@%p1 bra 	$L__BB1_22;
	@%p20 bra 	$L__BB1_21;
	add.s64 	%rd113, %rd6, %rd145;
	add.s64 	%rd148, %rd113, 4;
	bra.uni 	$L__BB1_27;
$L__BB1_22:
	@%p17 bra 	$L__BB1_24;
	and.b32  	%r27, %r4, 1536;
	shl.b32 	%r28, %r2, 11;
	cvt.u64.u32 	%rd102, %r3;
	or.b32  	%r29, %r28, %r27;
	cvt.u64.u32 	%rd103, %r29;
	add.s64 	%rd104, %rd103, %rd102;
	shl.b64 	%rd105, %rd104, 1;
	add.s64 	%rd106, %rd105, %rd4;
	add.s64 	%rd148, %rd106, -8388604;
	bra.uni 	$L__BB1_27;
$L__BB1_21:
	and.b32  	%r30, %r4, 1536;
	shl.b32 	%r31, %r2, 11;
	cvt.u64.u32 	%rd107, %r3;
	or.b32  	%r32, %r31, %r30;
	cvt.u64.u32 	%rd108, %r32;
	add.s64 	%rd109, %rd108, %rd107;
	shl.b64 	%rd110, %rd109, 1;
	add.s64 	%rd111, %rd110, %rd5;
	add.s64 	%rd148, %rd111, -4194300;
	bra.uni 	$L__BB1_27;
$L__BB1_24:
	setp.gt.u32 	%p11, %r1, 16383;
	and.b32  	%r10, %r4, 1536;
	shl.b32 	%r11, %r2, 11;
	@%p11 bra 	$L__BB1_26;
	cvt.u64.u32 	%rd95, %r3;
	cvt.u64.u32 	%rd96, %r10;
	cvt.u64.u32 	%rd97, %r11;
	add.s64 	%rd98, %rd97, %rd96;
	add.s64 	%rd99, %rd98, %rd95;
	shl.b64 	%rd100, %rd99, 1;
	add.s64 	%rd101, %rd100, %rd3;
	add.s64 	%rd148, %rd101, -12582908;
	bra.uni 	$L__BB1_27;
$L__BB1_26:
	cvt.u64.u32 	%rd88, %r3;
	cvt.u64.u32 	%rd89, %r10;
	cvt.u64.u32 	%rd90, %r11;
	add.s64 	%rd91, %rd90, %rd89;
	add.s64 	%rd92, %rd91, %rd88;
	shl.b64 	%rd93, %rd92, 1;
	add.s64 	%rd94, %rd93, %rd2;
	add.s64 	%rd148, %rd94, -16777212;
$L__BB1_27:
	@%p1 bra 	$L__BB1_31;
	@%p20 bra 	$L__BB1_30;
	add.s64 	%rd139, %rd6, %rd145;
	add.s64 	%rd149, %rd139, 6;
	bra.uni 	$L__BB1_36;
$L__BB1_31:
	@%p17 bra 	$L__BB1_33;
	and.b32  	%r33, %r4, 1536;
	shl.b32 	%r34, %r2, 11;
	cvt.u64.u32 	%rd128, %r3;
	or.b32  	%r35, %r34, %r33;
	cvt.u64.u32 	%rd129, %r35;
	add.s64 	%rd130, %rd129, %rd128;
	shl.b64 	%rd131, %rd130, 1;
	add.s64 	%rd132, %rd131, %rd4;
	add.s64 	%rd149, %rd132, -8388602;
	bra.uni 	$L__BB1_36;
$L__BB1_30:
	and.b32  	%r36, %r4, 1536;
	shl.b32 	%r37, %r2, 11;
	cvt.u64.u32 	%rd133, %r3;
	or.b32  	%r38, %r37, %r36;
	cvt.u64.u32 	%rd134, %r38;
	add.s64 	%rd135, %rd134, %rd133;
	shl.b64 	%rd136, %rd135, 1;
	add.s64 	%rd137, %rd136, %rd5;
	add.s64 	%rd149, %rd137, -4194298;
	bra.uni 	$L__BB1_36;
$L__BB1_33:
	setp.gt.u32 	%p15, %r1, 16383;
	and.b32  	%r12, %r4, 1536;
	shl.b32 	%r13, %r2, 11;
	@%p15 bra 	$L__BB1_35;
	cvt.u64.u32 	%rd121, %r3;
	cvt.u64.u32 	%rd122, %r12;
	cvt.u64.u32 	%rd123, %r13;
	add.s64 	%rd124, %rd123, %rd122;
	add.s64 	%rd125, %rd124, %rd121;
	shl.b64 	%rd126, %rd125, 1;
	add.s64 	%rd127, %rd126, %rd3;
	add.s64 	%rd149, %rd127, -12582906;
	bra.uni 	$L__BB1_36;
$L__BB1_35:
	cvt.u64.u32 	%rd114, %r3;
	cvt.u64.u32 	%rd115, %r12;
	cvt.u64.u32 	%rd116, %r13;
	add.s64 	%rd117, %rd116, %rd115;
	add.s64 	%rd118, %rd117, %rd114;
	shl.b64 	%rd119, %rd118, 1;
	add.s64 	%rd120, %rd119, %rd2;
	add.s64 	%rd149, %rd120, -16777210;
$L__BB1_36:
	ld.global.nc.u16 	%rs1, [%rd149];
	ld.global.nc.u16 	%rs2, [%rd146];
	ld.global.nc.u16 	%rs3, [%rd147];
	ld.global.nc.u16 	%rs4, [%rd148];
	add.s64 	%rd141, %rd1, %rd145;
	st.global.v4.b16 	[%rd141], {%rs2, %rs3, %rs4, %rs1};
	ret;

}
	// .globl	gemm_fusion_dot_19_0
.visible .entry gemm_fusion_dot_19_0(
	.param .u64 .ptr .align 128 gemm_fusion_dot_19_0_param_0,
	.param .u64 .ptr .align 128 gemm_fusion_dot_19_0_param_1
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<399>;
	.reg .f32 	%f<149>;
	.reg .b64 	%rd<106>;

	ld.param.u64 	%rd19, [gemm_fusion_dot_19_0_param_0];
	ld.param.u64 	%rd20, [gemm_fusion_dot_19_0_param_1];
	cvta.to.global.u64 	%rd1, %rd20;
	cvta.to.global.u64 	%rd21, %rd19;
	// begin inline asm
	mov.u32 %r26, %ctaid.x;
	// end inline asm
	shr.s32 	%r28, %r26, 31;
	shr.u32 	%r29, %r28, 29;
	add.s32 	%r30, %r26, %r29;
	shr.s32 	%r2, %r30, 3;
	and.b32  	%r31, %r30, -8;
	sub.s32 	%r32, 320, %r31;
	min.s32 	%r3, %r32, 8;
	rem.s32 	%r33, %r26, %r3;
	add.s32 	%r34, %r31, %r33;
	shl.b32 	%r35, %r34, 4;
	cvt.s64.s32 	%rd2, %r35;
	mov.u32 	%r4, %tid.x;
	and.b32  	%r5, %r4, 32;
	bfe.s32 	%r36, %r4, 5, 1;
	bfe.u32 	%r37, %r4, 5, 1;
	setp.lt.u32 	%p1, %r4, 64;
	selp.b32 	%r38, 0, 2, %p1;
	and.b32  	%r39, %r4, 1;
	neg.s32 	%r40, %r39;
	bfe.s32 	%r41, %r4, 1, 1;
	shl.b32 	%r42, %r4, 3;
	and.b32  	%r43, %r42, 24;
	bfe.s32 	%r44, %r4, 2, 1;
	and.b32  	%r6, %r4, 4;
	shl.b32 	%r45, %r6, 3;
	or.b32  	%r46, %r43, %r45;
	and.b32  	%r47, %r4, 8;
	shl.b32 	%r48, %r47, 3;
	or.b32  	%r49, %r46, %r48;
	and.b32  	%r7, %r4, 16;
	shl.b32 	%r50, %r7, 3;
	or.b32  	%r51, %r49, %r50;
	and.b32  	%r52, %r36, 264;
	selp.b32 	%r53, 0, 528, %p1;
	or.b32  	%r54, %r52, %r53;
	xor.b32  	%r55, %r54, %r51;
	mul.wide.u32 	%rd22, %r55, 2;
	mov.u64 	%rd23, global_smem;
	add.s64 	%rd3, %rd23, %rd22;
	or.b32  	%r56, %r43, 1056;
	xor.b32  	%r57, %r56, %r45;
	or.b32  	%r58, %r48, %r57;
	or.b32  	%r59, %r58, %r50;
	xor.b32  	%r60, %r54, %r59;
	mul.wide.u32 	%rd24, %r60, 2;
	add.s64 	%rd4, %rd23, %rd24;
	or.b32  	%r61, %r51, 2048;
	xor.b32  	%r62, %r54, %r61;
	mul.wide.u32 	%rd25, %r62, 2;
	add.s64 	%rd5, %rd23, %rd25;
	or.b32  	%r63, %r43, 3104;
	xor.b32  	%r64, %r63, %r45;
	or.b32  	%r65, %r48, %r64;
	or.b32  	%r66, %r65, %r50;
	xor.b32  	%r67, %r54, %r66;
	mul.wide.u32 	%rd26, %r67, 2;
	add.s64 	%rd6, %rd23, %rd26;
	and.b32  	%r68, %r40, 264;
	and.b32  	%r69, %r41, 528;
	or.b32  	%r70, %r68, %r69;
	and.b32  	%r71, %r44, 1056;
	shl.b32 	%r72, %r47, 8;
	or.b32  	%r73, %r71, %r72;
	or.b32  	%r74, %r73, %r70;
	shr.u32 	%r75, %r7, 1;
	xor.b32  	%r76, %r74, %r75;
	shl.b32 	%r77, %r76, 1;
	cvt.u64.u32 	%rd27, %r77;
	add.s64 	%rd28, %rd23, %rd27;
	cvt.u32.u64 	%r179, %rd28;
	or.b32  	%r78, %r68, 16;
	xor.b32  	%r79, %r78, %r69;
	or.b32  	%r80, %r72, %r79;
	or.b32  	%r81, %r80, %r71;
	xor.b32  	%r82, %r81, %r75;
	shl.b32 	%r83, %r82, 1;
	cvt.u64.u32 	%rd29, %r83;
	add.s64 	%rd30, %rd23, %rd29;
	cvt.u32.u64 	%r184, %rd30;
	or.b32  	%r84, %r70, 32;
	xor.b32  	%r85, %r84, %r71;
	or.b32  	%r86, %r85, %r72;
	xor.b32  	%r87, %r86, %r75;
	shl.b32 	%r88, %r87, 1;
	cvt.u64.u32 	%rd31, %r88;
	add.s64 	%rd32, %rd23, %rd31;
	cvt.u32.u64 	%r189, %rd32;
	or.b32  	%r89, %r68, 48;
	or.b32  	%r90, %r71, %r69;
	xor.b32  	%r91, %r90, %r89;
	or.b32  	%r92, %r91, %r72;
	xor.b32  	%r93, %r92, %r75;
	shl.b32 	%r94, %r93, 1;
	cvt.u64.u32 	%rd33, %r94;
	add.s64 	%rd34, %rd23, %rd33;
	cvt.u32.u64 	%r194, %rd34;
	or.b32  	%r95, %r74, 64;
	xor.b32  	%r96, %r95, %r75;
	shl.b32 	%r97, %r96, 1;
	cvt.u64.u32 	%rd35, %r97;
	add.s64 	%rd36, %rd23, %rd35;
	cvt.u32.u64 	%r199, %rd36;
	or.b32  	%r98, %r68, 80;
	xor.b32  	%r99, %r98, %r69;
	or.b32  	%r100, %r72, %r99;
	or.b32  	%r101, %r100, %r71;
	xor.b32  	%r102, %r101, %r75;
	shl.b32 	%r103, %r102, 1;
	cvt.u64.u32 	%rd37, %r103;
	add.s64 	%rd38, %rd23, %rd37;
	cvt.u32.u64 	%r204, %rd38;
	or.b32  	%r104, %r70, 96;
	xor.b32  	%r105, %r104, %r71;
	or.b32  	%r106, %r105, %r72;
	xor.b32  	%r107, %r106, %r75;
	shl.b32 	%r108, %r107, 1;
	cvt.u64.u32 	%rd39, %r108;
	add.s64 	%rd40, %rd23, %rd39;
	cvt.u32.u64 	%r209, %rd40;
	or.b32  	%r109, %r68, 112;
	xor.b32  	%r110, %r90, %r109;
	or.b32  	%r111, %r110, %r72;
	xor.b32  	%r112, %r111, %r75;
	shl.b32 	%r113, %r112, 1;
	cvt.u64.u32 	%rd41, %r113;
	add.s64 	%rd42, %rd23, %rd41;
	cvt.u32.u64 	%r214, %rd42;
	or.b32  	%r114, %r74, 128;
	xor.b32  	%r115, %r114, %r75;
	shl.b32 	%r116, %r115, 1;
	cvt.u64.u32 	%rd43, %r116;
	add.s64 	%rd44, %rd23, %rd43;
	cvt.u32.u64 	%r219, %rd44;
	or.b32  	%r117, %r68, 144;
	xor.b32  	%r118, %r117, %r69;
	or.b32  	%r119, %r72, %r118;
	or.b32  	%r120, %r119, %r71;
	xor.b32  	%r121, %r120, %r75;
	shl.b32 	%r122, %r121, 1;
	cvt.u64.u32 	%rd45, %r122;
	add.s64 	%rd46, %rd23, %rd45;
	cvt.u32.u64 	%r224, %rd46;
	or.b32  	%r123, %r70, 160;
	xor.b32  	%r124, %r123, %r71;
	or.b32  	%r125, %r124, %r72;
	xor.b32  	%r126, %r125, %r75;
	shl.b32 	%r127, %r126, 1;
	cvt.u64.u32 	%rd47, %r127;
	add.s64 	%rd48, %rd23, %rd47;
	cvt.u32.u64 	%r229, %rd48;
	or.b32  	%r128, %r68, 176;
	xor.b32  	%r129, %r90, %r128;
	or.b32  	%r130, %r129, %r72;
	xor.b32  	%r131, %r130, %r75;
	shl.b32 	%r132, %r131, 1;
	cvt.u64.u32 	%rd49, %r132;
	add.s64 	%rd50, %rd23, %rd49;
	cvt.u32.u64 	%r234, %rd50;
	or.b32  	%r133, %r74, 192;
	xor.b32  	%r134, %r133, %r75;
	shl.b32 	%r135, %r134, 1;
	cvt.u64.u32 	%rd51, %r135;
	add.s64 	%rd52, %rd23, %rd51;
	cvt.u32.u64 	%r239, %rd52;
	or.b32  	%r136, %r68, 208;
	xor.b32  	%r137, %r136, %r69;
	or.b32  	%r138, %r72, %r137;
	or.b32  	%r139, %r138, %r71;
	xor.b32  	%r140, %r139, %r75;
	shl.b32 	%r141, %r140, 1;
	cvt.u64.u32 	%rd53, %r141;
	add.s64 	%rd54, %rd23, %rd53;
	cvt.u32.u64 	%r244, %rd54;
	or.b32  	%r142, %r70, 224;
	xor.b32  	%r143, %r142, %r71;
	or.b32  	%r144, %r143, %r72;
	xor.b32  	%r145, %r144, %r75;
	shl.b32 	%r146, %r145, 1;
	cvt.u64.u32 	%rd55, %r146;
	add.s64 	%rd56, %rd23, %rd55;
	cvt.u32.u64 	%r249, %rd56;
	or.b32  	%r147, %r68, 240;
	xor.b32  	%r148, %r90, %r147;
	or.b32  	%r149, %r148, %r72;
	xor.b32  	%r150, %r149, %r75;
	shl.b32 	%r151, %r150, 1;
	cvt.u64.u32 	%rd57, %r151;
	add.s64 	%rd58, %rd23, %rd57;
	cvt.u32.u64 	%r254, %rd58;
	or.b32  	%r152, %r38, %r37;
	cvt.u64.u32 	%rd59, %r152;
	or.b64  	%rd60, %rd2, %rd59;
	shl.b64 	%rd61, %rd60, 12;
	or.b32  	%r153, %r50, %r48;
	or.b32  	%r154, %r153, %r45;
	or.b32  	%r155, %r154, %r43;
	mul.wide.u32 	%rd62, %r155, 2;
	add.s64 	%rd63, %rd61, %rd62;
	add.s64 	%rd105, %rd21, %rd63;
	or.b32  	%r156, %r152, 4;
	cvt.u64.u32 	%rd64, %r156;
	or.b64  	%rd65, %rd2, %rd64;
	shl.b64 	%rd66, %rd65, 12;
	add.s64 	%rd67, %rd66, %rd62;
	add.s64 	%rd104, %rd21, %rd67;
	or.b32  	%r157, %r152, 8;
	cvt.u64.u32 	%rd68, %r157;
	or.b64  	%rd69, %rd2, %rd68;
	shl.b64 	%rd70, %rd69, 12;
	add.s64 	%rd71, %rd70, %rd62;
	add.s64 	%rd103, %rd21, %rd71;
	or.b32  	%r158, %r152, 12;
	cvt.u64.u32 	%rd72, %r158;
	or.b64  	%rd73, %rd2, %rd72;
	shl.b64 	%rd74, %rd73, 12;
	add.s64 	%rd75, %rd74, %rd62;
	add.s64 	%rd102, %rd21, %rd75;
	mov.f32 	%f145, 0f00000000;
	mov.b32 	%r398, -256;
	mov.f32 	%f146, %f145;
	mov.f32 	%f147, %f145;
	mov.f32 	%f148, %f145;
$L__BB2_1:
	// begin inline asm
	mov.u32 %r159, 0x0;
	mov.u32 %r160, 0x0;
	mov.u32 %r161, 0x0;
	mov.u32 %r162, 0x0;
	ld.global.v4.b32 { %r159, %r160, %r161, %r162 }, [ %rd105 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r163, 0x0;
	mov.u32 %r164, 0x0;
	mov.u32 %r165, 0x0;
	mov.u32 %r166, 0x0;
	ld.global.v4.b32 { %r163, %r164, %r165, %r166 }, [ %rd104 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r167, 0x0;
	mov.u32 %r168, 0x0;
	mov.u32 %r169, 0x0;
	mov.u32 %r170, 0x0;
	ld.global.v4.b32 { %r167, %r168, %r169, %r170 }, [ %rd103 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r171, 0x0;
	mov.u32 %r172, 0x0;
	mov.u32 %r173, 0x0;
	mov.u32 %r174, 0x0;
	ld.global.v4.b32 { %r171, %r172, %r173, %r174 }, [ %rd102 + 0 ];
	// end inline asm
	bar.sync 	0;
	st.shared.v4.b32 	[%rd3], {%r159, %r160, %r161, %r162};
	st.shared.v4.b32 	[%rd4], {%r163, %r164, %r165, %r166};
	st.shared.v4.b32 	[%rd5], {%r167, %r168, %r169, %r170};
	st.shared.v4.b32 	[%rd6], {%r171, %r172, %r173, %r174};
	bar.sync 	0;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r175, %r176, %r177, %r178}, [%r179];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r180, %r181, %r182, %r183}, [%r184];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r185, %r186, %r187, %r188}, [%r189];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r190, %r191, %r192, %r193}, [%r194];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r195, %r196, %r197, %r198}, [%r199];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r200, %r201, %r202, %r203}, [%r204];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r205, %r206, %r207, %r208}, [%r209];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r210, %r211, %r212, %r213}, [%r214];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r215, %r216, %r217, %r218}, [%r219];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r220, %r221, %r222, %r223}, [%r224];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r225, %r226, %r227, %r228}, [%r229];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r230, %r231, %r232, %r233}, [%r234];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r235, %r236, %r237, %r238}, [%r239];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r240, %r241, %r242, %r243}, [%r244];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r245, %r246, %r247, %r248}, [%r249];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r250, %r251, %r252, %r253}, [%r254];
	// end inline asm
	mov.b32 	%r259, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r175, %r176, %r177, %r178 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r180, %r181, %r182, %r183 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r185, %r186, %r187, %r188 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r190, %r191, %r192, %r193 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r195, %r196, %r197, %r198 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r200, %r201, %r202, %r203 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r205, %r206, %r207, %r208 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r210, %r211, %r212, %r213 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r215, %r216, %r217, %r218 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r220, %r221, %r222, %r223 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r225, %r226, %r227, %r228 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r230, %r231, %r232, %r233 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r235, %r236, %r237, %r238 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r240, %r241, %r242, %r243 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r245, %r246, %r247, %r248 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r250, %r251, %r252, %r253 }, { %r259, %r259 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	add.s32 	%r398, %r398, 256;
	add.s64 	%rd105, %rd105, 512;
	add.s64 	%rd104, %rd104, 512;
	add.s64 	%rd103, %rd103, 512;
	add.s64 	%rd102, %rd102, 512;
	setp.lt.u32 	%p2, %r398, 1792;
	@%p2 bra 	$L__BB2_1;
	shl.b32 	%r361, %r2, 3;
	sub.s32 	%r362, %r26, %r361;
	div.s32 	%r363, %r362, %r3;
	mov.b32 	%r351, %f145;
	// begin inline asm
	cvt.rn.bf16.f32 %rs5, %r351;
	// end inline asm
	mov.b32 	%r352, %f146;
	// begin inline asm
	cvt.rn.bf16.f32 %rs6, %r352;
	// end inline asm
	mov.b32 	%r353, %f147;
	// begin inline asm
	cvt.rn.bf16.f32 %rs7, %r353;
	// end inline asm
	mov.b32 	%r354, %f148;
	// begin inline asm
	cvt.rn.bf16.f32 %rs8, %r354;
	// end inline asm
	shl.b32 	%r364, %r363, 5;
	cvt.s64.s32 	%rd81, %r364;
	shl.b32 	%r365, %r4, 2;
	and.b32  	%r366, %r365, 12;
	cvt.u64.u32 	%rd82, %r366;
	or.b64  	%rd83, %rd2, %rd82;
	shr.u32 	%r367, %r6, 2;
	shr.u32 	%r368, %r7, 2;
	shr.u32 	%r369, %r4, 2;
	and.b32  	%r370, %r369, 10;
	selp.b32 	%r371, 0, 16, %p1;
	or.b32  	%r372, %r371, %r370;
	or.b32  	%r373, %r372, %r367;
	or.b32  	%r374, %r373, %r368;
	cvt.u64.u32 	%rd84, %r374;
	or.b64  	%rd85, %rd81, %rd84;
	shl.b64 	%rd86, %rd83, 1;
	add.s64 	%rd87, %rd1, %rd86;
	mad.lo.s64 	%rd80, %rd85, 10240, %rd87;
	bar.sync 	0;
	shl.b32 	%r375, %r4, 5;
	shl.b32 	%r376, %r5, 2;
	or.b32  	%r377, %r369, %r375;
	and.b32  	%r378, %r377, 99;
	or.b32  	%r379, %r378, %r368;
	or.b32  	%r380, %r379, %r376;
	selp.b32 	%r381, 0, 256, %p1;
	or.b32  	%r382, %r380, %r381;
	and.b32  	%r383, %r365, 124;
	or.b32  	%r384, %r383, %r376;
	or.b32  	%r385, %r384, %r381;
	shr.u32 	%r386, %r382, 2;
	and.b32  	%r387, %r386, 124;
	add.s32 	%r388, %r387, %r382;
	shl.b32 	%r389, %r388, 1;
	cvt.u64.u32 	%rd88, %r389;
	add.s64 	%rd90, %rd23, %rd88;
	cvt.u32.u64 	%r355, %rd90;
	mov.pred 	%p3, -1;
	// begin inline asm
	@%p3 st.shared.b16 [ %r355 + 0 ], %rs5;
	// end inline asm
	or.b32  	%r390, %r382, 16;
	shr.u32 	%r391, %r390, 2;
	and.b32  	%r392, %r391, 268435452;
	cvt.u64.u32 	%rd91, %r382;
	cvt.u64.u32 	%rd92, %r392;
	add.s64 	%rd93, %rd92, %rd91;
	shl.b64 	%rd94, %rd93, 1;
	add.s64 	%rd95, %rd23, %rd94;
	cvt.u32.u64 	%r393, %rd95;
	add.s32 	%r356, %r393, 32;
	// begin inline asm
	@%p3 st.shared.b16 [ %r356 + 0 ], %rs6;
	// end inline asm
	cvt.u64.u32 	%rd96, %r387;
	add.s64 	%rd97, %rd96, %rd91;
	shl.b64 	%rd98, %rd97, 1;
	add.s64 	%rd99, %rd23, %rd98;
	cvt.u32.u64 	%r394, %rd99;
	add.s32 	%r357, %r394, 16;
	// begin inline asm
	@%p3 st.shared.b16 [ %r357 + 0 ], %rs7;
	// end inline asm
	add.s32 	%r358, %r393, 48;
	// begin inline asm
	@%p3 st.shared.b16 [ %r358 + 0 ], %rs8;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r395, %r385, 2;
	and.b32  	%r396, %r395, 124;
	add.s32 	%r397, %r396, %r385;
	mul.wide.u32 	%rd100, %r397, 2;
	add.s64 	%rd101, %rd23, %rd100;
	ld.shared.v2.u32 	{%r359, %r360}, [%rd101];
	// begin inline asm
	st.global.v2.b32 [ %rd80 + 0 ], { %r359, %r360 };
	// end inline asm
	ret;

}
	// .globl	fusion_74
.visible .entry fusion_74(
	.param .u64 .ptr .align 16 fusion_74_param_0,
	.param .u64 .ptr .align 128 fusion_74_param_1,
	.param .u64 .ptr .align 128 fusion_74_param_2,
	.param .u64 .ptr .align 16 fusion_74_param_3,
	.param .u64 .ptr .align 128 fusion_74_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<125>;
	.reg .f32 	%f<146>;
	.reg .b64 	%rd<32>;

	ld.param.u64 	%rd10, [fusion_74_param_0];
	ld.param.u64 	%rd11, [fusion_74_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_74_param_1];
	ld.param.u64 	%rd14, [fusion_74_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_74_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd5, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd19, %r1, 10240;
	add.s64 	%rd20, %rd17, %rd19;
	mov.u32 	%r105, %tid.x;
	and.b32  	%r106, %r105, 31;
	shl.b32 	%r107, %r105, 3;
	and.b32  	%r108, %r107, 248;
	setp.lt.u32 	%p4, %r105, 32;
	selp.b32 	%r109, 0, 256, %p4;
	or.b32  	%r110, %r108, %r109;
	mul.wide.u32 	%rd21, %r110, 2;
	add.s64 	%rd22, %rd20, %rd21;
	add.s64 	%rd1, %rd22, 8192;
	add.s64 	%rd2, %rd22, 9216;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd23, %r1, 1024;
	shl.b64 	%rd24, %rd23, 1;
	add.s64 	%rd25, %rd18, %rd24;
	add.s64 	%rd3, %rd25, %rd21;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.rn.f32 	%f33, %f1, %f17;
	add.rn.f32 	%f34, %f2, %f18;
	add.rn.f32 	%f35, %f3, %f19;
	add.rn.f32 	%f36, %f4, %f20;
	add.rn.f32 	%f37, %f5, %f21;
	add.rn.f32 	%f38, %f6, %f22;
	add.rn.f32 	%f39, %f7, %f23;
	add.rn.f32 	%f40, %f8, %f24;
	add.rn.f32 	%f41, %f9, %f25;
	add.rn.f32 	%f42, %f10, %f26;
	add.rn.f32 	%f43, %f11, %f27;
	add.rn.f32 	%f44, %f12, %f28;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	mul.rn.f32 	%f49, %f33, %f33;
	mul.rn.f32 	%f50, %f34, %f34;
	mul.rn.f32 	%f51, %f35, %f35;
	mul.rn.f32 	%f52, %f36, %f36;
	mul.rn.f32 	%f53, %f37, %f37;
	mul.rn.f32 	%f54, %f38, %f38;
	mul.rn.f32 	%f55, %f39, %f39;
	mul.rn.f32 	%f56, %f40, %f40;
	mul.rn.f32 	%f57, %f41, %f41;
	mul.rn.f32 	%f58, %f42, %f42;
	mul.rn.f32 	%f59, %f43, %f43;
	mul.rn.f32 	%f60, %f44, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	add.rn.f32 	%f65, %f49, %f50;
	add.rn.f32 	%f66, %f65, %f51;
	add.rn.f32 	%f67, %f66, %f52;
	add.rn.f32 	%f68, %f67, %f53;
	add.rn.f32 	%f69, %f68, %f54;
	add.rn.f32 	%f70, %f69, %f55;
	add.rn.f32 	%f71, %f70, %f56;
	add.rn.f32 	%f72, %f71, %f57;
	add.rn.f32 	%f73, %f72, %f58;
	add.rn.f32 	%f74, %f73, %f59;
	add.rn.f32 	%f75, %f74, %f60;
	add.rn.f32 	%f76, %f75, %f61;
	add.rn.f32 	%f77, %f76, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	mov.b32 	%r111, %f79;
	shfl.sync.bfly.b32	%r112, %r111, 16, 31, -1;
	mov.b32 	%f80, %r112;
	add.rn.f32 	%f81, %f79, %f80;
	mov.b32 	%r113, %f81;
	shfl.sync.bfly.b32	%r114, %r113, 8, 31, -1;
	mov.b32 	%f82, %r114;
	add.rn.f32 	%f83, %f81, %f82;
	mov.b32 	%r115, %f83;
	shfl.sync.bfly.b32	%r116, %r115, 4, 31, -1;
	mov.b32 	%f84, %r116;
	add.rn.f32 	%f85, %f83, %f84;
	mov.b32 	%r117, %f85;
	shfl.sync.bfly.b32	%r118, %r117, 2, 31, -1;
	mov.b32 	%f86, %r118;
	add.rn.f32 	%f87, %f85, %f86;
	mov.b32 	%r119, %f87;
	shfl.sync.bfly.b32	%r120, %r119, 1, 31, -1;
	mov.b32 	%f88, %r120;
	add.rn.f32 	%f89, %f87, %f88;
	setp.eq.s32 	%p1, %r106, 0;
	shr.u32 	%r121, %r105, 3;
	and.b32  	%r122, %r121, 4;
	cvt.u64.u32 	%rd26, %r122;
	mov.u64 	%rd27, global_smem;
	add.s64 	%rd28, %rd27, %rd26;
	mov.b32 	%r51, %f89;
	cvt.u32.u64 	%r50, %rd28;
	// begin inline asm
	@%p1 st.shared.b32 [ %r50 + 0 ], %r51;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r105, 2;
	shl.b32 	%r123, %r105, 2;
	cvt.u64.u32 	%rd29, %r123;
	add.s64 	%rd30, %rd27, %rd29;
	cvt.u32.u64 	%r53, %rd30;
	// begin inline asm
	@%p2 ld.shared.b32 %r52, [ %r53 + 0 ];
	// end inline asm
	mov.b32 	%f90, %r52;
	shfl.sync.bfly.b32	%r124, %r52, 1, 31, -1;
	mov.b32 	%f91, %r124;
	add.rn.f32 	%f92, %f90, %f91;
	setp.eq.s32 	%p3, %r105, 0;
	mov.b32 	%r55, %f92;
	// begin inline asm
	@%p3 st.shared.b32 [ %r53 + 0 ], %r55;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f93, [global_smem];
	mul.rn.f32 	%f94, %f93, 0f3A800000;
	// begin inline asm
	mov.u32 %r56, 0x0;
	ld.global.b32 { %r56 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f95, %r56;
	add.rn.f32 	%f96, %f94, %f95;
	rsqrt.approx.f32 	%f97, %f96;
	mul.rn.f32 	%f98, %f33, %f97;
	mul.rn.f32 	%f99, %f34, %f97;
	mul.rn.f32 	%f100, %f35, %f97;
	mul.rn.f32 	%f101, %f36, %f97;
	mul.rn.f32 	%f102, %f37, %f97;
	mul.rn.f32 	%f103, %f38, %f97;
	mul.rn.f32 	%f104, %f39, %f97;
	mul.rn.f32 	%f105, %f40, %f97;
	mul.rn.f32 	%f106, %f41, %f97;
	mul.rn.f32 	%f107, %f42, %f97;
	mul.rn.f32 	%f108, %f43, %f97;
	mul.rn.f32 	%f109, %f44, %f97;
	mul.rn.f32 	%f110, %f45, %f97;
	mul.rn.f32 	%f111, %f46, %f97;
	mul.rn.f32 	%f112, %f47, %f97;
	mul.rn.f32 	%f113, %f48, %f97;
	add.s64 	%rd6, %rd15, %rd21;
	add.s64 	%rd7, %rd6, 1024;
	// begin inline asm
	mov.u32 %r57, 0x0;
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	mov.u32 %r60, 0x0;
	ld.global.v4.b32 { %r57, %r58, %r59, %r60 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r57;
	mov.b32 	{%rs35, %rs36}, %r58;
	mov.b32 	{%rs37, %rs38}, %r59;
	mov.b32 	{%rs39, %rs40}, %r60;
	// begin inline asm
	mov.u32 %r61, 0x0;
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	ld.global.v4.b32 { %r61, %r62, %r63, %r64 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r61;
	mov.b32 	{%rs43, %rs44}, %r62;
	mov.b32 	{%rs45, %rs46}, %r63;
	mov.b32 	{%rs47, %rs48}, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs33;
	// end inline asm
	mov.b32 	%f114, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs34;
	// end inline asm
	mov.b32 	%f115, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs35;
	// end inline asm
	mov.b32 	%f116, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs36;
	// end inline asm
	mov.b32 	%f117, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs37;
	// end inline asm
	mov.b32 	%f118, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs38;
	// end inline asm
	mov.b32 	%f119, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs39;
	// end inline asm
	mov.b32 	%f120, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs40;
	// end inline asm
	mov.b32 	%f121, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs41;
	// end inline asm
	mov.b32 	%f122, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs42;
	// end inline asm
	mov.b32 	%f123, %r74;
	// begin inline asm
	cvt.f32.bf16 %r75, %rs43;
	// end inline asm
	mov.b32 	%f124, %r75;
	// begin inline asm
	cvt.f32.bf16 %r76, %rs44;
	// end inline asm
	mov.b32 	%f125, %r76;
	// begin inline asm
	cvt.f32.bf16 %r77, %rs45;
	// end inline asm
	mov.b32 	%f126, %r77;
	// begin inline asm
	cvt.f32.bf16 %r78, %rs46;
	// end inline asm
	mov.b32 	%f127, %r78;
	// begin inline asm
	cvt.f32.bf16 %r79, %rs47;
	// end inline asm
	mov.b32 	%f128, %r79;
	// begin inline asm
	cvt.f32.bf16 %r80, %rs48;
	// end inline asm
	mov.b32 	%f129, %r80;
	mul.rn.f32 	%f130, %f98, %f114;
	mul.rn.f32 	%f131, %f99, %f115;
	mul.rn.f32 	%f132, %f100, %f116;
	mul.rn.f32 	%f133, %f101, %f117;
	mul.rn.f32 	%f134, %f102, %f118;
	mul.rn.f32 	%f135, %f103, %f119;
	mul.rn.f32 	%f136, %f104, %f120;
	mul.rn.f32 	%f137, %f105, %f121;
	mul.rn.f32 	%f138, %f106, %f122;
	mul.rn.f32 	%f139, %f107, %f123;
	mul.rn.f32 	%f140, %f108, %f124;
	mul.rn.f32 	%f141, %f109, %f125;
	mul.rn.f32 	%f142, %f110, %f126;
	mul.rn.f32 	%f143, %f111, %f127;
	mul.rn.f32 	%f144, %f112, %f128;
	mul.rn.f32 	%f145, %f113, %f129;
	mov.b32 	%r81, %f130;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r81;
	// end inline asm
	mov.b32 	%r82, %f131;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r82;
	// end inline asm
	mov.b32 	%r83, %f132;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r83;
	// end inline asm
	mov.b32 	%r84, %f133;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r84;
	// end inline asm
	mov.b32 	%r85, %f134;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r85;
	// end inline asm
	mov.b32 	%r86, %f135;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r86;
	// end inline asm
	mov.b32 	%r87, %f136;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r87;
	// end inline asm
	mov.b32 	%r88, %f137;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r88;
	// end inline asm
	mov.b32 	%r89, %f138;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r89;
	// end inline asm
	mov.b32 	%r90, %f139;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r90;
	// end inline asm
	mov.b32 	%r91, %f140;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r91;
	// end inline asm
	mov.b32 	%r92, %f141;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r92;
	// end inline asm
	mov.b32 	%r93, %f142;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r93;
	// end inline asm
	mov.b32 	%r94, %f143;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r94;
	// end inline asm
	mov.b32 	%r95, %f144;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r95;
	// end inline asm
	mov.b32 	%r96, %f145;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r96;
	// end inline asm
	add.s64 	%rd31, %rd12, %rd24;
	add.s64 	%rd8, %rd31, %rd21;
	add.s64 	%rd9, %rd8, 1024;
	mov.b32 	%r97, {%rs49, %rs50};
	mov.b32 	%r98, {%rs51, %rs52};
	mov.b32 	%r99, {%rs53, %rs54};
	mov.b32 	%r100, {%rs55, %rs56};
	// begin inline asm
	st.global.v4.b32 [ %rd8 + 0 ], { %r97, %r98, %r99, %r100 };
	// end inline asm
	mov.b32 	%r101, {%rs57, %rs58};
	mov.b32 	%r102, {%rs59, %rs60};
	mov.b32 	%r103, {%rs61, %rs62};
	mov.b32 	%r104, {%rs63, %rs64};
	// begin inline asm
	st.global.v4.b32 [ %rd9 + 0 ], { %r101, %r102, %r103, %r104 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion
.visible .entry loop_convert_fusion(
	.param .u64 .ptr .align 128 loop_convert_fusion_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 4;
	mul.lo.s16 	%rs4, %rs3, 24;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 7;
	cvt.u32.u16 	%r3, %rs6;
	or.b32  	%r4, %r1, %r3;
	mul.wide.u16 	%r5, %rs3, 6144;
	add.s32 	%r6, %r4, %r5;
	mul.wide.u32 	%rd5, %r6, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs7, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	mul.rn.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.f32 	%f3, %f2;
	cvt.rn.bf16.f32 	%rs8, %f3;
	cvt.f32.bf16 	%f4, %rs8;
	add.rn.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.f32 	%f6, %f5;
	ld.global.nc.u16 	%rs9, [%rd6+6144];
	mul.rn.f32 	%f7, %f6, %f1;
	cvt.f32.bf16 	%f8, %rs9;
	mul.rn.f32 	%f9, %f7, %f8;
	cvt.rn.bf16.f32 	%rs10, %f9;
	shl.b32 	%r7, %r2, 7;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd7, %r8, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs10;
	ret;

}
	// .globl	fusion_75
.visible .entry fusion_75(
	.param .u64 .ptr .align 16 fusion_75_param_0,
	.param .u64 .ptr .align 16 fusion_75_param_1,
	.param .u64 .ptr .align 128 fusion_75_param_2,
	.param .u64 .ptr .align 128 fusion_75_param_3,
	.param .u64 .ptr .align 128 fusion_75_param_4,
	.param .u64 .ptr .align 128 fusion_75_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<173>;
	.reg .f32 	%f<210>;
	.reg .b64 	%rd<39>;

	ld.param.u64 	%rd14, [fusion_75_param_0];
	ld.param.u64 	%rd15, [fusion_75_param_5];
	cvta.to.global.u64 	%rd16, %rd15;
	ld.param.u64 	%rd17, [fusion_75_param_1];
	ld.param.u64 	%rd18, [fusion_75_param_4];
	cvta.to.global.u64 	%rd19, %rd18;
	ld.param.u64 	%rd20, [fusion_75_param_2];
	ld.param.u64 	%rd21, [fusion_75_param_3];
	cvta.to.global.u64 	%rd22, %rd21;
	cvta.to.global.u64 	%rd23, %rd20;
	cvta.to.global.u64 	%rd24, %rd17;
	cvta.to.global.u64 	%rd9, %rd14;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd25, %r1, 10240;
	add.s64 	%rd26, %rd22, %rd25;
	mov.u32 	%r153, %tid.x;
	and.b32  	%r154, %r153, 31;
	shl.b32 	%r155, %r153, 3;
	and.b32  	%r156, %r155, 248;
	setp.lt.u32 	%p4, %r153, 32;
	selp.b32 	%r157, 0, 256, %p4;
	or.b32  	%r158, %r156, %r157;
	mul.wide.u32 	%rd27, %r158, 2;
	add.s64 	%rd28, %rd26, %rd27;
	add.s64 	%rd1, %rd28, 6144;
	add.s64 	%rd2, %rd28, 7168;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd29, %r1, 1024;
	shl.b64 	%rd30, %rd29, 1;
	add.s64 	%rd31, %rd19, %rd30;
	add.s64 	%rd3, %rd31, %rd27;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd28, 8192;
	add.s64 	%rd6, %rd28, 9216;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd32, %rd23, %rd30;
	add.s64 	%rd7, %rd32, %rd27;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.rn.f32 	%f65, %f33, %f49;
	add.rn.f32 	%f66, %f34, %f50;
	add.rn.f32 	%f67, %f35, %f51;
	add.rn.f32 	%f68, %f36, %f52;
	add.rn.f32 	%f69, %f37, %f53;
	add.rn.f32 	%f70, %f38, %f54;
	add.rn.f32 	%f71, %f39, %f55;
	add.rn.f32 	%f72, %f40, %f56;
	add.rn.f32 	%f73, %f41, %f57;
	add.rn.f32 	%f74, %f42, %f58;
	add.rn.f32 	%f75, %f43, %f59;
	add.rn.f32 	%f76, %f44, %f60;
	add.rn.f32 	%f77, %f45, %f61;
	add.rn.f32 	%f78, %f46, %f62;
	add.rn.f32 	%f79, %f47, %f63;
	add.rn.f32 	%f80, %f48, %f64;
	add.rn.f32 	%f81, %f17, %f65;
	add.rn.f32 	%f82, %f18, %f66;
	add.rn.f32 	%f83, %f19, %f67;
	add.rn.f32 	%f84, %f20, %f68;
	add.rn.f32 	%f85, %f21, %f69;
	add.rn.f32 	%f86, %f22, %f70;
	add.rn.f32 	%f87, %f23, %f71;
	add.rn.f32 	%f88, %f24, %f72;
	add.rn.f32 	%f89, %f25, %f73;
	add.rn.f32 	%f90, %f26, %f74;
	add.rn.f32 	%f91, %f27, %f75;
	add.rn.f32 	%f92, %f28, %f76;
	add.rn.f32 	%f93, %f29, %f77;
	add.rn.f32 	%f94, %f30, %f78;
	add.rn.f32 	%f95, %f31, %f79;
	add.rn.f32 	%f96, %f32, %f80;
	add.rn.f32 	%f97, %f1, %f81;
	add.rn.f32 	%f98, %f2, %f82;
	add.rn.f32 	%f99, %f3, %f83;
	add.rn.f32 	%f100, %f4, %f84;
	add.rn.f32 	%f101, %f5, %f85;
	add.rn.f32 	%f102, %f6, %f86;
	add.rn.f32 	%f103, %f7, %f87;
	add.rn.f32 	%f104, %f8, %f88;
	add.rn.f32 	%f105, %f9, %f89;
	add.rn.f32 	%f106, %f10, %f90;
	add.rn.f32 	%f107, %f11, %f91;
	add.rn.f32 	%f108, %f12, %f92;
	add.rn.f32 	%f109, %f13, %f93;
	add.rn.f32 	%f110, %f14, %f94;
	add.rn.f32 	%f111, %f15, %f95;
	add.rn.f32 	%f112, %f16, %f96;
	mul.rn.f32 	%f113, %f97, %f97;
	mul.rn.f32 	%f114, %f98, %f98;
	mul.rn.f32 	%f115, %f99, %f99;
	mul.rn.f32 	%f116, %f100, %f100;
	mul.rn.f32 	%f117, %f101, %f101;
	mul.rn.f32 	%f118, %f102, %f102;
	mul.rn.f32 	%f119, %f103, %f103;
	mul.rn.f32 	%f120, %f104, %f104;
	mul.rn.f32 	%f121, %f105, %f105;
	mul.rn.f32 	%f122, %f106, %f106;
	mul.rn.f32 	%f123, %f107, %f107;
	mul.rn.f32 	%f124, %f108, %f108;
	mul.rn.f32 	%f125, %f109, %f109;
	mul.rn.f32 	%f126, %f110, %f110;
	mul.rn.f32 	%f127, %f111, %f111;
	mul.rn.f32 	%f128, %f112, %f112;
	add.rn.f32 	%f129, %f113, %f114;
	add.rn.f32 	%f130, %f129, %f115;
	add.rn.f32 	%f131, %f130, %f116;
	add.rn.f32 	%f132, %f131, %f117;
	add.rn.f32 	%f133, %f132, %f118;
	add.rn.f32 	%f134, %f133, %f119;
	add.rn.f32 	%f135, %f134, %f120;
	add.rn.f32 	%f136, %f135, %f121;
	add.rn.f32 	%f137, %f136, %f122;
	add.rn.f32 	%f138, %f137, %f123;
	add.rn.f32 	%f139, %f138, %f124;
	add.rn.f32 	%f140, %f139, %f125;
	add.rn.f32 	%f141, %f140, %f126;
	add.rn.f32 	%f142, %f141, %f127;
	add.rn.f32 	%f143, %f142, %f128;
	mov.b32 	%r159, %f143;
	shfl.sync.bfly.b32	%r160, %r159, 16, 31, -1;
	mov.b32 	%f144, %r160;
	add.rn.f32 	%f145, %f143, %f144;
	mov.b32 	%r161, %f145;
	shfl.sync.bfly.b32	%r162, %r161, 8, 31, -1;
	mov.b32 	%f146, %r162;
	add.rn.f32 	%f147, %f145, %f146;
	mov.b32 	%r163, %f147;
	shfl.sync.bfly.b32	%r164, %r163, 4, 31, -1;
	mov.b32 	%f148, %r164;
	add.rn.f32 	%f149, %f147, %f148;
	mov.b32 	%r165, %f149;
	shfl.sync.bfly.b32	%r166, %r165, 2, 31, -1;
	mov.b32 	%f150, %r166;
	add.rn.f32 	%f151, %f149, %f150;
	mov.b32 	%r167, %f151;
	shfl.sync.bfly.b32	%r168, %r167, 1, 31, -1;
	mov.b32 	%f152, %r168;
	add.rn.f32 	%f153, %f151, %f152;
	setp.eq.s32 	%p1, %r154, 0;
	shr.u32 	%r169, %r153, 3;
	and.b32  	%r170, %r169, 4;
	cvt.u64.u32 	%rd33, %r170;
	mov.u64 	%rd34, global_smem;
	add.s64 	%rd35, %rd34, %rd33;
	mov.b32 	%r99, %f153;
	cvt.u32.u64 	%r98, %rd35;
	// begin inline asm
	@%p1 st.shared.b32 [ %r98 + 0 ], %r99;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r153, 2;
	shl.b32 	%r171, %r153, 2;
	cvt.u64.u32 	%rd36, %r171;
	add.s64 	%rd37, %rd34, %rd36;
	cvt.u32.u64 	%r101, %rd37;
	// begin inline asm
	@%p2 ld.shared.b32 %r100, [ %r101 + 0 ];
	// end inline asm
	mov.b32 	%f154, %r100;
	shfl.sync.bfly.b32	%r172, %r100, 1, 31, -1;
	mov.b32 	%f155, %r172;
	add.rn.f32 	%f156, %f154, %f155;
	setp.eq.s32 	%p3, %r153, 0;
	mov.b32 	%r103, %f156;
	// begin inline asm
	@%p3 st.shared.b32 [ %r101 + 0 ], %r103;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f157, [global_smem];
	mul.rn.f32 	%f158, %f157, 0f3A800000;
	// begin inline asm
	mov.u32 %r104, 0x0;
	ld.global.b32 { %r104 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f159, %r104;
	add.rn.f32 	%f160, %f158, %f159;
	rsqrt.approx.f32 	%f161, %f160;
	mul.rn.f32 	%f162, %f97, %f161;
	mul.rn.f32 	%f163, %f98, %f161;
	mul.rn.f32 	%f164, %f99, %f161;
	mul.rn.f32 	%f165, %f100, %f161;
	mul.rn.f32 	%f166, %f101, %f161;
	mul.rn.f32 	%f167, %f102, %f161;
	mul.rn.f32 	%f168, %f103, %f161;
	mul.rn.f32 	%f169, %f104, %f161;
	mul.rn.f32 	%f170, %f105, %f161;
	mul.rn.f32 	%f171, %f106, %f161;
	mul.rn.f32 	%f172, %f107, %f161;
	mul.rn.f32 	%f173, %f108, %f161;
	mul.rn.f32 	%f174, %f109, %f161;
	mul.rn.f32 	%f175, %f110, %f161;
	mul.rn.f32 	%f176, %f111, %f161;
	mul.rn.f32 	%f177, %f112, %f161;
	add.s64 	%rd10, %rd24, %rd27;
	add.s64 	%rd11, %rd10, 1024;
	// begin inline asm
	mov.u32 %r105, 0x0;
	mov.u32 %r106, 0x0;
	mov.u32 %r107, 0x0;
	mov.u32 %r108, 0x0;
	ld.global.v4.b32 { %r105, %r106, %r107, %r108 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r105;
	mov.b32 	{%rs67, %rs68}, %r106;
	mov.b32 	{%rs69, %rs70}, %r107;
	mov.b32 	{%rs71, %rs72}, %r108;
	// begin inline asm
	mov.u32 %r109, 0x0;
	mov.u32 %r110, 0x0;
	mov.u32 %r111, 0x0;
	mov.u32 %r112, 0x0;
	ld.global.v4.b32 { %r109, %r110, %r111, %r112 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r109;
	mov.b32 	{%rs75, %rs76}, %r110;
	mov.b32 	{%rs77, %rs78}, %r111;
	mov.b32 	{%rs79, %rs80}, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs65;
	// end inline asm
	mov.b32 	%f178, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs66;
	// end inline asm
	mov.b32 	%f179, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs67;
	// end inline asm
	mov.b32 	%f180, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs68;
	// end inline asm
	mov.b32 	%f181, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs69;
	// end inline asm
	mov.b32 	%f182, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs70;
	// end inline asm
	mov.b32 	%f183, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs71;
	// end inline asm
	mov.b32 	%f184, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs72;
	// end inline asm
	mov.b32 	%f185, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs73;
	// end inline asm
	mov.b32 	%f186, %r121;
	// begin inline asm
	cvt.f32.bf16 %r122, %rs74;
	// end inline asm
	mov.b32 	%f187, %r122;
	// begin inline asm
	cvt.f32.bf16 %r123, %rs75;
	// end inline asm
	mov.b32 	%f188, %r123;
	// begin inline asm
	cvt.f32.bf16 %r124, %rs76;
	// end inline asm
	mov.b32 	%f189, %r124;
	// begin inline asm
	cvt.f32.bf16 %r125, %rs77;
	// end inline asm
	mov.b32 	%f190, %r125;
	// begin inline asm
	cvt.f32.bf16 %r126, %rs78;
	// end inline asm
	mov.b32 	%f191, %r126;
	// begin inline asm
	cvt.f32.bf16 %r127, %rs79;
	// end inline asm
	mov.b32 	%f192, %r127;
	// begin inline asm
	cvt.f32.bf16 %r128, %rs80;
	// end inline asm
	mov.b32 	%f193, %r128;
	mul.rn.f32 	%f194, %f162, %f178;
	mul.rn.f32 	%f195, %f163, %f179;
	mul.rn.f32 	%f196, %f164, %f180;
	mul.rn.f32 	%f197, %f165, %f181;
	mul.rn.f32 	%f198, %f166, %f182;
	mul.rn.f32 	%f199, %f167, %f183;
	mul.rn.f32 	%f200, %f168, %f184;
	mul.rn.f32 	%f201, %f169, %f185;
	mul.rn.f32 	%f202, %f170, %f186;
	mul.rn.f32 	%f203, %f171, %f187;
	mul.rn.f32 	%f204, %f172, %f188;
	mul.rn.f32 	%f205, %f173, %f189;
	mul.rn.f32 	%f206, %f174, %f190;
	mul.rn.f32 	%f207, %f175, %f191;
	mul.rn.f32 	%f208, %f176, %f192;
	mul.rn.f32 	%f209, %f177, %f193;
	mov.b32 	%r129, %f194;
	// begin inline asm
	cvt.rn.bf16.f32 %rs81, %r129;
	// end inline asm
	mov.b32 	%r130, %f195;
	// begin inline asm
	cvt.rn.bf16.f32 %rs82, %r130;
	// end inline asm
	mov.b32 	%r131, %f196;
	// begin inline asm
	cvt.rn.bf16.f32 %rs83, %r131;
	// end inline asm
	mov.b32 	%r132, %f197;
	// begin inline asm
	cvt.rn.bf16.f32 %rs84, %r132;
	// end inline asm
	mov.b32 	%r133, %f198;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r133;
	// end inline asm
	mov.b32 	%r134, %f199;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r134;
	// end inline asm
	mov.b32 	%r135, %f200;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r135;
	// end inline asm
	mov.b32 	%r136, %f201;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r136;
	// end inline asm
	mov.b32 	%r137, %f202;
	// begin inline asm
	cvt.rn.bf16.f32 %rs89, %r137;
	// end inline asm
	mov.b32 	%r138, %f203;
	// begin inline asm
	cvt.rn.bf16.f32 %rs90, %r138;
	// end inline asm
	mov.b32 	%r139, %f204;
	// begin inline asm
	cvt.rn.bf16.f32 %rs91, %r139;
	// end inline asm
	mov.b32 	%r140, %f205;
	// begin inline asm
	cvt.rn.bf16.f32 %rs92, %r140;
	// end inline asm
	mov.b32 	%r141, %f206;
	// begin inline asm
	cvt.rn.bf16.f32 %rs93, %r141;
	// end inline asm
	mov.b32 	%r142, %f207;
	// begin inline asm
	cvt.rn.bf16.f32 %rs94, %r142;
	// end inline asm
	mov.b32 	%r143, %f208;
	// begin inline asm
	cvt.rn.bf16.f32 %rs95, %r143;
	// end inline asm
	mov.b32 	%r144, %f209;
	// begin inline asm
	cvt.rn.bf16.f32 %rs96, %r144;
	// end inline asm
	add.s64 	%rd38, %rd16, %rd30;
	add.s64 	%rd12, %rd38, %rd27;
	add.s64 	%rd13, %rd12, 1024;
	mov.b32 	%r145, {%rs81, %rs82};
	mov.b32 	%r146, {%rs83, %rs84};
	mov.b32 	%r147, {%rs85, %rs86};
	mov.b32 	%r148, {%rs87, %rs88};
	// begin inline asm
	st.global.v4.b32 [ %rd12 + 0 ], { %r145, %r146, %r147, %r148 };
	// end inline asm
	mov.b32 	%r149, {%rs89, %rs90};
	mov.b32 	%r150, {%rs91, %rs92};
	mov.b32 	%r151, {%rs93, %rs94};
	mov.b32 	%r152, {%rs95, %rs96};
	// begin inline asm
	st.global.v4.b32 [ %rd13 + 0 ], { %r149, %r150, %r151, %r152 };
	// end inline asm
	ret;

}
	// .globl	fusion_76
.visible .entry fusion_76(
	.param .u64 .ptr .align 16 fusion_76_param_0,
	.param .u64 .ptr .align 16 fusion_76_param_1,
	.param .u64 .ptr .align 128 fusion_76_param_2,
	.param .u64 .ptr .align 128 fusion_76_param_3,
	.param .u64 .ptr .align 128 fusion_76_param_4,
	.param .u64 .ptr .align 128 fusion_76_param_5,
	.param .u64 .ptr .align 128 fusion_76_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<129>;
	.reg .b32 	%r<221>;
	.reg .f32 	%f<274>;
	.reg .b64 	%rd<46>;

	ld.param.u64 	%rd18, [fusion_76_param_0];
	ld.param.u64 	%rd19, [fusion_76_param_6];
	cvta.to.global.u64 	%rd20, %rd19;
	ld.param.u64 	%rd21, [fusion_76_param_1];
	ld.param.u64 	%rd22, [fusion_76_param_5];
	cvta.to.global.u64 	%rd23, %rd22;
	ld.param.u64 	%rd24, [fusion_76_param_2];
	ld.param.u64 	%rd25, [fusion_76_param_4];
	cvta.to.global.u64 	%rd26, %rd25;
	ld.param.u64 	%rd27, [fusion_76_param_3];
	cvta.to.global.u64 	%rd28, %rd27;
	cvta.to.global.u64 	%rd29, %rd24;
	cvta.to.global.u64 	%rd30, %rd21;
	cvta.to.global.u64 	%rd13, %rd18;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd31, %r1, 10240;
	add.s64 	%rd32, %rd28, %rd31;
	mov.u32 	%r201, %tid.x;
	and.b32  	%r202, %r201, 31;
	shl.b32 	%r203, %r201, 3;
	and.b32  	%r204, %r203, 248;
	setp.lt.u32 	%p4, %r201, 32;
	selp.b32 	%r205, 0, 256, %p4;
	or.b32  	%r206, %r204, %r205;
	mul.wide.u32 	%rd33, %r206, 2;
	add.s64 	%rd34, %rd32, %rd33;
	add.s64 	%rd1, %rd34, 4096;
	add.s64 	%rd2, %rd34, 5120;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd35, %r1, 1024;
	shl.b64 	%rd36, %rd35, 1;
	add.s64 	%rd37, %rd23, %rd36;
	add.s64 	%rd3, %rd37, %rd33;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd34, 6144;
	add.s64 	%rd6, %rd34, 7168;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd38, %rd26, %rd36;
	add.s64 	%rd7, %rd38, %rd33;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd9, %rd34, 8192;
	add.s64 	%rd10, %rd34, 9216;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd39, %rd29, %rd36;
	add.s64 	%rd11, %rd39, %rd33;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.rn.f32 	%f97, %f65, %f81;
	add.rn.f32 	%f98, %f66, %f82;
	add.rn.f32 	%f99, %f67, %f83;
	add.rn.f32 	%f100, %f68, %f84;
	add.rn.f32 	%f101, %f69, %f85;
	add.rn.f32 	%f102, %f70, %f86;
	add.rn.f32 	%f103, %f71, %f87;
	add.rn.f32 	%f104, %f72, %f88;
	add.rn.f32 	%f105, %f73, %f89;
	add.rn.f32 	%f106, %f74, %f90;
	add.rn.f32 	%f107, %f75, %f91;
	add.rn.f32 	%f108, %f76, %f92;
	add.rn.f32 	%f109, %f77, %f93;
	add.rn.f32 	%f110, %f78, %f94;
	add.rn.f32 	%f111, %f79, %f95;
	add.rn.f32 	%f112, %f80, %f96;
	add.rn.f32 	%f113, %f49, %f97;
	add.rn.f32 	%f114, %f50, %f98;
	add.rn.f32 	%f115, %f51, %f99;
	add.rn.f32 	%f116, %f52, %f100;
	add.rn.f32 	%f117, %f53, %f101;
	add.rn.f32 	%f118, %f54, %f102;
	add.rn.f32 	%f119, %f55, %f103;
	add.rn.f32 	%f120, %f56, %f104;
	add.rn.f32 	%f121, %f57, %f105;
	add.rn.f32 	%f122, %f58, %f106;
	add.rn.f32 	%f123, %f59, %f107;
	add.rn.f32 	%f124, %f60, %f108;
	add.rn.f32 	%f125, %f61, %f109;
	add.rn.f32 	%f126, %f62, %f110;
	add.rn.f32 	%f127, %f63, %f111;
	add.rn.f32 	%f128, %f64, %f112;
	add.rn.f32 	%f129, %f33, %f113;
	add.rn.f32 	%f130, %f34, %f114;
	add.rn.f32 	%f131, %f35, %f115;
	add.rn.f32 	%f132, %f36, %f116;
	add.rn.f32 	%f133, %f37, %f117;
	add.rn.f32 	%f134, %f38, %f118;
	add.rn.f32 	%f135, %f39, %f119;
	add.rn.f32 	%f136, %f40, %f120;
	add.rn.f32 	%f137, %f41, %f121;
	add.rn.f32 	%f138, %f42, %f122;
	add.rn.f32 	%f139, %f43, %f123;
	add.rn.f32 	%f140, %f44, %f124;
	add.rn.f32 	%f141, %f45, %f125;
	add.rn.f32 	%f142, %f46, %f126;
	add.rn.f32 	%f143, %f47, %f127;
	add.rn.f32 	%f144, %f48, %f128;
	add.rn.f32 	%f145, %f17, %f129;
	add.rn.f32 	%f146, %f18, %f130;
	add.rn.f32 	%f147, %f19, %f131;
	add.rn.f32 	%f148, %f20, %f132;
	add.rn.f32 	%f149, %f21, %f133;
	add.rn.f32 	%f150, %f22, %f134;
	add.rn.f32 	%f151, %f23, %f135;
	add.rn.f32 	%f152, %f24, %f136;
	add.rn.f32 	%f153, %f25, %f137;
	add.rn.f32 	%f154, %f26, %f138;
	add.rn.f32 	%f155, %f27, %f139;
	add.rn.f32 	%f156, %f28, %f140;
	add.rn.f32 	%f157, %f29, %f141;
	add.rn.f32 	%f158, %f30, %f142;
	add.rn.f32 	%f159, %f31, %f143;
	add.rn.f32 	%f160, %f32, %f144;
	add.rn.f32 	%f161, %f1, %f145;
	add.rn.f32 	%f162, %f2, %f146;
	add.rn.f32 	%f163, %f3, %f147;
	add.rn.f32 	%f164, %f4, %f148;
	add.rn.f32 	%f165, %f5, %f149;
	add.rn.f32 	%f166, %f6, %f150;
	add.rn.f32 	%f167, %f7, %f151;
	add.rn.f32 	%f168, %f8, %f152;
	add.rn.f32 	%f169, %f9, %f153;
	add.rn.f32 	%f170, %f10, %f154;
	add.rn.f32 	%f171, %f11, %f155;
	add.rn.f32 	%f172, %f12, %f156;
	add.rn.f32 	%f173, %f13, %f157;
	add.rn.f32 	%f174, %f14, %f158;
	add.rn.f32 	%f175, %f15, %f159;
	add.rn.f32 	%f176, %f16, %f160;
	mul.rn.f32 	%f177, %f161, %f161;
	mul.rn.f32 	%f178, %f162, %f162;
	mul.rn.f32 	%f179, %f163, %f163;
	mul.rn.f32 	%f180, %f164, %f164;
	mul.rn.f32 	%f181, %f165, %f165;
	mul.rn.f32 	%f182, %f166, %f166;
	mul.rn.f32 	%f183, %f167, %f167;
	mul.rn.f32 	%f184, %f168, %f168;
	mul.rn.f32 	%f185, %f169, %f169;
	mul.rn.f32 	%f186, %f170, %f170;
	mul.rn.f32 	%f187, %f171, %f171;
	mul.rn.f32 	%f188, %f172, %f172;
	mul.rn.f32 	%f189, %f173, %f173;
	mul.rn.f32 	%f190, %f174, %f174;
	mul.rn.f32 	%f191, %f175, %f175;
	mul.rn.f32 	%f192, %f176, %f176;
	add.rn.f32 	%f193, %f177, %f178;
	add.rn.f32 	%f194, %f193, %f179;
	add.rn.f32 	%f195, %f194, %f180;
	add.rn.f32 	%f196, %f195, %f181;
	add.rn.f32 	%f197, %f196, %f182;
	add.rn.f32 	%f198, %f197, %f183;
	add.rn.f32 	%f199, %f198, %f184;
	add.rn.f32 	%f200, %f199, %f185;
	add.rn.f32 	%f201, %f200, %f186;
	add.rn.f32 	%f202, %f201, %f187;
	add.rn.f32 	%f203, %f202, %f188;
	add.rn.f32 	%f204, %f203, %f189;
	add.rn.f32 	%f205, %f204, %f190;
	add.rn.f32 	%f206, %f205, %f191;
	add.rn.f32 	%f207, %f206, %f192;
	mov.b32 	%r207, %f207;
	shfl.sync.bfly.b32	%r208, %r207, 16, 31, -1;
	mov.b32 	%f208, %r208;
	add.rn.f32 	%f209, %f207, %f208;
	mov.b32 	%r209, %f209;
	shfl.sync.bfly.b32	%r210, %r209, 8, 31, -1;
	mov.b32 	%f210, %r210;
	add.rn.f32 	%f211, %f209, %f210;
	mov.b32 	%r211, %f211;
	shfl.sync.bfly.b32	%r212, %r211, 4, 31, -1;
	mov.b32 	%f212, %r212;
	add.rn.f32 	%f213, %f211, %f212;
	mov.b32 	%r213, %f213;
	shfl.sync.bfly.b32	%r214, %r213, 2, 31, -1;
	mov.b32 	%f214, %r214;
	add.rn.f32 	%f215, %f213, %f214;
	mov.b32 	%r215, %f215;
	shfl.sync.bfly.b32	%r216, %r215, 1, 31, -1;
	mov.b32 	%f216, %r216;
	add.rn.f32 	%f217, %f215, %f216;
	setp.eq.s32 	%p1, %r202, 0;
	shr.u32 	%r217, %r201, 3;
	and.b32  	%r218, %r217, 4;
	cvt.u64.u32 	%rd40, %r218;
	mov.u64 	%rd41, global_smem;
	add.s64 	%rd42, %rd41, %rd40;
	mov.b32 	%r147, %f217;
	cvt.u32.u64 	%r146, %rd42;
	// begin inline asm
	@%p1 st.shared.b32 [ %r146 + 0 ], %r147;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r201, 2;
	shl.b32 	%r219, %r201, 2;
	cvt.u64.u32 	%rd43, %r219;
	add.s64 	%rd44, %rd41, %rd43;
	cvt.u32.u64 	%r149, %rd44;
	// begin inline asm
	@%p2 ld.shared.b32 %r148, [ %r149 + 0 ];
	// end inline asm
	mov.b32 	%f218, %r148;
	shfl.sync.bfly.b32	%r220, %r148, 1, 31, -1;
	mov.b32 	%f219, %r220;
	add.rn.f32 	%f220, %f218, %f219;
	setp.eq.s32 	%p3, %r201, 0;
	mov.b32 	%r151, %f220;
	// begin inline asm
	@%p3 st.shared.b32 [ %r149 + 0 ], %r151;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f221, [global_smem];
	mul.rn.f32 	%f222, %f221, 0f3A800000;
	// begin inline asm
	mov.u32 %r152, 0x0;
	ld.global.b32 { %r152 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f223, %r152;
	add.rn.f32 	%f224, %f222, %f223;
	rsqrt.approx.f32 	%f225, %f224;
	mul.rn.f32 	%f226, %f161, %f225;
	mul.rn.f32 	%f227, %f162, %f225;
	mul.rn.f32 	%f228, %f163, %f225;
	mul.rn.f32 	%f229, %f164, %f225;
	mul.rn.f32 	%f230, %f165, %f225;
	mul.rn.f32 	%f231, %f166, %f225;
	mul.rn.f32 	%f232, %f167, %f225;
	mul.rn.f32 	%f233, %f168, %f225;
	mul.rn.f32 	%f234, %f169, %f225;
	mul.rn.f32 	%f235, %f170, %f225;
	mul.rn.f32 	%f236, %f171, %f225;
	mul.rn.f32 	%f237, %f172, %f225;
	mul.rn.f32 	%f238, %f173, %f225;
	mul.rn.f32 	%f239, %f174, %f225;
	mul.rn.f32 	%f240, %f175, %f225;
	mul.rn.f32 	%f241, %f176, %f225;
	add.s64 	%rd14, %rd30, %rd33;
	add.s64 	%rd15, %rd14, 1024;
	// begin inline asm
	mov.u32 %r153, 0x0;
	mov.u32 %r154, 0x0;
	mov.u32 %r155, 0x0;
	mov.u32 %r156, 0x0;
	ld.global.v4.b32 { %r153, %r154, %r155, %r156 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r153;
	mov.b32 	{%rs99, %rs100}, %r154;
	mov.b32 	{%rs101, %rs102}, %r155;
	mov.b32 	{%rs103, %rs104}, %r156;
	// begin inline asm
	mov.u32 %r157, 0x0;
	mov.u32 %r158, 0x0;
	mov.u32 %r159, 0x0;
	mov.u32 %r160, 0x0;
	ld.global.v4.b32 { %r157, %r158, %r159, %r160 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r157;
	mov.b32 	{%rs107, %rs108}, %r158;
	mov.b32 	{%rs109, %rs110}, %r159;
	mov.b32 	{%rs111, %rs112}, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs97;
	// end inline asm
	mov.b32 	%f242, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs98;
	// end inline asm
	mov.b32 	%f243, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs99;
	// end inline asm
	mov.b32 	%f244, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs100;
	// end inline asm
	mov.b32 	%f245, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs101;
	// end inline asm
	mov.b32 	%f246, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs102;
	// end inline asm
	mov.b32 	%f247, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs103;
	// end inline asm
	mov.b32 	%f248, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs104;
	// end inline asm
	mov.b32 	%f249, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs105;
	// end inline asm
	mov.b32 	%f250, %r169;
	// begin inline asm
	cvt.f32.bf16 %r170, %rs106;
	// end inline asm
	mov.b32 	%f251, %r170;
	// begin inline asm
	cvt.f32.bf16 %r171, %rs107;
	// end inline asm
	mov.b32 	%f252, %r171;
	// begin inline asm
	cvt.f32.bf16 %r172, %rs108;
	// end inline asm
	mov.b32 	%f253, %r172;
	// begin inline asm
	cvt.f32.bf16 %r173, %rs109;
	// end inline asm
	mov.b32 	%f254, %r173;
	// begin inline asm
	cvt.f32.bf16 %r174, %rs110;
	// end inline asm
	mov.b32 	%f255, %r174;
	// begin inline asm
	cvt.f32.bf16 %r175, %rs111;
	// end inline asm
	mov.b32 	%f256, %r175;
	// begin inline asm
	cvt.f32.bf16 %r176, %rs112;
	// end inline asm
	mov.b32 	%f257, %r176;
	mul.rn.f32 	%f258, %f226, %f242;
	mul.rn.f32 	%f259, %f227, %f243;
	mul.rn.f32 	%f260, %f228, %f244;
	mul.rn.f32 	%f261, %f229, %f245;
	mul.rn.f32 	%f262, %f230, %f246;
	mul.rn.f32 	%f263, %f231, %f247;
	mul.rn.f32 	%f264, %f232, %f248;
	mul.rn.f32 	%f265, %f233, %f249;
	mul.rn.f32 	%f266, %f234, %f250;
	mul.rn.f32 	%f267, %f235, %f251;
	mul.rn.f32 	%f268, %f236, %f252;
	mul.rn.f32 	%f269, %f237, %f253;
	mul.rn.f32 	%f270, %f238, %f254;
	mul.rn.f32 	%f271, %f239, %f255;
	mul.rn.f32 	%f272, %f240, %f256;
	mul.rn.f32 	%f273, %f241, %f257;
	mov.b32 	%r177, %f258;
	// begin inline asm
	cvt.rn.bf16.f32 %rs113, %r177;
	// end inline asm
	mov.b32 	%r178, %f259;
	// begin inline asm
	cvt.rn.bf16.f32 %rs114, %r178;
	// end inline asm
	mov.b32 	%r179, %f260;
	// begin inline asm
	cvt.rn.bf16.f32 %rs115, %r179;
	// end inline asm
	mov.b32 	%r180, %f261;
	// begin inline asm
	cvt.rn.bf16.f32 %rs116, %r180;
	// end inline asm
	mov.b32 	%r181, %f262;
	// begin inline asm
	cvt.rn.bf16.f32 %rs117, %r181;
	// end inline asm
	mov.b32 	%r182, %f263;
	// begin inline asm
	cvt.rn.bf16.f32 %rs118, %r182;
	// end inline asm
	mov.b32 	%r183, %f264;
	// begin inline asm
	cvt.rn.bf16.f32 %rs119, %r183;
	// end inline asm
	mov.b32 	%r184, %f265;
	// begin inline asm
	cvt.rn.bf16.f32 %rs120, %r184;
	// end inline asm
	mov.b32 	%r185, %f266;
	// begin inline asm
	cvt.rn.bf16.f32 %rs121, %r185;
	// end inline asm
	mov.b32 	%r186, %f267;
	// begin inline asm
	cvt.rn.bf16.f32 %rs122, %r186;
	// end inline asm
	mov.b32 	%r187, %f268;
	// begin inline asm
	cvt.rn.bf16.f32 %rs123, %r187;
	// end inline asm
	mov.b32 	%r188, %f269;
	// begin inline asm
	cvt.rn.bf16.f32 %rs124, %r188;
	// end inline asm
	mov.b32 	%r189, %f270;
	// begin inline asm
	cvt.rn.bf16.f32 %rs125, %r189;
	// end inline asm
	mov.b32 	%r190, %f271;
	// begin inline asm
	cvt.rn.bf16.f32 %rs126, %r190;
	// end inline asm
	mov.b32 	%r191, %f272;
	// begin inline asm
	cvt.rn.bf16.f32 %rs127, %r191;
	// end inline asm
	mov.b32 	%r192, %f273;
	// begin inline asm
	cvt.rn.bf16.f32 %rs128, %r192;
	// end inline asm
	add.s64 	%rd45, %rd20, %rd36;
	add.s64 	%rd16, %rd45, %rd33;
	add.s64 	%rd17, %rd16, 1024;
	mov.b32 	%r193, {%rs113, %rs114};
	mov.b32 	%r194, {%rs115, %rs116};
	mov.b32 	%r195, {%rs117, %rs118};
	mov.b32 	%r196, {%rs119, %rs120};
	// begin inline asm
	st.global.v4.b32 [ %rd16 + 0 ], { %r193, %r194, %r195, %r196 };
	// end inline asm
	mov.b32 	%r197, {%rs121, %rs122};
	mov.b32 	%r198, {%rs123, %rs124};
	mov.b32 	%r199, {%rs125, %rs126};
	mov.b32 	%r200, {%rs127, %rs128};
	// begin inline asm
	st.global.v4.b32 [ %rd17 + 0 ], { %r197, %r198, %r199, %r200 };
	// end inline asm
	ret;

}
	// .globl	fusion_77
.visible .entry fusion_77(
	.param .u64 .ptr .align 16 fusion_77_param_0,
	.param .u64 .ptr .align 16 fusion_77_param_1,
	.param .u64 .ptr .align 128 fusion_77_param_2,
	.param .u64 .ptr .align 128 fusion_77_param_3,
	.param .u64 .ptr .align 128 fusion_77_param_4,
	.param .u64 .ptr .align 128 fusion_77_param_5,
	.param .u64 .ptr .align 128 fusion_77_param_6,
	.param .u64 .ptr .align 128 fusion_77_param_7
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<161>;
	.reg .b32 	%r<269>;
	.reg .f32 	%f<338>;
	.reg .b64 	%rd<53>;

	ld.param.u64 	%rd22, [fusion_77_param_0];
	ld.param.u64 	%rd23, [fusion_77_param_7];
	cvta.to.global.u64 	%rd24, %rd23;
	ld.param.u64 	%rd25, [fusion_77_param_1];
	ld.param.u64 	%rd26, [fusion_77_param_6];
	cvta.to.global.u64 	%rd27, %rd26;
	ld.param.u64 	%rd28, [fusion_77_param_2];
	ld.param.u64 	%rd29, [fusion_77_param_5];
	cvta.to.global.u64 	%rd30, %rd29;
	ld.param.u64 	%rd31, [fusion_77_param_3];
	ld.param.u64 	%rd32, [fusion_77_param_4];
	cvta.to.global.u64 	%rd33, %rd32;
	cvta.to.global.u64 	%rd34, %rd31;
	cvta.to.global.u64 	%rd35, %rd28;
	cvta.to.global.u64 	%rd36, %rd25;
	cvta.to.global.u64 	%rd17, %rd22;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd37, %r1, 10240;
	add.s64 	%rd38, %rd34, %rd37;
	mov.u32 	%r249, %tid.x;
	and.b32  	%r250, %r249, 31;
	shl.b32 	%r251, %r249, 3;
	and.b32  	%r252, %r251, 248;
	setp.lt.u32 	%p4, %r249, 32;
	selp.b32 	%r253, 0, 256, %p4;
	or.b32  	%r254, %r252, %r253;
	mul.wide.u32 	%rd39, %r254, 2;
	add.s64 	%rd40, %rd38, %rd39;
	add.s64 	%rd1, %rd40, 2048;
	add.s64 	%rd2, %rd40, 3072;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd41, %r1, 1024;
	shl.b64 	%rd42, %rd41, 1;
	add.s64 	%rd43, %rd35, %rd42;
	add.s64 	%rd3, %rd43, %rd39;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd40, 4096;
	add.s64 	%rd6, %rd40, 5120;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd44, %rd27, %rd42;
	add.s64 	%rd7, %rd44, %rd39;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd9, %rd40, 6144;
	add.s64 	%rd10, %rd40, 7168;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd45, %rd30, %rd42;
	add.s64 	%rd11, %rd45, %rd39;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.s64 	%rd13, %rd40, 8192;
	add.s64 	%rd14, %rd40, 9216;
	// begin inline asm
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	ld.global.v4.b32 { %r146, %r147, %r148, %r149 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r146;
	mov.b32 	{%rs99, %rs100}, %r147;
	mov.b32 	{%rs101, %rs102}, %r148;
	mov.b32 	{%rs103, %rs104}, %r149;
	// begin inline asm
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	ld.global.v4.b32 { %r150, %r151, %r152, %r153 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r150;
	mov.b32 	{%rs107, %rs108}, %r151;
	mov.b32 	{%rs109, %rs110}, %r152;
	mov.b32 	{%rs111, %rs112}, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs97;
	// end inline asm
	mov.b32 	%f97, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs98;
	// end inline asm
	mov.b32 	%f98, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs99;
	// end inline asm
	mov.b32 	%f99, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs100;
	// end inline asm
	mov.b32 	%f100, %r157;
	// begin inline asm
	cvt.f32.bf16 %r158, %rs101;
	// end inline asm
	mov.b32 	%f101, %r158;
	// begin inline asm
	cvt.f32.bf16 %r159, %rs102;
	// end inline asm
	mov.b32 	%f102, %r159;
	// begin inline asm
	cvt.f32.bf16 %r160, %rs103;
	// end inline asm
	mov.b32 	%f103, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs104;
	// end inline asm
	mov.b32 	%f104, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs105;
	// end inline asm
	mov.b32 	%f105, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs106;
	// end inline asm
	mov.b32 	%f106, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs107;
	// end inline asm
	mov.b32 	%f107, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs108;
	// end inline asm
	mov.b32 	%f108, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs109;
	// end inline asm
	mov.b32 	%f109, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs110;
	// end inline asm
	mov.b32 	%f110, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs111;
	// end inline asm
	mov.b32 	%f111, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs112;
	// end inline asm
	mov.b32 	%f112, %r169;
	add.s64 	%rd46, %rd33, %rd42;
	add.s64 	%rd15, %rd46, %rd39;
	add.s64 	%rd16, %rd15, 1024;
	// begin inline asm
	mov.u32 %r170, 0x0;
	mov.u32 %r171, 0x0;
	mov.u32 %r172, 0x0;
	mov.u32 %r173, 0x0;
	ld.global.v4.b32 { %r170, %r171, %r172, %r173 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs113, %rs114}, %r170;
	mov.b32 	{%rs115, %rs116}, %r171;
	mov.b32 	{%rs117, %rs118}, %r172;
	mov.b32 	{%rs119, %rs120}, %r173;
	// begin inline asm
	mov.u32 %r174, 0x0;
	mov.u32 %r175, 0x0;
	mov.u32 %r176, 0x0;
	mov.u32 %r177, 0x0;
	ld.global.v4.b32 { %r174, %r175, %r176, %r177 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs121, %rs122}, %r174;
	mov.b32 	{%rs123, %rs124}, %r175;
	mov.b32 	{%rs125, %rs126}, %r176;
	mov.b32 	{%rs127, %rs128}, %r177;
	// begin inline asm
	cvt.f32.bf16 %r178, %rs113;
	// end inline asm
	mov.b32 	%f113, %r178;
	// begin inline asm
	cvt.f32.bf16 %r179, %rs114;
	// end inline asm
	mov.b32 	%f114, %r179;
	// begin inline asm
	cvt.f32.bf16 %r180, %rs115;
	// end inline asm
	mov.b32 	%f115, %r180;
	// begin inline asm
	cvt.f32.bf16 %r181, %rs116;
	// end inline asm
	mov.b32 	%f116, %r181;
	// begin inline asm
	cvt.f32.bf16 %r182, %rs117;
	// end inline asm
	mov.b32 	%f117, %r182;
	// begin inline asm
	cvt.f32.bf16 %r183, %rs118;
	// end inline asm
	mov.b32 	%f118, %r183;
	// begin inline asm
	cvt.f32.bf16 %r184, %rs119;
	// end inline asm
	mov.b32 	%f119, %r184;
	// begin inline asm
	cvt.f32.bf16 %r185, %rs120;
	// end inline asm
	mov.b32 	%f120, %r185;
	// begin inline asm
	cvt.f32.bf16 %r186, %rs121;
	// end inline asm
	mov.b32 	%f121, %r186;
	// begin inline asm
	cvt.f32.bf16 %r187, %rs122;
	// end inline asm
	mov.b32 	%f122, %r187;
	// begin inline asm
	cvt.f32.bf16 %r188, %rs123;
	// end inline asm
	mov.b32 	%f123, %r188;
	// begin inline asm
	cvt.f32.bf16 %r189, %rs124;
	// end inline asm
	mov.b32 	%f124, %r189;
	// begin inline asm
	cvt.f32.bf16 %r190, %rs125;
	// end inline asm
	mov.b32 	%f125, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs126;
	// end inline asm
	mov.b32 	%f126, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs127;
	// end inline asm
	mov.b32 	%f127, %r192;
	// begin inline asm
	cvt.f32.bf16 %r193, %rs128;
	// end inline asm
	mov.b32 	%f128, %r193;
	add.rn.f32 	%f129, %f97, %f113;
	add.rn.f32 	%f130, %f98, %f114;
	add.rn.f32 	%f131, %f99, %f115;
	add.rn.f32 	%f132, %f100, %f116;
	add.rn.f32 	%f133, %f101, %f117;
	add.rn.f32 	%f134, %f102, %f118;
	add.rn.f32 	%f135, %f103, %f119;
	add.rn.f32 	%f136, %f104, %f120;
	add.rn.f32 	%f137, %f105, %f121;
	add.rn.f32 	%f138, %f106, %f122;
	add.rn.f32 	%f139, %f107, %f123;
	add.rn.f32 	%f140, %f108, %f124;
	add.rn.f32 	%f141, %f109, %f125;
	add.rn.f32 	%f142, %f110, %f126;
	add.rn.f32 	%f143, %f111, %f127;
	add.rn.f32 	%f144, %f112, %f128;
	add.rn.f32 	%f145, %f81, %f129;
	add.rn.f32 	%f146, %f82, %f130;
	add.rn.f32 	%f147, %f83, %f131;
	add.rn.f32 	%f148, %f84, %f132;
	add.rn.f32 	%f149, %f85, %f133;
	add.rn.f32 	%f150, %f86, %f134;
	add.rn.f32 	%f151, %f87, %f135;
	add.rn.f32 	%f152, %f88, %f136;
	add.rn.f32 	%f153, %f89, %f137;
	add.rn.f32 	%f154, %f90, %f138;
	add.rn.f32 	%f155, %f91, %f139;
	add.rn.f32 	%f156, %f92, %f140;
	add.rn.f32 	%f157, %f93, %f141;
	add.rn.f32 	%f158, %f94, %f142;
	add.rn.f32 	%f159, %f95, %f143;
	add.rn.f32 	%f160, %f96, %f144;
	add.rn.f32 	%f161, %f65, %f145;
	add.rn.f32 	%f162, %f66, %f146;
	add.rn.f32 	%f163, %f67, %f147;
	add.rn.f32 	%f164, %f68, %f148;
	add.rn.f32 	%f165, %f69, %f149;
	add.rn.f32 	%f166, %f70, %f150;
	add.rn.f32 	%f167, %f71, %f151;
	add.rn.f32 	%f168, %f72, %f152;
	add.rn.f32 	%f169, %f73, %f153;
	add.rn.f32 	%f170, %f74, %f154;
	add.rn.f32 	%f171, %f75, %f155;
	add.rn.f32 	%f172, %f76, %f156;
	add.rn.f32 	%f173, %f77, %f157;
	add.rn.f32 	%f174, %f78, %f158;
	add.rn.f32 	%f175, %f79, %f159;
	add.rn.f32 	%f176, %f80, %f160;
	add.rn.f32 	%f177, %f49, %f161;
	add.rn.f32 	%f178, %f50, %f162;
	add.rn.f32 	%f179, %f51, %f163;
	add.rn.f32 	%f180, %f52, %f164;
	add.rn.f32 	%f181, %f53, %f165;
	add.rn.f32 	%f182, %f54, %f166;
	add.rn.f32 	%f183, %f55, %f167;
	add.rn.f32 	%f184, %f56, %f168;
	add.rn.f32 	%f185, %f57, %f169;
	add.rn.f32 	%f186, %f58, %f170;
	add.rn.f32 	%f187, %f59, %f171;
	add.rn.f32 	%f188, %f60, %f172;
	add.rn.f32 	%f189, %f61, %f173;
	add.rn.f32 	%f190, %f62, %f174;
	add.rn.f32 	%f191, %f63, %f175;
	add.rn.f32 	%f192, %f64, %f176;
	add.rn.f32 	%f193, %f33, %f177;
	add.rn.f32 	%f194, %f34, %f178;
	add.rn.f32 	%f195, %f35, %f179;
	add.rn.f32 	%f196, %f36, %f180;
	add.rn.f32 	%f197, %f37, %f181;
	add.rn.f32 	%f198, %f38, %f182;
	add.rn.f32 	%f199, %f39, %f183;
	add.rn.f32 	%f200, %f40, %f184;
	add.rn.f32 	%f201, %f41, %f185;
	add.rn.f32 	%f202, %f42, %f186;
	add.rn.f32 	%f203, %f43, %f187;
	add.rn.f32 	%f204, %f44, %f188;
	add.rn.f32 	%f205, %f45, %f189;
	add.rn.f32 	%f206, %f46, %f190;
	add.rn.f32 	%f207, %f47, %f191;
	add.rn.f32 	%f208, %f48, %f192;
	add.rn.f32 	%f209, %f17, %f193;
	add.rn.f32 	%f210, %f18, %f194;
	add.rn.f32 	%f211, %f19, %f195;
	add.rn.f32 	%f212, %f20, %f196;
	add.rn.f32 	%f213, %f21, %f197;
	add.rn.f32 	%f214, %f22, %f198;
	add.rn.f32 	%f215, %f23, %f199;
	add.rn.f32 	%f216, %f24, %f200;
	add.rn.f32 	%f217, %f25, %f201;
	add.rn.f32 	%f218, %f26, %f202;
	add.rn.f32 	%f219, %f27, %f203;
	add.rn.f32 	%f220, %f28, %f204;
	add.rn.f32 	%f221, %f29, %f205;
	add.rn.f32 	%f222, %f30, %f206;
	add.rn.f32 	%f223, %f31, %f207;
	add.rn.f32 	%f224, %f32, %f208;
	add.rn.f32 	%f225, %f1, %f209;
	add.rn.f32 	%f226, %f2, %f210;
	add.rn.f32 	%f227, %f3, %f211;
	add.rn.f32 	%f228, %f4, %f212;
	add.rn.f32 	%f229, %f5, %f213;
	add.rn.f32 	%f230, %f6, %f214;
	add.rn.f32 	%f231, %f7, %f215;
	add.rn.f32 	%f232, %f8, %f216;
	add.rn.f32 	%f233, %f9, %f217;
	add.rn.f32 	%f234, %f10, %f218;
	add.rn.f32 	%f235, %f11, %f219;
	add.rn.f32 	%f236, %f12, %f220;
	add.rn.f32 	%f237, %f13, %f221;
	add.rn.f32 	%f238, %f14, %f222;
	add.rn.f32 	%f239, %f15, %f223;
	add.rn.f32 	%f240, %f16, %f224;
	mul.rn.f32 	%f241, %f225, %f225;
	mul.rn.f32 	%f242, %f226, %f226;
	mul.rn.f32 	%f243, %f227, %f227;
	mul.rn.f32 	%f244, %f228, %f228;
	mul.rn.f32 	%f245, %f229, %f229;
	mul.rn.f32 	%f246, %f230, %f230;
	mul.rn.f32 	%f247, %f231, %f231;
	mul.rn.f32 	%f248, %f232, %f232;
	mul.rn.f32 	%f249, %f233, %f233;
	mul.rn.f32 	%f250, %f234, %f234;
	mul.rn.f32 	%f251, %f235, %f235;
	mul.rn.f32 	%f252, %f236, %f236;
	mul.rn.f32 	%f253, %f237, %f237;
	mul.rn.f32 	%f254, %f238, %f238;
	mul.rn.f32 	%f255, %f239, %f239;
	mul.rn.f32 	%f256, %f240, %f240;
	add.rn.f32 	%f257, %f241, %f242;
	add.rn.f32 	%f258, %f257, %f243;
	add.rn.f32 	%f259, %f258, %f244;
	add.rn.f32 	%f260, %f259, %f245;
	add.rn.f32 	%f261, %f260, %f246;
	add.rn.f32 	%f262, %f261, %f247;
	add.rn.f32 	%f263, %f262, %f248;
	add.rn.f32 	%f264, %f263, %f249;
	add.rn.f32 	%f265, %f264, %f250;
	add.rn.f32 	%f266, %f265, %f251;
	add.rn.f32 	%f267, %f266, %f252;
	add.rn.f32 	%f268, %f267, %f253;
	add.rn.f32 	%f269, %f268, %f254;
	add.rn.f32 	%f270, %f269, %f255;
	add.rn.f32 	%f271, %f270, %f256;
	mov.b32 	%r255, %f271;
	shfl.sync.bfly.b32	%r256, %r255, 16, 31, -1;
	mov.b32 	%f272, %r256;
	add.rn.f32 	%f273, %f271, %f272;
	mov.b32 	%r257, %f273;
	shfl.sync.bfly.b32	%r258, %r257, 8, 31, -1;
	mov.b32 	%f274, %r258;
	add.rn.f32 	%f275, %f273, %f274;
	mov.b32 	%r259, %f275;
	shfl.sync.bfly.b32	%r260, %r259, 4, 31, -1;
	mov.b32 	%f276, %r260;
	add.rn.f32 	%f277, %f275, %f276;
	mov.b32 	%r261, %f277;
	shfl.sync.bfly.b32	%r262, %r261, 2, 31, -1;
	mov.b32 	%f278, %r262;
	add.rn.f32 	%f279, %f277, %f278;
	mov.b32 	%r263, %f279;
	shfl.sync.bfly.b32	%r264, %r263, 1, 31, -1;
	mov.b32 	%f280, %r264;
	add.rn.f32 	%f281, %f279, %f280;
	setp.eq.s32 	%p1, %r250, 0;
	shr.u32 	%r265, %r249, 3;
	and.b32  	%r266, %r265, 4;
	cvt.u64.u32 	%rd47, %r266;
	mov.u64 	%rd48, global_smem;
	add.s64 	%rd49, %rd48, %rd47;
	mov.b32 	%r195, %f281;
	cvt.u32.u64 	%r194, %rd49;
	// begin inline asm
	@%p1 st.shared.b32 [ %r194 + 0 ], %r195;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r249, 2;
	shl.b32 	%r267, %r249, 2;
	cvt.u64.u32 	%rd50, %r267;
	add.s64 	%rd51, %rd48, %rd50;
	cvt.u32.u64 	%r197, %rd51;
	// begin inline asm
	@%p2 ld.shared.b32 %r196, [ %r197 + 0 ];
	// end inline asm
	mov.b32 	%f282, %r196;
	shfl.sync.bfly.b32	%r268, %r196, 1, 31, -1;
	mov.b32 	%f283, %r268;
	add.rn.f32 	%f284, %f282, %f283;
	setp.eq.s32 	%p3, %r249, 0;
	mov.b32 	%r199, %f284;
	// begin inline asm
	@%p3 st.shared.b32 [ %r197 + 0 ], %r199;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f285, [global_smem];
	mul.rn.f32 	%f286, %f285, 0f3A800000;
	// begin inline asm
	mov.u32 %r200, 0x0;
	ld.global.b32 { %r200 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	%f287, %r200;
	add.rn.f32 	%f288, %f286, %f287;
	rsqrt.approx.f32 	%f289, %f288;
	mul.rn.f32 	%f290, %f225, %f289;
	mul.rn.f32 	%f291, %f226, %f289;
	mul.rn.f32 	%f292, %f227, %f289;
	mul.rn.f32 	%f293, %f228, %f289;
	mul.rn.f32 	%f294, %f229, %f289;
	mul.rn.f32 	%f295, %f230, %f289;
	mul.rn.f32 	%f296, %f231, %f289;
	mul.rn.f32 	%f297, %f232, %f289;
	mul.rn.f32 	%f298, %f233, %f289;
	mul.rn.f32 	%f299, %f234, %f289;
	mul.rn.f32 	%f300, %f235, %f289;
	mul.rn.f32 	%f301, %f236, %f289;
	mul.rn.f32 	%f302, %f237, %f289;
	mul.rn.f32 	%f303, %f238, %f289;
	mul.rn.f32 	%f304, %f239, %f289;
	mul.rn.f32 	%f305, %f240, %f289;
	add.s64 	%rd18, %rd36, %rd39;
	add.s64 	%rd19, %rd18, 1024;
	// begin inline asm
	mov.u32 %r201, 0x0;
	mov.u32 %r202, 0x0;
	mov.u32 %r203, 0x0;
	mov.u32 %r204, 0x0;
	ld.global.v4.b32 { %r201, %r202, %r203, %r204 }, [ %rd18 + 0 ];
	// end inline asm
	mov.b32 	{%rs129, %rs130}, %r201;
	mov.b32 	{%rs131, %rs132}, %r202;
	mov.b32 	{%rs133, %rs134}, %r203;
	mov.b32 	{%rs135, %rs136}, %r204;
	// begin inline asm
	mov.u32 %r205, 0x0;
	mov.u32 %r206, 0x0;
	mov.u32 %r207, 0x0;
	mov.u32 %r208, 0x0;
	ld.global.v4.b32 { %r205, %r206, %r207, %r208 }, [ %rd19 + 0 ];
	// end inline asm
	mov.b32 	{%rs137, %rs138}, %r205;
	mov.b32 	{%rs139, %rs140}, %r206;
	mov.b32 	{%rs141, %rs142}, %r207;
	mov.b32 	{%rs143, %rs144}, %r208;
	// begin inline asm
	cvt.f32.bf16 %r209, %rs129;
	// end inline asm
	mov.b32 	%f306, %r209;
	// begin inline asm
	cvt.f32.bf16 %r210, %rs130;
	// end inline asm
	mov.b32 	%f307, %r210;
	// begin inline asm
	cvt.f32.bf16 %r211, %rs131;
	// end inline asm
	mov.b32 	%f308, %r211;
	// begin inline asm
	cvt.f32.bf16 %r212, %rs132;
	// end inline asm
	mov.b32 	%f309, %r212;
	// begin inline asm
	cvt.f32.bf16 %r213, %rs133;
	// end inline asm
	mov.b32 	%f310, %r213;
	// begin inline asm
	cvt.f32.bf16 %r214, %rs134;
	// end inline asm
	mov.b32 	%f311, %r214;
	// begin inline asm
	cvt.f32.bf16 %r215, %rs135;
	// end inline asm
	mov.b32 	%f312, %r215;
	// begin inline asm
	cvt.f32.bf16 %r216, %rs136;
	// end inline asm
	mov.b32 	%f313, %r216;
	// begin inline asm
	cvt.f32.bf16 %r217, %rs137;
	// end inline asm
	mov.b32 	%f314, %r217;
	// begin inline asm
	cvt.f32.bf16 %r218, %rs138;
	// end inline asm
	mov.b32 	%f315, %r218;
	// begin inline asm
	cvt.f32.bf16 %r219, %rs139;
	// end inline asm
	mov.b32 	%f316, %r219;
	// begin inline asm
	cvt.f32.bf16 %r220, %rs140;
	// end inline asm
	mov.b32 	%f317, %r220;
	// begin inline asm
	cvt.f32.bf16 %r221, %rs141;
	// end inline asm
	mov.b32 	%f318, %r221;
	// begin inline asm
	cvt.f32.bf16 %r222, %rs142;
	// end inline asm
	mov.b32 	%f319, %r222;
	// begin inline asm
	cvt.f32.bf16 %r223, %rs143;
	// end inline asm
	mov.b32 	%f320, %r223;
	// begin inline asm
	cvt.f32.bf16 %r224, %rs144;
	// end inline asm
	mov.b32 	%f321, %r224;
	mul.rn.f32 	%f322, %f290, %f306;
	mul.rn.f32 	%f323, %f291, %f307;
	mul.rn.f32 	%f324, %f292, %f308;
	mul.rn.f32 	%f325, %f293, %f309;
	mul.rn.f32 	%f326, %f294, %f310;
	mul.rn.f32 	%f327, %f295, %f311;
	mul.rn.f32 	%f328, %f296, %f312;
	mul.rn.f32 	%f329, %f297, %f313;
	mul.rn.f32 	%f330, %f298, %f314;
	mul.rn.f32 	%f331, %f299, %f315;
	mul.rn.f32 	%f332, %f300, %f316;
	mul.rn.f32 	%f333, %f301, %f317;
	mul.rn.f32 	%f334, %f302, %f318;
	mul.rn.f32 	%f335, %f303, %f319;
	mul.rn.f32 	%f336, %f304, %f320;
	mul.rn.f32 	%f337, %f305, %f321;
	mov.b32 	%r225, %f322;
	// begin inline asm
	cvt.rn.bf16.f32 %rs145, %r225;
	// end inline asm
	mov.b32 	%r226, %f323;
	// begin inline asm
	cvt.rn.bf16.f32 %rs146, %r226;
	// end inline asm
	mov.b32 	%r227, %f324;
	// begin inline asm
	cvt.rn.bf16.f32 %rs147, %r227;
	// end inline asm
	mov.b32 	%r228, %f325;
	// begin inline asm
	cvt.rn.bf16.f32 %rs148, %r228;
	// end inline asm
	mov.b32 	%r229, %f326;
	// begin inline asm
	cvt.rn.bf16.f32 %rs149, %r229;
	// end inline asm
	mov.b32 	%r230, %f327;
	// begin inline asm
	cvt.rn.bf16.f32 %rs150, %r230;
	// end inline asm
	mov.b32 	%r231, %f328;
	// begin inline asm
	cvt.rn.bf16.f32 %rs151, %r231;
	// end inline asm
	mov.b32 	%r232, %f329;
	// begin inline asm
	cvt.rn.bf16.f32 %rs152, %r232;
	// end inline asm
	mov.b32 	%r233, %f330;
	// begin inline asm
	cvt.rn.bf16.f32 %rs153, %r233;
	// end inline asm
	mov.b32 	%r234, %f331;
	// begin inline asm
	cvt.rn.bf16.f32 %rs154, %r234;
	// end inline asm
	mov.b32 	%r235, %f332;
	// begin inline asm
	cvt.rn.bf16.f32 %rs155, %r235;
	// end inline asm
	mov.b32 	%r236, %f333;
	// begin inline asm
	cvt.rn.bf16.f32 %rs156, %r236;
	// end inline asm
	mov.b32 	%r237, %f334;
	// begin inline asm
	cvt.rn.bf16.f32 %rs157, %r237;
	// end inline asm
	mov.b32 	%r238, %f335;
	// begin inline asm
	cvt.rn.bf16.f32 %rs158, %r238;
	// end inline asm
	mov.b32 	%r239, %f336;
	// begin inline asm
	cvt.rn.bf16.f32 %rs159, %r239;
	// end inline asm
	mov.b32 	%r240, %f337;
	// begin inline asm
	cvt.rn.bf16.f32 %rs160, %r240;
	// end inline asm
	add.s64 	%rd52, %rd24, %rd42;
	add.s64 	%rd20, %rd52, %rd39;
	add.s64 	%rd21, %rd20, 1024;
	mov.b32 	%r241, {%rs145, %rs146};
	mov.b32 	%r242, {%rs147, %rs148};
	mov.b32 	%r243, {%rs149, %rs150};
	mov.b32 	%r244, {%rs151, %rs152};
	// begin inline asm
	st.global.v4.b32 [ %rd20 + 0 ], { %r241, %r242, %r243, %r244 };
	// end inline asm
	mov.b32 	%r245, {%rs153, %rs154};
	mov.b32 	%r246, {%rs155, %rs156};
	mov.b32 	%r247, {%rs157, %rs158};
	mov.b32 	%r248, {%rs159, %rs160};
	// begin inline asm
	st.global.v4.b32 [ %rd21 + 0 ], { %r245, %r246, %r247, %r248 };
	// end inline asm
	ret;

}
	// .globl	fusion_78
.visible .entry fusion_78(
	.param .u64 .ptr .align 16 fusion_78_param_0,
	.param .u64 .ptr .align 16 fusion_78_param_1,
	.param .u64 .ptr .align 128 fusion_78_param_2,
	.param .u64 .ptr .align 128 fusion_78_param_3,
	.param .u64 .ptr .align 128 fusion_78_param_4,
	.param .u64 .ptr .align 128 fusion_78_param_5,
	.param .u64 .ptr .align 128 fusion_78_param_6,
	.param .u64 .ptr .align 128 fusion_78_param_7,
	.param .u64 .ptr .align 128 fusion_78_param_8
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<193>;
	.reg .b32 	%r<317>;
	.reg .f32 	%f<402>;
	.reg .b64 	%rd<59>;

	ld.param.u64 	%rd26, [fusion_78_param_0];
	ld.param.u64 	%rd27, [fusion_78_param_8];
	cvta.to.global.u64 	%rd28, %rd27;
	ld.param.u64 	%rd29, [fusion_78_param_1];
	ld.param.u64 	%rd30, [fusion_78_param_7];
	cvta.to.global.u64 	%rd31, %rd30;
	ld.param.u64 	%rd32, [fusion_78_param_2];
	ld.param.u64 	%rd33, [fusion_78_param_6];
	cvta.to.global.u64 	%rd34, %rd33;
	ld.param.u64 	%rd35, [fusion_78_param_3];
	ld.param.u64 	%rd36, [fusion_78_param_5];
	cvta.to.global.u64 	%rd37, %rd36;
	ld.param.u64 	%rd38, [fusion_78_param_4];
	cvta.to.global.u64 	%rd39, %rd38;
	cvta.to.global.u64 	%rd40, %rd35;
	cvta.to.global.u64 	%rd41, %rd32;
	cvta.to.global.u64 	%rd42, %rd29;
	cvta.to.global.u64 	%rd21, %rd26;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd43, %r1, 10240;
	add.s64 	%rd44, %rd40, %rd43;
	mov.u32 	%r297, %tid.x;
	and.b32  	%r298, %r297, 31;
	shl.b32 	%r299, %r297, 3;
	and.b32  	%r300, %r299, 248;
	setp.lt.u32 	%p4, %r297, 32;
	selp.b32 	%r301, 0, 256, %p4;
	or.b32  	%r302, %r300, %r301;
	mul.wide.u32 	%rd45, %r302, 2;
	add.s64 	%rd1, %rd44, %rd45;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd46, %r1, 1024;
	shl.b64 	%rd47, %rd46, 1;
	add.s64 	%rd48, %rd39, %rd47;
	add.s64 	%rd3, %rd48, %rd45;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd1, 2048;
	add.s64 	%rd6, %rd1, 3072;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd49, %rd41, %rd47;
	add.s64 	%rd7, %rd49, %rd45;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd9, %rd1, 4096;
	add.s64 	%rd10, %rd1, 5120;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd50, %rd31, %rd47;
	add.s64 	%rd11, %rd50, %rd45;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.s64 	%rd13, %rd1, 6144;
	add.s64 	%rd14, %rd1, 7168;
	// begin inline asm
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	ld.global.v4.b32 { %r146, %r147, %r148, %r149 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r146;
	mov.b32 	{%rs99, %rs100}, %r147;
	mov.b32 	{%rs101, %rs102}, %r148;
	mov.b32 	{%rs103, %rs104}, %r149;
	// begin inline asm
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	ld.global.v4.b32 { %r150, %r151, %r152, %r153 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r150;
	mov.b32 	{%rs107, %rs108}, %r151;
	mov.b32 	{%rs109, %rs110}, %r152;
	mov.b32 	{%rs111, %rs112}, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs97;
	// end inline asm
	mov.b32 	%f97, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs98;
	// end inline asm
	mov.b32 	%f98, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs99;
	// end inline asm
	mov.b32 	%f99, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs100;
	// end inline asm
	mov.b32 	%f100, %r157;
	// begin inline asm
	cvt.f32.bf16 %r158, %rs101;
	// end inline asm
	mov.b32 	%f101, %r158;
	// begin inline asm
	cvt.f32.bf16 %r159, %rs102;
	// end inline asm
	mov.b32 	%f102, %r159;
	// begin inline asm
	cvt.f32.bf16 %r160, %rs103;
	// end inline asm
	mov.b32 	%f103, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs104;
	// end inline asm
	mov.b32 	%f104, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs105;
	// end inline asm
	mov.b32 	%f105, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs106;
	// end inline asm
	mov.b32 	%f106, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs107;
	// end inline asm
	mov.b32 	%f107, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs108;
	// end inline asm
	mov.b32 	%f108, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs109;
	// end inline asm
	mov.b32 	%f109, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs110;
	// end inline asm
	mov.b32 	%f110, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs111;
	// end inline asm
	mov.b32 	%f111, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs112;
	// end inline asm
	mov.b32 	%f112, %r169;
	add.s64 	%rd51, %rd34, %rd47;
	add.s64 	%rd15, %rd51, %rd45;
	add.s64 	%rd16, %rd15, 1024;
	// begin inline asm
	mov.u32 %r170, 0x0;
	mov.u32 %r171, 0x0;
	mov.u32 %r172, 0x0;
	mov.u32 %r173, 0x0;
	ld.global.v4.b32 { %r170, %r171, %r172, %r173 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs113, %rs114}, %r170;
	mov.b32 	{%rs115, %rs116}, %r171;
	mov.b32 	{%rs117, %rs118}, %r172;
	mov.b32 	{%rs119, %rs120}, %r173;
	// begin inline asm
	mov.u32 %r174, 0x0;
	mov.u32 %r175, 0x0;
	mov.u32 %r176, 0x0;
	mov.u32 %r177, 0x0;
	ld.global.v4.b32 { %r174, %r175, %r176, %r177 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs121, %rs122}, %r174;
	mov.b32 	{%rs123, %rs124}, %r175;
	mov.b32 	{%rs125, %rs126}, %r176;
	mov.b32 	{%rs127, %rs128}, %r177;
	// begin inline asm
	cvt.f32.bf16 %r178, %rs113;
	// end inline asm
	mov.b32 	%f113, %r178;
	// begin inline asm
	cvt.f32.bf16 %r179, %rs114;
	// end inline asm
	mov.b32 	%f114, %r179;
	// begin inline asm
	cvt.f32.bf16 %r180, %rs115;
	// end inline asm
	mov.b32 	%f115, %r180;
	// begin inline asm
	cvt.f32.bf16 %r181, %rs116;
	// end inline asm
	mov.b32 	%f116, %r181;
	// begin inline asm
	cvt.f32.bf16 %r182, %rs117;
	// end inline asm
	mov.b32 	%f117, %r182;
	// begin inline asm
	cvt.f32.bf16 %r183, %rs118;
	// end inline asm
	mov.b32 	%f118, %r183;
	// begin inline asm
	cvt.f32.bf16 %r184, %rs119;
	// end inline asm
	mov.b32 	%f119, %r184;
	// begin inline asm
	cvt.f32.bf16 %r185, %rs120;
	// end inline asm
	mov.b32 	%f120, %r185;
	// begin inline asm
	cvt.f32.bf16 %r186, %rs121;
	// end inline asm
	mov.b32 	%f121, %r186;
	// begin inline asm
	cvt.f32.bf16 %r187, %rs122;
	// end inline asm
	mov.b32 	%f122, %r187;
	// begin inline asm
	cvt.f32.bf16 %r188, %rs123;
	// end inline asm
	mov.b32 	%f123, %r188;
	// begin inline asm
	cvt.f32.bf16 %r189, %rs124;
	// end inline asm
	mov.b32 	%f124, %r189;
	// begin inline asm
	cvt.f32.bf16 %r190, %rs125;
	// end inline asm
	mov.b32 	%f125, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs126;
	// end inline asm
	mov.b32 	%f126, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs127;
	// end inline asm
	mov.b32 	%f127, %r192;
	// begin inline asm
	cvt.f32.bf16 %r193, %rs128;
	// end inline asm
	mov.b32 	%f128, %r193;
	add.s64 	%rd17, %rd1, 8192;
	add.s64 	%rd18, %rd1, 9216;
	// begin inline asm
	mov.u32 %r194, 0x0;
	mov.u32 %r195, 0x0;
	mov.u32 %r196, 0x0;
	mov.u32 %r197, 0x0;
	ld.global.v4.b32 { %r194, %r195, %r196, %r197 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	{%rs129, %rs130}, %r194;
	mov.b32 	{%rs131, %rs132}, %r195;
	mov.b32 	{%rs133, %rs134}, %r196;
	mov.b32 	{%rs135, %rs136}, %r197;
	// begin inline asm
	mov.u32 %r198, 0x0;
	mov.u32 %r199, 0x0;
	mov.u32 %r200, 0x0;
	mov.u32 %r201, 0x0;
	ld.global.v4.b32 { %r198, %r199, %r200, %r201 }, [ %rd18 + 0 ];
	// end inline asm
	mov.b32 	{%rs137, %rs138}, %r198;
	mov.b32 	{%rs139, %rs140}, %r199;
	mov.b32 	{%rs141, %rs142}, %r200;
	mov.b32 	{%rs143, %rs144}, %r201;
	// begin inline asm
	cvt.f32.bf16 %r202, %rs129;
	// end inline asm
	mov.b32 	%f129, %r202;
	// begin inline asm
	cvt.f32.bf16 %r203, %rs130;
	// end inline asm
	mov.b32 	%f130, %r203;
	// begin inline asm
	cvt.f32.bf16 %r204, %rs131;
	// end inline asm
	mov.b32 	%f131, %r204;
	// begin inline asm
	cvt.f32.bf16 %r205, %rs132;
	// end inline asm
	mov.b32 	%f132, %r205;
	// begin inline asm
	cvt.f32.bf16 %r206, %rs133;
	// end inline asm
	mov.b32 	%f133, %r206;
	// begin inline asm
	cvt.f32.bf16 %r207, %rs134;
	// end inline asm
	mov.b32 	%f134, %r207;
	// begin inline asm
	cvt.f32.bf16 %r208, %rs135;
	// end inline asm
	mov.b32 	%f135, %r208;
	// begin inline asm
	cvt.f32.bf16 %r209, %rs136;
	// end inline asm
	mov.b32 	%f136, %r209;
	// begin inline asm
	cvt.f32.bf16 %r210, %rs137;
	// end inline asm
	mov.b32 	%f137, %r210;
	// begin inline asm
	cvt.f32.bf16 %r211, %rs138;
	// end inline asm
	mov.b32 	%f138, %r211;
	// begin inline asm
	cvt.f32.bf16 %r212, %rs139;
	// end inline asm
	mov.b32 	%f139, %r212;
	// begin inline asm
	cvt.f32.bf16 %r213, %rs140;
	// end inline asm
	mov.b32 	%f140, %r213;
	// begin inline asm
	cvt.f32.bf16 %r214, %rs141;
	// end inline asm
	mov.b32 	%f141, %r214;
	// begin inline asm
	cvt.f32.bf16 %r215, %rs142;
	// end inline asm
	mov.b32 	%f142, %r215;
	// begin inline asm
	cvt.f32.bf16 %r216, %rs143;
	// end inline asm
	mov.b32 	%f143, %r216;
	// begin inline asm
	cvt.f32.bf16 %r217, %rs144;
	// end inline asm
	mov.b32 	%f144, %r217;
	add.s64 	%rd52, %rd37, %rd47;
	add.s64 	%rd19, %rd52, %rd45;
	add.s64 	%rd20, %rd19, 1024;
	// begin inline asm
	mov.u32 %r218, 0x0;
	mov.u32 %r219, 0x0;
	mov.u32 %r220, 0x0;
	mov.u32 %r221, 0x0;
	ld.global.v4.b32 { %r218, %r219, %r220, %r221 }, [ %rd19 + 0 ];
	// end inline asm
	mov.b32 	{%rs145, %rs146}, %r218;
	mov.b32 	{%rs147, %rs148}, %r219;
	mov.b32 	{%rs149, %rs150}, %r220;
	mov.b32 	{%rs151, %rs152}, %r221;
	// begin inline asm
	mov.u32 %r222, 0x0;
	mov.u32 %r223, 0x0;
	mov.u32 %r224, 0x0;
	mov.u32 %r225, 0x0;
	ld.global.v4.b32 { %r222, %r223, %r224, %r225 }, [ %rd20 + 0 ];
	// end inline asm
	mov.b32 	{%rs153, %rs154}, %r222;
	mov.b32 	{%rs155, %rs156}, %r223;
	mov.b32 	{%rs157, %rs158}, %r224;
	mov.b32 	{%rs159, %rs160}, %r225;
	// begin inline asm
	cvt.f32.bf16 %r226, %rs145;
	// end inline asm
	mov.b32 	%f145, %r226;
	// begin inline asm
	cvt.f32.bf16 %r227, %rs146;
	// end inline asm
	mov.b32 	%f146, %r227;
	// begin inline asm
	cvt.f32.bf16 %r228, %rs147;
	// end inline asm
	mov.b32 	%f147, %r228;
	// begin inline asm
	cvt.f32.bf16 %r229, %rs148;
	// end inline asm
	mov.b32 	%f148, %r229;
	// begin inline asm
	cvt.f32.bf16 %r230, %rs149;
	// end inline asm
	mov.b32 	%f149, %r230;
	// begin inline asm
	cvt.f32.bf16 %r231, %rs150;
	// end inline asm
	mov.b32 	%f150, %r231;
	// begin inline asm
	cvt.f32.bf16 %r232, %rs151;
	// end inline asm
	mov.b32 	%f151, %r232;
	// begin inline asm
	cvt.f32.bf16 %r233, %rs152;
	// end inline asm
	mov.b32 	%f152, %r233;
	// begin inline asm
	cvt.f32.bf16 %r234, %rs153;
	// end inline asm
	mov.b32 	%f153, %r234;
	// begin inline asm
	cvt.f32.bf16 %r235, %rs154;
	// end inline asm
	mov.b32 	%f154, %r235;
	// begin inline asm
	cvt.f32.bf16 %r236, %rs155;
	// end inline asm
	mov.b32 	%f155, %r236;
	// begin inline asm
	cvt.f32.bf16 %r237, %rs156;
	// end inline asm
	mov.b32 	%f156, %r237;
	// begin inline asm
	cvt.f32.bf16 %r238, %rs157;
	// end inline asm
	mov.b32 	%f157, %r238;
	// begin inline asm
	cvt.f32.bf16 %r239, %rs158;
	// end inline asm
	mov.b32 	%f158, %r239;
	// begin inline asm
	cvt.f32.bf16 %r240, %rs159;
	// end inline asm
	mov.b32 	%f159, %r240;
	// begin inline asm
	cvt.f32.bf16 %r241, %rs160;
	// end inline asm
	mov.b32 	%f160, %r241;
	add.rn.f32 	%f161, %f129, %f145;
	add.rn.f32 	%f162, %f130, %f146;
	add.rn.f32 	%f163, %f131, %f147;
	add.rn.f32 	%f164, %f132, %f148;
	add.rn.f32 	%f165, %f133, %f149;
	add.rn.f32 	%f166, %f134, %f150;
	add.rn.f32 	%f167, %f135, %f151;
	add.rn.f32 	%f168, %f136, %f152;
	add.rn.f32 	%f169, %f137, %f153;
	add.rn.f32 	%f170, %f138, %f154;
	add.rn.f32 	%f171, %f139, %f155;
	add.rn.f32 	%f172, %f140, %f156;
	add.rn.f32 	%f173, %f141, %f157;
	add.rn.f32 	%f174, %f142, %f158;
	add.rn.f32 	%f175, %f143, %f159;
	add.rn.f32 	%f176, %f144, %f160;
	add.rn.f32 	%f177, %f113, %f161;
	add.rn.f32 	%f178, %f114, %f162;
	add.rn.f32 	%f179, %f115, %f163;
	add.rn.f32 	%f180, %f116, %f164;
	add.rn.f32 	%f181, %f117, %f165;
	add.rn.f32 	%f182, %f118, %f166;
	add.rn.f32 	%f183, %f119, %f167;
	add.rn.f32 	%f184, %f120, %f168;
	add.rn.f32 	%f185, %f121, %f169;
	add.rn.f32 	%f186, %f122, %f170;
	add.rn.f32 	%f187, %f123, %f171;
	add.rn.f32 	%f188, %f124, %f172;
	add.rn.f32 	%f189, %f125, %f173;
	add.rn.f32 	%f190, %f126, %f174;
	add.rn.f32 	%f191, %f127, %f175;
	add.rn.f32 	%f192, %f128, %f176;
	add.rn.f32 	%f193, %f97, %f177;
	add.rn.f32 	%f194, %f98, %f178;
	add.rn.f32 	%f195, %f99, %f179;
	add.rn.f32 	%f196, %f100, %f180;
	add.rn.f32 	%f197, %f101, %f181;
	add.rn.f32 	%f198, %f102, %f182;
	add.rn.f32 	%f199, %f103, %f183;
	add.rn.f32 	%f200, %f104, %f184;
	add.rn.f32 	%f201, %f105, %f185;
	add.rn.f32 	%f202, %f106, %f186;
	add.rn.f32 	%f203, %f107, %f187;
	add.rn.f32 	%f204, %f108, %f188;
	add.rn.f32 	%f205, %f109, %f189;
	add.rn.f32 	%f206, %f110, %f190;
	add.rn.f32 	%f207, %f111, %f191;
	add.rn.f32 	%f208, %f112, %f192;
	add.rn.f32 	%f209, %f81, %f193;
	add.rn.f32 	%f210, %f82, %f194;
	add.rn.f32 	%f211, %f83, %f195;
	add.rn.f32 	%f212, %f84, %f196;
	add.rn.f32 	%f213, %f85, %f197;
	add.rn.f32 	%f214, %f86, %f198;
	add.rn.f32 	%f215, %f87, %f199;
	add.rn.f32 	%f216, %f88, %f200;
	add.rn.f32 	%f217, %f89, %f201;
	add.rn.f32 	%f218, %f90, %f202;
	add.rn.f32 	%f219, %f91, %f203;
	add.rn.f32 	%f220, %f92, %f204;
	add.rn.f32 	%f221, %f93, %f205;
	add.rn.f32 	%f222, %f94, %f206;
	add.rn.f32 	%f223, %f95, %f207;
	add.rn.f32 	%f224, %f96, %f208;
	add.rn.f32 	%f225, %f65, %f209;
	add.rn.f32 	%f226, %f66, %f210;
	add.rn.f32 	%f227, %f67, %f211;
	add.rn.f32 	%f228, %f68, %f212;
	add.rn.f32 	%f229, %f69, %f213;
	add.rn.f32 	%f230, %f70, %f214;
	add.rn.f32 	%f231, %f71, %f215;
	add.rn.f32 	%f232, %f72, %f216;
	add.rn.f32 	%f233, %f73, %f217;
	add.rn.f32 	%f234, %f74, %f218;
	add.rn.f32 	%f235, %f75, %f219;
	add.rn.f32 	%f236, %f76, %f220;
	add.rn.f32 	%f237, %f77, %f221;
	add.rn.f32 	%f238, %f78, %f222;
	add.rn.f32 	%f239, %f79, %f223;
	add.rn.f32 	%f240, %f80, %f224;
	add.rn.f32 	%f241, %f49, %f225;
	add.rn.f32 	%f242, %f50, %f226;
	add.rn.f32 	%f243, %f51, %f227;
	add.rn.f32 	%f244, %f52, %f228;
	add.rn.f32 	%f245, %f53, %f229;
	add.rn.f32 	%f246, %f54, %f230;
	add.rn.f32 	%f247, %f55, %f231;
	add.rn.f32 	%f248, %f56, %f232;
	add.rn.f32 	%f249, %f57, %f233;
	add.rn.f32 	%f250, %f58, %f234;
	add.rn.f32 	%f251, %f59, %f235;
	add.rn.f32 	%f252, %f60, %f236;
	add.rn.f32 	%f253, %f61, %f237;
	add.rn.f32 	%f254, %f62, %f238;
	add.rn.f32 	%f255, %f63, %f239;
	add.rn.f32 	%f256, %f64, %f240;
	add.rn.f32 	%f257, %f33, %f241;
	add.rn.f32 	%f258, %f34, %f242;
	add.rn.f32 	%f259, %f35, %f243;
	add.rn.f32 	%f260, %f36, %f244;
	add.rn.f32 	%f261, %f37, %f245;
	add.rn.f32 	%f262, %f38, %f246;
	add.rn.f32 	%f263, %f39, %f247;
	add.rn.f32 	%f264, %f40, %f248;
	add.rn.f32 	%f265, %f41, %f249;
	add.rn.f32 	%f266, %f42, %f250;
	add.rn.f32 	%f267, %f43, %f251;
	add.rn.f32 	%f268, %f44, %f252;
	add.rn.f32 	%f269, %f45, %f253;
	add.rn.f32 	%f270, %f46, %f254;
	add.rn.f32 	%f271, %f47, %f255;
	add.rn.f32 	%f272, %f48, %f256;
	add.rn.f32 	%f273, %f17, %f257;
	add.rn.f32 	%f274, %f18, %f258;
	add.rn.f32 	%f275, %f19, %f259;
	add.rn.f32 	%f276, %f20, %f260;
	add.rn.f32 	%f277, %f21, %f261;
	add.rn.f32 	%f278, %f22, %f262;
	add.rn.f32 	%f279, %f23, %f263;
	add.rn.f32 	%f280, %f24, %f264;
	add.rn.f32 	%f281, %f25, %f265;
	add.rn.f32 	%f282, %f26, %f266;
	add.rn.f32 	%f283, %f27, %f267;
	add.rn.f32 	%f284, %f28, %f268;
	add.rn.f32 	%f285, %f29, %f269;
	add.rn.f32 	%f286, %f30, %f270;
	add.rn.f32 	%f287, %f31, %f271;
	add.rn.f32 	%f288, %f32, %f272;
	add.rn.f32 	%f289, %f1, %f273;
	add.rn.f32 	%f290, %f2, %f274;
	add.rn.f32 	%f291, %f3, %f275;
	add.rn.f32 	%f292, %f4, %f276;
	add.rn.f32 	%f293, %f5, %f277;
	add.rn.f32 	%f294, %f6, %f278;
	add.rn.f32 	%f295, %f7, %f279;
	add.rn.f32 	%f296, %f8, %f280;
	add.rn.f32 	%f297, %f9, %f281;
	add.rn.f32 	%f298, %f10, %f282;
	add.rn.f32 	%f299, %f11, %f283;
	add.rn.f32 	%f300, %f12, %f284;
	add.rn.f32 	%f301, %f13, %f285;
	add.rn.f32 	%f302, %f14, %f286;
	add.rn.f32 	%f303, %f15, %f287;
	add.rn.f32 	%f304, %f16, %f288;
	mul.rn.f32 	%f305, %f289, %f289;
	mul.rn.f32 	%f306, %f290, %f290;
	mul.rn.f32 	%f307, %f291, %f291;
	mul.rn.f32 	%f308, %f292, %f292;
	mul.rn.f32 	%f309, %f293, %f293;
	mul.rn.f32 	%f310, %f294, %f294;
	mul.rn.f32 	%f311, %f295, %f295;
	mul.rn.f32 	%f312, %f296, %f296;
	mul.rn.f32 	%f313, %f297, %f297;
	mul.rn.f32 	%f314, %f298, %f298;
	mul.rn.f32 	%f315, %f299, %f299;
	mul.rn.f32 	%f316, %f300, %f300;
	mul.rn.f32 	%f317, %f301, %f301;
	mul.rn.f32 	%f318, %f302, %f302;
	mul.rn.f32 	%f319, %f303, %f303;
	mul.rn.f32 	%f320, %f304, %f304;
	add.rn.f32 	%f321, %f305, %f306;
	add.rn.f32 	%f322, %f321, %f307;
	add.rn.f32 	%f323, %f322, %f308;
	add.rn.f32 	%f324, %f323, %f309;
	add.rn.f32 	%f325, %f324, %f310;
	add.rn.f32 	%f326, %f325, %f311;
	add.rn.f32 	%f327, %f326, %f312;
	add.rn.f32 	%f328, %f327, %f313;
	add.rn.f32 	%f329, %f328, %f314;
	add.rn.f32 	%f330, %f329, %f315;
	add.rn.f32 	%f331, %f330, %f316;
	add.rn.f32 	%f332, %f331, %f317;
	add.rn.f32 	%f333, %f332, %f318;
	add.rn.f32 	%f334, %f333, %f319;
	add.rn.f32 	%f335, %f334, %f320;
	mov.b32 	%r303, %f335;
	shfl.sync.bfly.b32	%r304, %r303, 16, 31, -1;
	mov.b32 	%f336, %r304;
	add.rn.f32 	%f337, %f335, %f336;
	mov.b32 	%r305, %f337;
	shfl.sync.bfly.b32	%r306, %r305, 8, 31, -1;
	mov.b32 	%f338, %r306;
	add.rn.f32 	%f339, %f337, %f338;
	mov.b32 	%r307, %f339;
	shfl.sync.bfly.b32	%r308, %r307, 4, 31, -1;
	mov.b32 	%f340, %r308;
	add.rn.f32 	%f341, %f339, %f340;
	mov.b32 	%r309, %f341;
	shfl.sync.bfly.b32	%r310, %r309, 2, 31, -1;
	mov.b32 	%f342, %r310;
	add.rn.f32 	%f343, %f341, %f342;
	mov.b32 	%r311, %f343;
	shfl.sync.bfly.b32	%r312, %r311, 1, 31, -1;
	mov.b32 	%f344, %r312;
	add.rn.f32 	%f345, %f343, %f344;
	setp.eq.s32 	%p1, %r298, 0;
	shr.u32 	%r313, %r297, 3;
	and.b32  	%r314, %r313, 4;
	cvt.u64.u32 	%rd53, %r314;
	mov.u64 	%rd54, global_smem;
	add.s64 	%rd55, %rd54, %rd53;
	mov.b32 	%r243, %f345;
	cvt.u32.u64 	%r242, %rd55;
	// begin inline asm
	@%p1 st.shared.b32 [ %r242 + 0 ], %r243;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r297, 2;
	shl.b32 	%r315, %r297, 2;
	cvt.u64.u32 	%rd56, %r315;
	add.s64 	%rd57, %rd54, %rd56;
	cvt.u32.u64 	%r245, %rd57;
	// begin inline asm
	@%p2 ld.shared.b32 %r244, [ %r245 + 0 ];
	// end inline asm
	mov.b32 	%f346, %r244;
	shfl.sync.bfly.b32	%r316, %r244, 1, 31, -1;
	mov.b32 	%f347, %r316;
	add.rn.f32 	%f348, %f346, %f347;
	setp.eq.s32 	%p3, %r297, 0;
	mov.b32 	%r247, %f348;
	// begin inline asm
	@%p3 st.shared.b32 [ %r245 + 0 ], %r247;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f349, [global_smem];
	mul.rn.f32 	%f350, %f349, 0f3A800000;
	// begin inline asm
	mov.u32 %r248, 0x0;
	ld.global.b32 { %r248 }, [ %rd21 + 0 ];
	// end inline asm
	mov.b32 	%f351, %r248;
	add.rn.f32 	%f352, %f350, %f351;
	rsqrt.approx.f32 	%f353, %f352;
	mul.rn.f32 	%f354, %f289, %f353;
	mul.rn.f32 	%f355, %f290, %f353;
	mul.rn.f32 	%f356, %f291, %f353;
	mul.rn.f32 	%f357, %f292, %f353;
	mul.rn.f32 	%f358, %f293, %f353;
	mul.rn.f32 	%f359, %f294, %f353;
	mul.rn.f32 	%f360, %f295, %f353;
	mul.rn.f32 	%f361, %f296, %f353;
	mul.rn.f32 	%f362, %f297, %f353;
	mul.rn.f32 	%f363, %f298, %f353;
	mul.rn.f32 	%f364, %f299, %f353;
	mul.rn.f32 	%f365, %f300, %f353;
	mul.rn.f32 	%f366, %f301, %f353;
	mul.rn.f32 	%f367, %f302, %f353;
	mul.rn.f32 	%f368, %f303, %f353;
	mul.rn.f32 	%f369, %f304, %f353;
	add.s64 	%rd22, %rd42, %rd45;
	add.s64 	%rd23, %rd22, 1024;
	// begin inline asm
	mov.u32 %r249, 0x0;
	mov.u32 %r250, 0x0;
	mov.u32 %r251, 0x0;
	mov.u32 %r252, 0x0;
	ld.global.v4.b32 { %r249, %r250, %r251, %r252 }, [ %rd22 + 0 ];
	// end inline asm
	mov.b32 	{%rs161, %rs162}, %r249;
	mov.b32 	{%rs163, %rs164}, %r250;
	mov.b32 	{%rs165, %rs166}, %r251;
	mov.b32 	{%rs167, %rs168}, %r252;
	// begin inline asm
	mov.u32 %r253, 0x0;
	mov.u32 %r254, 0x0;
	mov.u32 %r255, 0x0;
	mov.u32 %r256, 0x0;
	ld.global.v4.b32 { %r253, %r254, %r255, %r256 }, [ %rd23 + 0 ];
	// end inline asm
	mov.b32 	{%rs169, %rs170}, %r253;
	mov.b32 	{%rs171, %rs172}, %r254;
	mov.b32 	{%rs173, %rs174}, %r255;
	mov.b32 	{%rs175, %rs176}, %r256;
	// begin inline asm
	cvt.f32.bf16 %r257, %rs161;
	// end inline asm
	mov.b32 	%f370, %r257;
	// begin inline asm
	cvt.f32.bf16 %r258, %rs162;
	// end inline asm
	mov.b32 	%f371, %r258;
	// begin inline asm
	cvt.f32.bf16 %r259, %rs163;
	// end inline asm
	mov.b32 	%f372, %r259;
	// begin inline asm
	cvt.f32.bf16 %r260, %rs164;
	// end inline asm
	mov.b32 	%f373, %r260;
	// begin inline asm
	cvt.f32.bf16 %r261, %rs165;
	// end inline asm
	mov.b32 	%f374, %r261;
	// begin inline asm
	cvt.f32.bf16 %r262, %rs166;
	// end inline asm
	mov.b32 	%f375, %r262;
	// begin inline asm
	cvt.f32.bf16 %r263, %rs167;
	// end inline asm
	mov.b32 	%f376, %r263;
	// begin inline asm
	cvt.f32.bf16 %r264, %rs168;
	// end inline asm
	mov.b32 	%f377, %r264;
	// begin inline asm
	cvt.f32.bf16 %r265, %rs169;
	// end inline asm
	mov.b32 	%f378, %r265;
	// begin inline asm
	cvt.f32.bf16 %r266, %rs170;
	// end inline asm
	mov.b32 	%f379, %r266;
	// begin inline asm
	cvt.f32.bf16 %r267, %rs171;
	// end inline asm
	mov.b32 	%f380, %r267;
	// begin inline asm
	cvt.f32.bf16 %r268, %rs172;
	// end inline asm
	mov.b32 	%f381, %r268;
	// begin inline asm
	cvt.f32.bf16 %r269, %rs173;
	// end inline asm
	mov.b32 	%f382, %r269;
	// begin inline asm
	cvt.f32.bf16 %r270, %rs174;
	// end inline asm
	mov.b32 	%f383, %r270;
	// begin inline asm
	cvt.f32.bf16 %r271, %rs175;
	// end inline asm
	mov.b32 	%f384, %r271;
	// begin inline asm
	cvt.f32.bf16 %r272, %rs176;
	// end inline asm
	mov.b32 	%f385, %r272;
	mul.rn.f32 	%f386, %f354, %f370;
	mul.rn.f32 	%f387, %f355, %f371;
	mul.rn.f32 	%f388, %f356, %f372;
	mul.rn.f32 	%f389, %f357, %f373;
	mul.rn.f32 	%f390, %f358, %f374;
	mul.rn.f32 	%f391, %f359, %f375;
	mul.rn.f32 	%f392, %f360, %f376;
	mul.rn.f32 	%f393, %f361, %f377;
	mul.rn.f32 	%f394, %f362, %f378;
	mul.rn.f32 	%f395, %f363, %f379;
	mul.rn.f32 	%f396, %f364, %f380;
	mul.rn.f32 	%f397, %f365, %f381;
	mul.rn.f32 	%f398, %f366, %f382;
	mul.rn.f32 	%f399, %f367, %f383;
	mul.rn.f32 	%f400, %f368, %f384;
	mul.rn.f32 	%f401, %f369, %f385;
	mov.b32 	%r273, %f386;
	// begin inline asm
	cvt.rn.bf16.f32 %rs177, %r273;
	// end inline asm
	mov.b32 	%r274, %f387;
	// begin inline asm
	cvt.rn.bf16.f32 %rs178, %r274;
	// end inline asm
	mov.b32 	%r275, %f388;
	// begin inline asm
	cvt.rn.bf16.f32 %rs179, %r275;
	// end inline asm
	mov.b32 	%r276, %f389;
	// begin inline asm
	cvt.rn.bf16.f32 %rs180, %r276;
	// end inline asm
	mov.b32 	%r277, %f390;
	// begin inline asm
	cvt.rn.bf16.f32 %rs181, %r277;
	// end inline asm
	mov.b32 	%r278, %f391;
	// begin inline asm
	cvt.rn.bf16.f32 %rs182, %r278;
	// end inline asm
	mov.b32 	%r279, %f392;
	// begin inline asm
	cvt.rn.bf16.f32 %rs183, %r279;
	// end inline asm
	mov.b32 	%r280, %f393;
	// begin inline asm
	cvt.rn.bf16.f32 %rs184, %r280;
	// end inline asm
	mov.b32 	%r281, %f394;
	// begin inline asm
	cvt.rn.bf16.f32 %rs185, %r281;
	// end inline asm
	mov.b32 	%r282, %f395;
	// begin inline asm
	cvt.rn.bf16.f32 %rs186, %r282;
	// end inline asm
	mov.b32 	%r283, %f396;
	// begin inline asm
	cvt.rn.bf16.f32 %rs187, %r283;
	// end inline asm
	mov.b32 	%r284, %f397;
	// begin inline asm
	cvt.rn.bf16.f32 %rs188, %r284;
	// end inline asm
	mov.b32 	%r285, %f398;
	// begin inline asm
	cvt.rn.bf16.f32 %rs189, %r285;
	// end inline asm
	mov.b32 	%r286, %f399;
	// begin inline asm
	cvt.rn.bf16.f32 %rs190, %r286;
	// end inline asm
	mov.b32 	%r287, %f400;
	// begin inline asm
	cvt.rn.bf16.f32 %rs191, %r287;
	// end inline asm
	mov.b32 	%r288, %f401;
	// begin inline asm
	cvt.rn.bf16.f32 %rs192, %r288;
	// end inline asm
	add.s64 	%rd58, %rd28, %rd47;
	add.s64 	%rd24, %rd58, %rd45;
	add.s64 	%rd25, %rd24, 1024;
	mov.b32 	%r289, {%rs177, %rs178};
	mov.b32 	%r290, {%rs179, %rs180};
	mov.b32 	%r291, {%rs181, %rs182};
	mov.b32 	%r292, {%rs183, %rs184};
	// begin inline asm
	st.global.v4.b32 [ %rd24 + 0 ], { %r289, %r290, %r291, %r292 };
	// end inline asm
	mov.b32 	%r293, {%rs185, %rs186};
	mov.b32 	%r294, {%rs187, %rs188};
	mov.b32 	%r295, {%rs189, %rs190};
	mov.b32 	%r296, {%rs191, %rs192};
	// begin inline asm
	st.global.v4.b32 [ %rd25 + 0 ], { %r293, %r294, %r295, %r296 };
	// end inline asm
	ret;

}
	// .globl	fusion_79
.visible .entry fusion_79(
	.param .u64 .ptr .align 16 fusion_79_param_0,
	.param .u64 .ptr .align 128 fusion_79_param_1,
	.param .u64 .ptr .align 16 fusion_79_param_2,
	.param .u64 .ptr .align 128 fusion_79_param_3,
	.param .u64 .ptr .align 128 fusion_79_param_4,
	.param .u64 .ptr .align 128 fusion_79_param_5,
	.param .u64 .ptr .align 128 fusion_79_param_6,
	.param .u64 .ptr .align 128 fusion_79_param_7,
	.param .u64 .ptr .align 128 fusion_79_param_8,
	.param .u64 .ptr .align 128 fusion_79_param_9
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<209>;
	.reg .b32 	%r<341>;
	.reg .f32 	%f<434>;
	.reg .b64 	%rd<64>;

	ld.param.u64 	%rd28, [fusion_79_param_0];
	ld.param.u64 	%rd29, [fusion_79_param_9];
	cvta.to.global.u64 	%rd30, %rd29;
	ld.param.u64 	%rd31, [fusion_79_param_1];
	ld.param.u64 	%rd32, [fusion_79_param_8];
	cvta.to.global.u64 	%rd33, %rd32;
	ld.param.u64 	%rd34, [fusion_79_param_2];
	ld.param.u64 	%rd35, [fusion_79_param_7];
	cvta.to.global.u64 	%rd36, %rd35;
	ld.param.u64 	%rd37, [fusion_79_param_3];
	ld.param.u64 	%rd38, [fusion_79_param_6];
	cvta.to.global.u64 	%rd39, %rd38;
	ld.param.u64 	%rd40, [fusion_79_param_4];
	ld.param.u64 	%rd41, [fusion_79_param_5];
	cvta.to.global.u64 	%rd42, %rd41;
	cvta.to.global.u64 	%rd43, %rd40;
	cvta.to.global.u64 	%rd44, %rd37;
	cvta.to.global.u64 	%rd45, %rd34;
	cvta.to.global.u64 	%rd46, %rd31;
	cvta.to.global.u64 	%rd23, %rd28;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd47, %r1, 1024;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd49, %rd46, %rd48;
	mov.u32 	%r321, %tid.x;
	and.b32  	%r322, %r321, 31;
	shl.b32 	%r323, %r321, 3;
	and.b32  	%r324, %r323, 248;
	setp.lt.u32 	%p4, %r321, 32;
	selp.b32 	%r325, 0, 256, %p4;
	or.b32  	%r326, %r324, %r325;
	mul.wide.u32 	%rd50, %r326, 2;
	add.s64 	%rd1, %rd49, %rd50;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd51, %r1, 10240;
	add.s64 	%rd52, %rd43, %rd51;
	add.s64 	%rd3, %rd52, %rd50;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd53, %rd42, %rd48;
	add.s64 	%rd5, %rd53, %rd50;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd7, %rd3, 2048;
	add.s64 	%rd8, %rd3, 3072;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd54, %rd44, %rd48;
	add.s64 	%rd9, %rd54, %rd50;
	add.s64 	%rd10, %rd9, 1024;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd11, %rd3, 4096;
	add.s64 	%rd12, %rd3, 5120;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.s64 	%rd55, %rd33, %rd48;
	add.s64 	%rd13, %rd55, %rd50;
	add.s64 	%rd14, %rd13, 1024;
	// begin inline asm
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	ld.global.v4.b32 { %r146, %r147, %r148, %r149 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r146;
	mov.b32 	{%rs99, %rs100}, %r147;
	mov.b32 	{%rs101, %rs102}, %r148;
	mov.b32 	{%rs103, %rs104}, %r149;
	// begin inline asm
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	ld.global.v4.b32 { %r150, %r151, %r152, %r153 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r150;
	mov.b32 	{%rs107, %rs108}, %r151;
	mov.b32 	{%rs109, %rs110}, %r152;
	mov.b32 	{%rs111, %rs112}, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs97;
	// end inline asm
	mov.b32 	%f97, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs98;
	// end inline asm
	mov.b32 	%f98, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs99;
	// end inline asm
	mov.b32 	%f99, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs100;
	// end inline asm
	mov.b32 	%f100, %r157;
	// begin inline asm
	cvt.f32.bf16 %r158, %rs101;
	// end inline asm
	mov.b32 	%f101, %r158;
	// begin inline asm
	cvt.f32.bf16 %r159, %rs102;
	// end inline asm
	mov.b32 	%f102, %r159;
	// begin inline asm
	cvt.f32.bf16 %r160, %rs103;
	// end inline asm
	mov.b32 	%f103, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs104;
	// end inline asm
	mov.b32 	%f104, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs105;
	// end inline asm
	mov.b32 	%f105, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs106;
	// end inline asm
	mov.b32 	%f106, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs107;
	// end inline asm
	mov.b32 	%f107, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs108;
	// end inline asm
	mov.b32 	%f108, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs109;
	// end inline asm
	mov.b32 	%f109, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs110;
	// end inline asm
	mov.b32 	%f110, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs111;
	// end inline asm
	mov.b32 	%f111, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs112;
	// end inline asm
	mov.b32 	%f112, %r169;
	add.s64 	%rd15, %rd3, 6144;
	add.s64 	%rd16, %rd3, 7168;
	// begin inline asm
	mov.u32 %r170, 0x0;
	mov.u32 %r171, 0x0;
	mov.u32 %r172, 0x0;
	mov.u32 %r173, 0x0;
	ld.global.v4.b32 { %r170, %r171, %r172, %r173 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs113, %rs114}, %r170;
	mov.b32 	{%rs115, %rs116}, %r171;
	mov.b32 	{%rs117, %rs118}, %r172;
	mov.b32 	{%rs119, %rs120}, %r173;
	// begin inline asm
	mov.u32 %r174, 0x0;
	mov.u32 %r175, 0x0;
	mov.u32 %r176, 0x0;
	mov.u32 %r177, 0x0;
	ld.global.v4.b32 { %r174, %r175, %r176, %r177 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs121, %rs122}, %r174;
	mov.b32 	{%rs123, %rs124}, %r175;
	mov.b32 	{%rs125, %rs126}, %r176;
	mov.b32 	{%rs127, %rs128}, %r177;
	// begin inline asm
	cvt.f32.bf16 %r178, %rs113;
	// end inline asm
	mov.b32 	%f113, %r178;
	// begin inline asm
	cvt.f32.bf16 %r179, %rs114;
	// end inline asm
	mov.b32 	%f114, %r179;
	// begin inline asm
	cvt.f32.bf16 %r180, %rs115;
	// end inline asm
	mov.b32 	%f115, %r180;
	// begin inline asm
	cvt.f32.bf16 %r181, %rs116;
	// end inline asm
	mov.b32 	%f116, %r181;
	// begin inline asm
	cvt.f32.bf16 %r182, %rs117;
	// end inline asm
	mov.b32 	%f117, %r182;
	// begin inline asm
	cvt.f32.bf16 %r183, %rs118;
	// end inline asm
	mov.b32 	%f118, %r183;
	// begin inline asm
	cvt.f32.bf16 %r184, %rs119;
	// end inline asm
	mov.b32 	%f119, %r184;
	// begin inline asm
	cvt.f32.bf16 %r185, %rs120;
	// end inline asm
	mov.b32 	%f120, %r185;
	// begin inline asm
	cvt.f32.bf16 %r186, %rs121;
	// end inline asm
	mov.b32 	%f121, %r186;
	// begin inline asm
	cvt.f32.bf16 %r187, %rs122;
	// end inline asm
	mov.b32 	%f122, %r187;
	// begin inline asm
	cvt.f32.bf16 %r188, %rs123;
	// end inline asm
	mov.b32 	%f123, %r188;
	// begin inline asm
	cvt.f32.bf16 %r189, %rs124;
	// end inline asm
	mov.b32 	%f124, %r189;
	// begin inline asm
	cvt.f32.bf16 %r190, %rs125;
	// end inline asm
	mov.b32 	%f125, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs126;
	// end inline asm
	mov.b32 	%f126, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs127;
	// end inline asm
	mov.b32 	%f127, %r192;
	// begin inline asm
	cvt.f32.bf16 %r193, %rs128;
	// end inline asm
	mov.b32 	%f128, %r193;
	add.s64 	%rd56, %rd36, %rd48;
	add.s64 	%rd17, %rd56, %rd50;
	add.s64 	%rd18, %rd17, 1024;
	// begin inline asm
	mov.u32 %r194, 0x0;
	mov.u32 %r195, 0x0;
	mov.u32 %r196, 0x0;
	mov.u32 %r197, 0x0;
	ld.global.v4.b32 { %r194, %r195, %r196, %r197 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	{%rs129, %rs130}, %r194;
	mov.b32 	{%rs131, %rs132}, %r195;
	mov.b32 	{%rs133, %rs134}, %r196;
	mov.b32 	{%rs135, %rs136}, %r197;
	// begin inline asm
	mov.u32 %r198, 0x0;
	mov.u32 %r199, 0x0;
	mov.u32 %r200, 0x0;
	mov.u32 %r201, 0x0;
	ld.global.v4.b32 { %r198, %r199, %r200, %r201 }, [ %rd18 + 0 ];
	// end inline asm
	mov.b32 	{%rs137, %rs138}, %r198;
	mov.b32 	{%rs139, %rs140}, %r199;
	mov.b32 	{%rs141, %rs142}, %r200;
	mov.b32 	{%rs143, %rs144}, %r201;
	// begin inline asm
	cvt.f32.bf16 %r202, %rs129;
	// end inline asm
	mov.b32 	%f129, %r202;
	// begin inline asm
	cvt.f32.bf16 %r203, %rs130;
	// end inline asm
	mov.b32 	%f130, %r203;
	// begin inline asm
	cvt.f32.bf16 %r204, %rs131;
	// end inline asm
	mov.b32 	%f131, %r204;
	// begin inline asm
	cvt.f32.bf16 %r205, %rs132;
	// end inline asm
	mov.b32 	%f132, %r205;
	// begin inline asm
	cvt.f32.bf16 %r206, %rs133;
	// end inline asm
	mov.b32 	%f133, %r206;
	// begin inline asm
	cvt.f32.bf16 %r207, %rs134;
	// end inline asm
	mov.b32 	%f134, %r207;
	// begin inline asm
	cvt.f32.bf16 %r208, %rs135;
	// end inline asm
	mov.b32 	%f135, %r208;
	// begin inline asm
	cvt.f32.bf16 %r209, %rs136;
	// end inline asm
	mov.b32 	%f136, %r209;
	// begin inline asm
	cvt.f32.bf16 %r210, %rs137;
	// end inline asm
	mov.b32 	%f137, %r210;
	// begin inline asm
	cvt.f32.bf16 %r211, %rs138;
	// end inline asm
	mov.b32 	%f138, %r211;
	// begin inline asm
	cvt.f32.bf16 %r212, %rs139;
	// end inline asm
	mov.b32 	%f139, %r212;
	// begin inline asm
	cvt.f32.bf16 %r213, %rs140;
	// end inline asm
	mov.b32 	%f140, %r213;
	// begin inline asm
	cvt.f32.bf16 %r214, %rs141;
	// end inline asm
	mov.b32 	%f141, %r214;
	// begin inline asm
	cvt.f32.bf16 %r215, %rs142;
	// end inline asm
	mov.b32 	%f142, %r215;
	// begin inline asm
	cvt.f32.bf16 %r216, %rs143;
	// end inline asm
	mov.b32 	%f143, %r216;
	// begin inline asm
	cvt.f32.bf16 %r217, %rs144;
	// end inline asm
	mov.b32 	%f144, %r217;
	add.s64 	%rd19, %rd3, 8192;
	add.s64 	%rd20, %rd3, 9216;
	// begin inline asm
	mov.u32 %r218, 0x0;
	mov.u32 %r219, 0x0;
	mov.u32 %r220, 0x0;
	mov.u32 %r221, 0x0;
	ld.global.v4.b32 { %r218, %r219, %r220, %r221 }, [ %rd19 + 0 ];
	// end inline asm
	mov.b32 	{%rs145, %rs146}, %r218;
	mov.b32 	{%rs147, %rs148}, %r219;
	mov.b32 	{%rs149, %rs150}, %r220;
	mov.b32 	{%rs151, %rs152}, %r221;
	// begin inline asm
	mov.u32 %r222, 0x0;
	mov.u32 %r223, 0x0;
	mov.u32 %r224, 0x0;
	mov.u32 %r225, 0x0;
	ld.global.v4.b32 { %r222, %r223, %r224, %r225 }, [ %rd20 + 0 ];
	// end inline asm
	mov.b32 	{%rs153, %rs154}, %r222;
	mov.b32 	{%rs155, %rs156}, %r223;
	mov.b32 	{%rs157, %rs158}, %r224;
	mov.b32 	{%rs159, %rs160}, %r225;
	// begin inline asm
	cvt.f32.bf16 %r226, %rs145;
	// end inline asm
	mov.b32 	%f145, %r226;
	// begin inline asm
	cvt.f32.bf16 %r227, %rs146;
	// end inline asm
	mov.b32 	%f146, %r227;
	// begin inline asm
	cvt.f32.bf16 %r228, %rs147;
	// end inline asm
	mov.b32 	%f147, %r228;
	// begin inline asm
	cvt.f32.bf16 %r229, %rs148;
	// end inline asm
	mov.b32 	%f148, %r229;
	// begin inline asm
	cvt.f32.bf16 %r230, %rs149;
	// end inline asm
	mov.b32 	%f149, %r230;
	// begin inline asm
	cvt.f32.bf16 %r231, %rs150;
	// end inline asm
	mov.b32 	%f150, %r231;
	// begin inline asm
	cvt.f32.bf16 %r232, %rs151;
	// end inline asm
	mov.b32 	%f151, %r232;
	// begin inline asm
	cvt.f32.bf16 %r233, %rs152;
	// end inline asm
	mov.b32 	%f152, %r233;
	// begin inline asm
	cvt.f32.bf16 %r234, %rs153;
	// end inline asm
	mov.b32 	%f153, %r234;
	// begin inline asm
	cvt.f32.bf16 %r235, %rs154;
	// end inline asm
	mov.b32 	%f154, %r235;
	// begin inline asm
	cvt.f32.bf16 %r236, %rs155;
	// end inline asm
	mov.b32 	%f155, %r236;
	// begin inline asm
	cvt.f32.bf16 %r237, %rs156;
	// end inline asm
	mov.b32 	%f156, %r237;
	// begin inline asm
	cvt.f32.bf16 %r238, %rs157;
	// end inline asm
	mov.b32 	%f157, %r238;
	// begin inline asm
	cvt.f32.bf16 %r239, %rs158;
	// end inline asm
	mov.b32 	%f158, %r239;
	// begin inline asm
	cvt.f32.bf16 %r240, %rs159;
	// end inline asm
	mov.b32 	%f159, %r240;
	// begin inline asm
	cvt.f32.bf16 %r241, %rs160;
	// end inline asm
	mov.b32 	%f160, %r241;
	add.s64 	%rd57, %rd39, %rd48;
	add.s64 	%rd21, %rd57, %rd50;
	add.s64 	%rd22, %rd21, 1024;
	// begin inline asm
	mov.u32 %r242, 0x0;
	mov.u32 %r243, 0x0;
	mov.u32 %r244, 0x0;
	mov.u32 %r245, 0x0;
	ld.global.v4.b32 { %r242, %r243, %r244, %r245 }, [ %rd21 + 0 ];
	// end inline asm
	mov.b32 	{%rs161, %rs162}, %r242;
	mov.b32 	{%rs163, %rs164}, %r243;
	mov.b32 	{%rs165, %rs166}, %r244;
	mov.b32 	{%rs167, %rs168}, %r245;
	// begin inline asm
	mov.u32 %r246, 0x0;
	mov.u32 %r247, 0x0;
	mov.u32 %r248, 0x0;
	mov.u32 %r249, 0x0;
	ld.global.v4.b32 { %r246, %r247, %r248, %r249 }, [ %rd22 + 0 ];
	// end inline asm
	mov.b32 	{%rs169, %rs170}, %r246;
	mov.b32 	{%rs171, %rs172}, %r247;
	mov.b32 	{%rs173, %rs174}, %r248;
	mov.b32 	{%rs175, %rs176}, %r249;
	// begin inline asm
	cvt.f32.bf16 %r250, %rs161;
	// end inline asm
	mov.b32 	%f161, %r250;
	// begin inline asm
	cvt.f32.bf16 %r251, %rs162;
	// end inline asm
	mov.b32 	%f162, %r251;
	// begin inline asm
	cvt.f32.bf16 %r252, %rs163;
	// end inline asm
	mov.b32 	%f163, %r252;
	// begin inline asm
	cvt.f32.bf16 %r253, %rs164;
	// end inline asm
	mov.b32 	%f164, %r253;
	// begin inline asm
	cvt.f32.bf16 %r254, %rs165;
	// end inline asm
	mov.b32 	%f165, %r254;
	// begin inline asm
	cvt.f32.bf16 %r255, %rs166;
	// end inline asm
	mov.b32 	%f166, %r255;
	// begin inline asm
	cvt.f32.bf16 %r256, %rs167;
	// end inline asm
	mov.b32 	%f167, %r256;
	// begin inline asm
	cvt.f32.bf16 %r257, %rs168;
	// end inline asm
	mov.b32 	%f168, %r257;
	// begin inline asm
	cvt.f32.bf16 %r258, %rs169;
	// end inline asm
	mov.b32 	%f169, %r258;
	// begin inline asm
	cvt.f32.bf16 %r259, %rs170;
	// end inline asm
	mov.b32 	%f170, %r259;
	// begin inline asm
	cvt.f32.bf16 %r260, %rs171;
	// end inline asm
	mov.b32 	%f171, %r260;
	// begin inline asm
	cvt.f32.bf16 %r261, %rs172;
	// end inline asm
	mov.b32 	%f172, %r261;
	// begin inline asm
	cvt.f32.bf16 %r262, %rs173;
	// end inline asm
	mov.b32 	%f173, %r262;
	// begin inline asm
	cvt.f32.bf16 %r263, %rs174;
	// end inline asm
	mov.b32 	%f174, %r263;
	// begin inline asm
	cvt.f32.bf16 %r264, %rs175;
	// end inline asm
	mov.b32 	%f175, %r264;
	// begin inline asm
	cvt.f32.bf16 %r265, %rs176;
	// end inline asm
	mov.b32 	%f176, %r265;
	add.rn.f32 	%f177, %f145, %f161;
	add.rn.f32 	%f178, %f146, %f162;
	add.rn.f32 	%f179, %f147, %f163;
	add.rn.f32 	%f180, %f148, %f164;
	add.rn.f32 	%f181, %f149, %f165;
	add.rn.f32 	%f182, %f150, %f166;
	add.rn.f32 	%f183, %f151, %f167;
	add.rn.f32 	%f184, %f152, %f168;
	add.rn.f32 	%f185, %f153, %f169;
	add.rn.f32 	%f186, %f154, %f170;
	add.rn.f32 	%f187, %f155, %f171;
	add.rn.f32 	%f188, %f156, %f172;
	add.rn.f32 	%f189, %f157, %f173;
	add.rn.f32 	%f190, %f158, %f174;
	add.rn.f32 	%f191, %f159, %f175;
	add.rn.f32 	%f192, %f160, %f176;
	add.rn.f32 	%f193, %f129, %f177;
	add.rn.f32 	%f194, %f130, %f178;
	add.rn.f32 	%f195, %f131, %f179;
	add.rn.f32 	%f196, %f132, %f180;
	add.rn.f32 	%f197, %f133, %f181;
	add.rn.f32 	%f198, %f134, %f182;
	add.rn.f32 	%f199, %f135, %f183;
	add.rn.f32 	%f200, %f136, %f184;
	add.rn.f32 	%f201, %f137, %f185;
	add.rn.f32 	%f202, %f138, %f186;
	add.rn.f32 	%f203, %f139, %f187;
	add.rn.f32 	%f204, %f140, %f188;
	add.rn.f32 	%f205, %f141, %f189;
	add.rn.f32 	%f206, %f142, %f190;
	add.rn.f32 	%f207, %f143, %f191;
	add.rn.f32 	%f208, %f144, %f192;
	add.rn.f32 	%f209, %f113, %f193;
	add.rn.f32 	%f210, %f114, %f194;
	add.rn.f32 	%f211, %f115, %f195;
	add.rn.f32 	%f212, %f116, %f196;
	add.rn.f32 	%f213, %f117, %f197;
	add.rn.f32 	%f214, %f118, %f198;
	add.rn.f32 	%f215, %f119, %f199;
	add.rn.f32 	%f216, %f120, %f200;
	add.rn.f32 	%f217, %f121, %f201;
	add.rn.f32 	%f218, %f122, %f202;
	add.rn.f32 	%f219, %f123, %f203;
	add.rn.f32 	%f220, %f124, %f204;
	add.rn.f32 	%f221, %f125, %f205;
	add.rn.f32 	%f222, %f126, %f206;
	add.rn.f32 	%f223, %f127, %f207;
	add.rn.f32 	%f224, %f128, %f208;
	add.rn.f32 	%f225, %f97, %f209;
	add.rn.f32 	%f226, %f98, %f210;
	add.rn.f32 	%f227, %f99, %f211;
	add.rn.f32 	%f228, %f100, %f212;
	add.rn.f32 	%f229, %f101, %f213;
	add.rn.f32 	%f230, %f102, %f214;
	add.rn.f32 	%f231, %f103, %f215;
	add.rn.f32 	%f232, %f104, %f216;
	add.rn.f32 	%f233, %f105, %f217;
	add.rn.f32 	%f234, %f106, %f218;
	add.rn.f32 	%f235, %f107, %f219;
	add.rn.f32 	%f236, %f108, %f220;
	add.rn.f32 	%f237, %f109, %f221;
	add.rn.f32 	%f238, %f110, %f222;
	add.rn.f32 	%f239, %f111, %f223;
	add.rn.f32 	%f240, %f112, %f224;
	add.rn.f32 	%f241, %f81, %f225;
	add.rn.f32 	%f242, %f82, %f226;
	add.rn.f32 	%f243, %f83, %f227;
	add.rn.f32 	%f244, %f84, %f228;
	add.rn.f32 	%f245, %f85, %f229;
	add.rn.f32 	%f246, %f86, %f230;
	add.rn.f32 	%f247, %f87, %f231;
	add.rn.f32 	%f248, %f88, %f232;
	add.rn.f32 	%f249, %f89, %f233;
	add.rn.f32 	%f250, %f90, %f234;
	add.rn.f32 	%f251, %f91, %f235;
	add.rn.f32 	%f252, %f92, %f236;
	add.rn.f32 	%f253, %f93, %f237;
	add.rn.f32 	%f254, %f94, %f238;
	add.rn.f32 	%f255, %f95, %f239;
	add.rn.f32 	%f256, %f96, %f240;
	add.rn.f32 	%f257, %f65, %f241;
	add.rn.f32 	%f258, %f66, %f242;
	add.rn.f32 	%f259, %f67, %f243;
	add.rn.f32 	%f260, %f68, %f244;
	add.rn.f32 	%f261, %f69, %f245;
	add.rn.f32 	%f262, %f70, %f246;
	add.rn.f32 	%f263, %f71, %f247;
	add.rn.f32 	%f264, %f72, %f248;
	add.rn.f32 	%f265, %f73, %f249;
	add.rn.f32 	%f266, %f74, %f250;
	add.rn.f32 	%f267, %f75, %f251;
	add.rn.f32 	%f268, %f76, %f252;
	add.rn.f32 	%f269, %f77, %f253;
	add.rn.f32 	%f270, %f78, %f254;
	add.rn.f32 	%f271, %f79, %f255;
	add.rn.f32 	%f272, %f80, %f256;
	add.rn.f32 	%f273, %f49, %f257;
	add.rn.f32 	%f274, %f50, %f258;
	add.rn.f32 	%f275, %f51, %f259;
	add.rn.f32 	%f276, %f52, %f260;
	add.rn.f32 	%f277, %f53, %f261;
	add.rn.f32 	%f278, %f54, %f262;
	add.rn.f32 	%f279, %f55, %f263;
	add.rn.f32 	%f280, %f56, %f264;
	add.rn.f32 	%f281, %f57, %f265;
	add.rn.f32 	%f282, %f58, %f266;
	add.rn.f32 	%f283, %f59, %f267;
	add.rn.f32 	%f284, %f60, %f268;
	add.rn.f32 	%f285, %f61, %f269;
	add.rn.f32 	%f286, %f62, %f270;
	add.rn.f32 	%f287, %f63, %f271;
	add.rn.f32 	%f288, %f64, %f272;
	add.rn.f32 	%f289, %f33, %f273;
	add.rn.f32 	%f290, %f34, %f274;
	add.rn.f32 	%f291, %f35, %f275;
	add.rn.f32 	%f292, %f36, %f276;
	add.rn.f32 	%f293, %f37, %f277;
	add.rn.f32 	%f294, %f38, %f278;
	add.rn.f32 	%f295, %f39, %f279;
	add.rn.f32 	%f296, %f40, %f280;
	add.rn.f32 	%f297, %f41, %f281;
	add.rn.f32 	%f298, %f42, %f282;
	add.rn.f32 	%f299, %f43, %f283;
	add.rn.f32 	%f300, %f44, %f284;
	add.rn.f32 	%f301, %f45, %f285;
	add.rn.f32 	%f302, %f46, %f286;
	add.rn.f32 	%f303, %f47, %f287;
	add.rn.f32 	%f304, %f48, %f288;
	add.rn.f32 	%f305, %f17, %f289;
	add.rn.f32 	%f306, %f18, %f290;
	add.rn.f32 	%f307, %f19, %f291;
	add.rn.f32 	%f308, %f20, %f292;
	add.rn.f32 	%f309, %f21, %f293;
	add.rn.f32 	%f310, %f22, %f294;
	add.rn.f32 	%f311, %f23, %f295;
	add.rn.f32 	%f312, %f24, %f296;
	add.rn.f32 	%f313, %f25, %f297;
	add.rn.f32 	%f314, %f26, %f298;
	add.rn.f32 	%f315, %f27, %f299;
	add.rn.f32 	%f316, %f28, %f300;
	add.rn.f32 	%f317, %f29, %f301;
	add.rn.f32 	%f318, %f30, %f302;
	add.rn.f32 	%f319, %f31, %f303;
	add.rn.f32 	%f320, %f32, %f304;
	add.rn.f32 	%f321, %f1, %f305;
	add.rn.f32 	%f322, %f2, %f306;
	add.rn.f32 	%f323, %f3, %f307;
	add.rn.f32 	%f324, %f4, %f308;
	add.rn.f32 	%f325, %f5, %f309;
	add.rn.f32 	%f326, %f6, %f310;
	add.rn.f32 	%f327, %f7, %f311;
	add.rn.f32 	%f328, %f8, %f312;
	add.rn.f32 	%f329, %f9, %f313;
	add.rn.f32 	%f330, %f10, %f314;
	add.rn.f32 	%f331, %f11, %f315;
	add.rn.f32 	%f332, %f12, %f316;
	add.rn.f32 	%f333, %f13, %f317;
	add.rn.f32 	%f334, %f14, %f318;
	add.rn.f32 	%f335, %f15, %f319;
	add.rn.f32 	%f336, %f16, %f320;
	mul.rn.f32 	%f337, %f321, %f321;
	mul.rn.f32 	%f338, %f322, %f322;
	mul.rn.f32 	%f339, %f323, %f323;
	mul.rn.f32 	%f340, %f324, %f324;
	mul.rn.f32 	%f341, %f325, %f325;
	mul.rn.f32 	%f342, %f326, %f326;
	mul.rn.f32 	%f343, %f327, %f327;
	mul.rn.f32 	%f344, %f328, %f328;
	mul.rn.f32 	%f345, %f329, %f329;
	mul.rn.f32 	%f346, %f330, %f330;
	mul.rn.f32 	%f347, %f331, %f331;
	mul.rn.f32 	%f348, %f332, %f332;
	mul.rn.f32 	%f349, %f333, %f333;
	mul.rn.f32 	%f350, %f334, %f334;
	mul.rn.f32 	%f351, %f335, %f335;
	mul.rn.f32 	%f352, %f336, %f336;
	add.rn.f32 	%f353, %f337, %f338;
	add.rn.f32 	%f354, %f353, %f339;
	add.rn.f32 	%f355, %f354, %f340;
	add.rn.f32 	%f356, %f355, %f341;
	add.rn.f32 	%f357, %f356, %f342;
	add.rn.f32 	%f358, %f357, %f343;
	add.rn.f32 	%f359, %f358, %f344;
	add.rn.f32 	%f360, %f359, %f345;
	add.rn.f32 	%f361, %f360, %f346;
	add.rn.f32 	%f362, %f361, %f347;
	add.rn.f32 	%f363, %f362, %f348;
	add.rn.f32 	%f364, %f363, %f349;
	add.rn.f32 	%f365, %f364, %f350;
	add.rn.f32 	%f366, %f365, %f351;
	add.rn.f32 	%f367, %f366, %f352;
	mov.b32 	%r327, %f367;
	shfl.sync.bfly.b32	%r328, %r327, 16, 31, -1;
	mov.b32 	%f368, %r328;
	add.rn.f32 	%f369, %f367, %f368;
	mov.b32 	%r329, %f369;
	shfl.sync.bfly.b32	%r330, %r329, 8, 31, -1;
	mov.b32 	%f370, %r330;
	add.rn.f32 	%f371, %f369, %f370;
	mov.b32 	%r331, %f371;
	shfl.sync.bfly.b32	%r332, %r331, 4, 31, -1;
	mov.b32 	%f372, %r332;
	add.rn.f32 	%f373, %f371, %f372;
	mov.b32 	%r333, %f373;
	shfl.sync.bfly.b32	%r334, %r333, 2, 31, -1;
	mov.b32 	%f374, %r334;
	add.rn.f32 	%f375, %f373, %f374;
	mov.b32 	%r335, %f375;
	shfl.sync.bfly.b32	%r336, %r335, 1, 31, -1;
	mov.b32 	%f376, %r336;
	add.rn.f32 	%f377, %f375, %f376;
	setp.eq.s32 	%p1, %r322, 0;
	shr.u32 	%r337, %r321, 3;
	and.b32  	%r338, %r337, 4;
	cvt.u64.u32 	%rd58, %r338;
	mov.u64 	%rd59, global_smem;
	add.s64 	%rd60, %rd59, %rd58;
	mov.b32 	%r267, %f377;
	cvt.u32.u64 	%r266, %rd60;
	// begin inline asm
	@%p1 st.shared.b32 [ %r266 + 0 ], %r267;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r321, 2;
	shl.b32 	%r339, %r321, 2;
	cvt.u64.u32 	%rd61, %r339;
	add.s64 	%rd62, %rd59, %rd61;
	cvt.u32.u64 	%r269, %rd62;
	// begin inline asm
	@%p2 ld.shared.b32 %r268, [ %r269 + 0 ];
	// end inline asm
	mov.b32 	%f378, %r268;
	shfl.sync.bfly.b32	%r340, %r268, 1, 31, -1;
	mov.b32 	%f379, %r340;
	add.rn.f32 	%f380, %f378, %f379;
	setp.eq.s32 	%p3, %r321, 0;
	mov.b32 	%r271, %f380;
	// begin inline asm
	@%p3 st.shared.b32 [ %r269 + 0 ], %r271;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f381, [global_smem];
	mul.rn.f32 	%f382, %f381, 0f3A800000;
	// begin inline asm
	mov.u32 %r272, 0x0;
	ld.global.b32 { %r272 }, [ %rd23 + 0 ];
	// end inline asm
	mov.b32 	%f383, %r272;
	add.rn.f32 	%f384, %f382, %f383;
	rsqrt.approx.f32 	%f385, %f384;
	mul.rn.f32 	%f386, %f321, %f385;
	mul.rn.f32 	%f387, %f322, %f385;
	mul.rn.f32 	%f388, %f323, %f385;
	mul.rn.f32 	%f389, %f324, %f385;
	mul.rn.f32 	%f390, %f325, %f385;
	mul.rn.f32 	%f391, %f326, %f385;
	mul.rn.f32 	%f392, %f327, %f385;
	mul.rn.f32 	%f393, %f328, %f385;
	mul.rn.f32 	%f394, %f329, %f385;
	mul.rn.f32 	%f395, %f330, %f385;
	mul.rn.f32 	%f396, %f331, %f385;
	mul.rn.f32 	%f397, %f332, %f385;
	mul.rn.f32 	%f398, %f333, %f385;
	mul.rn.f32 	%f399, %f334, %f385;
	mul.rn.f32 	%f400, %f335, %f385;
	mul.rn.f32 	%f401, %f336, %f385;
	add.s64 	%rd24, %rd45, %rd50;
	add.s64 	%rd25, %rd24, 1024;
	// begin inline asm
	mov.u32 %r273, 0x0;
	mov.u32 %r274, 0x0;
	mov.u32 %r275, 0x0;
	mov.u32 %r276, 0x0;
	ld.global.v4.b32 { %r273, %r274, %r275, %r276 }, [ %rd24 + 0 ];
	// end inline asm
	mov.b32 	{%rs177, %rs178}, %r273;
	mov.b32 	{%rs179, %rs180}, %r274;
	mov.b32 	{%rs181, %rs182}, %r275;
	mov.b32 	{%rs183, %rs184}, %r276;
	// begin inline asm
	mov.u32 %r277, 0x0;
	mov.u32 %r278, 0x0;
	mov.u32 %r279, 0x0;
	mov.u32 %r280, 0x0;
	ld.global.v4.b32 { %r277, %r278, %r279, %r280 }, [ %rd25 + 0 ];
	// end inline asm
	mov.b32 	{%rs185, %rs186}, %r277;
	mov.b32 	{%rs187, %rs188}, %r278;
	mov.b32 	{%rs189, %rs190}, %r279;
	mov.b32 	{%rs191, %rs192}, %r280;
	// begin inline asm
	cvt.f32.bf16 %r281, %rs177;
	// end inline asm
	mov.b32 	%f402, %r281;
	// begin inline asm
	cvt.f32.bf16 %r282, %rs178;
	// end inline asm
	mov.b32 	%f403, %r282;
	// begin inline asm
	cvt.f32.bf16 %r283, %rs179;
	// end inline asm
	mov.b32 	%f404, %r283;
	// begin inline asm
	cvt.f32.bf16 %r284, %rs180;
	// end inline asm
	mov.b32 	%f405, %r284;
	// begin inline asm
	cvt.f32.bf16 %r285, %rs181;
	// end inline asm
	mov.b32 	%f406, %r285;
	// begin inline asm
	cvt.f32.bf16 %r286, %rs182;
	// end inline asm
	mov.b32 	%f407, %r286;
	// begin inline asm
	cvt.f32.bf16 %r287, %rs183;
	// end inline asm
	mov.b32 	%f408, %r287;
	// begin inline asm
	cvt.f32.bf16 %r288, %rs184;
	// end inline asm
	mov.b32 	%f409, %r288;
	// begin inline asm
	cvt.f32.bf16 %r289, %rs185;
	// end inline asm
	mov.b32 	%f410, %r289;
	// begin inline asm
	cvt.f32.bf16 %r290, %rs186;
	// end inline asm
	mov.b32 	%f411, %r290;
	// begin inline asm
	cvt.f32.bf16 %r291, %rs187;
	// end inline asm
	mov.b32 	%f412, %r291;
	// begin inline asm
	cvt.f32.bf16 %r292, %rs188;
	// end inline asm
	mov.b32 	%f413, %r292;
	// begin inline asm
	cvt.f32.bf16 %r293, %rs189;
	// end inline asm
	mov.b32 	%f414, %r293;
	// begin inline asm
	cvt.f32.bf16 %r294, %rs190;
	// end inline asm
	mov.b32 	%f415, %r294;
	// begin inline asm
	cvt.f32.bf16 %r295, %rs191;
	// end inline asm
	mov.b32 	%f416, %r295;
	// begin inline asm
	cvt.f32.bf16 %r296, %rs192;
	// end inline asm
	mov.b32 	%f417, %r296;
	mul.rn.f32 	%f418, %f386, %f402;
	mul.rn.f32 	%f419, %f387, %f403;
	mul.rn.f32 	%f420, %f388, %f404;
	mul.rn.f32 	%f421, %f389, %f405;
	mul.rn.f32 	%f422, %f390, %f406;
	mul.rn.f32 	%f423, %f391, %f407;
	mul.rn.f32 	%f424, %f392, %f408;
	mul.rn.f32 	%f425, %f393, %f409;
	mul.rn.f32 	%f426, %f394, %f410;
	mul.rn.f32 	%f427, %f395, %f411;
	mul.rn.f32 	%f428, %f396, %f412;
	mul.rn.f32 	%f429, %f397, %f413;
	mul.rn.f32 	%f430, %f398, %f414;
	mul.rn.f32 	%f431, %f399, %f415;
	mul.rn.f32 	%f432, %f400, %f416;
	mul.rn.f32 	%f433, %f401, %f417;
	mov.b32 	%r297, %f418;
	// begin inline asm
	cvt.rn.bf16.f32 %rs193, %r297;
	// end inline asm
	mov.b32 	%r298, %f419;
	// begin inline asm
	cvt.rn.bf16.f32 %rs194, %r298;
	// end inline asm
	mov.b32 	%r299, %f420;
	// begin inline asm
	cvt.rn.bf16.f32 %rs195, %r299;
	// end inline asm
	mov.b32 	%r300, %f421;
	// begin inline asm
	cvt.rn.bf16.f32 %rs196, %r300;
	// end inline asm
	mov.b32 	%r301, %f422;
	// begin inline asm
	cvt.rn.bf16.f32 %rs197, %r301;
	// end inline asm
	mov.b32 	%r302, %f423;
	// begin inline asm
	cvt.rn.bf16.f32 %rs198, %r302;
	// end inline asm
	mov.b32 	%r303, %f424;
	// begin inline asm
	cvt.rn.bf16.f32 %rs199, %r303;
	// end inline asm
	mov.b32 	%r304, %f425;
	// begin inline asm
	cvt.rn.bf16.f32 %rs200, %r304;
	// end inline asm
	mov.b32 	%r305, %f426;
	// begin inline asm
	cvt.rn.bf16.f32 %rs201, %r305;
	// end inline asm
	mov.b32 	%r306, %f427;
	// begin inline asm
	cvt.rn.bf16.f32 %rs202, %r306;
	// end inline asm
	mov.b32 	%r307, %f428;
	// begin inline asm
	cvt.rn.bf16.f32 %rs203, %r307;
	// end inline asm
	mov.b32 	%r308, %f429;
	// begin inline asm
	cvt.rn.bf16.f32 %rs204, %r308;
	// end inline asm
	mov.b32 	%r309, %f430;
	// begin inline asm
	cvt.rn.bf16.f32 %rs205, %r309;
	// end inline asm
	mov.b32 	%r310, %f431;
	// begin inline asm
	cvt.rn.bf16.f32 %rs206, %r310;
	// end inline asm
	mov.b32 	%r311, %f432;
	// begin inline asm
	cvt.rn.bf16.f32 %rs207, %r311;
	// end inline asm
	mov.b32 	%r312, %f433;
	// begin inline asm
	cvt.rn.bf16.f32 %rs208, %r312;
	// end inline asm
	add.s64 	%rd63, %rd30, %rd48;
	add.s64 	%rd26, %rd63, %rd50;
	add.s64 	%rd27, %rd26, 1024;
	mov.b32 	%r313, {%rs193, %rs194};
	mov.b32 	%r314, {%rs195, %rs196};
	mov.b32 	%r315, {%rs197, %rs198};
	mov.b32 	%r316, {%rs199, %rs200};
	// begin inline asm
	st.global.v4.b32 [ %rd26 + 0 ], { %r313, %r314, %r315, %r316 };
	// end inline asm
	mov.b32 	%r317, {%rs201, %rs202};
	mov.b32 	%r318, {%rs203, %rs204};
	mov.b32 	%r319, {%rs205, %rs206};
	mov.b32 	%r320, {%rs207, %rs208};
	// begin inline asm
	st.global.v4.b32 [ %rd27 + 0 ], { %r317, %r318, %r319, %r320 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 126976;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	fusion_67
.visible .entry fusion_67(
	.param .u64 .ptr .align 16 fusion_67_param_0,
	.param .u64 .ptr .align 128 fusion_67_param_1,
	.param .u64 .ptr .align 16 fusion_67_param_2,
	.param .u64 .ptr .align 128 fusion_67_param_3
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<78>;
	.reg .f32 	%f<60>;
	.reg .b64 	%rd<43>;

	ld.param.u64 	%rd6, [fusion_67_param_0];
	ld.param.u64 	%rd7, [fusion_67_param_3];
	cvta.to.global.u64 	%rd8, %rd7;
	ld.param.u64 	%rd9, [fusion_67_param_1];
	ld.param.u64 	%rd10, [fusion_67_param_2];
	cvta.to.global.u64 	%rd11, %rd10;
	cvta.to.global.u64 	%rd12, %rd9;
	cvta.to.global.u64 	%rd2, %rd6;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r43, %r1, 9;
	cvt.u64.u32 	%rd13, %r43;
	and.b64  	%rd14, %rd13, 512;
	mul.wide.s32 	%rd15, %r1, 2048;
	or.b64  	%rd16, %rd15, %rd14;
	shl.b64 	%rd17, %rd16, 1;
	or.b64  	%rd18, %rd17, 4096;
	add.s64 	%rd19, %rd12, %rd18;
	mov.u32 	%r44, %tid.x;
	shl.b32 	%r45, %r44, 3;
	and.b32  	%r46, %r45, 120;
	and.b32  	%r47, %r45, 248;
	setp.gt.u32 	%p4, %r44, 31;
	selp.b32 	%r48, 256, 0, %p4;
	or.b32  	%r49, %r47, %r48;
	mul.wide.u32 	%rd20, %r49, 2;
	add.s64 	%rd1, %rd19, %rd20;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs1;
	// end inline asm
	mov.b32 	%f1, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs2;
	// end inline asm
	mov.b32 	%f2, %r7;
	// begin inline asm
	cvt.f32.bf16 %r8, %rs3;
	// end inline asm
	mov.b32 	%f3, %r8;
	// begin inline asm
	cvt.f32.bf16 %r9, %rs4;
	// end inline asm
	mov.b32 	%f4, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	mul.rn.f32 	%f9, %f1, %f1;
	mul.rn.f32 	%f10, %f2, %f2;
	mul.rn.f32 	%f11, %f3, %f3;
	mul.rn.f32 	%f12, %f4, %f4;
	mul.rn.f32 	%f13, %f5, %f5;
	mul.rn.f32 	%f14, %f6, %f6;
	mul.rn.f32 	%f15, %f7, %f7;
	mul.rn.f32 	%f16, %f8, %f8;
	add.rn.f32 	%f17, %f9, %f10;
	add.rn.f32 	%f18, %f17, %f11;
	add.rn.f32 	%f19, %f18, %f12;
	add.rn.f32 	%f20, %f19, %f13;
	add.rn.f32 	%f21, %f20, %f14;
	add.rn.f32 	%f22, %f21, %f15;
	add.rn.f32 	%f23, %f22, %f16;
	mov.b32 	%r50, %f23;
	shfl.sync.bfly.b32	%r51, %r50, 8, 31, -1;
	mov.b32 	%f24, %r51;
	add.rn.f32 	%f25, %f23, %f24;
	mov.b32 	%r52, %f25;
	shfl.sync.bfly.b32	%r53, %r52, 4, 31, -1;
	mov.b32 	%f26, %r53;
	add.rn.f32 	%f27, %f25, %f26;
	mov.b32 	%r54, %f27;
	shfl.sync.bfly.b32	%r55, %r54, 2, 31, -1;
	mov.b32 	%f28, %r55;
	add.rn.f32 	%f29, %f27, %f28;
	mov.b32 	%r56, %f29;
	shfl.sync.bfly.b32	%r57, %r56, 1, 31, -1;
	mov.b32 	%f30, %r57;
	add.rn.f32 	%f31, %f29, %f30;
	mul.rn.f32 	%f32, %f31, 0f3C000000;
	// begin inline asm
	mov.u32 %r14, 0x0;
	ld.global.b32 { %r14 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r14;
	add.rn.f32 	%f34, %f32, %f33;
	rsqrt.approx.f32 	%f35, %f34;
	mul.rn.f32 	%f36, %f1, %f35;
	mul.rn.f32 	%f37, %f2, %f35;
	mul.rn.f32 	%f38, %f3, %f35;
	mul.rn.f32 	%f39, %f4, %f35;
	mul.rn.f32 	%f40, %f5, %f35;
	mul.rn.f32 	%f41, %f6, %f35;
	mul.rn.f32 	%f42, %f7, %f35;
	mul.rn.f32 	%f43, %f8, %f35;
	shl.b32 	%r58, %r44, 1;
	and.b32  	%r59, %r58, 62;
	selp.b32 	%r60, 64, 0, %p4;
	or.b32  	%r61, %r59, %r60;
	shl.b32 	%r62, %r44, 2;
	and.b32  	%r63, %r62, 124;
	cvt.u64.u32 	%rd21, %r63;
	mul.wide.u32 	%rd22, %r61, 2;
	add.s64 	%rd3, %rd11, %rd22;
	// begin inline asm
	mov.u32 %r15, 0x0;
	ld.global.b32 { %r15 }, [ %rd3 + 0 ];
	// end inline asm
	{ .reg .b16 tmp; mov.b32 {tmp, %rs10}, %r15; }
	mov.u64 	%rd23, global_smem;
	add.s64 	%rd24, %rd23, %rd22;
	cvt.u16.u32 	%rs9, %r15;
	cvt.u32.u64 	%r16, %rd24;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r16 + 0 ], { %rs9, %rs10 };
	// end inline asm
	bar.sync 	0;
	mul.wide.u32 	%rd25, %r46, 2;
	add.s64 	%rd26, %rd23, %rd25;
	ld.shared.v4.b32 	{%r64, %r65, %r66, %r67}, [%rd26];
	mov.b32 	{%rs17, %rs18}, %r67;
	mov.b32 	{%rs15, %rs16}, %r66;
	mov.b32 	{%rs13, %rs14}, %r65;
	mov.b32 	{%rs11, %rs12}, %r64;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs11;
	// end inline asm
	mov.b32 	%f44, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs12;
	// end inline asm
	mov.b32 	%f45, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs13;
	// end inline asm
	mov.b32 	%f46, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs14;
	// end inline asm
	mov.b32 	%f47, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs15;
	// end inline asm
	mov.b32 	%f48, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs16;
	// end inline asm
	mov.b32 	%f49, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs17;
	// end inline asm
	mov.b32 	%f50, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs18;
	// end inline asm
	mov.b32 	%f51, %r24;
	mul.rn.f32 	%f52, %f36, %f44;
	mul.rn.f32 	%f53, %f37, %f45;
	mul.rn.f32 	%f54, %f38, %f46;
	mul.rn.f32 	%f55, %f39, %f47;
	mul.rn.f32 	%f56, %f40, %f48;
	mul.rn.f32 	%f57, %f41, %f49;
	mul.rn.f32 	%f58, %f42, %f50;
	mul.rn.f32 	%f59, %f43, %f51;
	add.s64 	%rd27, %rd8, %rd15;
	selp.b64 	%rd28, 128, 0, %p4;
	selp.b64 	%rd29, 384, 256, %p4;
	or.b64  	%rd30, %rd28, %rd21;
	or.b64  	%rd31, %rd29, %rd21;
	shl.b64 	%rd32, %rd30, 2;
	add.s64 	%rd4, %rd27, %rd32;
	shl.b64 	%rd33, %rd31, 2;
	add.s64 	%rd5, %rd27, %rd33;
	bar.sync 	0;
	selp.b32 	%r68, 128, 0, %p4;
	or.b32  	%r69, %r63, %r68;
	shr.u32 	%r70, %r49, 4;
	and.b32  	%r71, %r70, 24;
	add.s32 	%r72, %r71, %r49;
	shl.b32 	%r73, %r72, 2;
	cvt.u64.u32 	%rd34, %r73;
	add.s64 	%rd35, %rd23, %rd34;
	mov.b32 	%r26, %f52;
	mov.b32 	%r27, %f53;
	mov.b32 	%r28, %f54;
	mov.b32 	%r29, %f55;
	mov.b32 	%r31, %f56;
	mov.b32 	%r32, %f57;
	mov.b32 	%r33, %f58;
	mov.b32 	%r34, %f59;
	cvt.u32.u64 	%r25, %rd35;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r25 + 0 ], { %r26, %r27, %r28, %r29 };
	// end inline asm
	add.s32 	%r30, %r25, 16;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r30 + 0 ], { %r31, %r32, %r33, %r34 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r74, %r68, 4;
	add.s32 	%r75, %r74, %r69;
	mul.wide.u32 	%rd36, %r75, 4;
	add.s64 	%rd37, %rd23, %rd36;
	or.b32  	%r76, %r68, 256;
	shr.u32 	%r77, %r76, 4;
	cvt.u64.u32 	%rd38, %r77;
	cvt.u64.u32 	%rd39, %r69;
	add.s64 	%rd40, %rd38, %rd39;
	shl.b64 	%rd41, %rd40, 2;
	add.s64 	%rd42, %rd23, %rd41;
	ld.shared.v4.u32 	{%r39, %r40, %r41, %r42}, [%rd42+1024];
	ld.shared.v4.u32 	{%r35, %r36, %r37, %r38}, [%rd37];
	// begin inline asm
	st.global.v4.b32 [ %rd4 + 0 ], { %r35, %r36, %r37, %r38 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd5 + 0 ], { %r39, %r40, %r41, %r42 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_3
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<11>;
	.reg .b64 	%rd<19>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd6, %rd5;
	cvta.to.global.u64 	%rd7, %rd4;
	cvta.to.global.u64 	%rd8, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd9, %r8, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd11, %r9;
	add.s64 	%rd12, %rd6, %rd11;
	ld.global.nc.u32 	%r10, [%rd12];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd13, %r14, 2;
	add.s64 	%rd14, %rd7, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	ld.global.nc.f32 	%f4, [%rd10+256];
	or.b32  	%r15, %r1, %r13;
	or.b32  	%r16, %r15, 64;
	mul.wide.u32 	%rd15, %r16, 2;
	add.s64 	%rd16, %rd7, %rd15;
	ld.global.nc.u16 	%rs2, [%rd16];
	cvt.f32.bf16 	%f5, %rs2;
	mul.rn.f32 	%f6, %f4, %f5;
	sub.rn.f32 	%f7, %f3, %f6;
	cvt.rn.bf16.f32 	%rs3, %f7;
	mul.wide.u32 	%rd17, %r8, 2;
	add.s64 	%rd18, %rd3, %rd17;
	st.global.b16 	[%rd18], %rs3;
	mul.rn.f32 	%f8, %f4, %f2;
	mul.rn.f32 	%f9, %f1, %f5;
	add.rn.f32 	%f10, %f8, %f9;
	cvt.rn.bf16.f32 	%rs4, %f10;
	st.global.b16 	[%rd18+128], %rs4;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

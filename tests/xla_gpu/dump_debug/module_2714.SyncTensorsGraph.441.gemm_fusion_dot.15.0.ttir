module {
  tt.func @gemm_fusion_dot_15_0_impl(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xbf16>
    %c64_i64 = arith.constant 64 : i64
    %c4096_i64 = arith.constant 4096 : i64
    %c128_i32 = arith.constant 128 : i32
    %c1_i64 = arith.constant 1 : i64
    %c-3072_i32 = arith.constant -3072 : i32
    %c-2048_i32 = arith.constant -2048 : i32
    %c-1024_i32 = arith.constant -1024 : i32
    %c1024_i64 = arith.constant 1024 : i64
    %c0_i32 = arith.constant 0 : i32
    %c2048_i64 = arith.constant 2048 : i64
    %c3072_i32 = arith.constant 3072 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c64_i32 = arith.constant 64 : i32
    %c8_i32 = arith.constant 8 : i32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.divsi %0, %c8_i32 : i32
    %2 = arith.muli %1, %c8_i32 : i32
    %3 = arith.subi %c64_i32, %2 : i32
    %4 = arith.cmpi slt, %3, %c8_i32 : i32
    %5 = arith.select %4, %3, %c8_i32 : i32
    %6 = arith.remsi %0, %5 : i32
    %7 = arith.addi %2, %6 : i32
    %8 = arith.remsi %0, %c8_i32 : i32
    %9 = arith.divsi %8, %5 : i32
    %10 = arith.muli %7, %c64_i32 : i32
    %11 = arith.cmpi slt, %10, %c1024_i32 : i32
    %12 = arith.select %11, %arg0, %arg1 : !tt.ptr<bf16>
    %13 = arith.cmpi slt, %10, %c2048_i32 : i32
    %14 = arith.select %13, %12, %arg2 : !tt.ptr<bf16>
    %15 = arith.cmpi slt, %10, %c3072_i32 : i32
    %16 = arith.select %15, %14, %arg3 : !tt.ptr<bf16>
    %17 = arith.addi %10, %c-1024_i32 : i32
    %18 = arith.addi %10, %c-2048_i32 : i32
    %19 = arith.addi %10, %c-3072_i32 : i32
    %20 = arith.select %11, %10, %17 : i32
    %21 = arith.select %13, %20, %18 : i32
    %22 = arith.select %15, %21, %19 : i32
    %23 = tt.make_tensor_ptr %16, [%c1024_i64, %c2048_i64], [%c2048_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<64x128xbf16>>
    %24 = tt.advance %23, [%22, %c0_i32] : <tensor<64x128xbf16>>
    %25:2 = scf.for %arg5 = %c0_i32 to %c2048_i32 step %c128_i32 iter_args(%arg6 = %24, %arg7 = %cst_0) -> (!tt.ptr<tensor<64x128xbf16>>, tensor<64x64xf32>)  : i32 {
      %30 = tt.load %arg6 : !tt.ptr<tensor<64x128xbf16>>
      %31 = tt.advance %arg6, [%c0_i32, %c128_i32] : <tensor<64x128xbf16>>
      %32 = tt.dot %30, %cst, %arg7, inputPrecision = tf32 : tensor<64x128xbf16> * tensor<128x64xbf16> -> tensor<64x64xf32>
      scf.yield %31, %32 : !tt.ptr<tensor<64x128xbf16>>, tensor<64x64xf32>
    }
    %26 = arith.truncf %25#1 : tensor<64x64xf32> to tensor<64x64xbf16>
    %27 = arith.muli %9, %c64_i32 : i32
    %28 = tt.make_tensor_ptr %arg4, [%c4096_i64, %c64_i64], [%c1_i64, %c4096_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>>
    %29 = tt.advance %28, [%10, %27] : <tensor<64x64xbf16>>
    tt.store %29, %26 : !tt.ptr<tensor<64x64xbf16>>
    tt.return
  }
}

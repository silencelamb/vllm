#indexing_map = #xla.indexing_map<"(d0) -> (d0 floordiv 4), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(d0) -> (d0 mod 4), domain: d0 in [0, 63]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_1 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024 + tid_1 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 2048 + tid_1 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map5 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_1 * 256 + 1024), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map6 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 2048 + tid_1 * 256 + 1024), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map7 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map8 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map9 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 2048), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map10 = #xla.indexing_map<"(tid_0, tid_1) -> (1024), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map11 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 2048 + 1024), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
module {
  tt.func @fusion_34_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %c1_i64 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %5 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64 = arith.constant 16 : i64
    %6 = arith.index_castui %3 : index to i64
    %7 = arith.subi %c16_i64, %6 : i64
    %c1024_i64_0 = arith.constant 1024 : i64
    %8 = arith.index_castui %5 : index to i64
    %9 = arith.subi %c1024_i64_0, %8 : i64
    %10 = xla.apply_indexing #indexing_map3(%3, %4)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg1, %11 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %13 = tt.make_tensor_ptr %12, [%7, %9], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x256xbf16>>
    %15 = arith.extf %14 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_1 = arith.constant 1 : i64
    %c2048_i64 = arith.constant 2048 : i64
    %16 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64_2 = arith.constant 16 : i64
    %17 = arith.index_castui %3 : index to i64
    %18 = arith.subi %c16_i64_2, %17 : i64
    %c2048_i64_3 = arith.constant 2048 : i64
    %19 = arith.index_castui %16 : index to i64
    %20 = arith.subi %c2048_i64_3, %19 : i64
    %21 = xla.apply_indexing #indexing_map4(%3, %4)
    %22 = arith.index_castui %21 : index to i64
    %23 = tt.addptr %arg4, %22 : !tt.ptr<bf16>, i64
    %c0_i32_4 = arith.constant 0 : i32
    %24 = tt.make_tensor_ptr %23, [%18, %20], [%c2048_i64, %c1_i64_1], [%c0_i32_4, %c0_i32_4] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %25 = tt.load %24 : !tt.ptr<tensor<1x256xbf16>>
    %26 = arith.extf %25 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_5 = arith.constant 1 : i64
    %c1024_i64_6 = arith.constant 1024 : i64
    %27 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64_7 = arith.constant 16 : i64
    %28 = arith.index_castui %3 : index to i64
    %29 = arith.subi %c16_i64_7, %28 : i64
    %c1024_i64_8 = arith.constant 1024 : i64
    %30 = arith.index_castui %27 : index to i64
    %31 = arith.subi %c1024_i64_8, %30 : i64
    %32 = xla.apply_indexing #indexing_map3(%3, %4)
    %33 = arith.index_castui %32 : index to i64
    %34 = tt.addptr %arg5, %33 : !tt.ptr<bf16>, i64
    %c0_i32_9 = arith.constant 0 : i32
    %35 = tt.make_tensor_ptr %34, [%29, %31], [%c1024_i64_6, %c1_i64_5], [%c0_i32_9, %c0_i32_9] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %36 = tt.load %35 : !tt.ptr<tensor<1x256xbf16>>
    %37 = arith.extf %36 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_10 = arith.constant 1 : i64
    %c2048_i64_11 = arith.constant 2048 : i64
    %38 = xla.apply_indexing #indexing_map5(%3, %4)
    %c16_i64_12 = arith.constant 16 : i64
    %39 = arith.index_castui %3 : index to i64
    %40 = arith.subi %c16_i64_12, %39 : i64
    %c2048_i64_13 = arith.constant 2048 : i64
    %41 = arith.index_castui %38 : index to i64
    %42 = arith.subi %c2048_i64_13, %41 : i64
    %43 = xla.apply_indexing #indexing_map6(%3, %4)
    %44 = arith.index_castui %43 : index to i64
    %45 = tt.addptr %arg4, %44 : !tt.ptr<bf16>, i64
    %c0_i32_14 = arith.constant 0 : i32
    %46 = tt.make_tensor_ptr %45, [%40, %42], [%c2048_i64_11, %c1_i64_10], [%c0_i32_14, %c0_i32_14] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %47 = tt.load %46 : !tt.ptr<tensor<1x256xbf16>>
    %48 = arith.extf %47 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_15 = arith.constant 1 : i64
    %c1024_i64_16 = arith.constant 1024 : i64
    %c0_i64 = arith.constant 0 : i64
    %49 = xla.apply_indexing #indexing_map7(%3, %4)
    %50 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64_17 = arith.constant 16 : i64
    %51 = arith.index_castui %3 : index to i64
    %52 = arith.subi %c16_i64_17, %51 : i64
    %c1_i64_18 = arith.constant 1 : i64
    %53 = arith.index_castui %49 : index to i64
    %54 = arith.subi %c1_i64_18, %53 : i64
    %c1024_i64_19 = arith.constant 1024 : i64
    %55 = arith.index_castui %50 : index to i64
    %56 = arith.subi %c1024_i64_19, %55 : i64
    %57 = xla.apply_indexing #indexing_map3(%3, %4)
    %58 = arith.index_castui %57 : index to i64
    %59 = tt.addptr %arg3, %58 : !tt.ptr<bf16>, i64
    %c0_i32_20 = arith.constant 0 : i32
    %60 = tt.make_tensor_ptr %59, [%52, %54, %56], [%c1024_i64_16, %c0_i64, %c1_i64_15], [%c0_i32_20, %c0_i32_20, %c0_i32_20] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    %61 = tt.load %60 : !tt.ptr<tensor<1x1x256xbf16>>
    %62 = tt.trans %61 {order = array<i32: 1, 0, 2>} : tensor<1x1x256xbf16> -> tensor<1x1x256xbf16>
    %63 = tt.reshape %62 : tensor<1x1x256xbf16> -> tensor<1x256xbf16>
    %64 = arith.extf %63 : tensor<1x256xbf16> to tensor<1x256xf32>
    %65 = arith.addf %48, %64 : tensor<1x256xf32>
    %66 = arith.addf %37, %65 : tensor<1x256xf32>
    %67 = arith.addf %26, %66 : tensor<1x256xf32>
    %68 = arith.addf %15, %67 : tensor<1x256xf32>
    %c1_i64_21 = arith.constant 1 : i64
    %c1024_i64_22 = arith.constant 1024 : i64
    %69 = xla.apply_indexing #indexing_map7(%3, %4)
    %c16_i64_23 = arith.constant 16 : i64
    %70 = arith.index_castui %3 : index to i64
    %71 = arith.subi %c16_i64_23, %70 : i64
    %c1024_i64_24 = arith.constant 1024 : i64
    %72 = arith.index_castui %69 : index to i64
    %73 = arith.subi %c1024_i64_24, %72 : i64
    %74 = xla.apply_indexing #indexing_map8(%3, %4)
    %75 = arith.index_castui %74 : index to i64
    %76 = tt.addptr %arg1, %75 : !tt.ptr<bf16>, i64
    %c0_i32_25 = arith.constant 0 : i32
    %77 = tt.make_tensor_ptr %76, [%71, %73], [%c1024_i64_22, %c1_i64_21], [%c0_i32_25, %c0_i32_25] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %78 = tt.load %77 : !tt.ptr<tensor<1x1024xbf16>>
    %79 = arith.extf %78 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_26 = arith.constant 1 : i64
    %c2048_i64_27 = arith.constant 2048 : i64
    %80 = xla.apply_indexing #indexing_map7(%3, %4)
    %c16_i64_28 = arith.constant 16 : i64
    %81 = arith.index_castui %3 : index to i64
    %82 = arith.subi %c16_i64_28, %81 : i64
    %c2048_i64_29 = arith.constant 2048 : i64
    %83 = arith.index_castui %80 : index to i64
    %84 = arith.subi %c2048_i64_29, %83 : i64
    %85 = xla.apply_indexing #indexing_map9(%3, %4)
    %86 = arith.index_castui %85 : index to i64
    %87 = tt.addptr %arg4, %86 : !tt.ptr<bf16>, i64
    %c0_i32_30 = arith.constant 0 : i32
    %88 = tt.make_tensor_ptr %87, [%82, %84], [%c2048_i64_27, %c1_i64_26], [%c0_i32_30, %c0_i32_30] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %89 = tt.load %88 : !tt.ptr<tensor<1x1024xbf16>>
    %90 = arith.extf %89 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_31 = arith.constant 1 : i64
    %c1024_i64_32 = arith.constant 1024 : i64
    %91 = xla.apply_indexing #indexing_map7(%3, %4)
    %c16_i64_33 = arith.constant 16 : i64
    %92 = arith.index_castui %3 : index to i64
    %93 = arith.subi %c16_i64_33, %92 : i64
    %c1024_i64_34 = arith.constant 1024 : i64
    %94 = arith.index_castui %91 : index to i64
    %95 = arith.subi %c1024_i64_34, %94 : i64
    %96 = xla.apply_indexing #indexing_map8(%3, %4)
    %97 = arith.index_castui %96 : index to i64
    %98 = tt.addptr %arg5, %97 : !tt.ptr<bf16>, i64
    %c0_i32_35 = arith.constant 0 : i32
    %99 = tt.make_tensor_ptr %98, [%93, %95], [%c1024_i64_32, %c1_i64_31], [%c0_i32_35, %c0_i32_35] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %100 = tt.load %99 : !tt.ptr<tensor<1x1024xbf16>>
    %101 = arith.extf %100 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_36 = arith.constant 1 : i64
    %c2048_i64_37 = arith.constant 2048 : i64
    %102 = xla.apply_indexing #indexing_map10(%3, %4)
    %c16_i64_38 = arith.constant 16 : i64
    %103 = arith.index_castui %3 : index to i64
    %104 = arith.subi %c16_i64_38, %103 : i64
    %c2048_i64_39 = arith.constant 2048 : i64
    %105 = arith.index_castui %102 : index to i64
    %106 = arith.subi %c2048_i64_39, %105 : i64
    %107 = xla.apply_indexing #indexing_map11(%3, %4)
    %108 = arith.index_castui %107 : index to i64
    %109 = tt.addptr %arg4, %108 : !tt.ptr<bf16>, i64
    %c0_i32_40 = arith.constant 0 : i32
    %110 = tt.make_tensor_ptr %109, [%104, %106], [%c2048_i64_37, %c1_i64_36], [%c0_i32_40, %c0_i32_40] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %111 = tt.load %110 : !tt.ptr<tensor<1x1024xbf16>>
    %112 = arith.extf %111 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_41 = arith.constant 1 : i64
    %c1024_i64_42 = arith.constant 1024 : i64
    %c0_i64_43 = arith.constant 0 : i64
    %113 = xla.apply_indexing #indexing_map7(%3, %4)
    %114 = xla.apply_indexing #indexing_map7(%3, %4)
    %c16_i64_44 = arith.constant 16 : i64
    %115 = arith.index_castui %3 : index to i64
    %116 = arith.subi %c16_i64_44, %115 : i64
    %c1_i64_45 = arith.constant 1 : i64
    %117 = arith.index_castui %113 : index to i64
    %118 = arith.subi %c1_i64_45, %117 : i64
    %c1024_i64_46 = arith.constant 1024 : i64
    %119 = arith.index_castui %114 : index to i64
    %120 = arith.subi %c1024_i64_46, %119 : i64
    %121 = xla.apply_indexing #indexing_map8(%3, %4)
    %122 = arith.index_castui %121 : index to i64
    %123 = tt.addptr %arg3, %122 : !tt.ptr<bf16>, i64
    %c0_i32_47 = arith.constant 0 : i32
    %124 = tt.make_tensor_ptr %123, [%116, %118, %120], [%c1024_i64_42, %c0_i64_43, %c1_i64_41], [%c0_i32_47, %c0_i32_47, %c0_i32_47] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %125 = tt.load %124 : !tt.ptr<tensor<1x1x1024xbf16>>
    %126 = tt.trans %125 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %127 = tt.reshape %126 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %128 = arith.extf %127 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %129 = arith.addf %112, %128 : tensor<1x1024xf32>
    %130 = arith.addf %101, %129 : tensor<1x1024xf32>
    %131 = arith.addf %90, %130 : tensor<1x1024xf32>
    %132 = arith.addf %79, %131 : tensor<1x1024xf32>
    %133 = arith.mulf %132, %132 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %134 = "tt.reduce"(%133) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %170 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %170 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_48 = arith.constant 9.765625E-4 : f32
    %135 = tt.splat %cst_48 : f32 -> tensor<1xf32>
    %136 = arith.mulf %134, %135 : tensor<1xf32>
    %137 = xla.apply_indexing #indexing_map7(%3, %4)
    %138 = arith.index_castui %137 : index to i64
    %139 = tt.addptr %arg0, %138 : !tt.ptr<f32>, i64
    %c0_i32_49 = arith.constant 0 : i32
    %140 = tt.make_tensor_ptr %139, [], [], [] {order = array<i32>} : <tensor<f32>>
    %141 = tt.load %139 : !tt.ptr<f32>
    %142 = tt.splat %141 : f32 -> tensor<1xf32>
    %143 = arith.addf %136, %142 : tensor<1xf32>
    %144 = tt.extern_elementwise %143 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %145 = tt.expand_dims %144 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %146 = tt.broadcast %145 : tensor<1x1xf32> -> tensor<1x256xf32>
    %147 = arith.mulf %68, %146 : tensor<1x256xf32>
    %c1_i64_50 = arith.constant 1 : i64
    %148 = xla.apply_indexing #indexing_map2(%3, %4)
    %c1024_i64_51 = arith.constant 1024 : i64
    %149 = arith.index_castui %148 : index to i64
    %150 = arith.subi %c1024_i64_51, %149 : i64
    %151 = xla.apply_indexing #indexing_map2(%3, %4)
    %152 = arith.index_castui %151 : index to i64
    %153 = tt.addptr %arg2, %152 : !tt.ptr<bf16>, i64
    %c0_i32_52 = arith.constant 0 : i32
    %154 = tt.make_tensor_ptr %153, [%150], [%c1_i64_50], [%c0_i32_52] {order = array<i32: 0>} : <tensor<256xbf16>>
    %155 = tt.load %154 : !tt.ptr<tensor<256xbf16>>
    %156 = arith.extf %155 : tensor<256xbf16> to tensor<256xf32>
    %157 = tt.expand_dims %156 {axis = 0 : i32} : tensor<256xf32> -> tensor<1x256xf32>
    %158 = tt.broadcast %157 : tensor<1x256xf32> -> tensor<1x256xf32>
    %159 = arith.mulf %147, %158 : tensor<1x256xf32>
    %160 = arith.truncf %159 : tensor<1x256xf32> to tensor<1x256xbf16>
    %c1_i64_53 = arith.constant 1 : i64
    %c1024_i64_54 = arith.constant 1024 : i64
    %161 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64_55 = arith.constant 16 : i64
    %162 = arith.index_castui %3 : index to i64
    %163 = arith.subi %c16_i64_55, %162 : i64
    %c1024_i64_56 = arith.constant 1024 : i64
    %164 = arith.index_castui %161 : index to i64
    %165 = arith.subi %c1024_i64_56, %164 : i64
    %166 = xla.apply_indexing #indexing_map3(%3, %4)
    %167 = arith.index_castui %166 : index to i64
    %168 = tt.addptr %arg6, %167 : !tt.ptr<bf16>, i64
    %c0_i32_57 = arith.constant 0 : i32
    %169 = tt.make_tensor_ptr %168, [%163, %165], [%c1024_i64_54, %c1_i64_53], [%c0_i32_57, %c0_i32_57] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    tt.store %169, %160 : !tt.ptr<tensor<1x256xbf16>>
    tt.return
  }
}

#indexing_map = #xla.indexing_map<"(d0) -> (d0 floordiv 4), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(d0) -> (d0 mod 4), domain: d0 in [0, 63]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_1 * 256 + 17408), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 18432 + tid_1 * 256 + 17408), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map5 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_1 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map6 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024 + tid_1 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map7 = #xla.indexing_map<"(tid_0, tid_1) -> (17408), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map8 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 18432 + 17408), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map9 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
module {
  tt.func @fusion_246_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %c1_i64 = arith.constant 1 : i64
    %c18432_i64 = arith.constant 18432 : i64
    %5 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64 = arith.constant 16 : i64
    %6 = arith.index_castui %3 : index to i64
    %7 = arith.subi %c16_i64, %6 : i64
    %c18432_i64_0 = arith.constant 18432 : i64
    %8 = arith.index_castui %5 : index to i64
    %9 = arith.subi %c18432_i64_0, %8 : i64
    %10 = xla.apply_indexing #indexing_map3(%3, %4)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg2, %11 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %13 = tt.make_tensor_ptr %12, [%7, %9], [%c18432_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x256xbf16>>
    %15 = arith.extf %14 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_1 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %c0_i64 = arith.constant 0 : i64
    %16 = xla.apply_indexing #indexing_map4(%3, %4)
    %17 = xla.apply_indexing #indexing_map5(%3, %4)
    %c16_i64_2 = arith.constant 16 : i64
    %18 = arith.index_castui %3 : index to i64
    %19 = arith.subi %c16_i64_2, %18 : i64
    %c1_i64_3 = arith.constant 1 : i64
    %20 = arith.index_castui %16 : index to i64
    %21 = arith.subi %c1_i64_3, %20 : i64
    %c1024_i64_4 = arith.constant 1024 : i64
    %22 = arith.index_castui %17 : index to i64
    %23 = arith.subi %c1024_i64_4, %22 : i64
    %24 = xla.apply_indexing #indexing_map6(%3, %4)
    %25 = arith.index_castui %24 : index to i64
    %26 = tt.addptr %arg1, %25 : !tt.ptr<bf16>, i64
    %c0_i32_5 = arith.constant 0 : i32
    %27 = tt.make_tensor_ptr %26, [%19, %21, %23], [%c1024_i64, %c0_i64, %c1_i64_1], [%c0_i32_5, %c0_i32_5, %c0_i32_5] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    %28 = tt.load %27 : !tt.ptr<tensor<1x1x256xbf16>>
    %29 = tt.trans %28 {order = array<i32: 1, 0, 2>} : tensor<1x1x256xbf16> -> tensor<1x1x256xbf16>
    %30 = tt.reshape %29 : tensor<1x1x256xbf16> -> tensor<1x256xbf16>
    %31 = arith.extf %30 : tensor<1x256xbf16> to tensor<1x256xf32>
    %32 = arith.addf %15, %31 : tensor<1x256xf32>
    %c1_i64_6 = arith.constant 1 : i64
    %c18432_i64_7 = arith.constant 18432 : i64
    %33 = xla.apply_indexing #indexing_map7(%3, %4)
    %c16_i64_8 = arith.constant 16 : i64
    %34 = arith.index_castui %3 : index to i64
    %35 = arith.subi %c16_i64_8, %34 : i64
    %c18432_i64_9 = arith.constant 18432 : i64
    %36 = arith.index_castui %33 : index to i64
    %37 = arith.subi %c18432_i64_9, %36 : i64
    %38 = xla.apply_indexing #indexing_map8(%3, %4)
    %39 = arith.index_castui %38 : index to i64
    %40 = tt.addptr %arg2, %39 : !tt.ptr<bf16>, i64
    %c0_i32_10 = arith.constant 0 : i32
    %41 = tt.make_tensor_ptr %40, [%35, %37], [%c18432_i64_7, %c1_i64_6], [%c0_i32_10, %c0_i32_10] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %42 = tt.load %41 : !tt.ptr<tensor<1x1024xbf16>>
    %43 = arith.extf %42 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_11 = arith.constant 1 : i64
    %c1024_i64_12 = arith.constant 1024 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %44 = xla.apply_indexing #indexing_map4(%3, %4)
    %45 = xla.apply_indexing #indexing_map4(%3, %4)
    %c16_i64_14 = arith.constant 16 : i64
    %46 = arith.index_castui %3 : index to i64
    %47 = arith.subi %c16_i64_14, %46 : i64
    %c1_i64_15 = arith.constant 1 : i64
    %48 = arith.index_castui %44 : index to i64
    %49 = arith.subi %c1_i64_15, %48 : i64
    %c1024_i64_16 = arith.constant 1024 : i64
    %50 = arith.index_castui %45 : index to i64
    %51 = arith.subi %c1024_i64_16, %50 : i64
    %52 = xla.apply_indexing #indexing_map9(%3, %4)
    %53 = arith.index_castui %52 : index to i64
    %54 = tt.addptr %arg1, %53 : !tt.ptr<bf16>, i64
    %c0_i32_17 = arith.constant 0 : i32
    %55 = tt.make_tensor_ptr %54, [%47, %49, %51], [%c1024_i64_12, %c0_i64_13, %c1_i64_11], [%c0_i32_17, %c0_i32_17, %c0_i32_17] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %56 = tt.load %55 : !tt.ptr<tensor<1x1x1024xbf16>>
    %57 = tt.trans %56 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %58 = tt.reshape %57 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %59 = arith.extf %58 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %60 = arith.addf %43, %59 : tensor<1x1024xf32>
    %61 = arith.mulf %60, %60 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %62 = "tt.reduce"(%61) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32, %arg6: f32):
      %98 = arith.addf %arg5, %arg6 : f32
      tt.reduce.return %98 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_18 = arith.constant 9.765625E-4 : f32
    %63 = tt.splat %cst_18 : f32 -> tensor<1xf32>
    %64 = arith.mulf %62, %63 : tensor<1xf32>
    %65 = xla.apply_indexing #indexing_map4(%3, %4)
    %66 = arith.index_castui %65 : index to i64
    %67 = tt.addptr %arg0, %66 : !tt.ptr<f32>, i64
    %c0_i32_19 = arith.constant 0 : i32
    %68 = tt.make_tensor_ptr %67, [], [], [] {order = array<i32>} : <tensor<f32>>
    %69 = tt.load %67 : !tt.ptr<f32>
    %70 = tt.splat %69 : f32 -> tensor<1xf32>
    %71 = arith.addf %64, %70 : tensor<1xf32>
    %72 = tt.extern_elementwise %71 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %73 = tt.expand_dims %72 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %74 = tt.broadcast %73 : tensor<1x1xf32> -> tensor<1x256xf32>
    %75 = arith.mulf %32, %74 : tensor<1x256xf32>
    %c1_i64_20 = arith.constant 1 : i64
    %76 = xla.apply_indexing #indexing_map5(%3, %4)
    %c1024_i64_21 = arith.constant 1024 : i64
    %77 = arith.index_castui %76 : index to i64
    %78 = arith.subi %c1024_i64_21, %77 : i64
    %79 = xla.apply_indexing #indexing_map5(%3, %4)
    %80 = arith.index_castui %79 : index to i64
    %81 = tt.addptr %arg3, %80 : !tt.ptr<bf16>, i64
    %c0_i32_22 = arith.constant 0 : i32
    %82 = tt.make_tensor_ptr %81, [%78], [%c1_i64_20], [%c0_i32_22] {order = array<i32: 0>} : <tensor<256xbf16>>
    %83 = tt.load %82 : !tt.ptr<tensor<256xbf16>>
    %84 = arith.extf %83 : tensor<256xbf16> to tensor<256xf32>
    %85 = tt.expand_dims %84 {axis = 0 : i32} : tensor<256xf32> -> tensor<1x256xf32>
    %86 = tt.broadcast %85 : tensor<1x256xf32> -> tensor<1x256xf32>
    %87 = arith.mulf %75, %86 : tensor<1x256xf32>
    %88 = arith.truncf %87 : tensor<1x256xf32> to tensor<1x256xbf16>
    %c1_i64_23 = arith.constant 1 : i64
    %c1024_i64_24 = arith.constant 1024 : i64
    %89 = xla.apply_indexing #indexing_map5(%3, %4)
    %c16_i64_25 = arith.constant 16 : i64
    %90 = arith.index_castui %3 : index to i64
    %91 = arith.subi %c16_i64_25, %90 : i64
    %c1024_i64_26 = arith.constant 1024 : i64
    %92 = arith.index_castui %89 : index to i64
    %93 = arith.subi %c1024_i64_26, %92 : i64
    %94 = xla.apply_indexing #indexing_map6(%3, %4)
    %95 = arith.index_castui %94 : index to i64
    %96 = tt.addptr %arg4, %95 : !tt.ptr<bf16>, i64
    %c0_i32_27 = arith.constant 0 : i32
    %97 = tt.make_tensor_ptr %96, [%91, %93], [%c1024_i64_24, %c1_i64_23], [%c0_i32_27, %c0_i32_27] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    tt.store %97, %88 : !tt.ptr<tensor<1x256xbf16>>
    tt.return
  }
}

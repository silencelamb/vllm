#indexing_map = #xla.indexing_map<"(d0) -> (0), domain: d0 in [0, 127]">
#indexing_map1 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 127], tid_1 in [0, 0]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 127], tid_1 in [0, 0]">
module {
  tt.func @fusion_102_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %c1_i64 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %4 = xla.apply_indexing #indexing_map1(%2, %3)
    %c128_i64 = arith.constant 128 : i64
    %5 = arith.index_castui %2 : index to i64
    %6 = arith.subi %c128_i64, %5 : i64
    %c1024_i64_0 = arith.constant 1024 : i64
    %7 = arith.index_castui %4 : index to i64
    %8 = arith.subi %c1024_i64_0, %7 : i64
    %9 = xla.apply_indexing #indexing_map2(%2, %3)
    %10 = arith.index_castui %9 : index to i64
    %11 = tt.addptr %arg0, %10 : !tt.ptr<f32>, i64
    %c0_i32 = arith.constant 0 : i32
    %12 = tt.make_tensor_ptr %11, [%6, %8], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xf32>>
    %13 = tt.load %12 : !tt.ptr<tensor<1x1024xf32>>
    %14 = arith.mulf %13, %13 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %15 = "tt.reduce"(%14) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %51 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %51 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_1 = arith.constant 9.765625E-4 : f32
    %16 = tt.splat %cst_1 : f32 -> tensor<1xf32>
    %17 = arith.mulf %15, %16 : tensor<1xf32>
    %18 = xla.apply_indexing #indexing_map1(%2, %3)
    %19 = arith.index_castui %18 : index to i64
    %20 = tt.addptr %arg1, %19 : !tt.ptr<f32>, i64
    %c0_i32_2 = arith.constant 0 : i32
    %21 = tt.make_tensor_ptr %20, [], [], [] {order = array<i32>} : <tensor<f32>>
    %22 = tt.load %20 : !tt.ptr<f32>
    %23 = tt.splat %22 : f32 -> tensor<1xf32>
    %24 = arith.addf %17, %23 : tensor<1xf32>
    %25 = tt.extern_elementwise %24 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %27 = tt.broadcast %26 : tensor<1x1xf32> -> tensor<1x1024xf32>
    %28 = arith.mulf %13, %27 : tensor<1x1024xf32>
    %c1_i64_3 = arith.constant 1 : i64
    %29 = xla.apply_indexing #indexing_map1(%2, %3)
    %c1024_i64_4 = arith.constant 1024 : i64
    %30 = arith.index_castui %29 : index to i64
    %31 = arith.subi %c1024_i64_4, %30 : i64
    %32 = xla.apply_indexing #indexing_map1(%2, %3)
    %33 = arith.index_castui %32 : index to i64
    %34 = tt.addptr %arg2, %33 : !tt.ptr<bf16>, i64
    %c0_i32_5 = arith.constant 0 : i32
    %35 = tt.make_tensor_ptr %34, [%31], [%c1_i64_3], [%c0_i32_5] {order = array<i32: 0>} : <tensor<1024xbf16>>
    %36 = tt.load %35 : !tt.ptr<tensor<1024xbf16>>
    %37 = arith.extf %36 : tensor<1024xbf16> to tensor<1024xf32>
    %38 = tt.expand_dims %37 {axis = 0 : i32} : tensor<1024xf32> -> tensor<1x1024xf32>
    %39 = tt.broadcast %38 : tensor<1x1024xf32> -> tensor<1x1024xf32>
    %40 = arith.mulf %28, %39 : tensor<1x1024xf32>
    %41 = arith.truncf %40 : tensor<1x1024xf32> to tensor<1x1024xbf16>
    %c1_i64_6 = arith.constant 1 : i64
    %c1024_i64_7 = arith.constant 1024 : i64
    %42 = xla.apply_indexing #indexing_map1(%2, %3)
    %c128_i64_8 = arith.constant 128 : i64
    %43 = arith.index_castui %2 : index to i64
    %44 = arith.subi %c128_i64_8, %43 : i64
    %c1024_i64_9 = arith.constant 1024 : i64
    %45 = arith.index_castui %42 : index to i64
    %46 = arith.subi %c1024_i64_9, %45 : i64
    %47 = xla.apply_indexing #indexing_map2(%2, %3)
    %48 = arith.index_castui %47 : index to i64
    %49 = tt.addptr %arg3, %48 : !tt.ptr<bf16>, i64
    %c0_i32_10 = arith.constant 0 : i32
    %50 = tt.make_tensor_ptr %49, [%44, %46], [%c1024_i64_7, %c1_i64_6], [%c0_i32_10, %c0_i32_10] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    tt.store %50, %41 : !tt.ptr<tensor<1x1024xbf16>>
    tt.return
  }
}

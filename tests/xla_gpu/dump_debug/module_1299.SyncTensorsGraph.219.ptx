//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	gemm_fusion_dot_29_0
.visible .entry gemm_fusion_dot_29_0(
	.param .u64 .ptr .align 16 gemm_fusion_dot_29_0_param_0,
	.param .u64 .ptr .align 128 gemm_fusion_dot_29_0_param_1
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<758>;
	.reg .f32 	%f<277>;
	.reg .b64 	%rd<152>;

	ld.param.u64 	%rd22, [gemm_fusion_dot_29_0_param_0];
	ld.param.u64 	%rd23, [gemm_fusion_dot_29_0_param_1];
	cvta.to.global.u64 	%rd1, %rd23;
	cvta.to.global.u64 	%rd24, %rd22;
	// begin inline asm
	mov.u32 %r41, %ctaid.x;
	// end inline asm
	shr.s32 	%r43, %r41, 31;
	shr.u32 	%r44, %r43, 28;
	add.s32 	%r45, %r41, %r44;
	shr.s32 	%r2, %r45, 4;
	shl.b32 	%r46, %r2, 3;
	sub.s32 	%r47, 32, %r46;
	min.s32 	%r3, %r47, 8;
	rem.s32 	%r48, %r41, %r3;
	add.s32 	%r49, %r46, %r48;
	shl.b32 	%r50, %r49, 5;
	cvt.s64.s32 	%rd2, %r50;
	mov.u32 	%r4, %tid.x;
	setp.gt.u32 	%p1, %r4, 63;
	selp.u64 	%rd25, 1, 0, %p1;
	and.b32  	%r51, %r4, 1;
	neg.s32 	%r52, %r51;
	shl.b32 	%r53, %r51, 3;
	bfe.s32 	%r54, %r4, 1, 1;
	and.b32  	%r55, %r4, 2;
	shl.b32 	%r56, %r55, 3;
	or.b32  	%r57, %r53, %r56;
	bfe.s32 	%r58, %r4, 2, 1;
	and.b32  	%r59, %r4, 4;
	shl.b32 	%r60, %r59, 3;
	and.b32  	%r61, %r4, 8;
	shl.b32 	%r62, %r61, 3;
	or.b32  	%r63, %r62, %r60;
	or.b32  	%r64, %r63, %r57;
	and.b32  	%r5, %r4, 16;
	shl.b32 	%r65, %r5, 3;
	or.b32  	%r66, %r64, %r65;
	shl.b32 	%r67, %r4, 3;
	and.b32  	%r6, %r67, 256;
	or.b32  	%r68, %r66, %r6;
	selp.b32 	%r69, 520, 0, %p1;
	xor.b32  	%r70, %r68, %r69;
	mul.wide.u32 	%rd26, %r70, 2;
	mov.u64 	%rd27, global_smem;
	add.s64 	%rd3, %rd27, %rd26;
	or.b32  	%r71, %r53, 1040;
	xor.b32  	%r72, %r71, %r56;
	or.b32  	%r73, %r60, %r72;
	or.b32  	%r74, %r73, %r62;
	or.b32  	%r75, %r6, %r65;
	or.b32  	%r76, %r75, %r69;
	xor.b32  	%r77, %r76, %r74;
	mul.wide.u32 	%rd28, %r77, 2;
	add.s64 	%rd4, %rd27, %rd28;
	or.b32  	%r78, %r57, 2080;
	xor.b32  	%r79, %r78, %r60;
	or.b32  	%r80, %r79, %r62;
	xor.b32  	%r81, %r76, %r80;
	mul.wide.u32 	%rd29, %r81, 2;
	add.s64 	%rd5, %rd27, %rd29;
	or.b32  	%r82, %r53, 3120;
	or.b32  	%r83, %r60, %r56;
	xor.b32  	%r84, %r83, %r82;
	or.b32  	%r85, %r84, %r62;
	xor.b32  	%r86, %r76, %r85;
	mul.wide.u32 	%rd30, %r86, 2;
	add.s64 	%rd6, %rd27, %rd30;
	or.b32  	%r87, %r64, 4096;
	xor.b32  	%r88, %r76, %r87;
	mul.wide.u32 	%rd31, %r88, 2;
	add.s64 	%rd7, %rd27, %rd31;
	or.b32  	%r89, %r53, 5136;
	xor.b32  	%r90, %r89, %r56;
	or.b32  	%r91, %r60, %r90;
	or.b32  	%r92, %r91, %r62;
	xor.b32  	%r93, %r76, %r92;
	mul.wide.u32 	%rd32, %r93, 2;
	add.s64 	%rd8, %rd27, %rd32;
	or.b32  	%r94, %r57, 6176;
	xor.b32  	%r95, %r94, %r60;
	or.b32  	%r96, %r95, %r62;
	xor.b32  	%r97, %r76, %r96;
	mul.wide.u32 	%rd33, %r97, 2;
	add.s64 	%rd9, %rd27, %rd33;
	or.b32  	%r98, %r53, 7216;
	xor.b32  	%r99, %r83, %r98;
	or.b32  	%r100, %r99, %r62;
	xor.b32  	%r101, %r76, %r100;
	mul.wide.u32 	%rd34, %r101, 2;
	add.s64 	%rd10, %rd27, %rd34;
	or.b32  	%r102, %r64, 8192;
	xor.b32  	%r103, %r76, %r102;
	mul.wide.u32 	%rd35, %r103, 2;
	add.s64 	%rd11, %rd27, %rd35;
	or.b32  	%r104, %r53, 9232;
	xor.b32  	%r105, %r104, %r56;
	or.b32  	%r106, %r60, %r105;
	or.b32  	%r107, %r106, %r62;
	xor.b32  	%r108, %r76, %r107;
	mul.wide.u32 	%rd36, %r108, 2;
	add.s64 	%rd12, %rd27, %rd36;
	or.b32  	%r109, %r57, 10272;
	xor.b32  	%r110, %r109, %r60;
	or.b32  	%r111, %r110, %r62;
	xor.b32  	%r112, %r76, %r111;
	mul.wide.u32 	%rd37, %r112, 2;
	add.s64 	%rd13, %rd27, %rd37;
	or.b32  	%r113, %r53, 11312;
	xor.b32  	%r114, %r83, %r113;
	or.b32  	%r115, %r114, %r62;
	xor.b32  	%r116, %r76, %r115;
	mul.wide.u32 	%rd38, %r116, 2;
	add.s64 	%rd14, %rd27, %rd38;
	or.b32  	%r117, %r64, 12288;
	xor.b32  	%r118, %r76, %r117;
	mul.wide.u32 	%rd39, %r118, 2;
	add.s64 	%rd15, %rd27, %rd39;
	or.b32  	%r119, %r53, 13328;
	xor.b32  	%r120, %r119, %r56;
	or.b32  	%r121, %r60, %r120;
	or.b32  	%r122, %r121, %r62;
	xor.b32  	%r123, %r76, %r122;
	mul.wide.u32 	%rd40, %r123, 2;
	add.s64 	%rd16, %rd27, %rd40;
	or.b32  	%r124, %r57, 14368;
	xor.b32  	%r125, %r124, %r60;
	or.b32  	%r126, %r125, %r62;
	xor.b32  	%r127, %r76, %r126;
	mul.wide.u32 	%rd41, %r127, 2;
	add.s64 	%rd17, %rd27, %rd41;
	or.b32  	%r128, %r53, 15408;
	xor.b32  	%r129, %r83, %r128;
	or.b32  	%r130, %r129, %r62;
	xor.b32  	%r131, %r76, %r130;
	mul.wide.u32 	%rd42, %r131, 2;
	add.s64 	%rd18, %rd27, %rd42;
	and.b32  	%r132, %r52, 520;
	and.b32  	%r133, %r54, 1040;
	or.b32  	%r134, %r132, %r133;
	and.b32  	%r135, %r58, 2080;
	shl.b32 	%r136, %r61, 9;
	or.b32  	%r137, %r135, %r136;
	or.b32  	%r138, %r137, %r134;
	shr.u32 	%r139, %r5, 1;
	xor.b32  	%r140, %r138, %r139;
	selp.b32 	%r141, 8192, 0, %p1;
	or.b32  	%r142, %r140, %r141;
	shl.b32 	%r143, %r142, 1;
	cvt.u64.u32 	%rd43, %r143;
	add.s64 	%rd44, %rd27, %rd43;
	cvt.u32.u64 	%r366, %rd44;
	or.b32  	%r144, %r132, 16;
	xor.b32  	%r145, %r144, %r133;
	or.b32  	%r146, %r136, %r145;
	or.b32  	%r147, %r146, %r135;
	or.b32  	%r148, %r141, %r139;
	xor.b32  	%r149, %r148, %r147;
	shl.b32 	%r150, %r149, 1;
	cvt.u64.u32 	%rd45, %r150;
	add.s64 	%rd46, %rd27, %rd45;
	cvt.u32.u64 	%r371, %rd46;
	or.b32  	%r151, %r134, 32;
	xor.b32  	%r152, %r151, %r135;
	or.b32  	%r153, %r152, %r136;
	xor.b32  	%r154, %r148, %r153;
	shl.b32 	%r155, %r154, 1;
	cvt.u64.u32 	%rd47, %r155;
	add.s64 	%rd48, %rd27, %rd47;
	cvt.u32.u64 	%r376, %rd48;
	or.b32  	%r156, %r132, 48;
	or.b32  	%r157, %r135, %r133;
	xor.b32  	%r158, %r157, %r156;
	or.b32  	%r159, %r158, %r136;
	xor.b32  	%r160, %r148, %r159;
	shl.b32 	%r161, %r160, 1;
	cvt.u64.u32 	%rd49, %r161;
	add.s64 	%rd50, %rd27, %rd49;
	cvt.u32.u64 	%r381, %rd50;
	or.b32  	%r162, %r138, 64;
	xor.b32  	%r163, %r148, %r162;
	shl.b32 	%r164, %r163, 1;
	cvt.u64.u32 	%rd51, %r164;
	add.s64 	%rd52, %rd27, %rd51;
	cvt.u32.u64 	%r386, %rd52;
	or.b32  	%r165, %r132, 80;
	xor.b32  	%r166, %r165, %r133;
	or.b32  	%r167, %r136, %r166;
	or.b32  	%r168, %r167, %r135;
	xor.b32  	%r169, %r148, %r168;
	shl.b32 	%r170, %r169, 1;
	cvt.u64.u32 	%rd53, %r170;
	add.s64 	%rd54, %rd27, %rd53;
	cvt.u32.u64 	%r391, %rd54;
	or.b32  	%r171, %r134, 96;
	xor.b32  	%r172, %r171, %r135;
	or.b32  	%r173, %r172, %r136;
	xor.b32  	%r174, %r148, %r173;
	shl.b32 	%r175, %r174, 1;
	cvt.u64.u32 	%rd55, %r175;
	add.s64 	%rd56, %rd27, %rd55;
	cvt.u32.u64 	%r396, %rd56;
	or.b32  	%r176, %r132, 112;
	xor.b32  	%r177, %r157, %r176;
	or.b32  	%r178, %r177, %r136;
	xor.b32  	%r179, %r148, %r178;
	shl.b32 	%r180, %r179, 1;
	cvt.u64.u32 	%rd57, %r180;
	add.s64 	%rd58, %rd27, %rd57;
	cvt.u32.u64 	%r401, %rd58;
	or.b32  	%r181, %r138, 128;
	xor.b32  	%r182, %r148, %r181;
	shl.b32 	%r183, %r182, 1;
	cvt.u64.u32 	%rd59, %r183;
	add.s64 	%rd60, %rd27, %rd59;
	cvt.u32.u64 	%r406, %rd60;
	or.b32  	%r184, %r132, 144;
	xor.b32  	%r185, %r184, %r133;
	or.b32  	%r186, %r136, %r185;
	or.b32  	%r187, %r186, %r135;
	xor.b32  	%r188, %r148, %r187;
	shl.b32 	%r189, %r188, 1;
	cvt.u64.u32 	%rd61, %r189;
	add.s64 	%rd62, %rd27, %rd61;
	cvt.u32.u64 	%r411, %rd62;
	or.b32  	%r190, %r134, 160;
	xor.b32  	%r191, %r190, %r135;
	or.b32  	%r192, %r191, %r136;
	xor.b32  	%r193, %r148, %r192;
	shl.b32 	%r194, %r193, 1;
	cvt.u64.u32 	%rd63, %r194;
	add.s64 	%rd64, %rd27, %rd63;
	cvt.u32.u64 	%r416, %rd64;
	or.b32  	%r195, %r132, 176;
	xor.b32  	%r196, %r157, %r195;
	or.b32  	%r197, %r196, %r136;
	xor.b32  	%r198, %r148, %r197;
	shl.b32 	%r199, %r198, 1;
	cvt.u64.u32 	%rd65, %r199;
	add.s64 	%rd66, %rd27, %rd65;
	cvt.u32.u64 	%r421, %rd66;
	or.b32  	%r200, %r138, 192;
	xor.b32  	%r201, %r148, %r200;
	shl.b32 	%r202, %r201, 1;
	cvt.u64.u32 	%rd67, %r202;
	add.s64 	%rd68, %rd27, %rd67;
	cvt.u32.u64 	%r426, %rd68;
	or.b32  	%r203, %r132, 208;
	xor.b32  	%r204, %r203, %r133;
	or.b32  	%r205, %r136, %r204;
	or.b32  	%r206, %r205, %r135;
	xor.b32  	%r207, %r148, %r206;
	shl.b32 	%r208, %r207, 1;
	cvt.u64.u32 	%rd69, %r208;
	add.s64 	%rd70, %rd27, %rd69;
	cvt.u32.u64 	%r431, %rd70;
	or.b32  	%r209, %r134, 224;
	xor.b32  	%r210, %r209, %r135;
	or.b32  	%r211, %r210, %r136;
	xor.b32  	%r212, %r148, %r211;
	shl.b32 	%r213, %r212, 1;
	cvt.u64.u32 	%rd71, %r213;
	add.s64 	%rd72, %rd27, %rd71;
	cvt.u32.u64 	%r436, %rd72;
	or.b32  	%r214, %r132, 240;
	xor.b32  	%r215, %r157, %r214;
	or.b32  	%r216, %r215, %r136;
	xor.b32  	%r217, %r148, %r216;
	shl.b32 	%r218, %r217, 1;
	cvt.u64.u32 	%rd73, %r218;
	add.s64 	%rd74, %rd27, %rd73;
	cvt.u32.u64 	%r441, %rd74;
	or.b32  	%r219, %r138, 256;
	xor.b32  	%r220, %r148, %r219;
	shl.b32 	%r221, %r220, 1;
	cvt.u64.u32 	%rd75, %r221;
	add.s64 	%rd76, %rd27, %rd75;
	cvt.u32.u64 	%r446, %rd76;
	or.b32  	%r222, %r132, 272;
	xor.b32  	%r223, %r222, %r133;
	or.b32  	%r224, %r136, %r223;
	or.b32  	%r225, %r224, %r135;
	xor.b32  	%r226, %r148, %r225;
	shl.b32 	%r227, %r226, 1;
	cvt.u64.u32 	%rd77, %r227;
	add.s64 	%rd78, %rd27, %rd77;
	cvt.u32.u64 	%r451, %rd78;
	or.b32  	%r228, %r134, 288;
	xor.b32  	%r229, %r228, %r135;
	or.b32  	%r230, %r229, %r136;
	xor.b32  	%r231, %r148, %r230;
	shl.b32 	%r232, %r231, 1;
	cvt.u64.u32 	%rd79, %r232;
	add.s64 	%rd80, %rd27, %rd79;
	cvt.u32.u64 	%r456, %rd80;
	or.b32  	%r233, %r132, 304;
	xor.b32  	%r234, %r157, %r233;
	or.b32  	%r235, %r234, %r136;
	xor.b32  	%r236, %r148, %r235;
	shl.b32 	%r237, %r236, 1;
	cvt.u64.u32 	%rd81, %r237;
	add.s64 	%rd82, %rd27, %rd81;
	cvt.u32.u64 	%r461, %rd82;
	or.b32  	%r238, %r138, 320;
	xor.b32  	%r239, %r148, %r238;
	shl.b32 	%r240, %r239, 1;
	cvt.u64.u32 	%rd83, %r240;
	add.s64 	%rd84, %rd27, %rd83;
	cvt.u32.u64 	%r466, %rd84;
	or.b32  	%r241, %r132, 336;
	xor.b32  	%r242, %r241, %r133;
	or.b32  	%r243, %r136, %r242;
	or.b32  	%r244, %r243, %r135;
	xor.b32  	%r245, %r148, %r244;
	shl.b32 	%r246, %r245, 1;
	cvt.u64.u32 	%rd85, %r246;
	add.s64 	%rd86, %rd27, %rd85;
	cvt.u32.u64 	%r471, %rd86;
	or.b32  	%r247, %r134, 352;
	xor.b32  	%r248, %r247, %r135;
	or.b32  	%r249, %r248, %r136;
	xor.b32  	%r250, %r148, %r249;
	shl.b32 	%r251, %r250, 1;
	cvt.u64.u32 	%rd87, %r251;
	add.s64 	%rd88, %rd27, %rd87;
	cvt.u32.u64 	%r476, %rd88;
	or.b32  	%r252, %r132, 368;
	xor.b32  	%r253, %r157, %r252;
	or.b32  	%r254, %r253, %r136;
	xor.b32  	%r255, %r148, %r254;
	shl.b32 	%r256, %r255, 1;
	cvt.u64.u32 	%rd89, %r256;
	add.s64 	%rd90, %rd27, %rd89;
	cvt.u32.u64 	%r481, %rd90;
	or.b32  	%r257, %r138, 384;
	xor.b32  	%r258, %r148, %r257;
	shl.b32 	%r259, %r258, 1;
	cvt.u64.u32 	%rd91, %r259;
	add.s64 	%rd92, %rd27, %rd91;
	cvt.u32.u64 	%r486, %rd92;
	or.b32  	%r260, %r132, 400;
	xor.b32  	%r261, %r260, %r133;
	or.b32  	%r262, %r136, %r261;
	or.b32  	%r263, %r262, %r135;
	xor.b32  	%r264, %r148, %r263;
	shl.b32 	%r265, %r264, 1;
	cvt.u64.u32 	%rd93, %r265;
	add.s64 	%rd94, %rd27, %rd93;
	cvt.u32.u64 	%r491, %rd94;
	or.b32  	%r266, %r134, 416;
	xor.b32  	%r267, %r266, %r135;
	or.b32  	%r268, %r267, %r136;
	xor.b32  	%r269, %r148, %r268;
	shl.b32 	%r270, %r269, 1;
	cvt.u64.u32 	%rd95, %r270;
	add.s64 	%rd96, %rd27, %rd95;
	cvt.u32.u64 	%r496, %rd96;
	or.b32  	%r271, %r132, 432;
	xor.b32  	%r272, %r157, %r271;
	or.b32  	%r273, %r272, %r136;
	xor.b32  	%r274, %r148, %r273;
	shl.b32 	%r275, %r274, 1;
	cvt.u64.u32 	%rd97, %r275;
	add.s64 	%rd98, %rd27, %rd97;
	cvt.u32.u64 	%r501, %rd98;
	or.b32  	%r276, %r138, 448;
	xor.b32  	%r277, %r148, %r276;
	shl.b32 	%r278, %r277, 1;
	cvt.u64.u32 	%rd99, %r278;
	add.s64 	%rd100, %rd27, %rd99;
	cvt.u32.u64 	%r506, %rd100;
	or.b32  	%r279, %r132, 464;
	xor.b32  	%r280, %r279, %r133;
	or.b32  	%r281, %r136, %r280;
	or.b32  	%r282, %r281, %r135;
	xor.b32  	%r283, %r148, %r282;
	shl.b32 	%r284, %r283, 1;
	cvt.u64.u32 	%rd101, %r284;
	add.s64 	%rd102, %rd27, %rd101;
	cvt.u32.u64 	%r511, %rd102;
	or.b32  	%r285, %r134, 480;
	xor.b32  	%r286, %r285, %r135;
	or.b32  	%r287, %r286, %r136;
	xor.b32  	%r288, %r148, %r287;
	shl.b32 	%r289, %r288, 1;
	cvt.u64.u32 	%rd103, %r289;
	add.s64 	%rd104, %rd27, %rd103;
	cvt.u32.u64 	%r516, %rd104;
	or.b32  	%r290, %r132, 496;
	xor.b32  	%r291, %r157, %r290;
	or.b32  	%r292, %r291, %r136;
	xor.b32  	%r293, %r148, %r292;
	shl.b32 	%r294, %r293, 1;
	cvt.u64.u32 	%rd105, %r294;
	add.s64 	%rd106, %rd27, %rd105;
	cvt.u32.u64 	%r521, %rd106;
	or.b64  	%rd107, %rd2, %rd25;
	shl.b64 	%rd108, %rd107, 12;
	or.b32  	%r295, %r75, %r62;
	or.b32  	%r296, %r83, %r295;
	or.b32  	%r297, %r296, %r53;
	mul.wide.u32 	%rd109, %r297, 2;
	add.s64 	%rd110, %rd108, %rd109;
	add.s64 	%rd111, %rd110, %rd24;
	add.s64 	%rd151, %rd111, 122880;
	mov.f32 	%f273, 0f00000000;
	mov.b32 	%r757, -512;
	mov.f32 	%f274, %f273;
	mov.f32 	%f275, %f273;
	mov.f32 	%f276, %f273;
$L__BB1_1:
	add.s64 	%rd112, %rd151, -122880;
	add.s64 	%rd113, %rd151, -114688;
	add.s64 	%rd114, %rd151, -106496;
	add.s64 	%rd115, %rd151, -98304;
	add.s64 	%rd116, %rd151, -90112;
	add.s64 	%rd117, %rd151, -81920;
	add.s64 	%rd118, %rd151, -73728;
	add.s64 	%rd119, %rd151, -65536;
	add.s64 	%rd120, %rd151, -57344;
	add.s64 	%rd121, %rd151, -49152;
	add.s64 	%rd122, %rd151, -40960;
	add.s64 	%rd123, %rd151, -32768;
	add.s64 	%rd124, %rd151, -24576;
	add.s64 	%rd125, %rd151, -16384;
	add.s64 	%rd126, %rd151, -8192;
	// begin inline asm
	mov.u32 %r298, 0x0;
	mov.u32 %r299, 0x0;
	mov.u32 %r300, 0x0;
	mov.u32 %r301, 0x0;
	ld.global.v4.b32 { %r298, %r299, %r300, %r301 }, [ %rd112 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r302, 0x0;
	mov.u32 %r303, 0x0;
	mov.u32 %r304, 0x0;
	mov.u32 %r305, 0x0;
	ld.global.v4.b32 { %r302, %r303, %r304, %r305 }, [ %rd113 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r306, 0x0;
	mov.u32 %r307, 0x0;
	mov.u32 %r308, 0x0;
	mov.u32 %r309, 0x0;
	ld.global.v4.b32 { %r306, %r307, %r308, %r309 }, [ %rd114 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r310, 0x0;
	mov.u32 %r311, 0x0;
	mov.u32 %r312, 0x0;
	mov.u32 %r313, 0x0;
	ld.global.v4.b32 { %r310, %r311, %r312, %r313 }, [ %rd115 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r314, 0x0;
	mov.u32 %r315, 0x0;
	mov.u32 %r316, 0x0;
	mov.u32 %r317, 0x0;
	ld.global.v4.b32 { %r314, %r315, %r316, %r317 }, [ %rd116 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r318, 0x0;
	mov.u32 %r319, 0x0;
	mov.u32 %r320, 0x0;
	mov.u32 %r321, 0x0;
	ld.global.v4.b32 { %r318, %r319, %r320, %r321 }, [ %rd117 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r322, 0x0;
	mov.u32 %r323, 0x0;
	mov.u32 %r324, 0x0;
	mov.u32 %r325, 0x0;
	ld.global.v4.b32 { %r322, %r323, %r324, %r325 }, [ %rd118 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r326, 0x0;
	mov.u32 %r327, 0x0;
	mov.u32 %r328, 0x0;
	mov.u32 %r329, 0x0;
	ld.global.v4.b32 { %r326, %r327, %r328, %r329 }, [ %rd119 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r330, 0x0;
	mov.u32 %r331, 0x0;
	mov.u32 %r332, 0x0;
	mov.u32 %r333, 0x0;
	ld.global.v4.b32 { %r330, %r331, %r332, %r333 }, [ %rd120 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r334, 0x0;
	mov.u32 %r335, 0x0;
	mov.u32 %r336, 0x0;
	mov.u32 %r337, 0x0;
	ld.global.v4.b32 { %r334, %r335, %r336, %r337 }, [ %rd121 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r338, 0x0;
	mov.u32 %r339, 0x0;
	mov.u32 %r340, 0x0;
	mov.u32 %r341, 0x0;
	ld.global.v4.b32 { %r338, %r339, %r340, %r341 }, [ %rd122 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r342, 0x0;
	mov.u32 %r343, 0x0;
	mov.u32 %r344, 0x0;
	mov.u32 %r345, 0x0;
	ld.global.v4.b32 { %r342, %r343, %r344, %r345 }, [ %rd123 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r346, 0x0;
	mov.u32 %r347, 0x0;
	mov.u32 %r348, 0x0;
	mov.u32 %r349, 0x0;
	ld.global.v4.b32 { %r346, %r347, %r348, %r349 }, [ %rd124 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r350, 0x0;
	mov.u32 %r351, 0x0;
	mov.u32 %r352, 0x0;
	mov.u32 %r353, 0x0;
	ld.global.v4.b32 { %r350, %r351, %r352, %r353 }, [ %rd125 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r354, 0x0;
	mov.u32 %r355, 0x0;
	mov.u32 %r356, 0x0;
	mov.u32 %r357, 0x0;
	ld.global.v4.b32 { %r354, %r355, %r356, %r357 }, [ %rd126 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r358, 0x0;
	mov.u32 %r359, 0x0;
	mov.u32 %r360, 0x0;
	mov.u32 %r361, 0x0;
	ld.global.v4.b32 { %r358, %r359, %r360, %r361 }, [ %rd151 + 0 ];
	// end inline asm
	bar.sync 	0;
	st.shared.v4.b32 	[%rd3], {%r298, %r299, %r300, %r301};
	st.shared.v4.b32 	[%rd4], {%r302, %r303, %r304, %r305};
	st.shared.v4.b32 	[%rd5], {%r306, %r307, %r308, %r309};
	st.shared.v4.b32 	[%rd6], {%r310, %r311, %r312, %r313};
	st.shared.v4.b32 	[%rd7], {%r314, %r315, %r316, %r317};
	st.shared.v4.b32 	[%rd8], {%r318, %r319, %r320, %r321};
	st.shared.v4.b32 	[%rd9], {%r322, %r323, %r324, %r325};
	st.shared.v4.b32 	[%rd10], {%r326, %r327, %r328, %r329};
	st.shared.v4.b32 	[%rd11], {%r330, %r331, %r332, %r333};
	st.shared.v4.b32 	[%rd12], {%r334, %r335, %r336, %r337};
	st.shared.v4.b32 	[%rd13], {%r338, %r339, %r340, %r341};
	st.shared.v4.b32 	[%rd14], {%r342, %r343, %r344, %r345};
	st.shared.v4.b32 	[%rd15], {%r346, %r347, %r348, %r349};
	st.shared.v4.b32 	[%rd16], {%r350, %r351, %r352, %r353};
	st.shared.v4.b32 	[%rd17], {%r354, %r355, %r356, %r357};
	st.shared.v4.b32 	[%rd18], {%r358, %r359, %r360, %r361};
	bar.sync 	0;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r362, %r363, %r364, %r365}, [%r366];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r367, %r368, %r369, %r370}, [%r371];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r372, %r373, %r374, %r375}, [%r376];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r377, %r378, %r379, %r380}, [%r381];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r382, %r383, %r384, %r385}, [%r386];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r387, %r388, %r389, %r390}, [%r391];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r392, %r393, %r394, %r395}, [%r396];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r397, %r398, %r399, %r400}, [%r401];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r402, %r403, %r404, %r405}, [%r406];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r407, %r408, %r409, %r410}, [%r411];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r412, %r413, %r414, %r415}, [%r416];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r417, %r418, %r419, %r420}, [%r421];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r422, %r423, %r424, %r425}, [%r426];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r427, %r428, %r429, %r430}, [%r431];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r432, %r433, %r434, %r435}, [%r436];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r437, %r438, %r439, %r440}, [%r441];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r442, %r443, %r444, %r445}, [%r446];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r447, %r448, %r449, %r450}, [%r451];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r452, %r453, %r454, %r455}, [%r456];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r457, %r458, %r459, %r460}, [%r461];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r462, %r463, %r464, %r465}, [%r466];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r467, %r468, %r469, %r470}, [%r471];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r472, %r473, %r474, %r475}, [%r476];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r477, %r478, %r479, %r480}, [%r481];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r482, %r483, %r484, %r485}, [%r486];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r487, %r488, %r489, %r490}, [%r491];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r492, %r493, %r494, %r495}, [%r496];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r497, %r498, %r499, %r500}, [%r501];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r502, %r503, %r504, %r505}, [%r506];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r507, %r508, %r509, %r510}, [%r511];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r512, %r513, %r514, %r515}, [%r516];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r517, %r518, %r519, %r520}, [%r521];
	// end inline asm
	mov.b32 	%r526, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r362, %r363, %r364, %r365 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r367, %r368, %r369, %r370 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r372, %r373, %r374, %r375 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r377, %r378, %r379, %r380 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r382, %r383, %r384, %r385 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r387, %r388, %r389, %r390 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r392, %r393, %r394, %r395 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r397, %r398, %r399, %r400 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r402, %r403, %r404, %r405 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r407, %r408, %r409, %r410 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r412, %r413, %r414, %r415 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r417, %r418, %r419, %r420 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r422, %r423, %r424, %r425 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r427, %r428, %r429, %r430 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r432, %r433, %r434, %r435 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r437, %r438, %r439, %r440 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r442, %r443, %r444, %r445 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r447, %r448, %r449, %r450 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r452, %r453, %r454, %r455 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r457, %r458, %r459, %r460 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r462, %r463, %r464, %r465 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r467, %r468, %r469, %r470 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r472, %r473, %r474, %r475 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r477, %r478, %r479, %r480 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r482, %r483, %r484, %r485 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r487, %r488, %r489, %r490 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r492, %r493, %r494, %r495 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r497, %r498, %r499, %r500 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r502, %r503, %r504, %r505 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r507, %r508, %r509, %r510 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r512, %r513, %r514, %r515 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r517, %r518, %r519, %r520 }, { %r526, %r526 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	add.s32 	%r757, %r757, 512;
	add.s64 	%rd151, %rd151, 1024;
	setp.lt.u32 	%p2, %r757, 1536;
	@%p2 bra 	$L__BB1_1;
	shl.b32 	%r724, %r2, 4;
	sub.s32 	%r725, %r41, %r724;
	div.s32 	%r726, %r725, %r3;
	mov.b32 	%r714, %f273;
	// begin inline asm
	cvt.rn.bf16.f32 %rs5, %r714;
	// end inline asm
	mov.b32 	%r715, %f274;
	// begin inline asm
	cvt.rn.bf16.f32 %rs6, %r715;
	// end inline asm
	mov.b32 	%r716, %f275;
	// begin inline asm
	cvt.rn.bf16.f32 %rs7, %r716;
	// end inline asm
	mov.b32 	%r717, %f276;
	// begin inline asm
	cvt.rn.bf16.f32 %rs8, %r717;
	// end inline asm
	shl.b32 	%r727, %r726, 4;
	cvt.s64.s32 	%rd129, %r727;
	shl.b32 	%r728, %r4, 2;
	and.b32  	%r729, %r728, 28;
	cvt.u64.u32 	%rd130, %r729;
	or.b64  	%rd131, %rd2, %rd130;
	bfe.u32 	%r730, %r4, 3, 3;
	selp.b32 	%r731, 8, 0, %p1;
	or.b32  	%r732, %r730, %r731;
	cvt.u64.u32 	%rd132, %r732;
	or.b64  	%rd133, %rd129, %rd132;
	shl.b64 	%rd134, %rd131, 1;
	add.s64 	%rd135, %rd1, %rd134;
	shl.b64 	%rd136, %rd133, 11;
	add.s64 	%rd128, %rd135, %rd136;
	bar.sync 	0;
	shl.b32 	%r733, %r4, 6;
	shr.u32 	%r734, %r4, 2;
	or.b32  	%r735, %r734, %r733;
	and.b32  	%r736, %r735, 195;
	shr.u32 	%r737, %r5, 2;
	or.b32  	%r738, %r736, %r737;
	selp.b32 	%r739, 16, 0, %p1;
	or.b32  	%r740, %r738, %r739;
	or.b32  	%r741, %r740, %r6;
	and.b32  	%r742, %r728, 252;
	selp.b32 	%r743, 256, 0, %p1;
	or.b32  	%r744, %r742, %r743;
	shr.u32 	%r745, %r741, 3;
	and.b32  	%r746, %r745, 60;
	add.s32 	%r747, %r746, %r741;
	shl.b32 	%r748, %r747, 1;
	cvt.u64.u32 	%rd137, %r748;
	add.s64 	%rd139, %rd27, %rd137;
	cvt.u32.u64 	%r718, %rd139;
	mov.pred 	%p3, -1;
	// begin inline asm
	@%p3 st.shared.b16 [ %r718 + 0 ], %rs5;
	// end inline asm
	or.b32  	%r749, %r741, 32;
	shr.u32 	%r750, %r749, 3;
	and.b32  	%r751, %r750, 134217724;
	cvt.u64.u32 	%rd140, %r741;
	cvt.u64.u32 	%rd141, %r751;
	add.s64 	%rd142, %rd141, %rd140;
	shl.b64 	%rd143, %rd142, 1;
	add.s64 	%rd144, %rd27, %rd143;
	cvt.u32.u64 	%r752, %rd144;
	add.s32 	%r719, %r752, 64;
	// begin inline asm
	@%p3 st.shared.b16 [ %r719 + 0 ], %rs6;
	// end inline asm
	cvt.u64.u32 	%rd145, %r746;
	add.s64 	%rd146, %rd140, %rd145;
	shl.b64 	%rd147, %rd146, 1;
	add.s64 	%rd148, %rd27, %rd147;
	cvt.u32.u64 	%r753, %rd148;
	add.s32 	%r720, %r753, 16;
	// begin inline asm
	@%p3 st.shared.b16 [ %r720 + 0 ], %rs7;
	// end inline asm
	add.s32 	%r721, %r752, 80;
	// begin inline asm
	@%p3 st.shared.b16 [ %r721 + 0 ], %rs8;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r754, %r744, 3;
	and.b32  	%r755, %r754, 60;
	add.s32 	%r756, %r755, %r744;
	mul.wide.u32 	%rd149, %r756, 2;
	add.s64 	%rd150, %rd27, %rd149;
	ld.shared.v2.u32 	{%r722, %r723}, [%rd150];
	// begin inline asm
	st.global.v2.b32 [ %rd128 + 0 ], { %r722, %r723 };
	// end inline asm
	ret;

}
	// .globl	fusion_24
.visible .entry fusion_24(
	.param .u64 .ptr .align 16 fusion_24_param_0,
	.param .u64 .ptr .align 128 fusion_24_param_1,
	.param .u64 .ptr .align 128 fusion_24_param_2,
	.param .u64 .ptr .align 16 fusion_24_param_3,
	.param .u64 .ptr .align 128 fusion_24_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<49>;
	.reg .b32 	%r<104>;
	.reg .f32 	%f<122>;
	.reg .b64 	%rd<36>;

	ld.param.u64 	%rd10, [fusion_24_param_0];
	ld.param.u64 	%rd11, [fusion_24_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_24_param_1];
	ld.param.u64 	%rd14, [fusion_24_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_24_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd7, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd19, %r1, 256;
	shl.b64 	%rd20, %rd19, 1;
	add.s64 	%rd21, %rd17, %rd20;
	mov.u32 	%r81, %tid.x;
	and.b32  	%r82, %r81, 31;
	shl.b32 	%r83, %r81, 2;
	and.b32  	%r84, %r83, 124;
	setp.lt.u32 	%p4, %r81, 32;
	selp.b32 	%r85, 0, 128, %p4;
	or.b32  	%r86, %r84, %r85;
	mul.wide.u32 	%rd22, %r86, 2;
	add.s64 	%rd1, %rd21, %rd22;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	add.s64 	%rd23, %rd18, %rd20;
	add.s64 	%rd2, %rd23, %rd22;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.rn.f32 	%f9, %f1, %f5;
	add.rn.f32 	%f10, %f2, %f6;
	add.rn.f32 	%f11, %f3, %f7;
	add.rn.f32 	%f12, %f4, %f8;
	and.b64  	%rd24, %rd20, -2048;
	add.s64 	%rd25, %rd17, %rd24;
	shl.b32 	%r87, %r81, 3;
	and.b32  	%r88, %r87, 248;
	selp.b32 	%r89, 0, 256, %p4;
	or.b32  	%r90, %r88, %r89;
	mul.wide.u32 	%rd26, %r90, 2;
	add.s64 	%rd3, %rd25, %rd26;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	ld.global.v4.b32 { %r14, %r15, %r16, %r17 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	mov.b32 	{%rs13, %rs14}, %r16;
	mov.b32 	{%rs15, %rs16}, %r17;
	// begin inline asm
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v4.b32 { %r18, %r19, %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r18;
	mov.b32 	{%rs19, %rs20}, %r19;
	mov.b32 	{%rs21, %rs22}, %r20;
	mov.b32 	{%rs23, %rs24}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs9;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs10;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs11;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs12;
	// end inline asm
	mov.b32 	%f16, %r25;
	// begin inline asm
	cvt.f32.bf16 %r26, %rs13;
	// end inline asm
	mov.b32 	%f17, %r26;
	// begin inline asm
	cvt.f32.bf16 %r27, %rs14;
	// end inline asm
	mov.b32 	%f18, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs15;
	// end inline asm
	mov.b32 	%f19, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs16;
	// end inline asm
	mov.b32 	%f20, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs17;
	// end inline asm
	mov.b32 	%f21, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs18;
	// end inline asm
	mov.b32 	%f22, %r31;
	// begin inline asm
	cvt.f32.bf16 %r32, %rs19;
	// end inline asm
	mov.b32 	%f23, %r32;
	// begin inline asm
	cvt.f32.bf16 %r33, %rs20;
	// end inline asm
	mov.b32 	%f24, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs21;
	// end inline asm
	mov.b32 	%f25, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs22;
	// end inline asm
	mov.b32 	%f26, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs23;
	// end inline asm
	mov.b32 	%f27, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs24;
	// end inline asm
	mov.b32 	%f28, %r37;
	add.s64 	%rd27, %rd18, %rd24;
	add.s64 	%rd5, %rd27, %rd26;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	mov.u32 %r41, 0x0;
	ld.global.v4.b32 { %r38, %r39, %r40, %r41 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r38;
	mov.b32 	{%rs27, %rs28}, %r39;
	mov.b32 	{%rs29, %rs30}, %r40;
	mov.b32 	{%rs31, %rs32}, %r41;
	// begin inline asm
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	mov.u32 %r45, 0x0;
	ld.global.v4.b32 { %r42, %r43, %r44, %r45 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r42;
	mov.b32 	{%rs35, %rs36}, %r43;
	mov.b32 	{%rs37, %rs38}, %r44;
	mov.b32 	{%rs39, %rs40}, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs25;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs26;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs27;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs28;
	// end inline asm
	mov.b32 	%f32, %r49;
	// begin inline asm
	cvt.f32.bf16 %r50, %rs29;
	// end inline asm
	mov.b32 	%f33, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs30;
	// end inline asm
	mov.b32 	%f34, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs31;
	// end inline asm
	mov.b32 	%f35, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs32;
	// end inline asm
	mov.b32 	%f36, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs33;
	// end inline asm
	mov.b32 	%f37, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs34;
	// end inline asm
	mov.b32 	%f38, %r55;
	// begin inline asm
	cvt.f32.bf16 %r56, %rs35;
	// end inline asm
	mov.b32 	%f39, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs36;
	// end inline asm
	mov.b32 	%f40, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs37;
	// end inline asm
	mov.b32 	%f41, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs38;
	// end inline asm
	mov.b32 	%f42, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs39;
	// end inline asm
	mov.b32 	%f43, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs40;
	// end inline asm
	mov.b32 	%f44, %r61;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	add.rn.f32 	%f49, %f17, %f33;
	add.rn.f32 	%f50, %f18, %f34;
	add.rn.f32 	%f51, %f19, %f35;
	add.rn.f32 	%f52, %f20, %f36;
	add.rn.f32 	%f53, %f21, %f37;
	add.rn.f32 	%f54, %f22, %f38;
	add.rn.f32 	%f55, %f23, %f39;
	add.rn.f32 	%f56, %f24, %f40;
	add.rn.f32 	%f57, %f25, %f41;
	add.rn.f32 	%f58, %f26, %f42;
	add.rn.f32 	%f59, %f27, %f43;
	add.rn.f32 	%f60, %f28, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	mul.rn.f32 	%f65, %f49, %f49;
	mul.rn.f32 	%f66, %f50, %f50;
	mul.rn.f32 	%f67, %f51, %f51;
	mul.rn.f32 	%f68, %f52, %f52;
	mul.rn.f32 	%f69, %f53, %f53;
	mul.rn.f32 	%f70, %f54, %f54;
	mul.rn.f32 	%f71, %f55, %f55;
	mul.rn.f32 	%f72, %f56, %f56;
	mul.rn.f32 	%f73, %f57, %f57;
	mul.rn.f32 	%f74, %f58, %f58;
	mul.rn.f32 	%f75, %f59, %f59;
	mul.rn.f32 	%f76, %f60, %f60;
	add.rn.f32 	%f77, %f61, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	add.rn.f32 	%f80, %f79, %f65;
	add.rn.f32 	%f81, %f80, %f66;
	add.rn.f32 	%f82, %f81, %f67;
	add.rn.f32 	%f83, %f82, %f68;
	add.rn.f32 	%f84, %f83, %f69;
	add.rn.f32 	%f85, %f84, %f70;
	add.rn.f32 	%f86, %f85, %f71;
	add.rn.f32 	%f87, %f86, %f72;
	add.rn.f32 	%f88, %f87, %f73;
	add.rn.f32 	%f89, %f88, %f74;
	add.rn.f32 	%f90, %f89, %f75;
	add.rn.f32 	%f91, %f90, %f76;
	mov.b32 	%r91, %f91;
	shfl.sync.bfly.b32	%r92, %r91, 16, 31, -1;
	mov.b32 	%f92, %r92;
	add.rn.f32 	%f93, %f91, %f92;
	mov.b32 	%r93, %f93;
	shfl.sync.bfly.b32	%r94, %r93, 8, 31, -1;
	mov.b32 	%f94, %r94;
	add.rn.f32 	%f95, %f93, %f94;
	mov.b32 	%r95, %f95;
	shfl.sync.bfly.b32	%r96, %r95, 4, 31, -1;
	mov.b32 	%f96, %r96;
	add.rn.f32 	%f97, %f95, %f96;
	mov.b32 	%r97, %f97;
	shfl.sync.bfly.b32	%r98, %r97, 2, 31, -1;
	mov.b32 	%f98, %r98;
	add.rn.f32 	%f99, %f97, %f98;
	mov.b32 	%r99, %f99;
	shfl.sync.bfly.b32	%r100, %r99, 1, 31, -1;
	mov.b32 	%f100, %r100;
	add.rn.f32 	%f101, %f99, %f100;
	setp.eq.s32 	%p1, %r82, 0;
	shr.u32 	%r101, %r81, 3;
	and.b32  	%r102, %r101, 4;
	cvt.u64.u32 	%rd28, %r102;
	mov.u64 	%rd29, global_smem;
	add.s64 	%rd30, %rd29, %rd28;
	mov.b32 	%r63, %f101;
	cvt.u32.u64 	%r62, %rd30;
	// begin inline asm
	@%p1 st.shared.b32 [ %r62 + 0 ], %r63;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r81, 2;
	cvt.u64.u32 	%rd31, %r83;
	add.s64 	%rd32, %rd29, %rd31;
	cvt.u32.u64 	%r65, %rd32;
	// begin inline asm
	@%p2 ld.shared.b32 %r64, [ %r65 + 0 ];
	// end inline asm
	mov.b32 	%f102, %r64;
	shfl.sync.bfly.b32	%r103, %r64, 1, 31, -1;
	mov.b32 	%f103, %r103;
	add.rn.f32 	%f104, %f102, %f103;
	setp.eq.s32 	%p3, %r81, 0;
	mov.b32 	%r67, %f104;
	// begin inline asm
	@%p3 st.shared.b32 [ %r65 + 0 ], %r67;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f105, [global_smem];
	mul.rn.f32 	%f106, %f105, 0f3A800000;
	// begin inline asm
	mov.u32 %r68, 0x0;
	ld.global.b32 { %r68 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f107, %r68;
	add.rn.f32 	%f108, %f106, %f107;
	rsqrt.approx.f32 	%f109, %f108;
	mul.rn.f32 	%f110, %f9, %f109;
	mul.rn.f32 	%f111, %f10, %f109;
	mul.rn.f32 	%f112, %f11, %f109;
	mul.rn.f32 	%f113, %f12, %f109;
	and.b64  	%rd33, %rd20, 1536;
	add.s64 	%rd34, %rd15, %rd33;
	add.s64 	%rd8, %rd34, %rd22;
	// begin inline asm
	mov.u32 %r69, 0x0;
	mov.u32 %r70, 0x0;
	ld.global.v2.b32 { %r69, %r70 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r69;
	mov.b32 	{%rs43, %rs44}, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs41;
	// end inline asm
	mov.b32 	%f114, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs42;
	// end inline asm
	mov.b32 	%f115, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs43;
	// end inline asm
	mov.b32 	%f116, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs44;
	// end inline asm
	mov.b32 	%f117, %r74;
	mul.rn.f32 	%f118, %f110, %f114;
	mul.rn.f32 	%f119, %f111, %f115;
	mul.rn.f32 	%f120, %f112, %f116;
	mul.rn.f32 	%f121, %f113, %f117;
	mov.b32 	%r75, %f118;
	// begin inline asm
	cvt.rn.bf16.f32 %rs45, %r75;
	// end inline asm
	mov.b32 	%r76, %f119;
	// begin inline asm
	cvt.rn.bf16.f32 %rs46, %r76;
	// end inline asm
	mov.b32 	%r77, %f120;
	// begin inline asm
	cvt.rn.bf16.f32 %rs47, %r77;
	// end inline asm
	mov.b32 	%r78, %f121;
	// begin inline asm
	cvt.rn.bf16.f32 %rs48, %r78;
	// end inline asm
	add.s64 	%rd35, %rd12, %rd20;
	add.s64 	%rd9, %rd35, %rd22;
	mov.b32 	%r79, {%rs45, %rs46};
	mov.b32 	%r80, {%rs47, %rs48};
	// begin inline asm
	st.global.v2.b32 [ %rd9 + 0 ], { %r79, %r80 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion
.visible .entry loop_convert_fusion(
	.param .u64 .ptr .align 128 loop_convert_fusion_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 4;
	mul.lo.s16 	%rs4, %rs3, 24;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 7;
	cvt.u32.u16 	%r3, %rs6;
	or.b32  	%r4, %r1, %r3;
	mul.wide.u16 	%r5, %rs3, 6144;
	add.s32 	%r6, %r4, %r5;
	mul.wide.u32 	%rd5, %r6, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs7, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	mul.rn.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.f32 	%f3, %f2;
	cvt.rn.bf16.f32 	%rs8, %f3;
	cvt.f32.bf16 	%f4, %rs8;
	add.rn.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.f32 	%f6, %f5;
	ld.global.nc.u16 	%rs9, [%rd6+6144];
	mul.rn.f32 	%f7, %f6, %f1;
	cvt.f32.bf16 	%f8, %rs9;
	mul.rn.f32 	%f9, %f7, %f8;
	cvt.rn.bf16.f32 	%rs10, %f9;
	shl.b32 	%r7, %r2, 7;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd7, %r8, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs10;
	ret;

}
	// .globl	fusion_25
.visible .entry fusion_25(
	.param .u64 .ptr .align 16 fusion_25_param_0,
	.param .u64 .ptr .align 128 fusion_25_param_1,
	.param .u64 .ptr .align 128 fusion_25_param_2,
	.param .u64 .ptr .align 128 fusion_25_param_3,
	.param .u64 .ptr .align 16 fusion_25_param_4,
	.param .u64 .ptr .align 128 fusion_25_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<81>;
	.reg .b32 	%r<149>;
	.reg .f32 	%f<178>;
	.reg .b64 	%rd<35>;

	ld.param.u64 	%rd12, [fusion_25_param_0];
	ld.param.u64 	%rd13, [fusion_25_param_5];
	cvta.to.global.u64 	%rd14, %rd13;
	ld.param.u64 	%rd15, [fusion_25_param_1];
	ld.param.u64 	%rd16, [fusion_25_param_4];
	cvta.to.global.u64 	%rd17, %rd16;
	ld.param.u64 	%rd18, [fusion_25_param_2];
	ld.param.u64 	%rd19, [fusion_25_param_3];
	cvta.to.global.u64 	%rd20, %rd19;
	cvta.to.global.u64 	%rd21, %rd18;
	cvta.to.global.u64 	%rd22, %rd15;
	cvta.to.global.u64 	%rd7, %rd12;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd23, %r1, 1024;
	shl.b64 	%rd24, %rd23, 1;
	add.s64 	%rd25, %rd20, %rd24;
	mov.u32 	%r129, %tid.x;
	and.b32  	%r130, %r129, 31;
	shl.b32 	%r131, %r129, 3;
	and.b32  	%r132, %r131, 248;
	setp.lt.u32 	%p4, %r129, 32;
	selp.b32 	%r133, 0, 256, %p4;
	or.b32  	%r134, %r132, %r133;
	mul.wide.u32 	%rd26, %r134, 2;
	add.s64 	%rd1, %rd25, %rd26;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	add.s64 	%rd27, %rd21, %rd24;
	add.s64 	%rd3, %rd27, %rd26;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd28, %rd22, %rd24;
	add.s64 	%rd5, %rd28, %rd26;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.rn.f32 	%f49, %f17, %f33;
	add.rn.f32 	%f50, %f18, %f34;
	add.rn.f32 	%f51, %f19, %f35;
	add.rn.f32 	%f52, %f20, %f36;
	add.rn.f32 	%f53, %f21, %f37;
	add.rn.f32 	%f54, %f22, %f38;
	add.rn.f32 	%f55, %f23, %f39;
	add.rn.f32 	%f56, %f24, %f40;
	add.rn.f32 	%f57, %f25, %f41;
	add.rn.f32 	%f58, %f26, %f42;
	add.rn.f32 	%f59, %f27, %f43;
	add.rn.f32 	%f60, %f28, %f44;
	add.rn.f32 	%f61, %f29, %f45;
	add.rn.f32 	%f62, %f30, %f46;
	add.rn.f32 	%f63, %f31, %f47;
	add.rn.f32 	%f64, %f32, %f48;
	add.rn.f32 	%f65, %f1, %f49;
	add.rn.f32 	%f66, %f2, %f50;
	add.rn.f32 	%f67, %f3, %f51;
	add.rn.f32 	%f68, %f4, %f52;
	add.rn.f32 	%f69, %f5, %f53;
	add.rn.f32 	%f70, %f6, %f54;
	add.rn.f32 	%f71, %f7, %f55;
	add.rn.f32 	%f72, %f8, %f56;
	add.rn.f32 	%f73, %f9, %f57;
	add.rn.f32 	%f74, %f10, %f58;
	add.rn.f32 	%f75, %f11, %f59;
	add.rn.f32 	%f76, %f12, %f60;
	add.rn.f32 	%f77, %f13, %f61;
	add.rn.f32 	%f78, %f14, %f62;
	add.rn.f32 	%f79, %f15, %f63;
	add.rn.f32 	%f80, %f16, %f64;
	mul.rn.f32 	%f81, %f65, %f65;
	mul.rn.f32 	%f82, %f66, %f66;
	mul.rn.f32 	%f83, %f67, %f67;
	mul.rn.f32 	%f84, %f68, %f68;
	mul.rn.f32 	%f85, %f69, %f69;
	mul.rn.f32 	%f86, %f70, %f70;
	mul.rn.f32 	%f87, %f71, %f71;
	mul.rn.f32 	%f88, %f72, %f72;
	mul.rn.f32 	%f89, %f73, %f73;
	mul.rn.f32 	%f90, %f74, %f74;
	mul.rn.f32 	%f91, %f75, %f75;
	mul.rn.f32 	%f92, %f76, %f76;
	mul.rn.f32 	%f93, %f77, %f77;
	mul.rn.f32 	%f94, %f78, %f78;
	mul.rn.f32 	%f95, %f79, %f79;
	mul.rn.f32 	%f96, %f80, %f80;
	add.rn.f32 	%f97, %f81, %f82;
	add.rn.f32 	%f98, %f97, %f83;
	add.rn.f32 	%f99, %f98, %f84;
	add.rn.f32 	%f100, %f99, %f85;
	add.rn.f32 	%f101, %f100, %f86;
	add.rn.f32 	%f102, %f101, %f87;
	add.rn.f32 	%f103, %f102, %f88;
	add.rn.f32 	%f104, %f103, %f89;
	add.rn.f32 	%f105, %f104, %f90;
	add.rn.f32 	%f106, %f105, %f91;
	add.rn.f32 	%f107, %f106, %f92;
	add.rn.f32 	%f108, %f107, %f93;
	add.rn.f32 	%f109, %f108, %f94;
	add.rn.f32 	%f110, %f109, %f95;
	add.rn.f32 	%f111, %f110, %f96;
	mov.b32 	%r135, %f111;
	shfl.sync.bfly.b32	%r136, %r135, 16, 31, -1;
	mov.b32 	%f112, %r136;
	add.rn.f32 	%f113, %f111, %f112;
	mov.b32 	%r137, %f113;
	shfl.sync.bfly.b32	%r138, %r137, 8, 31, -1;
	mov.b32 	%f114, %r138;
	add.rn.f32 	%f115, %f113, %f114;
	mov.b32 	%r139, %f115;
	shfl.sync.bfly.b32	%r140, %r139, 4, 31, -1;
	mov.b32 	%f116, %r140;
	add.rn.f32 	%f117, %f115, %f116;
	mov.b32 	%r141, %f117;
	shfl.sync.bfly.b32	%r142, %r141, 2, 31, -1;
	mov.b32 	%f118, %r142;
	add.rn.f32 	%f119, %f117, %f118;
	mov.b32 	%r143, %f119;
	shfl.sync.bfly.b32	%r144, %r143, 1, 31, -1;
	mov.b32 	%f120, %r144;
	add.rn.f32 	%f121, %f119, %f120;
	setp.eq.s32 	%p1, %r130, 0;
	shr.u32 	%r145, %r129, 3;
	and.b32  	%r146, %r145, 4;
	cvt.u64.u32 	%rd29, %r146;
	mov.u64 	%rd30, global_smem;
	add.s64 	%rd31, %rd30, %rd29;
	mov.b32 	%r75, %f121;
	cvt.u32.u64 	%r74, %rd31;
	// begin inline asm
	@%p1 st.shared.b32 [ %r74 + 0 ], %r75;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r129, 2;
	shl.b32 	%r147, %r129, 2;
	cvt.u64.u32 	%rd32, %r147;
	add.s64 	%rd33, %rd30, %rd32;
	cvt.u32.u64 	%r77, %rd33;
	// begin inline asm
	@%p2 ld.shared.b32 %r76, [ %r77 + 0 ];
	// end inline asm
	mov.b32 	%f122, %r76;
	shfl.sync.bfly.b32	%r148, %r76, 1, 31, -1;
	mov.b32 	%f123, %r148;
	add.rn.f32 	%f124, %f122, %f123;
	setp.eq.s32 	%p3, %r129, 0;
	mov.b32 	%r79, %f124;
	// begin inline asm
	@%p3 st.shared.b32 [ %r77 + 0 ], %r79;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f125, [global_smem];
	mul.rn.f32 	%f126, %f125, 0f3A800000;
	// begin inline asm
	mov.u32 %r80, 0x0;
	ld.global.b32 { %r80 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f127, %r80;
	add.rn.f32 	%f128, %f126, %f127;
	rsqrt.approx.f32 	%f129, %f128;
	mul.rn.f32 	%f130, %f65, %f129;
	mul.rn.f32 	%f131, %f66, %f129;
	mul.rn.f32 	%f132, %f67, %f129;
	mul.rn.f32 	%f133, %f68, %f129;
	mul.rn.f32 	%f134, %f69, %f129;
	mul.rn.f32 	%f135, %f70, %f129;
	mul.rn.f32 	%f136, %f71, %f129;
	mul.rn.f32 	%f137, %f72, %f129;
	mul.rn.f32 	%f138, %f73, %f129;
	mul.rn.f32 	%f139, %f74, %f129;
	mul.rn.f32 	%f140, %f75, %f129;
	mul.rn.f32 	%f141, %f76, %f129;
	mul.rn.f32 	%f142, %f77, %f129;
	mul.rn.f32 	%f143, %f78, %f129;
	mul.rn.f32 	%f144, %f79, %f129;
	mul.rn.f32 	%f145, %f80, %f129;
	add.s64 	%rd8, %rd17, %rd26;
	add.s64 	%rd9, %rd8, 1024;
	// begin inline asm
	mov.u32 %r81, 0x0;
	mov.u32 %r82, 0x0;
	mov.u32 %r83, 0x0;
	mov.u32 %r84, 0x0;
	ld.global.v4.b32 { %r81, %r82, %r83, %r84 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r81;
	mov.b32 	{%rs51, %rs52}, %r82;
	mov.b32 	{%rs53, %rs54}, %r83;
	mov.b32 	{%rs55, %rs56}, %r84;
	// begin inline asm
	mov.u32 %r85, 0x0;
	mov.u32 %r86, 0x0;
	mov.u32 %r87, 0x0;
	mov.u32 %r88, 0x0;
	ld.global.v4.b32 { %r85, %r86, %r87, %r88 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r85;
	mov.b32 	{%rs59, %rs60}, %r86;
	mov.b32 	{%rs61, %rs62}, %r87;
	mov.b32 	{%rs63, %rs64}, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs49;
	// end inline asm
	mov.b32 	%f146, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs50;
	// end inline asm
	mov.b32 	%f147, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs51;
	// end inline asm
	mov.b32 	%f148, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs52;
	// end inline asm
	mov.b32 	%f149, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs53;
	// end inline asm
	mov.b32 	%f150, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs54;
	// end inline asm
	mov.b32 	%f151, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs55;
	// end inline asm
	mov.b32 	%f152, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs56;
	// end inline asm
	mov.b32 	%f153, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs57;
	// end inline asm
	mov.b32 	%f154, %r97;
	// begin inline asm
	cvt.f32.bf16 %r98, %rs58;
	// end inline asm
	mov.b32 	%f155, %r98;
	// begin inline asm
	cvt.f32.bf16 %r99, %rs59;
	// end inline asm
	mov.b32 	%f156, %r99;
	// begin inline asm
	cvt.f32.bf16 %r100, %rs60;
	// end inline asm
	mov.b32 	%f157, %r100;
	// begin inline asm
	cvt.f32.bf16 %r101, %rs61;
	// end inline asm
	mov.b32 	%f158, %r101;
	// begin inline asm
	cvt.f32.bf16 %r102, %rs62;
	// end inline asm
	mov.b32 	%f159, %r102;
	// begin inline asm
	cvt.f32.bf16 %r103, %rs63;
	// end inline asm
	mov.b32 	%f160, %r103;
	// begin inline asm
	cvt.f32.bf16 %r104, %rs64;
	// end inline asm
	mov.b32 	%f161, %r104;
	mul.rn.f32 	%f162, %f130, %f146;
	mul.rn.f32 	%f163, %f131, %f147;
	mul.rn.f32 	%f164, %f132, %f148;
	mul.rn.f32 	%f165, %f133, %f149;
	mul.rn.f32 	%f166, %f134, %f150;
	mul.rn.f32 	%f167, %f135, %f151;
	mul.rn.f32 	%f168, %f136, %f152;
	mul.rn.f32 	%f169, %f137, %f153;
	mul.rn.f32 	%f170, %f138, %f154;
	mul.rn.f32 	%f171, %f139, %f155;
	mul.rn.f32 	%f172, %f140, %f156;
	mul.rn.f32 	%f173, %f141, %f157;
	mul.rn.f32 	%f174, %f142, %f158;
	mul.rn.f32 	%f175, %f143, %f159;
	mul.rn.f32 	%f176, %f144, %f160;
	mul.rn.f32 	%f177, %f145, %f161;
	mov.b32 	%r105, %f162;
	// begin inline asm
	cvt.rn.bf16.f32 %rs65, %r105;
	// end inline asm
	mov.b32 	%r106, %f163;
	// begin inline asm
	cvt.rn.bf16.f32 %rs66, %r106;
	// end inline asm
	mov.b32 	%r107, %f164;
	// begin inline asm
	cvt.rn.bf16.f32 %rs67, %r107;
	// end inline asm
	mov.b32 	%r108, %f165;
	// begin inline asm
	cvt.rn.bf16.f32 %rs68, %r108;
	// end inline asm
	mov.b32 	%r109, %f166;
	// begin inline asm
	cvt.rn.bf16.f32 %rs69, %r109;
	// end inline asm
	mov.b32 	%r110, %f167;
	// begin inline asm
	cvt.rn.bf16.f32 %rs70, %r110;
	// end inline asm
	mov.b32 	%r111, %f168;
	// begin inline asm
	cvt.rn.bf16.f32 %rs71, %r111;
	// end inline asm
	mov.b32 	%r112, %f169;
	// begin inline asm
	cvt.rn.bf16.f32 %rs72, %r112;
	// end inline asm
	mov.b32 	%r113, %f170;
	// begin inline asm
	cvt.rn.bf16.f32 %rs73, %r113;
	// end inline asm
	mov.b32 	%r114, %f171;
	// begin inline asm
	cvt.rn.bf16.f32 %rs74, %r114;
	// end inline asm
	mov.b32 	%r115, %f172;
	// begin inline asm
	cvt.rn.bf16.f32 %rs75, %r115;
	// end inline asm
	mov.b32 	%r116, %f173;
	// begin inline asm
	cvt.rn.bf16.f32 %rs76, %r116;
	// end inline asm
	mov.b32 	%r117, %f174;
	// begin inline asm
	cvt.rn.bf16.f32 %rs77, %r117;
	// end inline asm
	mov.b32 	%r118, %f175;
	// begin inline asm
	cvt.rn.bf16.f32 %rs78, %r118;
	// end inline asm
	mov.b32 	%r119, %f176;
	// begin inline asm
	cvt.rn.bf16.f32 %rs79, %r119;
	// end inline asm
	mov.b32 	%r120, %f177;
	// begin inline asm
	cvt.rn.bf16.f32 %rs80, %r120;
	// end inline asm
	add.s64 	%rd34, %rd14, %rd24;
	add.s64 	%rd10, %rd34, %rd26;
	add.s64 	%rd11, %rd10, 1024;
	mov.b32 	%r121, {%rs65, %rs66};
	mov.b32 	%r122, {%rs67, %rs68};
	mov.b32 	%r123, {%rs69, %rs70};
	mov.b32 	%r124, {%rs71, %rs72};
	// begin inline asm
	st.global.v4.b32 [ %rd10 + 0 ], { %r121, %r122, %r123, %r124 };
	// end inline asm
	mov.b32 	%r125, {%rs73, %rs74};
	mov.b32 	%r126, {%rs75, %rs76};
	mov.b32 	%r127, {%rs77, %rs78};
	mov.b32 	%r128, {%rs79, %rs80};
	// begin inline asm
	st.global.v4.b32 [ %rd11 + 0 ], { %r125, %r126, %r127, %r128 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 126976;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	fusion_21
.visible .entry fusion_21(
	.param .u64 .ptr .align 16 fusion_21_param_0,
	.param .u64 .ptr .align 128 fusion_21_param_1,
	.param .u64 .ptr .align 16 fusion_21_param_2,
	.param .u64 .ptr .align 128 fusion_21_param_3
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<78>;
	.reg .f32 	%f<60>;
	.reg .b64 	%rd<43>;

	ld.param.u64 	%rd6, [fusion_21_param_0];
	ld.param.u64 	%rd7, [fusion_21_param_3];
	cvta.to.global.u64 	%rd8, %rd7;
	ld.param.u64 	%rd9, [fusion_21_param_1];
	ld.param.u64 	%rd10, [fusion_21_param_2];
	cvta.to.global.u64 	%rd11, %rd10;
	cvta.to.global.u64 	%rd12, %rd9;
	cvta.to.global.u64 	%rd2, %rd6;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r43, %r1, 9;
	cvt.u64.u32 	%rd13, %r43;
	and.b64  	%rd14, %rd13, 512;
	mul.wide.s32 	%rd15, %r1, 2048;
	or.b64  	%rd16, %rd15, %rd14;
	shl.b64 	%rd17, %rd16, 1;
	or.b64  	%rd18, %rd17, 4096;
	add.s64 	%rd19, %rd12, %rd18;
	mov.u32 	%r44, %tid.x;
	shl.b32 	%r45, %r44, 3;
	and.b32  	%r46, %r45, 120;
	and.b32  	%r47, %r45, 248;
	setp.gt.u32 	%p4, %r44, 31;
	selp.b32 	%r48, 256, 0, %p4;
	or.b32  	%r49, %r47, %r48;
	mul.wide.u32 	%rd20, %r49, 2;
	add.s64 	%rd1, %rd19, %rd20;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs1;
	// end inline asm
	mov.b32 	%f1, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs2;
	// end inline asm
	mov.b32 	%f2, %r7;
	// begin inline asm
	cvt.f32.bf16 %r8, %rs3;
	// end inline asm
	mov.b32 	%f3, %r8;
	// begin inline asm
	cvt.f32.bf16 %r9, %rs4;
	// end inline asm
	mov.b32 	%f4, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	mul.rn.f32 	%f9, %f1, %f1;
	mul.rn.f32 	%f10, %f2, %f2;
	mul.rn.f32 	%f11, %f3, %f3;
	mul.rn.f32 	%f12, %f4, %f4;
	mul.rn.f32 	%f13, %f5, %f5;
	mul.rn.f32 	%f14, %f6, %f6;
	mul.rn.f32 	%f15, %f7, %f7;
	mul.rn.f32 	%f16, %f8, %f8;
	add.rn.f32 	%f17, %f9, %f10;
	add.rn.f32 	%f18, %f17, %f11;
	add.rn.f32 	%f19, %f18, %f12;
	add.rn.f32 	%f20, %f19, %f13;
	add.rn.f32 	%f21, %f20, %f14;
	add.rn.f32 	%f22, %f21, %f15;
	add.rn.f32 	%f23, %f22, %f16;
	mov.b32 	%r50, %f23;
	shfl.sync.bfly.b32	%r51, %r50, 8, 31, -1;
	mov.b32 	%f24, %r51;
	add.rn.f32 	%f25, %f23, %f24;
	mov.b32 	%r52, %f25;
	shfl.sync.bfly.b32	%r53, %r52, 4, 31, -1;
	mov.b32 	%f26, %r53;
	add.rn.f32 	%f27, %f25, %f26;
	mov.b32 	%r54, %f27;
	shfl.sync.bfly.b32	%r55, %r54, 2, 31, -1;
	mov.b32 	%f28, %r55;
	add.rn.f32 	%f29, %f27, %f28;
	mov.b32 	%r56, %f29;
	shfl.sync.bfly.b32	%r57, %r56, 1, 31, -1;
	mov.b32 	%f30, %r57;
	add.rn.f32 	%f31, %f29, %f30;
	mul.rn.f32 	%f32, %f31, 0f3C000000;
	// begin inline asm
	mov.u32 %r14, 0x0;
	ld.global.b32 { %r14 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r14;
	add.rn.f32 	%f34, %f32, %f33;
	rsqrt.approx.f32 	%f35, %f34;
	mul.rn.f32 	%f36, %f1, %f35;
	mul.rn.f32 	%f37, %f2, %f35;
	mul.rn.f32 	%f38, %f3, %f35;
	mul.rn.f32 	%f39, %f4, %f35;
	mul.rn.f32 	%f40, %f5, %f35;
	mul.rn.f32 	%f41, %f6, %f35;
	mul.rn.f32 	%f42, %f7, %f35;
	mul.rn.f32 	%f43, %f8, %f35;
	shl.b32 	%r58, %r44, 1;
	and.b32  	%r59, %r58, 62;
	selp.b32 	%r60, 64, 0, %p4;
	or.b32  	%r61, %r59, %r60;
	shl.b32 	%r62, %r44, 2;
	and.b32  	%r63, %r62, 124;
	cvt.u64.u32 	%rd21, %r63;
	mul.wide.u32 	%rd22, %r61, 2;
	add.s64 	%rd3, %rd11, %rd22;
	// begin inline asm
	mov.u32 %r15, 0x0;
	ld.global.b32 { %r15 }, [ %rd3 + 0 ];
	// end inline asm
	{ .reg .b16 tmp; mov.b32 {tmp, %rs10}, %r15; }
	mov.u64 	%rd23, global_smem;
	add.s64 	%rd24, %rd23, %rd22;
	cvt.u16.u32 	%rs9, %r15;
	cvt.u32.u64 	%r16, %rd24;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r16 + 0 ], { %rs9, %rs10 };
	// end inline asm
	bar.sync 	0;
	mul.wide.u32 	%rd25, %r46, 2;
	add.s64 	%rd26, %rd23, %rd25;
	ld.shared.v4.b32 	{%r64, %r65, %r66, %r67}, [%rd26];
	mov.b32 	{%rs17, %rs18}, %r67;
	mov.b32 	{%rs15, %rs16}, %r66;
	mov.b32 	{%rs13, %rs14}, %r65;
	mov.b32 	{%rs11, %rs12}, %r64;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs11;
	// end inline asm
	mov.b32 	%f44, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs12;
	// end inline asm
	mov.b32 	%f45, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs13;
	// end inline asm
	mov.b32 	%f46, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs14;
	// end inline asm
	mov.b32 	%f47, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs15;
	// end inline asm
	mov.b32 	%f48, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs16;
	// end inline asm
	mov.b32 	%f49, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs17;
	// end inline asm
	mov.b32 	%f50, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs18;
	// end inline asm
	mov.b32 	%f51, %r24;
	mul.rn.f32 	%f52, %f36, %f44;
	mul.rn.f32 	%f53, %f37, %f45;
	mul.rn.f32 	%f54, %f38, %f46;
	mul.rn.f32 	%f55, %f39, %f47;
	mul.rn.f32 	%f56, %f40, %f48;
	mul.rn.f32 	%f57, %f41, %f49;
	mul.rn.f32 	%f58, %f42, %f50;
	mul.rn.f32 	%f59, %f43, %f51;
	add.s64 	%rd27, %rd8, %rd15;
	selp.b64 	%rd28, 128, 0, %p4;
	selp.b64 	%rd29, 384, 256, %p4;
	or.b64  	%rd30, %rd28, %rd21;
	or.b64  	%rd31, %rd29, %rd21;
	shl.b64 	%rd32, %rd30, 2;
	add.s64 	%rd4, %rd27, %rd32;
	shl.b64 	%rd33, %rd31, 2;
	add.s64 	%rd5, %rd27, %rd33;
	bar.sync 	0;
	selp.b32 	%r68, 128, 0, %p4;
	or.b32  	%r69, %r63, %r68;
	shr.u32 	%r70, %r49, 4;
	and.b32  	%r71, %r70, 24;
	add.s32 	%r72, %r71, %r49;
	shl.b32 	%r73, %r72, 2;
	cvt.u64.u32 	%rd34, %r73;
	add.s64 	%rd35, %rd23, %rd34;
	mov.b32 	%r26, %f52;
	mov.b32 	%r27, %f53;
	mov.b32 	%r28, %f54;
	mov.b32 	%r29, %f55;
	mov.b32 	%r31, %f56;
	mov.b32 	%r32, %f57;
	mov.b32 	%r33, %f58;
	mov.b32 	%r34, %f59;
	cvt.u32.u64 	%r25, %rd35;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r25 + 0 ], { %r26, %r27, %r28, %r29 };
	// end inline asm
	add.s32 	%r30, %r25, 16;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r30 + 0 ], { %r31, %r32, %r33, %r34 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r74, %r68, 4;
	add.s32 	%r75, %r74, %r69;
	mul.wide.u32 	%rd36, %r75, 4;
	add.s64 	%rd37, %rd23, %rd36;
	or.b32  	%r76, %r68, 256;
	shr.u32 	%r77, %r76, 4;
	cvt.u64.u32 	%rd38, %r77;
	cvt.u64.u32 	%rd39, %r69;
	add.s64 	%rd40, %rd38, %rd39;
	shl.b64 	%rd41, %rd40, 2;
	add.s64 	%rd42, %rd23, %rd41;
	ld.shared.v4.u32 	{%r39, %r40, %r41, %r42}, [%rd42+1024];
	ld.shared.v4.u32 	{%r35, %r36, %r37, %r38}, [%rd37];
	// begin inline asm
	st.global.v4.b32 [ %rd4 + 0 ], { %r35, %r36, %r37, %r38 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd5 + 0 ], { %r39, %r40, %r41, %r42 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_3
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<11>;
	.reg .b64 	%rd<19>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd6, %rd5;
	cvta.to.global.u64 	%rd7, %rd4;
	cvta.to.global.u64 	%rd8, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd9, %r8, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd11, %r9;
	add.s64 	%rd12, %rd6, %rd11;
	ld.global.nc.u32 	%r10, [%rd12];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd13, %r14, 2;
	add.s64 	%rd14, %rd7, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	ld.global.nc.f32 	%f4, [%rd10+256];
	or.b32  	%r15, %r1, %r13;
	or.b32  	%r16, %r15, 64;
	mul.wide.u32 	%rd15, %r16, 2;
	add.s64 	%rd16, %rd7, %rd15;
	ld.global.nc.u16 	%rs2, [%rd16];
	cvt.f32.bf16 	%f5, %rs2;
	mul.rn.f32 	%f6, %f4, %f5;
	sub.rn.f32 	%f7, %f3, %f6;
	cvt.rn.bf16.f32 	%rs3, %f7;
	mul.wide.u32 	%rd17, %r8, 2;
	add.s64 	%rd18, %rd3, %rd17;
	st.global.b16 	[%rd18], %rs3;
	mul.rn.f32 	%f8, %f4, %f2;
	mul.rn.f32 	%f9, %f1, %f5;
	add.rn.f32 	%f10, %f8, %f9;
	cvt.rn.bf16.f32 	%rs4, %f10;
	st.global.b16 	[%rd18+128], %rs4;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

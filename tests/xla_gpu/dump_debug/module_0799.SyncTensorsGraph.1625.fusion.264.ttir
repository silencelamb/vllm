#indexing_map = #xla.indexing_map<"(tid_0) -> (tid_0 * 20480 + 15360), domain: tid_0 in [0, 15]">
#indexing_map1 = #xla.indexing_map<"(tid_0) -> (tid_0 * 1024), domain: tid_0 in [0, 15]">
#indexing_map2 = #xla.indexing_map<"(tid_0) -> (tid_0 * 20480 + 16384), domain: tid_0 in [0, 15]">
#indexing_map3 = #xla.indexing_map<"(tid_0) -> (tid_0 * 20480 + 17408), domain: tid_0 in [0, 15]">
#indexing_map4 = #xla.indexing_map<"(tid_0) -> (tid_0 * 20480 + 18432), domain: tid_0 in [0, 15]">
#indexing_map5 = #xla.indexing_map<"(tid_0) -> (tid_0 * 20480 + 19456), domain: tid_0 in [0, 15]">
module {
  tt.func @fusion_264_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<9.765625E-4> : tensor<1xf32>
    %c2048_i64 = arith.constant 2048 : i64
    %c3072_i64 = arith.constant 3072 : i64
    %c4096_i64 = arith.constant 4096 : i64
    %c5120_i64 = arith.constant 5120 : i64
    %c0_i64 = arith.constant 0 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %c0_i32 = arith.constant 0 : i32
    %c16_i64 = arith.constant 16 : i64
    %c20480_i64 = arith.constant 20480 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = arith.subi %c16_i64, %1 : i64
    %4 = xla.apply_indexing #indexing_map(%2)
    %5 = arith.index_castui %4 : index to i64
    %6 = tt.addptr %arg3, %5 : !tt.ptr<bf16>, i64
    %7 = tt.make_tensor_ptr %6, [%3, %c5120_i64], [%c20480_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %8 = tt.load %7 : !tt.ptr<tensor<1x1024xbf16>>
    %9 = arith.extf %8 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %10 = xla.apply_indexing #indexing_map1(%2)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg2, %11 : !tt.ptr<bf16>, i64
    %13 = tt.make_tensor_ptr %12, [%3, %c1024_i64], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x1024xbf16>>
    %15 = arith.extf %14 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %16 = xla.apply_indexing #indexing_map2(%2)
    %17 = arith.index_castui %16 : index to i64
    %18 = tt.addptr %arg3, %17 : !tt.ptr<bf16>, i64
    %19 = tt.make_tensor_ptr %18, [%3, %c4096_i64], [%c20480_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %20 = tt.load %19 : !tt.ptr<tensor<1x1024xbf16>>
    %21 = arith.extf %20 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %22 = tt.addptr %arg7, %11 : !tt.ptr<bf16>, i64
    %23 = tt.make_tensor_ptr %22, [%3, %c1024_i64], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %24 = tt.load %23 : !tt.ptr<tensor<1x1024xbf16>>
    %25 = arith.extf %24 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %26 = xla.apply_indexing #indexing_map3(%2)
    %27 = arith.index_castui %26 : index to i64
    %28 = tt.addptr %arg3, %27 : !tt.ptr<bf16>, i64
    %29 = tt.make_tensor_ptr %28, [%3, %c3072_i64], [%c20480_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %30 = tt.load %29 : !tt.ptr<tensor<1x1024xbf16>>
    %31 = arith.extf %30 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %32 = tt.addptr %arg6, %11 : !tt.ptr<bf16>, i64
    %33 = tt.make_tensor_ptr %32, [%3, %c1024_i64], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %34 = tt.load %33 : !tt.ptr<tensor<1x1024xbf16>>
    %35 = arith.extf %34 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %36 = xla.apply_indexing #indexing_map4(%2)
    %37 = arith.index_castui %36 : index to i64
    %38 = tt.addptr %arg3, %37 : !tt.ptr<bf16>, i64
    %39 = tt.make_tensor_ptr %38, [%3, %c2048_i64], [%c20480_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %40 = tt.load %39 : !tt.ptr<tensor<1x1024xbf16>>
    %41 = arith.extf %40 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %42 = tt.addptr %arg5, %11 : !tt.ptr<bf16>, i64
    %43 = tt.make_tensor_ptr %42, [%3, %c1024_i64], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %44 = tt.load %43 : !tt.ptr<tensor<1x1024xbf16>>
    %45 = arith.extf %44 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %46 = xla.apply_indexing #indexing_map5(%2)
    %47 = arith.index_castui %46 : index to i64
    %48 = tt.addptr %arg3, %47 : !tt.ptr<bf16>, i64
    %49 = tt.make_tensor_ptr %48, [%3, %c1024_i64], [%c20480_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %50 = tt.load %49 : !tt.ptr<tensor<1x1024xbf16>>
    %51 = arith.extf %50 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %52 = tt.addptr %arg4, %11 : !tt.ptr<bf16>, i64
    %53 = tt.make_tensor_ptr %52, [%3, %c1_i64, %c1024_i64], [%c1024_i64, %c0_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %54 = tt.load %53 : !tt.ptr<tensor<1x1x1024xbf16>>
    %55 = tt.trans %54 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %56 = tt.reshape %55 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %57 = arith.extf %56 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %58 = arith.addf %51, %57 : tensor<1x1024xf32>
    %59 = arith.addf %45, %58 : tensor<1x1024xf32>
    %60 = arith.addf %41, %59 : tensor<1x1024xf32>
    %61 = arith.addf %35, %60 : tensor<1x1024xf32>
    %62 = arith.addf %31, %61 : tensor<1x1024xf32>
    %63 = arith.addf %25, %62 : tensor<1x1024xf32>
    %64 = arith.addf %21, %63 : tensor<1x1024xf32>
    %65 = arith.addf %15, %64 : tensor<1x1024xf32>
    %66 = arith.addf %9, %65 : tensor<1x1024xf32>
    %67 = arith.mulf %66, %66 : tensor<1x1024xf32>
    %68 = "tt.reduce"(%67) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32, %arg10: f32):
      %85 = arith.addf %arg9, %arg10 : f32
      tt.reduce.return %85 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %69 = arith.mulf %68, %cst : tensor<1xf32>
    %70 = tt.load %arg0 : !tt.ptr<f32>
    %71 = tt.splat %70 : f32 -> tensor<1xf32>
    %72 = arith.addf %69, %71 : tensor<1xf32>
    %73 = tt.extern_elementwise %72 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %74 = tt.expand_dims %73 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %75 = tt.broadcast %74 : tensor<1x1xf32> -> tensor<1x1024xf32>
    %76 = arith.mulf %66, %75 : tensor<1x1024xf32>
    %77 = tt.make_tensor_ptr %arg1, [%c1024_i64], [%c1_i64], [%c0_i32] {order = array<i32: 0>} : <tensor<1024xbf16>>
    %78 = tt.load %77 : !tt.ptr<tensor<1024xbf16>>
    %79 = arith.extf %78 : tensor<1024xbf16> to tensor<1024xf32>
    %80 = tt.expand_dims %79 {axis = 0 : i32} : tensor<1024xf32> -> tensor<1x1024xf32>
    %81 = arith.mulf %76, %80 : tensor<1x1024xf32>
    %82 = arith.truncf %81 : tensor<1x1024xf32> to tensor<1x1024xbf16>
    %83 = tt.addptr %arg8, %11 : !tt.ptr<bf16>, i64
    %84 = tt.make_tensor_ptr %83, [%3, %c1024_i64], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    tt.store %84, %82 : !tt.ptr<tensor<1x1024xbf16>>
    tt.return
  }
}

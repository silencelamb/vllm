#indexing_map = #xla.indexing_map<"(d0) -> (d0 floordiv 4), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(d0) -> (d0 mod 4), domain: d0 in [0, 63]">
#indexing_map2 = #xla.indexing_map<"(tid_1) -> (tid_1 * 256), domain: tid_1 in [0, 3]">
#indexing_map3 = #xla.indexing_map<"(d0) -> ((d0 mod 4) * 256 + (d0 floordiv 4) * 3072), domain: d0 in [0, 63]">
#indexing_map4 = #xla.indexing_map<"(d0) -> (d0 * 256), domain: d0 in [0, 63]">
#indexing_map5 = #xla.indexing_map<"(tid_1) -> (tid_1 * 256 + 1024), domain: tid_1 in [0, 3]">
#indexing_map6 = #xla.indexing_map<"(d0) -> ((d0 mod 4) * 256 + (d0 floordiv 4) * 3072 + 1024), domain: d0 in [0, 63]">
#indexing_map7 = #xla.indexing_map<"(tid_1) -> (tid_1 * 256 + 2048), domain: tid_1 in [0, 3]">
#indexing_map8 = #xla.indexing_map<"(d0) -> ((d0 mod 4) * 256 + (d0 floordiv 4) * 3072 + 2048), domain: d0 in [0, 63]">
#indexing_map9 = #xla.indexing_map<"(tid_0) -> (tid_0 * 3072), domain: tid_0 in [0, 15]">
#indexing_map10 = #xla.indexing_map<"(tid_0) -> (tid_0 * 1024), domain: tid_0 in [0, 15]">
#indexing_map11 = #xla.indexing_map<"(tid_0) -> (tid_0 * 3072 + 1024), domain: tid_0 in [0, 15]">
#indexing_map12 = #xla.indexing_map<"(tid_0) -> (tid_0 * 3072 + 2048), domain: tid_0 in [0, 15]">
module {
  tt.func @fusion_47_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<9.765625E-4> : tensor<1xf32>
    %c2048_i64 = arith.constant 2048 : i64
    %c0_i64 = arith.constant 0 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %c0_i32 = arith.constant 0 : i32
    %c16_i64 = arith.constant 16 : i64
    %c3072_i64 = arith.constant 3072 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %5 = xla.apply_indexing #indexing_map2(%4)
    %6 = arith.index_castui %3 : index to i64
    %7 = arith.subi %c16_i64, %6 : i64
    %8 = arith.index_castui %5 : index to i64
    %9 = arith.subi %c3072_i64, %8 : i64
    %10 = xla.apply_indexing #indexing_map3(%2)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg3, %11 : !tt.ptr<bf16>, i64
    %13 = tt.make_tensor_ptr %12, [%7, %9], [%c3072_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x256xbf16>>
    %15 = arith.extf %14 : tensor<1x256xbf16> to tensor<1x256xf32>
    %16 = arith.subi %c1024_i64, %8 : i64
    %17 = xla.apply_indexing #indexing_map4(%2)
    %18 = arith.index_castui %17 : index to i64
    %19 = tt.addptr %arg5, %18 : !tt.ptr<bf16>, i64
    %20 = tt.make_tensor_ptr %19, [%7, %16], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %21 = tt.load %20 : !tt.ptr<tensor<1x256xbf16>>
    %22 = arith.extf %21 : tensor<1x256xbf16> to tensor<1x256xf32>
    %23 = xla.apply_indexing #indexing_map5(%4)
    %24 = arith.index_castui %23 : index to i64
    %25 = arith.subi %c3072_i64, %24 : i64
    %26 = xla.apply_indexing #indexing_map6(%2)
    %27 = arith.index_castui %26 : index to i64
    %28 = tt.addptr %arg3, %27 : !tt.ptr<bf16>, i64
    %29 = tt.make_tensor_ptr %28, [%7, %25], [%c3072_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %30 = tt.load %29 : !tt.ptr<tensor<1x256xbf16>>
    %31 = arith.extf %30 : tensor<1x256xbf16> to tensor<1x256xf32>
    %32 = tt.addptr %arg4, %18 : !tt.ptr<bf16>, i64
    %33 = tt.make_tensor_ptr %32, [%7, %16], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %34 = tt.load %33 : !tt.ptr<tensor<1x256xbf16>>
    %35 = arith.extf %34 : tensor<1x256xbf16> to tensor<1x256xf32>
    %36 = xla.apply_indexing #indexing_map7(%4)
    %37 = arith.index_castui %36 : index to i64
    %38 = arith.subi %c3072_i64, %37 : i64
    %39 = xla.apply_indexing #indexing_map8(%2)
    %40 = arith.index_castui %39 : index to i64
    %41 = tt.addptr %arg3, %40 : !tt.ptr<bf16>, i64
    %42 = tt.make_tensor_ptr %41, [%7, %38], [%c3072_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %43 = tt.load %42 : !tt.ptr<tensor<1x256xbf16>>
    %44 = arith.extf %43 : tensor<1x256xbf16> to tensor<1x256xf32>
    %45 = tt.addptr %arg2, %18 : !tt.ptr<bf16>, i64
    %46 = tt.make_tensor_ptr %45, [%7, %c1_i64, %16], [%c1024_i64, %c0_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    %47 = tt.load %46 : !tt.ptr<tensor<1x1x256xbf16>>
    %48 = tt.trans %47 {order = array<i32: 1, 0, 2>} : tensor<1x1x256xbf16> -> tensor<1x1x256xbf16>
    %49 = tt.reshape %48 : tensor<1x1x256xbf16> -> tensor<1x256xbf16>
    %50 = arith.extf %49 : tensor<1x256xbf16> to tensor<1x256xf32>
    %51 = arith.addf %44, %50 : tensor<1x256xf32>
    %52 = arith.addf %35, %51 : tensor<1x256xf32>
    %53 = arith.addf %31, %52 : tensor<1x256xf32>
    %54 = arith.addf %22, %53 : tensor<1x256xf32>
    %55 = arith.addf %15, %54 : tensor<1x256xf32>
    %56 = xla.apply_indexing #indexing_map9(%3)
    %57 = arith.index_castui %56 : index to i64
    %58 = tt.addptr %arg3, %57 : !tt.ptr<bf16>, i64
    %59 = tt.make_tensor_ptr %58, [%7, %c3072_i64], [%c3072_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %60 = tt.load %59 : !tt.ptr<tensor<1x1024xbf16>>
    %61 = arith.extf %60 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %62 = xla.apply_indexing #indexing_map10(%3)
    %63 = arith.index_castui %62 : index to i64
    %64 = tt.addptr %arg5, %63 : !tt.ptr<bf16>, i64
    %65 = tt.make_tensor_ptr %64, [%7, %c1024_i64], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %66 = tt.load %65 : !tt.ptr<tensor<1x1024xbf16>>
    %67 = arith.extf %66 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %68 = xla.apply_indexing #indexing_map11(%3)
    %69 = arith.index_castui %68 : index to i64
    %70 = tt.addptr %arg3, %69 : !tt.ptr<bf16>, i64
    %71 = tt.make_tensor_ptr %70, [%7, %c2048_i64], [%c3072_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %72 = tt.load %71 : !tt.ptr<tensor<1x1024xbf16>>
    %73 = arith.extf %72 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %74 = tt.addptr %arg4, %63 : !tt.ptr<bf16>, i64
    %75 = tt.make_tensor_ptr %74, [%7, %c1024_i64], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %76 = tt.load %75 : !tt.ptr<tensor<1x1024xbf16>>
    %77 = arith.extf %76 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %78 = xla.apply_indexing #indexing_map12(%3)
    %79 = arith.index_castui %78 : index to i64
    %80 = tt.addptr %arg3, %79 : !tt.ptr<bf16>, i64
    %81 = tt.make_tensor_ptr %80, [%7, %c1024_i64], [%c3072_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %82 = tt.load %81 : !tt.ptr<tensor<1x1024xbf16>>
    %83 = arith.extf %82 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %84 = tt.addptr %arg2, %63 : !tt.ptr<bf16>, i64
    %85 = tt.make_tensor_ptr %84, [%7, %c1_i64, %c1024_i64], [%c1024_i64, %c0_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %86 = tt.load %85 : !tt.ptr<tensor<1x1x1024xbf16>>
    %87 = tt.trans %86 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %88 = tt.reshape %87 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %89 = arith.extf %88 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %90 = arith.addf %83, %89 : tensor<1x1024xf32>
    %91 = arith.addf %77, %90 : tensor<1x1024xf32>
    %92 = arith.addf %73, %91 : tensor<1x1024xf32>
    %93 = arith.addf %67, %92 : tensor<1x1024xf32>
    %94 = arith.addf %61, %93 : tensor<1x1024xf32>
    %95 = arith.mulf %94, %94 : tensor<1x1024xf32>
    %96 = "tt.reduce"(%95) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %114 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %114 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %97 = arith.mulf %96, %cst : tensor<1xf32>
    %98 = tt.load %arg0 : !tt.ptr<f32>
    %99 = tt.splat %98 : f32 -> tensor<1xf32>
    %100 = arith.addf %97, %99 : tensor<1xf32>
    %101 = tt.extern_elementwise %100 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %102 = tt.expand_dims %101 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %103 = tt.broadcast %102 : tensor<1x1xf32> -> tensor<1x256xf32>
    %104 = arith.mulf %55, %103 : tensor<1x256xf32>
    %105 = tt.addptr %arg1, %8 : !tt.ptr<bf16>, i64
    %106 = tt.make_tensor_ptr %105, [%16], [%c1_i64], [%c0_i32] {order = array<i32: 0>} : <tensor<256xbf16>>
    %107 = tt.load %106 : !tt.ptr<tensor<256xbf16>>
    %108 = arith.extf %107 : tensor<256xbf16> to tensor<256xf32>
    %109 = tt.expand_dims %108 {axis = 0 : i32} : tensor<256xf32> -> tensor<1x256xf32>
    %110 = arith.mulf %104, %109 : tensor<1x256xf32>
    %111 = arith.truncf %110 : tensor<1x256xf32> to tensor<1x256xbf16>
    %112 = tt.addptr %arg6, %18 : !tt.ptr<bf16>, i64
    %113 = tt.make_tensor_ptr %112, [%7, %16], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    tt.store %113, %111 : !tt.ptr<tensor<1x256xbf16>>
    tt.return
  }
}

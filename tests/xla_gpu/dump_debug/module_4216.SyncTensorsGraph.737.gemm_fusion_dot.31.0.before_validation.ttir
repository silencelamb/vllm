module {
  tt.func @gemm_fusion_dot_31_0_impl(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32>
    %0 = tt.get_program_id x : i32
    %c2048_i32 = arith.constant 2048 : i32
    %1 = arith.divsi %0, %c2048_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %2 = arith.muli %1, %c8_i32 : i32
    %c2_i32 = arith.constant 2 : i32
    %3 = arith.subi %c2_i32, %2 : i32
    %4 = arith.cmpi slt, %3, %c8_i32 : i32
    %5 = arith.select %4, %3, %c8_i32 : i32
    %6 = arith.remsi %0, %5 : i32
    %7 = arith.addi %2, %6 : i32
    %c2048_i32_0 = arith.constant 2048 : i32
    %8 = arith.remsi %0, %c2048_i32_0 : i32
    %9 = arith.divsi %8, %5 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.addi %c0_i32, %c0_i32_1 : i32
    %c2048_i64 = arith.constant 2048 : i64
    %c0_i32_2 = arith.constant 0 : i32
    %c2048_i64_3 = arith.constant 2048 : i64
    %c32_i32 = arith.constant 32 : i32
    %11 = arith.muli %9, %c32_i32 : i32
    %c2048_i64_4 = arith.constant 2048 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %12 = arith.addi %11, %c0_i32_5 : i32
    %c8192_i64 = arith.constant 8192 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %c8192_i64_7 = arith.constant 8192 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %13 = tt.make_tensor_ptr %arg0, [%c2048_i64_3, %c8192_i64_7], [%c1_i64, %c2048_i64_4], [%c0_i32_2, %c0_i32_6] {order = array<i32: 1, 0>} : <tensor<64x32xbf16>>
    %14 = tt.advance %13, [%c0_i32, %11] : <tensor<64x32xbf16>>
    %c64_i32 = arith.constant 64 : i32
    %c2048_i32_9 = arith.constant 2048 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %15:2 = scf.for %arg2 = %c0_i32_10 to %c2048_i32_9 step %c64_i32 iter_args(%arg3 = %14, %arg4 = %cst) -> (!tt.ptr<tensor<64x32xbf16>>, tensor<64x32xf32>)  : i32 {
      %23 = tt.load %arg3 : !tt.ptr<tensor<64x32xbf16>>
      %c64_i32_23 = arith.constant 64 : i32
      %c0_i32_24 = arith.constant 0 : i32
      %24 = tt.advance %arg3, [%c64_i32_23, %c0_i32_24] : <tensor<64x32xbf16>>
      %cst_25 = arith.constant 0.000000e+00 : bf16
      %25 = tt.splat %cst_25 : bf16 -> tensor<bf16>
      %26 = tt.expand_dims %25 {axis = 0 : i32} : tensor<bf16> -> tensor<1xbf16>
      %27 = tt.expand_dims %26 {axis = 1 : i32} : tensor<1xbf16> -> tensor<1x1xbf16>
      %28 = tt.broadcast %27 : tensor<1x1xbf16> -> tensor<64x64xbf16>
      %29 = tt.dot %28, %23, %arg4, inputPrecision = tf32 : tensor<64x64xbf16> * tensor<64x32xbf16> -> tensor<64x32xf32>
      scf.yield %24, %29 : !tt.ptr<tensor<64x32xbf16>>, tensor<64x32xf32>
    }
    %16 = arith.truncf %15#1 : tensor<64x32xf32> to tensor<64x32xbf16>
    %c64_i32_11 = arith.constant 64 : i32
    %17 = arith.muli %7, %c64_i32_11 : i32
    %c8192_i64_12 = arith.constant 8192 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %18 = arith.addi %17, %c0_i32_13 : i32
    %c128_i64 = arith.constant 128 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %c128_i64_15 = arith.constant 128 : i64
    %c32_i32_16 = arith.constant 32 : i32
    %19 = arith.muli %9, %c32_i32_16 : i32
    %c1_i64_17 = arith.constant 1 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %20 = arith.addi %19, %c0_i32_18 : i32
    %c8192_i64_19 = arith.constant 8192 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %c8192_i64_21 = arith.constant 8192 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %21 = tt.make_tensor_ptr %arg1, [%c128_i64_15, %c8192_i64_21], [%c8192_i64_12, %c1_i64_17], [%c0_i32_14, %c0_i32_20] {order = array<i32: 1, 0>} : <tensor<64x32xbf16>>
    %22 = tt.advance %21, [%17, %19] : <tensor<64x32xbf16>>
    tt.store %22, %16 : !tt.ptr<tensor<64x32xbf16>>
    tt.return
  }
}

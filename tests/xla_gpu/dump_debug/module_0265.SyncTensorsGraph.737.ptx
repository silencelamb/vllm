//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	wrapped_concatenate
.visible .entry wrapped_concatenate(
	.param .u64 .ptr .align 16 wrapped_concatenate_param_0,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_1,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_2,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_3,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_4,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_5,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_6,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_7,
	.param .u64 .ptr .align 128 wrapped_concatenate_param_8
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<33>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<37>;
	.reg .b64 	%rd<269>;

	ld.param.u64 	%rd46, [wrapped_concatenate_param_0];
	ld.param.u64 	%rd47, [wrapped_concatenate_param_8];
	cvta.to.global.u64 	%rd1, %rd47;
	ld.param.u64 	%rd48, [wrapped_concatenate_param_1];
	ld.param.u64 	%rd49, [wrapped_concatenate_param_7];
	cvta.to.global.u64 	%rd2, %rd49;
	ld.param.u64 	%rd50, [wrapped_concatenate_param_2];
	ld.param.u64 	%rd51, [wrapped_concatenate_param_6];
	cvta.to.global.u64 	%rd3, %rd51;
	ld.param.u64 	%rd52, [wrapped_concatenate_param_3];
	ld.param.u64 	%rd53, [wrapped_concatenate_param_5];
	cvta.to.global.u64 	%rd4, %rd53;
	ld.param.u64 	%rd54, [wrapped_concatenate_param_4];
	cvta.to.global.u64 	%rd5, %rd54;
	cvta.to.global.u64 	%rd6, %rd52;
	cvta.to.global.u64 	%rd7, %rd50;
	cvta.to.global.u64 	%rd8, %rd48;
	cvta.to.global.u64 	%rd9, %rd46;
	mov.u32 	%r22, %tid.x;
	mov.u32 	%r1, %ctaid.x;
	shr.u32 	%r2, %r1, 2;
	setp.gt.u32 	%p1, %r1, 16383;
	shl.b32 	%r3, %r22, 2;
	shl.b32 	%r4, %r1, 9;
	or.b32  	%r5, %r3, %r4;
	setp.gt.u32 	%p29, %r1, 24575;
	and.b32  	%r35, %r4, 1536;
	shl.b32 	%r36, %r2, 11;
	setp.gt.u32 	%p32, %r1, 8191;
	mul.wide.u32 	%rd264, %r5, 2;
	@%p1 bra 	$L__BB1_8;
	@%p32 bra 	$L__BB1_5;
	setp.gt.u32 	%p7, %r1, 4095;
	@%p7 bra 	$L__BB1_4;
	add.s64 	%rd265, %rd9, %rd264;
	bra.uni 	$L__BB1_15;
$L__BB1_8:
	@%p29 bra 	$L__BB1_12;
	setp.gt.u32 	%p4, %r1, 20479;
	@%p4 bra 	$L__BB1_11;
	cvt.u64.u32 	%rd76, %r3;
	cvt.u64.u32 	%rd77, %r35;
	cvt.u64.u32 	%rd78, %r36;
	add.s64 	%rd79, %rd78, %rd77;
	add.s64 	%rd80, %rd79, %rd76;
	shl.b64 	%rd81, %rd80, 1;
	add.s64 	%rd82, %rd5, %rd81;
	add.s64 	%rd265, %rd82, -16777216;
	bra.uni 	$L__BB1_15;
$L__BB1_5:
	setp.gt.u32 	%p6, %r1, 12287;
	cvt.u64.u32 	%rd262, %r35;
	cvt.u64.u32 	%rd263, %r36;
	@%p6 bra 	$L__BB1_7;
	cvt.u64.u32 	%rd90, %r3;
	add.s64 	%rd93, %rd263, %rd262;
	add.s64 	%rd94, %rd93, %rd90;
	shl.b64 	%rd95, %rd94, 1;
	add.s64 	%rd96, %rd7, %rd95;
	add.s64 	%rd265, %rd96, -8388608;
	bra.uni 	$L__BB1_15;
$L__BB1_12:
	setp.gt.u32 	%p3, %r1, 28671;
	cvt.u64.u32 	%rd252, %r3;
	cvt.u64.u32 	%rd253, %r35;
	cvt.u64.u32 	%rd254, %r36;
	@%p3 bra 	$L__BB1_14;
	add.s64 	%rd65, %rd254, %rd253;
	add.s64 	%rd66, %rd65, %rd252;
	shl.b64 	%rd67, %rd66, 1;
	add.s64 	%rd68, %rd3, %rd67;
	add.s64 	%rd265, %rd68, -25165824;
	bra.uni 	$L__BB1_15;
$L__BB1_4:
	cvt.u64.u32 	%rd97, %r3;
	or.b32  	%r25, %r36, %r35;
	cvt.u64.u32 	%rd98, %r25;
	add.s64 	%rd99, %rd98, %rd97;
	shl.b64 	%rd100, %rd99, 1;
	add.s64 	%rd101, %rd8, %rd100;
	add.s64 	%rd265, %rd101, -4194304;
	bra.uni 	$L__BB1_15;
$L__BB1_11:
	cvt.u64.u32 	%rd69, %r3;
	cvt.u64.u32 	%rd70, %r35;
	cvt.u64.u32 	%rd71, %r36;
	add.s64 	%rd72, %rd71, %rd70;
	add.s64 	%rd73, %rd72, %rd69;
	shl.b64 	%rd74, %rd73, 1;
	add.s64 	%rd75, %rd4, %rd74;
	add.s64 	%rd265, %rd75, -20971520;
	bra.uni 	$L__BB1_15;
$L__BB1_7:
	cvt.u64.u32 	%rd83, %r3;
	add.s64 	%rd86, %rd263, %rd262;
	add.s64 	%rd87, %rd86, %rd83;
	shl.b64 	%rd88, %rd87, 1;
	add.s64 	%rd89, %rd6, %rd88;
	add.s64 	%rd265, %rd89, -12582912;
	bra.uni 	$L__BB1_15;
$L__BB1_14:
	add.s64 	%rd58, %rd254, %rd253;
	add.s64 	%rd59, %rd58, %rd252;
	shl.b64 	%rd60, %rd59, 1;
	add.s64 	%rd61, %rd2, %rd60;
	add.s64 	%rd265, %rd61, -29360128;
$L__BB1_15:
	@%p1 bra 	$L__BB1_23;
	@%p32 bra 	$L__BB1_20;
	setp.gt.u32 	%p14, %r1, 4095;
	@%p14 bra 	$L__BB1_19;
	add.s64 	%rd151, %rd9, %rd264;
	add.s64 	%rd266, %rd151, 2;
	bra.uni 	$L__BB1_30;
$L__BB1_23:
	@%p29 bra 	$L__BB1_27;
	setp.gt.u32 	%p11, %r1, 20479;
	@%p11 bra 	$L__BB1_26;
	cvt.u64.u32 	%rd124, %r3;
	cvt.u64.u32 	%rd125, %r35;
	cvt.u64.u32 	%rd126, %r36;
	add.s64 	%rd127, %rd126, %rd125;
	add.s64 	%rd128, %rd127, %rd124;
	shl.b64 	%rd129, %rd128, 1;
	add.s64 	%rd130, %rd129, %rd5;
	add.s64 	%rd266, %rd130, -16777214;
	bra.uni 	$L__BB1_30;
$L__BB1_20:
	setp.gt.u32 	%p13, %r1, 12287;
	cvt.u64.u32 	%rd259, %r35;
	cvt.u64.u32 	%rd260, %r36;
	@%p13 bra 	$L__BB1_22;
	cvt.u64.u32 	%rd138, %r3;
	add.s64 	%rd141, %rd260, %rd259;
	add.s64 	%rd142, %rd141, %rd138;
	shl.b64 	%rd143, %rd142, 1;
	add.s64 	%rd144, %rd143, %rd7;
	add.s64 	%rd266, %rd144, -8388606;
	bra.uni 	$L__BB1_30;
$L__BB1_27:
	setp.gt.u32 	%p10, %r1, 28671;
	cvt.u64.u32 	%rd255, %r35;
	cvt.u64.u32 	%rd256, %r36;
	@%p10 bra 	$L__BB1_29;
	cvt.u64.u32 	%rd110, %r3;
	add.s64 	%rd113, %rd256, %rd255;
	add.s64 	%rd114, %rd113, %rd110;
	shl.b64 	%rd115, %rd114, 1;
	add.s64 	%rd116, %rd115, %rd3;
	add.s64 	%rd266, %rd116, -25165822;
	bra.uni 	$L__BB1_30;
$L__BB1_19:
	cvt.u64.u32 	%rd145, %r3;
	or.b32  	%r28, %r36, %r35;
	cvt.u64.u32 	%rd146, %r28;
	add.s64 	%rd147, %rd146, %rd145;
	shl.b64 	%rd148, %rd147, 1;
	add.s64 	%rd149, %rd148, %rd8;
	add.s64 	%rd266, %rd149, -4194302;
	bra.uni 	$L__BB1_30;
$L__BB1_26:
	cvt.u64.u32 	%rd117, %r3;
	cvt.u64.u32 	%rd118, %r35;
	cvt.u64.u32 	%rd119, %r36;
	add.s64 	%rd120, %rd119, %rd118;
	add.s64 	%rd121, %rd120, %rd117;
	shl.b64 	%rd122, %rd121, 1;
	add.s64 	%rd123, %rd122, %rd4;
	add.s64 	%rd266, %rd123, -20971518;
	bra.uni 	$L__BB1_30;
$L__BB1_22:
	cvt.u64.u32 	%rd131, %r3;
	add.s64 	%rd134, %rd260, %rd259;
	add.s64 	%rd135, %rd134, %rd131;
	shl.b64 	%rd136, %rd135, 1;
	add.s64 	%rd137, %rd136, %rd6;
	add.s64 	%rd266, %rd137, -12582910;
	bra.uni 	$L__BB1_30;
$L__BB1_29:
	cvt.u64.u32 	%rd103, %r3;
	add.s64 	%rd106, %rd256, %rd255;
	add.s64 	%rd107, %rd106, %rd103;
	shl.b64 	%rd108, %rd107, 1;
	add.s64 	%rd109, %rd108, %rd2;
	add.s64 	%rd266, %rd109, -29360126;
$L__BB1_30:
	@%p1 bra 	$L__BB1_38;
	@%p32 bra 	$L__BB1_35;
	setp.gt.u32 	%p21, %r1, 4095;
	@%p21 bra 	$L__BB1_34;
	add.s64 	%rd200, %rd9, %rd264;
	add.s64 	%rd267, %rd200, 4;
	bra.uni 	$L__BB1_45;
$L__BB1_38:
	@%p29 bra 	$L__BB1_42;
	setp.gt.u32 	%p18, %r1, 20479;
	@%p18 bra 	$L__BB1_41;
	cvt.u64.u32 	%rd173, %r3;
	cvt.u64.u32 	%rd174, %r35;
	cvt.u64.u32 	%rd175, %r36;
	add.s64 	%rd176, %rd175, %rd174;
	add.s64 	%rd177, %rd176, %rd173;
	shl.b64 	%rd178, %rd177, 1;
	add.s64 	%rd179, %rd178, %rd5;
	add.s64 	%rd267, %rd179, -16777212;
	bra.uni 	$L__BB1_45;
$L__BB1_35:
	setp.gt.u32 	%p20, %r1, 12287;
	@%p20 bra 	$L__BB1_37;
	cvt.u64.u32 	%rd187, %r3;
	cvt.u64.u32 	%rd188, %r35;
	cvt.u64.u32 	%rd189, %r36;
	add.s64 	%rd190, %rd189, %rd188;
	add.s64 	%rd191, %rd190, %rd187;
	shl.b64 	%rd192, %rd191, 1;
	add.s64 	%rd193, %rd192, %rd7;
	add.s64 	%rd267, %rd193, -8388604;
	bra.uni 	$L__BB1_45;
$L__BB1_42:
	setp.gt.u32 	%p17, %r1, 28671;
	@%p17 bra 	$L__BB1_44;
	cvt.u64.u32 	%rd159, %r3;
	cvt.u64.u32 	%rd160, %r35;
	cvt.u64.u32 	%rd161, %r36;
	add.s64 	%rd162, %rd161, %rd160;
	add.s64 	%rd163, %rd162, %rd159;
	shl.b64 	%rd164, %rd163, 1;
	add.s64 	%rd165, %rd164, %rd3;
	add.s64 	%rd267, %rd165, -25165820;
	bra.uni 	$L__BB1_45;
$L__BB1_34:
	cvt.u64.u32 	%rd194, %r3;
	or.b32  	%r31, %r36, %r35;
	cvt.u64.u32 	%rd195, %r31;
	add.s64 	%rd196, %rd195, %rd194;
	shl.b64 	%rd197, %rd196, 1;
	add.s64 	%rd198, %rd197, %rd8;
	add.s64 	%rd267, %rd198, -4194300;
	bra.uni 	$L__BB1_45;
$L__BB1_41:
	cvt.u64.u32 	%rd166, %r3;
	cvt.u64.u32 	%rd167, %r35;
	cvt.u64.u32 	%rd168, %r36;
	add.s64 	%rd169, %rd168, %rd167;
	add.s64 	%rd170, %rd169, %rd166;
	shl.b64 	%rd171, %rd170, 1;
	add.s64 	%rd172, %rd171, %rd4;
	add.s64 	%rd267, %rd172, -20971516;
	bra.uni 	$L__BB1_45;
$L__BB1_37:
	cvt.u64.u32 	%rd180, %r3;
	cvt.u64.u32 	%rd181, %r35;
	cvt.u64.u32 	%rd182, %r36;
	add.s64 	%rd183, %rd182, %rd181;
	add.s64 	%rd184, %rd183, %rd180;
	shl.b64 	%rd185, %rd184, 1;
	add.s64 	%rd186, %rd185, %rd6;
	add.s64 	%rd267, %rd186, -12582908;
	bra.uni 	$L__BB1_45;
$L__BB1_44:
	cvt.u64.u32 	%rd152, %r3;
	cvt.u64.u32 	%rd153, %r35;
	cvt.u64.u32 	%rd154, %r36;
	add.s64 	%rd155, %rd154, %rd153;
	add.s64 	%rd156, %rd155, %rd152;
	shl.b64 	%rd157, %rd156, 1;
	add.s64 	%rd158, %rd157, %rd2;
	add.s64 	%rd267, %rd158, -29360124;
$L__BB1_45:
	@%p1 bra 	$L__BB1_53;
	@%p32 bra 	$L__BB1_50;
	setp.gt.u32 	%p28, %r1, 4095;
	@%p28 bra 	$L__BB1_49;
	add.s64 	%rd249, %rd9, %rd264;
	add.s64 	%rd268, %rd249, 6;
	bra.uni 	$L__BB1_60;
$L__BB1_53:
	@%p29 bra 	$L__BB1_57;
	setp.gt.u32 	%p25, %r1, 20479;
	@%p25 bra 	$L__BB1_56;
	cvt.u64.u32 	%rd222, %r3;
	cvt.u64.u32 	%rd223, %r35;
	cvt.u64.u32 	%rd224, %r36;
	add.s64 	%rd225, %rd224, %rd223;
	add.s64 	%rd226, %rd225, %rd222;
	shl.b64 	%rd227, %rd226, 1;
	add.s64 	%rd228, %rd227, %rd5;
	add.s64 	%rd268, %rd228, -16777210;
	bra.uni 	$L__BB1_60;
$L__BB1_50:
	setp.gt.u32 	%p27, %r1, 12287;
	@%p27 bra 	$L__BB1_52;
	cvt.u64.u32 	%rd236, %r3;
	cvt.u64.u32 	%rd237, %r35;
	cvt.u64.u32 	%rd238, %r36;
	add.s64 	%rd239, %rd238, %rd237;
	add.s64 	%rd240, %rd239, %rd236;
	shl.b64 	%rd241, %rd240, 1;
	add.s64 	%rd242, %rd241, %rd7;
	add.s64 	%rd268, %rd242, -8388602;
	bra.uni 	$L__BB1_60;
$L__BB1_57:
	setp.gt.u32 	%p24, %r1, 28671;
	@%p24 bra 	$L__BB1_59;
	cvt.u64.u32 	%rd208, %r3;
	cvt.u64.u32 	%rd209, %r35;
	cvt.u64.u32 	%rd210, %r36;
	add.s64 	%rd211, %rd210, %rd209;
	add.s64 	%rd212, %rd211, %rd208;
	shl.b64 	%rd213, %rd212, 1;
	add.s64 	%rd214, %rd213, %rd3;
	add.s64 	%rd268, %rd214, -25165818;
	bra.uni 	$L__BB1_60;
$L__BB1_49:
	cvt.u64.u32 	%rd243, %r3;
	or.b32  	%r34, %r36, %r35;
	cvt.u64.u32 	%rd244, %r34;
	add.s64 	%rd245, %rd244, %rd243;
	shl.b64 	%rd246, %rd245, 1;
	add.s64 	%rd247, %rd246, %rd8;
	add.s64 	%rd268, %rd247, -4194298;
	bra.uni 	$L__BB1_60;
$L__BB1_56:
	cvt.u64.u32 	%rd215, %r3;
	cvt.u64.u32 	%rd216, %r35;
	cvt.u64.u32 	%rd217, %r36;
	add.s64 	%rd218, %rd217, %rd216;
	add.s64 	%rd219, %rd218, %rd215;
	shl.b64 	%rd220, %rd219, 1;
	add.s64 	%rd221, %rd220, %rd4;
	add.s64 	%rd268, %rd221, -20971514;
	bra.uni 	$L__BB1_60;
$L__BB1_52:
	cvt.u64.u32 	%rd229, %r3;
	cvt.u64.u32 	%rd230, %r35;
	cvt.u64.u32 	%rd231, %r36;
	add.s64 	%rd232, %rd231, %rd230;
	add.s64 	%rd233, %rd232, %rd229;
	shl.b64 	%rd234, %rd233, 1;
	add.s64 	%rd235, %rd234, %rd6;
	add.s64 	%rd268, %rd235, -12582906;
	bra.uni 	$L__BB1_60;
$L__BB1_59:
	cvt.u64.u32 	%rd201, %r3;
	cvt.u64.u32 	%rd202, %r35;
	cvt.u64.u32 	%rd203, %r36;
	add.s64 	%rd204, %rd203, %rd202;
	add.s64 	%rd205, %rd204, %rd201;
	shl.b64 	%rd206, %rd205, 1;
	add.s64 	%rd207, %rd206, %rd2;
	add.s64 	%rd268, %rd207, -29360122;
$L__BB1_60:
	ld.global.nc.u16 	%rs1, [%rd268];
	ld.global.nc.u16 	%rs2, [%rd265];
	ld.global.nc.u16 	%rs3, [%rd266];
	ld.global.nc.u16 	%rs4, [%rd267];
	add.s64 	%rd251, %rd1, %rd264;
	st.global.v4.b16 	[%rd251], {%rs2, %rs3, %rs4, %rs1};
	ret;

}
	// .globl	gemm_fusion_dot_31_0
.visible .entry gemm_fusion_dot_31_0(
	.param .u64 .ptr .align 128 gemm_fusion_dot_31_0_param_0,
	.param .u64 .ptr .align 128 gemm_fusion_dot_31_0_param_1
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<23>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<651>;
	.reg .f32 	%f<337>;
	.reg .b64 	%rd<459>;

	ld.param.u64 	%rd138, [gemm_fusion_dot_31_0_param_0];
	ld.param.u64 	%rd139, [gemm_fusion_dot_31_0_param_1];
	cvta.to.global.u64 	%rd1, %rd139;
	cvta.to.global.u64 	%rd140, %rd138;
	// begin inline asm
	mov.u32 %r13, %ctaid.x;
	// end inline asm
	shr.s32 	%r113, %r13, 31;
	shr.u32 	%r114, %r113, 29;
	add.s32 	%r115, %r13, %r114;
	shr.s32 	%r2, %r115, 3;
	and.b32  	%r116, %r115, -8;
	sub.s32 	%r117, 64, %r116;
	min.s32 	%r3, %r117, 8;
	rem.s32 	%r118, %r13, %r3;
	add.s32 	%r119, %r116, %r118;
	shl.b32 	%r120, %r119, 7;
	cvt.s64.s32 	%rd2, %r120;
	mov.u32 	%r4, %tid.x;
	and.b32  	%r121, %r4, 16;
	bfe.s32 	%r122, %r4, 4, 1;
	and.b32  	%r5, %r4, 32;
	bfe.s32 	%r123, %r4, 5, 1;
	bfe.u32 	%r124, %r4, 4, 2;
	setp.lt.u32 	%p1, %r4, 64;
	selp.b32 	%r125, 0, 4, %p1;
	or.b32  	%r126, %r124, %r125;
	or.b32  	%r127, %r126, 8;
	or.b32  	%r128, %r126, 16;
	or.b32  	%r129, %r126, 24;
	or.b32  	%r130, %r126, 32;
	or.b32  	%r131, %r126, 40;
	or.b32  	%r132, %r126, 48;
	or.b32  	%r133, %r126, 56;
	or.b32  	%r134, %r126, 64;
	or.b32  	%r135, %r126, 72;
	or.b32  	%r136, %r126, 80;
	or.b32  	%r137, %r126, 88;
	or.b32  	%r138, %r126, 96;
	or.b32  	%r139, %r126, 104;
	or.b32  	%r140, %r126, 112;
	or.b32  	%r141, %r126, 120;
	and.b32  	%r142, %r4, 1;
	neg.s32 	%r143, %r142;
	bfe.s32 	%r144, %r4, 1, 1;
	bfe.s32 	%r145, %r4, 2, 1;
	shl.b32 	%r6, %r4, 3;
	and.b32  	%r146, %r6, 120;
	cvt.u64.u32 	%rd3, %r126;
	cvt.u64.u32 	%rd4, %r127;
	cvt.u64.u32 	%rd141, %r128;
	cvt.u64.u32 	%rd142, %r129;
	cvt.u64.u32 	%rd143, %r130;
	cvt.u64.u32 	%rd144, %r131;
	cvt.u64.u32 	%rd145, %r132;
	cvt.u64.u32 	%rd146, %r133;
	cvt.u64.u32 	%rd147, %r134;
	cvt.u64.u32 	%rd148, %r135;
	cvt.u64.u32 	%rd149, %r136;
	cvt.u64.u32 	%rd150, %r137;
	cvt.u64.u32 	%rd151, %r138;
	cvt.u64.u32 	%rd152, %r139;
	cvt.u64.u32 	%rd153, %r140;
	cvt.u64.u32 	%rd154, %r141;
	cvt.u64.u32 	%rd5, %r146;
	or.b64  	%rd155, %rd2, %rd3;
	or.b64  	%rd156, %rd2, %rd4;
	or.b64  	%rd157, %rd2, %rd141;
	or.b64  	%rd158, %rd2, %rd142;
	or.b64  	%rd159, %rd2, %rd143;
	or.b64  	%rd160, %rd2, %rd144;
	or.b64  	%rd161, %rd2, %rd145;
	or.b64  	%rd162, %rd2, %rd146;
	or.b64  	%rd163, %rd2, %rd147;
	or.b64  	%rd164, %rd2, %rd148;
	or.b64  	%rd165, %rd2, %rd149;
	or.b64  	%rd166, %rd2, %rd150;
	or.b64  	%rd167, %rd2, %rd151;
	or.b64  	%rd168, %rd2, %rd152;
	or.b64  	%rd169, %rd2, %rd153;
	or.b64  	%rd170, %rd2, %rd154;
	shl.b64 	%rd171, %rd155, 11;
	shl.b64 	%rd172, %rd156, 11;
	shl.b64 	%rd173, %rd157, 11;
	shl.b64 	%rd174, %rd158, 11;
	shl.b64 	%rd175, %rd159, 11;
	shl.b64 	%rd176, %rd160, 11;
	shl.b64 	%rd177, %rd161, 11;
	shl.b64 	%rd178, %rd162, 11;
	shl.b64 	%rd179, %rd163, 11;
	shl.b64 	%rd180, %rd164, 11;
	shl.b64 	%rd181, %rd165, 11;
	shl.b64 	%rd182, %rd166, 11;
	shl.b64 	%rd183, %rd167, 11;
	shl.b64 	%rd184, %rd168, 11;
	shl.b64 	%rd185, %rd169, 11;
	shl.b64 	%rd186, %rd170, 11;
	or.b64  	%rd187, %rd171, %rd5;
	or.b64  	%rd188, %rd172, %rd5;
	or.b64  	%rd189, %rd173, %rd5;
	or.b64  	%rd190, %rd174, %rd5;
	or.b64  	%rd191, %rd175, %rd5;
	or.b64  	%rd192, %rd176, %rd5;
	or.b64  	%rd193, %rd177, %rd5;
	or.b64  	%rd194, %rd178, %rd5;
	or.b64  	%rd195, %rd179, %rd5;
	or.b64  	%rd196, %rd180, %rd5;
	or.b64  	%rd197, %rd181, %rd5;
	or.b64  	%rd198, %rd182, %rd5;
	or.b64  	%rd199, %rd183, %rd5;
	or.b64  	%rd200, %rd184, %rd5;
	or.b64  	%rd201, %rd185, %rd5;
	or.b64  	%rd202, %rd186, %rd5;
	shl.b64 	%rd203, %rd187, 1;
	add.s64 	%rd89, %rd140, %rd203;
	shl.b64 	%rd204, %rd188, 1;
	add.s64 	%rd90, %rd140, %rd204;
	shl.b64 	%rd205, %rd189, 1;
	add.s64 	%rd91, %rd140, %rd205;
	shl.b64 	%rd206, %rd190, 1;
	add.s64 	%rd92, %rd140, %rd206;
	shl.b64 	%rd207, %rd191, 1;
	add.s64 	%rd93, %rd140, %rd207;
	shl.b64 	%rd208, %rd192, 1;
	add.s64 	%rd94, %rd140, %rd208;
	shl.b64 	%rd209, %rd193, 1;
	add.s64 	%rd95, %rd140, %rd209;
	shl.b64 	%rd210, %rd194, 1;
	add.s64 	%rd96, %rd140, %rd210;
	shl.b64 	%rd211, %rd195, 1;
	add.s64 	%rd97, %rd140, %rd211;
	shl.b64 	%rd212, %rd196, 1;
	add.s64 	%rd98, %rd140, %rd212;
	shl.b64 	%rd213, %rd197, 1;
	add.s64 	%rd99, %rd140, %rd213;
	shl.b64 	%rd214, %rd198, 1;
	add.s64 	%rd100, %rd140, %rd214;
	shl.b64 	%rd215, %rd199, 1;
	add.s64 	%rd101, %rd140, %rd215;
	shl.b64 	%rd216, %rd200, 1;
	add.s64 	%rd102, %rd140, %rd216;
	shl.b64 	%rd217, %rd201, 1;
	add.s64 	%rd103, %rd140, %rd217;
	shl.b64 	%rd218, %rd202, 1;
	add.s64 	%rd104, %rd140, %rd218;
	and.b32  	%r147, %r122, 136;
	and.b32  	%r148, %r123, 272;
	selp.b32 	%r149, 0, 544, %p1;
	or.b32  	%r150, %r147, %r149;
	xor.b32  	%r151, %r150, %r146;
	xor.b32  	%r152, %r151, %r148;
	cvt.u64.u32 	%rd6, %r152;
	mul.wide.u32 	%rd219, %r152, 2;
	mov.u64 	%rd137, global_smem;
	add.s64 	%rd220, %rd137, %rd219;
	or.b32  	%r153, %r146, 1024;
	xor.b32  	%r154, %r150, %r153;
	xor.b32  	%r155, %r154, %r148;
	cvt.u64.u32 	%rd7, %r155;
	mul.wide.u32 	%rd221, %r155, 2;
	add.s64 	%rd222, %rd137, %rd221;
	or.b32  	%r156, %r146, 2048;
	xor.b32  	%r157, %r150, %r156;
	xor.b32  	%r158, %r157, %r148;
	cvt.u64.u32 	%rd8, %r158;
	mul.wide.u32 	%rd223, %r158, 2;
	add.s64 	%rd224, %rd137, %rd223;
	or.b32  	%r159, %r146, 3072;
	xor.b32  	%r160, %r150, %r159;
	xor.b32  	%r161, %r160, %r148;
	cvt.u64.u32 	%rd9, %r161;
	mul.wide.u32 	%rd225, %r161, 2;
	add.s64 	%rd226, %rd137, %rd225;
	or.b32  	%r162, %r146, 4096;
	xor.b32  	%r163, %r150, %r162;
	xor.b32  	%r164, %r163, %r148;
	cvt.u64.u32 	%rd10, %r164;
	mul.wide.u32 	%rd227, %r164, 2;
	add.s64 	%rd228, %rd137, %rd227;
	or.b32  	%r165, %r146, 5120;
	xor.b32  	%r166, %r150, %r165;
	xor.b32  	%r167, %r166, %r148;
	cvt.u64.u32 	%rd11, %r167;
	mul.wide.u32 	%rd229, %r167, 2;
	add.s64 	%rd230, %rd137, %rd229;
	or.b32  	%r168, %r146, 6144;
	xor.b32  	%r169, %r150, %r168;
	xor.b32  	%r170, %r169, %r148;
	cvt.u64.u32 	%rd12, %r170;
	mul.wide.u32 	%rd231, %r170, 2;
	add.s64 	%rd232, %rd137, %rd231;
	or.b32  	%r171, %r146, 7168;
	xor.b32  	%r172, %r150, %r171;
	xor.b32  	%r173, %r172, %r148;
	cvt.u64.u32 	%rd13, %r173;
	mul.wide.u32 	%rd233, %r173, 2;
	add.s64 	%rd234, %rd137, %rd233;
	or.b32  	%r174, %r146, 8192;
	xor.b32  	%r175, %r150, %r174;
	xor.b32  	%r176, %r175, %r148;
	cvt.u64.u32 	%rd14, %r176;
	mul.wide.u32 	%rd235, %r176, 2;
	add.s64 	%rd236, %rd137, %rd235;
	or.b32  	%r177, %r146, 9216;
	xor.b32  	%r178, %r150, %r177;
	xor.b32  	%r179, %r178, %r148;
	cvt.u64.u32 	%rd15, %r179;
	mul.wide.u32 	%rd237, %r179, 2;
	add.s64 	%rd238, %rd137, %rd237;
	or.b32  	%r180, %r146, 10240;
	xor.b32  	%r181, %r150, %r180;
	xor.b32  	%r182, %r181, %r148;
	cvt.u64.u32 	%rd16, %r182;
	mul.wide.u32 	%rd239, %r182, 2;
	add.s64 	%rd240, %rd137, %rd239;
	or.b32  	%r183, %r146, 11264;
	xor.b32  	%r184, %r150, %r183;
	xor.b32  	%r185, %r184, %r148;
	cvt.u64.u32 	%rd17, %r185;
	mul.wide.u32 	%rd241, %r185, 2;
	add.s64 	%rd242, %rd137, %rd241;
	or.b32  	%r186, %r146, 12288;
	xor.b32  	%r187, %r150, %r186;
	xor.b32  	%r188, %r187, %r148;
	cvt.u64.u32 	%rd18, %r188;
	mul.wide.u32 	%rd243, %r188, 2;
	add.s64 	%rd244, %rd137, %rd243;
	or.b32  	%r189, %r146, 13312;
	xor.b32  	%r190, %r150, %r189;
	xor.b32  	%r191, %r190, %r148;
	cvt.u64.u32 	%rd19, %r191;
	mul.wide.u32 	%rd245, %r191, 2;
	add.s64 	%rd246, %rd137, %rd245;
	or.b32  	%r192, %r146, 14336;
	xor.b32  	%r193, %r150, %r192;
	xor.b32  	%r194, %r193, %r148;
	cvt.u64.u32 	%rd20, %r194;
	mul.wide.u32 	%rd247, %r194, 2;
	add.s64 	%rd248, %rd137, %rd247;
	or.b32  	%r195, %r146, 15360;
	xor.b32  	%r196, %r150, %r195;
	xor.b32  	%r197, %r196, %r148;
	cvt.u64.u32 	%rd21, %r197;
	mul.wide.u32 	%rd249, %r197, 2;
	add.s64 	%rd250, %rd137, %rd249;
	cvt.u32.u64 	%r14, %rd220;
	mov.b32 	%r15, 16;
	// begin inline asm
	cp.async.cg.shared.global [ %r14 + 0 ], [ %rd89 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r16, %rd222;
	// begin inline asm
	cp.async.cg.shared.global [ %r16 + 0 ], [ %rd90 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r18, %rd224;
	// begin inline asm
	cp.async.cg.shared.global [ %r18 + 0 ], [ %rd91 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r20, %rd226;
	// begin inline asm
	cp.async.cg.shared.global [ %r20 + 0 ], [ %rd92 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r22, %rd228;
	// begin inline asm
	cp.async.cg.shared.global [ %r22 + 0 ], [ %rd93 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r24, %rd230;
	// begin inline asm
	cp.async.cg.shared.global [ %r24 + 0 ], [ %rd94 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r26, %rd232;
	// begin inline asm
	cp.async.cg.shared.global [ %r26 + 0 ], [ %rd95 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r28, %rd234;
	// begin inline asm
	cp.async.cg.shared.global [ %r28 + 0 ], [ %rd96 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r30, %rd236;
	// begin inline asm
	cp.async.cg.shared.global [ %r30 + 0 ], [ %rd97 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r32, %rd238;
	// begin inline asm
	cp.async.cg.shared.global [ %r32 + 0 ], [ %rd98 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r34, %rd240;
	// begin inline asm
	cp.async.cg.shared.global [ %r34 + 0 ], [ %rd99 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r36, %rd242;
	// begin inline asm
	cp.async.cg.shared.global [ %r36 + 0 ], [ %rd100 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r38, %rd244;
	// begin inline asm
	cp.async.cg.shared.global [ %r38 + 0 ], [ %rd101 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r40, %rd246;
	// begin inline asm
	cp.async.cg.shared.global [ %r40 + 0 ], [ %rd102 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r42, %rd248;
	// begin inline asm
	cp.async.cg.shared.global [ %r42 + 0 ], [ %rd103 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r44, %rd250;
	// begin inline asm
	cp.async.cg.shared.global [ %r44 + 0 ], [ %rd104 + 0 ], 0x10, %r15;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	mul.wide.u32 	%rd251, %r146, 2;
	shl.b64 	%rd252, %rd155, 12;
	add.s64 	%rd253, %rd252, %rd140;
	add.s64 	%rd254, %rd253, %rd251;
	add.s64 	%rd105, %rd254, 256;
	shl.b64 	%rd255, %rd156, 12;
	add.s64 	%rd256, %rd255, %rd140;
	add.s64 	%rd257, %rd256, %rd251;
	add.s64 	%rd106, %rd257, 256;
	shl.b64 	%rd258, %rd157, 12;
	add.s64 	%rd259, %rd258, %rd140;
	add.s64 	%rd260, %rd259, %rd251;
	add.s64 	%rd107, %rd260, 256;
	shl.b64 	%rd261, %rd158, 12;
	add.s64 	%rd262, %rd261, %rd140;
	add.s64 	%rd263, %rd262, %rd251;
	add.s64 	%rd108, %rd263, 256;
	shl.b64 	%rd264, %rd159, 12;
	add.s64 	%rd265, %rd264, %rd140;
	add.s64 	%rd266, %rd265, %rd251;
	add.s64 	%rd109, %rd266, 256;
	shl.b64 	%rd267, %rd160, 12;
	add.s64 	%rd268, %rd267, %rd140;
	add.s64 	%rd269, %rd268, %rd251;
	add.s64 	%rd110, %rd269, 256;
	shl.b64 	%rd270, %rd161, 12;
	add.s64 	%rd271, %rd270, %rd140;
	add.s64 	%rd272, %rd271, %rd251;
	add.s64 	%rd111, %rd272, 256;
	shl.b64 	%rd273, %rd162, 12;
	add.s64 	%rd274, %rd273, %rd140;
	add.s64 	%rd275, %rd274, %rd251;
	add.s64 	%rd112, %rd275, 256;
	shl.b64 	%rd276, %rd163, 12;
	add.s64 	%rd277, %rd276, %rd140;
	add.s64 	%rd278, %rd277, %rd251;
	add.s64 	%rd113, %rd278, 256;
	shl.b64 	%rd279, %rd164, 12;
	add.s64 	%rd280, %rd279, %rd140;
	add.s64 	%rd281, %rd280, %rd251;
	add.s64 	%rd114, %rd281, 256;
	shl.b64 	%rd282, %rd165, 12;
	add.s64 	%rd283, %rd282, %rd140;
	add.s64 	%rd284, %rd283, %rd251;
	add.s64 	%rd115, %rd284, 256;
	shl.b64 	%rd285, %rd166, 12;
	add.s64 	%rd286, %rd285, %rd140;
	add.s64 	%rd287, %rd286, %rd251;
	add.s64 	%rd116, %rd287, 256;
	shl.b64 	%rd288, %rd167, 12;
	add.s64 	%rd289, %rd288, %rd140;
	add.s64 	%rd290, %rd289, %rd251;
	add.s64 	%rd117, %rd290, 256;
	shl.b64 	%rd291, %rd168, 12;
	add.s64 	%rd292, %rd291, %rd140;
	add.s64 	%rd293, %rd292, %rd251;
	add.s64 	%rd118, %rd293, 256;
	shl.b64 	%rd294, %rd169, 12;
	add.s64 	%rd295, %rd294, %rd140;
	add.s64 	%rd296, %rd295, %rd251;
	add.s64 	%rd119, %rd296, 256;
	shl.b64 	%rd297, %rd170, 12;
	add.s64 	%rd298, %rd297, %rd140;
	add.s64 	%rd299, %rd298, %rd251;
	add.s64 	%rd120, %rd299, 256;
	bar.sync 	0;
	add.s64 	%rd300, %rd137, 32768;
	add.s64 	%rd301, %rd300, %rd219;
	add.s64 	%rd302, %rd300, %rd221;
	add.s64 	%rd303, %rd300, %rd223;
	add.s64 	%rd304, %rd300, %rd225;
	add.s64 	%rd305, %rd300, %rd227;
	add.s64 	%rd306, %rd300, %rd229;
	add.s64 	%rd307, %rd300, %rd231;
	add.s64 	%rd308, %rd300, %rd233;
	add.s64 	%rd309, %rd300, %rd235;
	add.s64 	%rd310, %rd300, %rd237;
	add.s64 	%rd311, %rd300, %rd239;
	add.s64 	%rd312, %rd300, %rd241;
	add.s64 	%rd313, %rd300, %rd243;
	add.s64 	%rd314, %rd300, %rd245;
	add.s64 	%rd315, %rd300, %rd247;
	add.s64 	%rd316, %rd300, %rd249;
	cvt.u32.u64 	%r46, %rd301;
	// begin inline asm
	cp.async.cg.shared.global [ %r46 + 0 ], [ %rd105 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r48, %rd302;
	// begin inline asm
	cp.async.cg.shared.global [ %r48 + 0 ], [ %rd106 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r50, %rd303;
	// begin inline asm
	cp.async.cg.shared.global [ %r50 + 0 ], [ %rd107 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r52, %rd304;
	// begin inline asm
	cp.async.cg.shared.global [ %r52 + 0 ], [ %rd108 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r54, %rd305;
	// begin inline asm
	cp.async.cg.shared.global [ %r54 + 0 ], [ %rd109 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r56, %rd306;
	// begin inline asm
	cp.async.cg.shared.global [ %r56 + 0 ], [ %rd110 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r58, %rd307;
	// begin inline asm
	cp.async.cg.shared.global [ %r58 + 0 ], [ %rd111 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r60, %rd308;
	// begin inline asm
	cp.async.cg.shared.global [ %r60 + 0 ], [ %rd112 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r62, %rd309;
	// begin inline asm
	cp.async.cg.shared.global [ %r62 + 0 ], [ %rd113 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r64, %rd310;
	// begin inline asm
	cp.async.cg.shared.global [ %r64 + 0 ], [ %rd114 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r66, %rd311;
	// begin inline asm
	cp.async.cg.shared.global [ %r66 + 0 ], [ %rd115 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r68, %rd312;
	// begin inline asm
	cp.async.cg.shared.global [ %r68 + 0 ], [ %rd116 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r70, %rd313;
	// begin inline asm
	cp.async.cg.shared.global [ %r70 + 0 ], [ %rd117 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r72, %rd314;
	// begin inline asm
	cp.async.cg.shared.global [ %r72 + 0 ], [ %rd118 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r74, %rd315;
	// begin inline asm
	cp.async.cg.shared.global [ %r74 + 0 ], [ %rd119 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r76, %rd316;
	// begin inline asm
	cp.async.cg.shared.global [ %r76 + 0 ], [ %rd120 + 0 ], 0x10, %r15;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s64 	%rd121, %rd254, 512;
	add.s64 	%rd122, %rd257, 512;
	add.s64 	%rd123, %rd260, 512;
	add.s64 	%rd124, %rd263, 512;
	add.s64 	%rd125, %rd266, 512;
	add.s64 	%rd126, %rd269, 512;
	add.s64 	%rd127, %rd272, 512;
	add.s64 	%rd128, %rd275, 512;
	add.s64 	%rd129, %rd278, 512;
	add.s64 	%rd130, %rd281, 512;
	add.s64 	%rd131, %rd284, 512;
	add.s64 	%rd132, %rd287, 512;
	add.s64 	%rd133, %rd290, 512;
	add.s64 	%rd134, %rd293, 512;
	add.s64 	%rd135, %rd296, 512;
	add.s64 	%rd136, %rd299, 512;
	bar.sync 	0;
	add.s64 	%rd317, %rd137, 65536;
	add.s64 	%rd318, %rd317, %rd219;
	add.s64 	%rd319, %rd317, %rd221;
	add.s64 	%rd320, %rd317, %rd223;
	add.s64 	%rd321, %rd317, %rd225;
	add.s64 	%rd322, %rd317, %rd227;
	add.s64 	%rd323, %rd317, %rd229;
	add.s64 	%rd324, %rd317, %rd231;
	add.s64 	%rd325, %rd317, %rd233;
	add.s64 	%rd326, %rd317, %rd235;
	add.s64 	%rd327, %rd317, %rd237;
	add.s64 	%rd328, %rd317, %rd239;
	add.s64 	%rd329, %rd317, %rd241;
	add.s64 	%rd330, %rd317, %rd243;
	add.s64 	%rd331, %rd317, %rd245;
	add.s64 	%rd332, %rd317, %rd247;
	add.s64 	%rd333, %rd317, %rd249;
	cvt.u32.u64 	%r78, %rd318;
	// begin inline asm
	cp.async.cg.shared.global [ %r78 + 0 ], [ %rd121 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r80, %rd319;
	// begin inline asm
	cp.async.cg.shared.global [ %r80 + 0 ], [ %rd122 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r82, %rd320;
	// begin inline asm
	cp.async.cg.shared.global [ %r82 + 0 ], [ %rd123 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r84, %rd321;
	// begin inline asm
	cp.async.cg.shared.global [ %r84 + 0 ], [ %rd124 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r86, %rd322;
	// begin inline asm
	cp.async.cg.shared.global [ %r86 + 0 ], [ %rd125 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r88, %rd323;
	// begin inline asm
	cp.async.cg.shared.global [ %r88 + 0 ], [ %rd126 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r90, %rd324;
	// begin inline asm
	cp.async.cg.shared.global [ %r90 + 0 ], [ %rd127 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r92, %rd325;
	// begin inline asm
	cp.async.cg.shared.global [ %r92 + 0 ], [ %rd128 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r94, %rd326;
	// begin inline asm
	cp.async.cg.shared.global [ %r94 + 0 ], [ %rd129 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r96, %rd327;
	// begin inline asm
	cp.async.cg.shared.global [ %r96 + 0 ], [ %rd130 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r98, %rd328;
	// begin inline asm
	cp.async.cg.shared.global [ %r98 + 0 ], [ %rd131 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r100, %rd329;
	// begin inline asm
	cp.async.cg.shared.global [ %r100 + 0 ], [ %rd132 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r102, %rd330;
	// begin inline asm
	cp.async.cg.shared.global [ %r102 + 0 ], [ %rd133 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r104, %rd331;
	// begin inline asm
	cp.async.cg.shared.global [ %r104 + 0 ], [ %rd134 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r106, %rd332;
	// begin inline asm
	cp.async.cg.shared.global [ %r106 + 0 ], [ %rd135 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r108, %rd333;
	// begin inline asm
	cp.async.cg.shared.global [ %r108 + 0 ], [ %rd136 + 0 ], 0x10, %r15;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r198, %r143, 136;
	and.b32  	%r199, %r144, 272;
	or.b32  	%r200, %r198, %r199;
	and.b32  	%r201, %r145, 544;
	shl.b32 	%r202, %r4, 7;
	and.b32  	%r203, %r202, 1024;
	or.b32  	%r204, %r201, %r203;
	or.b32  	%r205, %r204, %r200;
	shr.u32 	%r206, %r121, 1;
	xor.b32  	%r207, %r205, %r206;
	shl.b32 	%r208, %r5, 6;
	or.b32  	%r209, %r207, %r208;
	selp.b32 	%r210, 0, 4096, %p1;
	or.b32  	%r211, %r209, %r210;
	cvt.u64.u32 	%rd22, %r211;
	or.b32  	%r212, %r198, 16;
	xor.b32  	%r213, %r212, %r199;
	or.b32  	%r214, %r203, %r213;
	or.b32  	%r215, %r214, %r201;
	or.b32  	%r216, %r208, %r206;
	or.b32  	%r217, %r216, %r210;
	xor.b32  	%r218, %r217, %r215;
	cvt.u64.u32 	%rd23, %r218;
	or.b32  	%r219, %r200, 32;
	xor.b32  	%r220, %r219, %r201;
	or.b32  	%r221, %r220, %r203;
	xor.b32  	%r222, %r217, %r221;
	cvt.u64.u32 	%rd24, %r222;
	or.b32  	%r223, %r198, 48;
	or.b32  	%r224, %r201, %r199;
	xor.b32  	%r225, %r224, %r223;
	or.b32  	%r226, %r225, %r203;
	xor.b32  	%r227, %r217, %r226;
	cvt.u64.u32 	%rd25, %r227;
	or.b32  	%r228, %r205, 64;
	xor.b32  	%r229, %r217, %r228;
	cvt.u64.u32 	%rd26, %r229;
	or.b32  	%r230, %r198, 80;
	xor.b32  	%r231, %r230, %r199;
	or.b32  	%r232, %r203, %r231;
	or.b32  	%r233, %r232, %r201;
	xor.b32  	%r234, %r217, %r233;
	cvt.u64.u32 	%rd27, %r234;
	or.b32  	%r235, %r200, 96;
	xor.b32  	%r236, %r235, %r201;
	or.b32  	%r237, %r236, %r203;
	xor.b32  	%r238, %r217, %r237;
	cvt.u64.u32 	%rd28, %r238;
	or.b32  	%r239, %r198, 112;
	xor.b32  	%r240, %r224, %r239;
	or.b32  	%r241, %r240, %r203;
	xor.b32  	%r242, %r217, %r241;
	cvt.u64.u32 	%rd29, %r242;
	or.b32  	%r243, %r205, 8192;
	xor.b32  	%r244, %r217, %r243;
	cvt.u64.u32 	%rd30, %r244;
	or.b32  	%r245, %r198, 8208;
	xor.b32  	%r246, %r245, %r199;
	or.b32  	%r247, %r203, %r246;
	or.b32  	%r248, %r247, %r201;
	xor.b32  	%r249, %r217, %r248;
	cvt.u64.u32 	%rd31, %r249;
	or.b32  	%r250, %r200, 8224;
	xor.b32  	%r251, %r250, %r201;
	or.b32  	%r252, %r251, %r203;
	xor.b32  	%r253, %r217, %r252;
	cvt.u64.u32 	%rd32, %r253;
	or.b32  	%r254, %r198, 8240;
	xor.b32  	%r255, %r224, %r254;
	or.b32  	%r256, %r255, %r203;
	xor.b32  	%r257, %r217, %r256;
	cvt.u64.u32 	%rd33, %r257;
	or.b32  	%r258, %r205, 8256;
	xor.b32  	%r259, %r217, %r258;
	cvt.u64.u32 	%rd34, %r259;
	or.b32  	%r260, %r198, 8272;
	xor.b32  	%r261, %r260, %r199;
	or.b32  	%r262, %r203, %r261;
	or.b32  	%r263, %r262, %r201;
	xor.b32  	%r264, %r217, %r263;
	cvt.u64.u32 	%rd35, %r264;
	or.b32  	%r265, %r200, 8288;
	xor.b32  	%r266, %r265, %r201;
	or.b32  	%r267, %r266, %r203;
	xor.b32  	%r268, %r217, %r267;
	cvt.u64.u32 	%rd36, %r268;
	or.b32  	%r269, %r198, 8304;
	xor.b32  	%r270, %r224, %r269;
	or.b32  	%r271, %r270, %r203;
	xor.b32  	%r272, %r217, %r271;
	cvt.u64.u32 	%rd37, %r272;
	and.b32  	%r273, %r4, 15;
	mul.wide.u32 	%rd38, %r273, 16;
	add.s64 	%rd457, %rd298, 768;
	add.s64 	%rd456, %rd295, 768;
	add.s64 	%rd455, %rd292, 768;
	add.s64 	%rd454, %rd289, 768;
	add.s64 	%rd453, %rd286, 768;
	add.s64 	%rd452, %rd283, 768;
	add.s64 	%rd451, %rd280, 768;
	add.s64 	%rd450, %rd277, 768;
	add.s64 	%rd449, %rd274, 768;
	add.s64 	%rd448, %rd271, 768;
	add.s64 	%rd447, %rd268, 768;
	add.s64 	%rd446, %rd265, 768;
	add.s64 	%rd445, %rd262, 768;
	add.s64 	%rd444, %rd259, 768;
	add.s64 	%rd443, %rd256, 768;
	add.s64 	%rd442, %rd253, 768;
	mov.f32 	%f321, 0f00000000;
	mov.b32 	%r650, 2;
	mov.b32 	%r358, 0;
	mov.b32 	%r648, -128;
	shl.b64 	%rd350, %rd22, 1;
	shl.b64 	%rd352, %rd23, 1;
	shl.b64 	%rd354, %rd24, 1;
	shl.b64 	%rd356, %rd25, 1;
	shl.b64 	%rd358, %rd26, 1;
	shl.b64 	%rd360, %rd27, 1;
	shl.b64 	%rd362, %rd28, 1;
	shl.b64 	%rd364, %rd29, 1;
	shl.b64 	%rd366, %rd30, 1;
	shl.b64 	%rd368, %rd31, 1;
	shl.b64 	%rd370, %rd32, 1;
	shl.b64 	%rd372, %rd33, 1;
	shl.b64 	%rd374, %rd34, 1;
	shl.b64 	%rd376, %rd35, 1;
	shl.b64 	%rd378, %rd36, 1;
	shl.b64 	%rd380, %rd37, 1;
	shl.b64 	%rd385, %rd6, 1;
	shl.b64 	%rd387, %rd7, 1;
	shl.b64 	%rd389, %rd8, 1;
	shl.b64 	%rd391, %rd9, 1;
	shl.b64 	%rd393, %rd10, 1;
	shl.b64 	%rd395, %rd11, 1;
	shl.b64 	%rd397, %rd12, 1;
	shl.b64 	%rd399, %rd13, 1;
	shl.b64 	%rd401, %rd14, 1;
	shl.b64 	%rd403, %rd15, 1;
	shl.b64 	%rd405, %rd16, 1;
	shl.b64 	%rd407, %rd17, 1;
	shl.b64 	%rd409, %rd18, 1;
	shl.b64 	%rd411, %rd19, 1;
	shl.b64 	%rd413, %rd20, 1;
	shl.b64 	%rd415, %rd21, 1;
	mov.u64 	%rd458, %rd137;
	mov.u32 	%r649, %r358;
	mov.f32 	%f322, %f321;
	mov.f32 	%f323, %f321;
	mov.f32 	%f324, %f321;
	mov.f32 	%f325, %f321;
	mov.f32 	%f326, %f321;
	mov.f32 	%f327, %f321;
	mov.f32 	%f328, %f321;
	mov.f32 	%f329, %f321;
	mov.f32 	%f330, %f321;
	mov.f32 	%f331, %f321;
	mov.f32 	%f332, %f321;
	mov.f32 	%f333, %f321;
	mov.f32 	%f334, %f321;
	mov.f32 	%f335, %f321;
	mov.f32 	%f336, %f321;
$L__BB2_1:
	add.s32 	%r648, %r648, 128;
	setp.lt.u32 	%p2, %r648, 1664;
	add.s64 	%rd351, %rd458, %rd350;
	cvt.u32.u64 	%r278, %rd351;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r354, %r355, %r356, %r357}, [%r278];
	// end inline asm
	add.s64 	%rd353, %rd458, %rd352;
	cvt.u32.u64 	%r283, %rd353;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r378, %r379, %r380, %r381}, [%r283];
	// end inline asm
	add.s64 	%rd355, %rd458, %rd354;
	cvt.u32.u64 	%r288, %rd355;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r402, %r403, %r404, %r405}, [%r288];
	// end inline asm
	add.s64 	%rd357, %rd458, %rd356;
	cvt.u32.u64 	%r293, %rd357;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r426, %r427, %r428, %r429}, [%r293];
	// end inline asm
	add.s64 	%rd359, %rd458, %rd358;
	cvt.u32.u64 	%r298, %rd359;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r450, %r451, %r452, %r453}, [%r298];
	// end inline asm
	add.s64 	%rd361, %rd458, %rd360;
	cvt.u32.u64 	%r303, %rd361;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r474, %r475, %r476, %r477}, [%r303];
	// end inline asm
	add.s64 	%rd363, %rd458, %rd362;
	cvt.u32.u64 	%r308, %rd363;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r498, %r499, %r500, %r501}, [%r308];
	// end inline asm
	add.s64 	%rd365, %rd458, %rd364;
	cvt.u32.u64 	%r313, %rd365;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r522, %r523, %r524, %r525}, [%r313];
	// end inline asm
	add.s64 	%rd367, %rd458, %rd366;
	cvt.u32.u64 	%r318, %rd367;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r366, %r367, %r368, %r369}, [%r318];
	// end inline asm
	add.s64 	%rd369, %rd458, %rd368;
	cvt.u32.u64 	%r323, %rd369;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r390, %r391, %r392, %r393}, [%r323];
	// end inline asm
	add.s64 	%rd371, %rd458, %rd370;
	cvt.u32.u64 	%r328, %rd371;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r414, %r415, %r416, %r417}, [%r328];
	// end inline asm
	add.s64 	%rd373, %rd458, %rd372;
	cvt.u32.u64 	%r333, %rd373;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r438, %r439, %r440, %r441}, [%r333];
	// end inline asm
	add.s64 	%rd375, %rd458, %rd374;
	cvt.u32.u64 	%r338, %rd375;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r462, %r463, %r464, %r465}, [%r338];
	// end inline asm
	add.s64 	%rd377, %rd458, %rd376;
	cvt.u32.u64 	%r343, %rd377;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r486, %r487, %r488, %r489}, [%r343];
	// end inline asm
	add.s64 	%rd379, %rd458, %rd378;
	cvt.u32.u64 	%r348, %rd379;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r510, %r511, %r512, %r513}, [%r348];
	// end inline asm
	add.s64 	%rd381, %rd458, %rd380;
	cvt.u32.u64 	%r353, %rd381;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r534, %r535, %r536, %r537}, [%r353];
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r354, %r355, %r356, %r357 }, { %r358, %r358 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r354, %r355, %r356, %r357 }, { %r358, %r358 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r366, %r367, %r368, %r369 }, { %r358, %r358 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r366, %r367, %r368, %r369 }, { %r358, %r358 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r378, %r379, %r380, %r381 }, { %r358, %r358 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r378, %r379, %r380, %r381 }, { %r358, %r358 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r390, %r391, %r392, %r393 }, { %r358, %r358 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r390, %r391, %r392, %r393 }, { %r358, %r358 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r402, %r403, %r404, %r405 }, { %r358, %r358 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r402, %r403, %r404, %r405 }, { %r358, %r358 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r414, %r415, %r416, %r417 }, { %r358, %r358 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r414, %r415, %r416, %r417 }, { %r358, %r358 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r426, %r427, %r428, %r429 }, { %r358, %r358 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r426, %r427, %r428, %r429 }, { %r358, %r358 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r438, %r439, %r440, %r441 }, { %r358, %r358 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r438, %r439, %r440, %r441 }, { %r358, %r358 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r450, %r451, %r452, %r453 }, { %r358, %r358 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r450, %r451, %r452, %r453 }, { %r358, %r358 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r462, %r463, %r464, %r465 }, { %r358, %r358 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r462, %r463, %r464, %r465 }, { %r358, %r358 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r474, %r475, %r476, %r477 }, { %r358, %r358 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r474, %r475, %r476, %r477 }, { %r358, %r358 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r486, %r487, %r488, %r489 }, { %r358, %r358 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r486, %r487, %r488, %r489 }, { %r358, %r358 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r498, %r499, %r500, %r501 }, { %r358, %r358 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r498, %r499, %r500, %r501 }, { %r358, %r358 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r510, %r511, %r512, %r513 }, { %r358, %r358 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r510, %r511, %r512, %r513 }, { %r358, %r358 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r522, %r523, %r524, %r525 }, { %r358, %r358 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r522, %r523, %r524, %r525 }, { %r358, %r358 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r534, %r535, %r536, %r537 }, { %r358, %r358 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r534, %r535, %r536, %r537 }, { %r358, %r358 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	add.s32 	%r578, %r650, 1;
	setp.lt.s32 	%p3, %r578, 3;
	selp.b32 	%r650, %r578, 0, %p3;
	add.s64 	%rd334, %rd442, %rd38;
	add.s64 	%rd335, %rd443, %rd38;
	add.s64 	%rd336, %rd444, %rd38;
	add.s64 	%rd337, %rd445, %rd38;
	add.s64 	%rd338, %rd446, %rd38;
	add.s64 	%rd339, %rd447, %rd38;
	add.s64 	%rd340, %rd448, %rd38;
	add.s64 	%rd341, %rd449, %rd38;
	add.s64 	%rd342, %rd450, %rd38;
	add.s64 	%rd343, %rd451, %rd38;
	add.s64 	%rd344, %rd452, %rd38;
	add.s64 	%rd345, %rd453, %rd38;
	add.s64 	%rd346, %rd454, %rd38;
	add.s64 	%rd347, %rd455, %rd38;
	add.s64 	%rd348, %rd456, %rd38;
	add.s64 	%rd349, %rd457, %rd38;
	shl.b32 	%r579, %r650, 14;
	mul.wide.s32 	%rd382, %r579, 2;
	add.s64 	%rd384, %rd137, %rd382;
	bar.sync 	0;
	add.s64 	%rd386, %rd384, %rd385;
	add.s64 	%rd388, %rd384, %rd387;
	add.s64 	%rd390, %rd384, %rd389;
	add.s64 	%rd392, %rd384, %rd391;
	add.s64 	%rd394, %rd384, %rd393;
	add.s64 	%rd396, %rd384, %rd395;
	add.s64 	%rd398, %rd384, %rd397;
	add.s64 	%rd400, %rd384, %rd399;
	add.s64 	%rd402, %rd384, %rd401;
	add.s64 	%rd404, %rd384, %rd403;
	add.s64 	%rd406, %rd384, %rd405;
	add.s64 	%rd408, %rd384, %rd407;
	add.s64 	%rd410, %rd384, %rd409;
	add.s64 	%rd412, %rd384, %rd411;
	add.s64 	%rd414, %rd384, %rd413;
	add.s64 	%rd416, %rd384, %rd415;
	selp.b32 	%r547, 16, 0, %p2;
	cvt.u32.u64 	%r546, %rd386;
	// begin inline asm
	cp.async.cg.shared.global [ %r546 + 0 ], [ %rd334 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r548, %rd388;
	// begin inline asm
	cp.async.cg.shared.global [ %r548 + 0 ], [ %rd335 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r550, %rd390;
	// begin inline asm
	cp.async.cg.shared.global [ %r550 + 0 ], [ %rd336 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r552, %rd392;
	// begin inline asm
	cp.async.cg.shared.global [ %r552 + 0 ], [ %rd337 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r554, %rd394;
	// begin inline asm
	cp.async.cg.shared.global [ %r554 + 0 ], [ %rd338 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r556, %rd396;
	// begin inline asm
	cp.async.cg.shared.global [ %r556 + 0 ], [ %rd339 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r558, %rd398;
	// begin inline asm
	cp.async.cg.shared.global [ %r558 + 0 ], [ %rd340 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r560, %rd400;
	// begin inline asm
	cp.async.cg.shared.global [ %r560 + 0 ], [ %rd341 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r562, %rd402;
	// begin inline asm
	cp.async.cg.shared.global [ %r562 + 0 ], [ %rd342 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r564, %rd404;
	// begin inline asm
	cp.async.cg.shared.global [ %r564 + 0 ], [ %rd343 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r566, %rd406;
	// begin inline asm
	cp.async.cg.shared.global [ %r566 + 0 ], [ %rd344 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r568, %rd408;
	// begin inline asm
	cp.async.cg.shared.global [ %r568 + 0 ], [ %rd345 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r570, %rd410;
	// begin inline asm
	cp.async.cg.shared.global [ %r570 + 0 ], [ %rd346 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r572, %rd412;
	// begin inline asm
	cp.async.cg.shared.global [ %r572 + 0 ], [ %rd347 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r574, %rd414;
	// begin inline asm
	cp.async.cg.shared.global [ %r574 + 0 ], [ %rd348 + 0 ], 0x10, %r547;
	// end inline asm
	cvt.u32.u64 	%r576, %rd416;
	// begin inline asm
	cp.async.cg.shared.global [ %r576 + 0 ], [ %rd349 + 0 ], 0x10, %r547;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s32 	%r580, %r649, 1;
	setp.lt.s32 	%p4, %r580, 3;
	selp.b32 	%r649, %r580, 0, %p4;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r581, %r649, 14;
	mul.wide.s32 	%rd417, %r581, 2;
	add.s64 	%rd458, %rd137, %rd417;
	add.s64 	%rd457, %rd457, 256;
	add.s64 	%rd456, %rd456, 256;
	add.s64 	%rd455, %rd455, 256;
	add.s64 	%rd454, %rd454, 256;
	add.s64 	%rd453, %rd453, 256;
	add.s64 	%rd452, %rd452, 256;
	add.s64 	%rd451, %rd451, 256;
	add.s64 	%rd450, %rd450, 256;
	add.s64 	%rd449, %rd449, 256;
	add.s64 	%rd448, %rd448, 256;
	add.s64 	%rd447, %rd447, 256;
	add.s64 	%rd446, %rd446, 256;
	add.s64 	%rd445, %rd445, 256;
	add.s64 	%rd444, %rd444, 256;
	add.s64 	%rd443, %rd443, 256;
	add.s64 	%rd442, %rd442, 256;
	setp.lt.u32 	%p5, %r648, 1920;
	@%p5 bra 	$L__BB2_1;
	shl.b32 	%r622, %r2, 3;
	sub.s32 	%r623, %r13, %r622;
	div.s32 	%r624, %r623, %r3;
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	mov.b32 	%r582, %f321;
	// begin inline asm
	cvt.rn.bf16.f32 %rs17, %r582;
	// end inline asm
	mov.b32 	%r583, %f322;
	// begin inline asm
	cvt.rn.bf16.f32 %rs18, %r583;
	// end inline asm
	mov.b32 	%r584, %f323;
	// begin inline asm
	cvt.rn.bf16.f32 %rs19, %r584;
	// end inline asm
	mov.b32 	%r585, %f324;
	// begin inline asm
	cvt.rn.bf16.f32 %rs20, %r585;
	// end inline asm
	mov.b32 	%r586, %f325;
	// begin inline asm
	cvt.rn.bf16.f32 %rs25, %r586;
	// end inline asm
	mov.b32 	%r587, %f326;
	// begin inline asm
	cvt.rn.bf16.f32 %rs26, %r587;
	// end inline asm
	mov.b32 	%r588, %f327;
	// begin inline asm
	cvt.rn.bf16.f32 %rs27, %r588;
	// end inline asm
	mov.b32 	%r589, %f328;
	// begin inline asm
	cvt.rn.bf16.f32 %rs28, %r589;
	// end inline asm
	mov.b32 	%r590, %f329;
	// begin inline asm
	cvt.rn.bf16.f32 %rs21, %r590;
	// end inline asm
	mov.b32 	%r591, %f330;
	// begin inline asm
	cvt.rn.bf16.f32 %rs22, %r591;
	// end inline asm
	mov.b32 	%r592, %f331;
	// begin inline asm
	cvt.rn.bf16.f32 %rs23, %r592;
	// end inline asm
	mov.b32 	%r593, %f332;
	// begin inline asm
	cvt.rn.bf16.f32 %rs24, %r593;
	// end inline asm
	mov.b32 	%r594, %f333;
	// begin inline asm
	cvt.rn.bf16.f32 %rs29, %r594;
	// end inline asm
	mov.b32 	%r595, %f334;
	// begin inline asm
	cvt.rn.bf16.f32 %rs30, %r595;
	// end inline asm
	mov.b32 	%r596, %f335;
	// begin inline asm
	cvt.rn.bf16.f32 %rs31, %r596;
	// end inline asm
	mov.b32 	%r597, %f336;
	// begin inline asm
	cvt.rn.bf16.f32 %rs32, %r597;
	// end inline asm
	shl.b32 	%r625, %r624, 4;
	cvt.s64.s32 	%rd420, %r625;
	or.b64  	%rd421, %rd2, %rd5;
	or.b64  	%rd422, %rd420, %rd3;
	or.b64  	%rd423, %rd420, %rd4;
	shl.b64 	%rd424, %rd421, 1;
	add.s64 	%rd425, %rd1, %rd424;
	shl.b64 	%rd426, %rd422, 14;
	add.s64 	%rd418, %rd425, %rd426;
	shl.b64 	%rd427, %rd423, 14;
	add.s64 	%rd419, %rd425, %rd427;
	shl.b32 	%r626, %r4, 8;
	and.b32  	%r627, %r626, 768;
	bfe.u32 	%r628, %r4, 2, 3;
	shr.u32 	%r629, %r5, 1;
	selp.b32 	%r630, 0, 32, %p1;
	or.b32  	%r631, %r629, %r630;
	or.b32  	%r632, %r631, %r628;
	or.b32  	%r633, %r632, %r627;
	and.b32  	%r634, %r6, 504;
	selp.b32 	%r635, 0, 512, %p1;
	or.b32  	%r636, %r634, %r635;
	shr.u32 	%r637, %r627, 4;
	add.s32 	%r638, %r633, %r637;
	shl.b32 	%r639, %r638, 1;
	cvt.u64.u32 	%rd428, %r639;
	mov.u64 	%rd429, global_smem;
	add.s64 	%rd430, %rd429, %rd428;
	cvt.u32.u64 	%r598, %rd430;
	mov.pred 	%p6, -1;
	// begin inline asm
	@%p6 st.shared.b16 [ %r598 + 0 ], %rs17;
	// end inline asm
	or.b32  	%r640, %r633, 128;
	shr.u32 	%r641, %r640, 4;
	and.b32  	%r642, %r641, 134217720;
	cvt.u64.u32 	%rd431, %r633;
	cvt.u64.u32 	%rd432, %r642;
	add.s64 	%rd433, %rd432, %rd431;
	shl.b64 	%rd434, %rd433, 1;
	add.s64 	%rd435, %rd429, %rd434;
	cvt.u32.u64 	%r643, %rd435;
	add.s32 	%r607, %r643, 256;
	// begin inline asm
	@%p6 st.shared.b16 [ %r607 + 0 ], %rs18;
	// end inline asm
	cvt.u64.u32 	%rd436, %r637;
	add.s64 	%rd437, %rd436, %rd431;
	shl.b64 	%rd438, %rd437, 1;
	add.s64 	%rd439, %rd429, %rd438;
	cvt.u32.u64 	%r644, %rd439;
	add.s32 	%r608, %r644, 16;
	// begin inline asm
	@%p6 st.shared.b16 [ %r608 + 0 ], %rs19;
	// end inline asm
	add.s32 	%r609, %r643, 272;
	// begin inline asm
	@%p6 st.shared.b16 [ %r609 + 0 ], %rs20;
	// end inline asm
	add.s32 	%r610, %r644, 128;
	// begin inline asm
	@%p6 st.shared.b16 [ %r610 + 0 ], %rs21;
	// end inline asm
	add.s32 	%r611, %r643, 384;
	// begin inline asm
	@%p6 st.shared.b16 [ %r611 + 0 ], %rs22;
	// end inline asm
	add.s32 	%r612, %r644, 144;
	// begin inline asm
	@%p6 st.shared.b16 [ %r612 + 0 ], %rs23;
	// end inline asm
	add.s32 	%r613, %r643, 400;
	// begin inline asm
	@%p6 st.shared.b16 [ %r613 + 0 ], %rs24;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r645, %r636, 4;
	and.b32  	%r646, %r645, 56;
	add.s32 	%r647, %r646, %r636;
	mul.wide.u32 	%rd440, %r647, 2;
	add.s64 	%rd441, %rd429, %rd440;
	ld.shared.v4.u32 	{%r614, %r615, %r616, %r617}, [%rd441];
	bar.sync 	0;
	// begin inline asm
	@%p6 st.shared.b16 [ %r598 + 0 ], %rs25;
	// end inline asm
	// begin inline asm
	@%p6 st.shared.b16 [ %r607 + 0 ], %rs26;
	// end inline asm
	// begin inline asm
	@%p6 st.shared.b16 [ %r608 + 0 ], %rs27;
	// end inline asm
	// begin inline asm
	@%p6 st.shared.b16 [ %r609 + 0 ], %rs28;
	// end inline asm
	// begin inline asm
	@%p6 st.shared.b16 [ %r610 + 0 ], %rs29;
	// end inline asm
	// begin inline asm
	@%p6 st.shared.b16 [ %r611 + 0 ], %rs30;
	// end inline asm
	// begin inline asm
	@%p6 st.shared.b16 [ %r612 + 0 ], %rs31;
	// end inline asm
	// begin inline asm
	@%p6 st.shared.b16 [ %r613 + 0 ], %rs32;
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r618, %r619, %r620, %r621}, [%rd441];
	// begin inline asm
	st.global.v4.b32 [ %rd418 + 0 ], { %r614, %r615, %r616, %r617 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd419 + 0 ], { %r618, %r619, %r620, %r621 };
	// end inline asm
	ret;

}
	// .globl	fusion_116
.visible .entry fusion_116(
	.param .u64 .ptr .align 16 fusion_116_param_0,
	.param .u64 .ptr .align 128 fusion_116_param_1,
	.param .u64 .ptr .align 128 fusion_116_param_2,
	.param .u64 .ptr .align 16 fusion_116_param_3,
	.param .u64 .ptr .align 128 fusion_116_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<49>;
	.reg .b32 	%r<104>;
	.reg .f32 	%f<122>;
	.reg .b64 	%rd<45>;

	ld.param.u64 	%rd10, [fusion_116_param_0];
	ld.param.u64 	%rd11, [fusion_116_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_116_param_1];
	ld.param.u64 	%rd14, [fusion_116_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_116_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd7, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	cvt.s64.s32 	%rd19, %r1;
	shr.u64 	%rd20, %rd19, 2;
	mul.wide.s32 	%rd21, %r1, 256;
	and.b64  	%rd22, %rd21, 768;
	shl.b64 	%rd23, %rd20, 13;
	or.b64  	%rd24, %rd23, %rd22;
	shl.b64 	%rd25, %rd24, 1;
	add.s64 	%rd26, %rd17, %rd25;
	mov.u32 	%r81, %tid.x;
	and.b32  	%r82, %r81, 31;
	shl.b32 	%r83, %r81, 2;
	and.b32  	%r84, %r83, 124;
	setp.lt.u32 	%p4, %r81, 32;
	selp.b32 	%r85, 0, 128, %p4;
	or.b32  	%r86, %r84, %r85;
	mul.wide.u32 	%rd27, %r86, 2;
	add.s64 	%rd28, %rd26, %rd27;
	add.s64 	%rd1, %rd28, 14336;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	shl.b64 	%rd29, %rd21, 1;
	add.s64 	%rd30, %rd18, %rd29;
	add.s64 	%rd2, %rd30, %rd27;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.rn.f32 	%f9, %f1, %f5;
	add.rn.f32 	%f10, %f2, %f6;
	add.rn.f32 	%f11, %f3, %f7;
	add.rn.f32 	%f12, %f4, %f8;
	shl.b64 	%rd31, %rd20, 14;
	add.s64 	%rd32, %rd17, %rd31;
	shl.b32 	%r87, %r81, 3;
	and.b32  	%r88, %r87, 248;
	selp.b32 	%r89, 0, 256, %p4;
	or.b32  	%r90, %r88, %r89;
	mul.wide.u32 	%rd33, %r90, 2;
	add.s64 	%rd34, %rd32, %rd33;
	add.s64 	%rd3, %rd34, 14336;
	add.s64 	%rd4, %rd34, 15360;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	ld.global.v4.b32 { %r14, %r15, %r16, %r17 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	mov.b32 	{%rs13, %rs14}, %r16;
	mov.b32 	{%rs15, %rs16}, %r17;
	// begin inline asm
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v4.b32 { %r18, %r19, %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r18;
	mov.b32 	{%rs19, %rs20}, %r19;
	mov.b32 	{%rs21, %rs22}, %r20;
	mov.b32 	{%rs23, %rs24}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs9;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs10;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs11;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs12;
	// end inline asm
	mov.b32 	%f16, %r25;
	// begin inline asm
	cvt.f32.bf16 %r26, %rs13;
	// end inline asm
	mov.b32 	%f17, %r26;
	// begin inline asm
	cvt.f32.bf16 %r27, %rs14;
	// end inline asm
	mov.b32 	%f18, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs15;
	// end inline asm
	mov.b32 	%f19, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs16;
	// end inline asm
	mov.b32 	%f20, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs17;
	// end inline asm
	mov.b32 	%f21, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs18;
	// end inline asm
	mov.b32 	%f22, %r31;
	// begin inline asm
	cvt.f32.bf16 %r32, %rs19;
	// end inline asm
	mov.b32 	%f23, %r32;
	// begin inline asm
	cvt.f32.bf16 %r33, %rs20;
	// end inline asm
	mov.b32 	%f24, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs21;
	// end inline asm
	mov.b32 	%f25, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs22;
	// end inline asm
	mov.b32 	%f26, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs23;
	// end inline asm
	mov.b32 	%f27, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs24;
	// end inline asm
	mov.b32 	%f28, %r37;
	shl.b64 	%rd35, %rd20, 11;
	add.s64 	%rd36, %rd18, %rd35;
	add.s64 	%rd5, %rd36, %rd33;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	mov.u32 %r41, 0x0;
	ld.global.v4.b32 { %r38, %r39, %r40, %r41 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r38;
	mov.b32 	{%rs27, %rs28}, %r39;
	mov.b32 	{%rs29, %rs30}, %r40;
	mov.b32 	{%rs31, %rs32}, %r41;
	// begin inline asm
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	mov.u32 %r45, 0x0;
	ld.global.v4.b32 { %r42, %r43, %r44, %r45 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r42;
	mov.b32 	{%rs35, %rs36}, %r43;
	mov.b32 	{%rs37, %rs38}, %r44;
	mov.b32 	{%rs39, %rs40}, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs25;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs26;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs27;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs28;
	// end inline asm
	mov.b32 	%f32, %r49;
	// begin inline asm
	cvt.f32.bf16 %r50, %rs29;
	// end inline asm
	mov.b32 	%f33, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs30;
	// end inline asm
	mov.b32 	%f34, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs31;
	// end inline asm
	mov.b32 	%f35, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs32;
	// end inline asm
	mov.b32 	%f36, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs33;
	// end inline asm
	mov.b32 	%f37, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs34;
	// end inline asm
	mov.b32 	%f38, %r55;
	// begin inline asm
	cvt.f32.bf16 %r56, %rs35;
	// end inline asm
	mov.b32 	%f39, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs36;
	// end inline asm
	mov.b32 	%f40, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs37;
	// end inline asm
	mov.b32 	%f41, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs38;
	// end inline asm
	mov.b32 	%f42, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs39;
	// end inline asm
	mov.b32 	%f43, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs40;
	// end inline asm
	mov.b32 	%f44, %r61;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	add.rn.f32 	%f49, %f17, %f33;
	add.rn.f32 	%f50, %f18, %f34;
	add.rn.f32 	%f51, %f19, %f35;
	add.rn.f32 	%f52, %f20, %f36;
	add.rn.f32 	%f53, %f21, %f37;
	add.rn.f32 	%f54, %f22, %f38;
	add.rn.f32 	%f55, %f23, %f39;
	add.rn.f32 	%f56, %f24, %f40;
	add.rn.f32 	%f57, %f25, %f41;
	add.rn.f32 	%f58, %f26, %f42;
	add.rn.f32 	%f59, %f27, %f43;
	add.rn.f32 	%f60, %f28, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	mul.rn.f32 	%f65, %f49, %f49;
	mul.rn.f32 	%f66, %f50, %f50;
	mul.rn.f32 	%f67, %f51, %f51;
	mul.rn.f32 	%f68, %f52, %f52;
	mul.rn.f32 	%f69, %f53, %f53;
	mul.rn.f32 	%f70, %f54, %f54;
	mul.rn.f32 	%f71, %f55, %f55;
	mul.rn.f32 	%f72, %f56, %f56;
	mul.rn.f32 	%f73, %f57, %f57;
	mul.rn.f32 	%f74, %f58, %f58;
	mul.rn.f32 	%f75, %f59, %f59;
	mul.rn.f32 	%f76, %f60, %f60;
	add.rn.f32 	%f77, %f61, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	add.rn.f32 	%f80, %f79, %f65;
	add.rn.f32 	%f81, %f80, %f66;
	add.rn.f32 	%f82, %f81, %f67;
	add.rn.f32 	%f83, %f82, %f68;
	add.rn.f32 	%f84, %f83, %f69;
	add.rn.f32 	%f85, %f84, %f70;
	add.rn.f32 	%f86, %f85, %f71;
	add.rn.f32 	%f87, %f86, %f72;
	add.rn.f32 	%f88, %f87, %f73;
	add.rn.f32 	%f89, %f88, %f74;
	add.rn.f32 	%f90, %f89, %f75;
	add.rn.f32 	%f91, %f90, %f76;
	mov.b32 	%r91, %f91;
	shfl.sync.bfly.b32	%r92, %r91, 16, 31, -1;
	mov.b32 	%f92, %r92;
	add.rn.f32 	%f93, %f91, %f92;
	mov.b32 	%r93, %f93;
	shfl.sync.bfly.b32	%r94, %r93, 8, 31, -1;
	mov.b32 	%f94, %r94;
	add.rn.f32 	%f95, %f93, %f94;
	mov.b32 	%r95, %f95;
	shfl.sync.bfly.b32	%r96, %r95, 4, 31, -1;
	mov.b32 	%f96, %r96;
	add.rn.f32 	%f97, %f95, %f96;
	mov.b32 	%r97, %f97;
	shfl.sync.bfly.b32	%r98, %r97, 2, 31, -1;
	mov.b32 	%f98, %r98;
	add.rn.f32 	%f99, %f97, %f98;
	mov.b32 	%r99, %f99;
	shfl.sync.bfly.b32	%r100, %r99, 1, 31, -1;
	mov.b32 	%f100, %r100;
	add.rn.f32 	%f101, %f99, %f100;
	setp.eq.s32 	%p1, %r82, 0;
	shr.u32 	%r101, %r81, 3;
	and.b32  	%r102, %r101, 4;
	cvt.u64.u32 	%rd37, %r102;
	mov.u64 	%rd38, global_smem;
	add.s64 	%rd39, %rd38, %rd37;
	mov.b32 	%r63, %f101;
	cvt.u32.u64 	%r62, %rd39;
	// begin inline asm
	@%p1 st.shared.b32 [ %r62 + 0 ], %r63;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r81, 2;
	cvt.u64.u32 	%rd40, %r83;
	add.s64 	%rd41, %rd38, %rd40;
	cvt.u32.u64 	%r65, %rd41;
	// begin inline asm
	@%p2 ld.shared.b32 %r64, [ %r65 + 0 ];
	// end inline asm
	mov.b32 	%f102, %r64;
	shfl.sync.bfly.b32	%r103, %r64, 1, 31, -1;
	mov.b32 	%f103, %r103;
	add.rn.f32 	%f104, %f102, %f103;
	setp.eq.s32 	%p3, %r81, 0;
	mov.b32 	%r67, %f104;
	// begin inline asm
	@%p3 st.shared.b32 [ %r65 + 0 ], %r67;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f105, [global_smem];
	mul.rn.f32 	%f106, %f105, 0f3A800000;
	// begin inline asm
	mov.u32 %r68, 0x0;
	ld.global.b32 { %r68 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f107, %r68;
	add.rn.f32 	%f108, %f106, %f107;
	rsqrt.approx.f32 	%f109, %f108;
	mul.rn.f32 	%f110, %f9, %f109;
	mul.rn.f32 	%f111, %f10, %f109;
	mul.rn.f32 	%f112, %f11, %f109;
	mul.rn.f32 	%f113, %f12, %f109;
	shl.b64 	%rd42, %rd22, 1;
	add.s64 	%rd43, %rd15, %rd42;
	add.s64 	%rd8, %rd43, %rd27;
	// begin inline asm
	mov.u32 %r69, 0x0;
	mov.u32 %r70, 0x0;
	ld.global.v2.b32 { %r69, %r70 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r69;
	mov.b32 	{%rs43, %rs44}, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs41;
	// end inline asm
	mov.b32 	%f114, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs42;
	// end inline asm
	mov.b32 	%f115, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs43;
	// end inline asm
	mov.b32 	%f116, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs44;
	// end inline asm
	mov.b32 	%f117, %r74;
	mul.rn.f32 	%f118, %f110, %f114;
	mul.rn.f32 	%f119, %f111, %f115;
	mul.rn.f32 	%f120, %f112, %f116;
	mul.rn.f32 	%f121, %f113, %f117;
	mov.b32 	%r75, %f118;
	// begin inline asm
	cvt.rn.bf16.f32 %rs45, %r75;
	// end inline asm
	mov.b32 	%r76, %f119;
	// begin inline asm
	cvt.rn.bf16.f32 %rs46, %r76;
	// end inline asm
	mov.b32 	%r77, %f120;
	// begin inline asm
	cvt.rn.bf16.f32 %rs47, %r77;
	// end inline asm
	mov.b32 	%r78, %f121;
	// begin inline asm
	cvt.rn.bf16.f32 %rs48, %r78;
	// end inline asm
	add.s64 	%rd44, %rd12, %rd29;
	add.s64 	%rd9, %rd44, %rd27;
	mov.b32 	%r79, {%rs45, %rs46};
	mov.b32 	%r80, {%rs47, %rs48};
	// begin inline asm
	st.global.v2.b32 [ %rd9 + 0 ], { %r79, %r80 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion_7
.visible .entry loop_convert_fusion_7(
	.param .u64 .ptr .align 128 loop_convert_fusion_7_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_7_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_7_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_7_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 4;
	mul.lo.s16 	%rs4, %rs3, 24;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 7;
	cvt.u32.u16 	%r3, %rs6;
	or.b32  	%r4, %r1, %r3;
	mul.wide.u16 	%r5, %rs3, 6144;
	add.s32 	%r6, %r4, %r5;
	mul.wide.u32 	%rd5, %r6, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs7, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	mul.rn.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.f32 	%f3, %f2;
	cvt.rn.bf16.f32 	%rs8, %f3;
	cvt.f32.bf16 	%f4, %rs8;
	add.rn.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.f32 	%f6, %f5;
	ld.global.nc.u16 	%rs9, [%rd6+6144];
	mul.rn.f32 	%f7, %f6, %f1;
	cvt.f32.bf16 	%f8, %rs9;
	mul.rn.f32 	%f9, %f7, %f8;
	cvt.rn.bf16.f32 	%rs10, %f9;
	shl.b32 	%r7, %r2, 7;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd7, %r8, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs10;
	ret;

}
	// .globl	fusion_114
.visible .entry fusion_114(
	.param .u64 .ptr .align 16 fusion_114_param_0,
	.param .u64 .ptr .align 16 fusion_114_param_1,
	.param .u64 .ptr .align 128 fusion_114_param_2,
	.param .u64 .ptr .align 128 fusion_114_param_3,
	.param .u64 .ptr .align 128 fusion_114_param_4,
	.param .u64 .ptr .align 128 fusion_114_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<89>;
	.reg .b32 	%r<164>;
	.reg .f32 	%f<202>;
	.reg .b64 	%rd<55>;

	ld.param.u64 	%rd16, [fusion_114_param_0];
	ld.param.u64 	%rd17, [fusion_114_param_5];
	cvta.to.global.u64 	%rd18, %rd17;
	ld.param.u64 	%rd19, [fusion_114_param_1];
	ld.param.u64 	%rd20, [fusion_114_param_4];
	cvta.to.global.u64 	%rd21, %rd20;
	ld.param.u64 	%rd22, [fusion_114_param_2];
	ld.param.u64 	%rd23, [fusion_114_param_3];
	cvta.to.global.u64 	%rd24, %rd23;
	cvta.to.global.u64 	%rd25, %rd22;
	cvta.to.global.u64 	%rd26, %rd19;
	cvta.to.global.u64 	%rd13, %rd16;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	cvt.s64.s32 	%rd27, %r1;
	shr.u64 	%rd28, %rd27, 2;
	mul.wide.s32 	%rd29, %r1, 256;
	and.b64  	%rd30, %rd29, 768;
	shl.b64 	%rd31, %rd28, 13;
	or.b64  	%rd32, %rd30, %rd31;
	shl.b64 	%rd33, %rd32, 1;
	add.s64 	%rd34, %rd24, %rd33;
	mov.u32 	%r141, %tid.x;
	and.b32  	%r142, %r141, 31;
	shl.b32 	%r143, %r141, 2;
	and.b32  	%r144, %r143, 124;
	setp.lt.u32 	%p4, %r141, 32;
	selp.b32 	%r145, 0, 128, %p4;
	or.b32  	%r146, %r144, %r145;
	mul.wide.u32 	%rd35, %r146, 2;
	add.s64 	%rd36, %rd34, %rd35;
	add.s64 	%rd1, %rd36, 12288;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	shl.b64 	%rd37, %rd29, 1;
	add.s64 	%rd38, %rd21, %rd37;
	add.s64 	%rd2, %rd38, %rd35;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.s64 	%rd3, %rd36, 14336;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	ld.global.v2.b32 { %r14, %r15 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs9;
	// end inline asm
	mov.b32 	%f9, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs10;
	// end inline asm
	mov.b32 	%f10, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs11;
	// end inline asm
	mov.b32 	%f11, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs12;
	// end inline asm
	mov.b32 	%f12, %r19;
	add.s64 	%rd39, %rd25, %rd37;
	add.s64 	%rd4, %rd39, %rd35;
	// begin inline asm
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v2.b32 { %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs13, %rs14}, %r20;
	mov.b32 	{%rs15, %rs16}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	add.rn.f32 	%f17, %f9, %f13;
	add.rn.f32 	%f18, %f10, %f14;
	add.rn.f32 	%f19, %f11, %f15;
	add.rn.f32 	%f20, %f12, %f16;
	add.rn.f32 	%f21, %f5, %f17;
	add.rn.f32 	%f22, %f6, %f18;
	add.rn.f32 	%f23, %f7, %f19;
	add.rn.f32 	%f24, %f8, %f20;
	add.rn.f32 	%f25, %f1, %f21;
	add.rn.f32 	%f26, %f2, %f22;
	add.rn.f32 	%f27, %f3, %f23;
	add.rn.f32 	%f28, %f4, %f24;
	shl.b64 	%rd40, %rd28, 14;
	add.s64 	%rd41, %rd24, %rd40;
	shl.b32 	%r147, %r141, 3;
	and.b32  	%r148, %r147, 248;
	selp.b32 	%r149, 0, 256, %p4;
	or.b32  	%r150, %r148, %r149;
	mul.wide.u32 	%rd42, %r150, 2;
	add.s64 	%rd43, %rd41, %rd42;
	add.s64 	%rd5, %rd43, 12288;
	add.s64 	%rd6, %rd43, 13312;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f29, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f30, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f31, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f32, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f33, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f34, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f35, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f36, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f37, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f38, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f39, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f40, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f41, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f42, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f43, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f44, %r49;
	shl.b64 	%rd44, %rd28, 11;
	add.s64 	%rd45, %rd21, %rd44;
	add.s64 	%rd7, %rd45, %rd42;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f45, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f46, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f47, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f48, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f49, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f50, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f51, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f52, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f53, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f54, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f55, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f56, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f57, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f58, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f59, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f60, %r73;
	add.s64 	%rd9, %rd43, 14336;
	add.s64 	%rd10, %rd43, 15360;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f61, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f62, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f63, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f64, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f65, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f66, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f67, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f68, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f69, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f70, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f71, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f72, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f73, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f74, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f75, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f76, %r97;
	add.s64 	%rd46, %rd25, %rd44;
	add.s64 	%rd11, %rd46, %rd42;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f77, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f78, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f79, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f80, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f81, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f82, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f83, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f84, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f85, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f86, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f87, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f88, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f89, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f90, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f91, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f92, %r121;
	add.rn.f32 	%f93, %f61, %f77;
	add.rn.f32 	%f94, %f62, %f78;
	add.rn.f32 	%f95, %f63, %f79;
	add.rn.f32 	%f96, %f64, %f80;
	add.rn.f32 	%f97, %f65, %f81;
	add.rn.f32 	%f98, %f66, %f82;
	add.rn.f32 	%f99, %f67, %f83;
	add.rn.f32 	%f100, %f68, %f84;
	add.rn.f32 	%f101, %f69, %f85;
	add.rn.f32 	%f102, %f70, %f86;
	add.rn.f32 	%f103, %f71, %f87;
	add.rn.f32 	%f104, %f72, %f88;
	add.rn.f32 	%f105, %f73, %f89;
	add.rn.f32 	%f106, %f74, %f90;
	add.rn.f32 	%f107, %f75, %f91;
	add.rn.f32 	%f108, %f76, %f92;
	add.rn.f32 	%f109, %f45, %f93;
	add.rn.f32 	%f110, %f46, %f94;
	add.rn.f32 	%f111, %f47, %f95;
	add.rn.f32 	%f112, %f48, %f96;
	add.rn.f32 	%f113, %f49, %f97;
	add.rn.f32 	%f114, %f50, %f98;
	add.rn.f32 	%f115, %f51, %f99;
	add.rn.f32 	%f116, %f52, %f100;
	add.rn.f32 	%f117, %f53, %f101;
	add.rn.f32 	%f118, %f54, %f102;
	add.rn.f32 	%f119, %f55, %f103;
	add.rn.f32 	%f120, %f56, %f104;
	add.rn.f32 	%f121, %f57, %f105;
	add.rn.f32 	%f122, %f58, %f106;
	add.rn.f32 	%f123, %f59, %f107;
	add.rn.f32 	%f124, %f60, %f108;
	add.rn.f32 	%f125, %f29, %f109;
	add.rn.f32 	%f126, %f30, %f110;
	add.rn.f32 	%f127, %f31, %f111;
	add.rn.f32 	%f128, %f32, %f112;
	add.rn.f32 	%f129, %f33, %f113;
	add.rn.f32 	%f130, %f34, %f114;
	add.rn.f32 	%f131, %f35, %f115;
	add.rn.f32 	%f132, %f36, %f116;
	add.rn.f32 	%f133, %f37, %f117;
	add.rn.f32 	%f134, %f38, %f118;
	add.rn.f32 	%f135, %f39, %f119;
	add.rn.f32 	%f136, %f40, %f120;
	add.rn.f32 	%f137, %f41, %f121;
	add.rn.f32 	%f138, %f42, %f122;
	add.rn.f32 	%f139, %f43, %f123;
	add.rn.f32 	%f140, %f44, %f124;
	mul.rn.f32 	%f141, %f125, %f125;
	mul.rn.f32 	%f142, %f126, %f126;
	mul.rn.f32 	%f143, %f127, %f127;
	mul.rn.f32 	%f144, %f128, %f128;
	mul.rn.f32 	%f145, %f129, %f129;
	mul.rn.f32 	%f146, %f130, %f130;
	mul.rn.f32 	%f147, %f131, %f131;
	mul.rn.f32 	%f148, %f132, %f132;
	mul.rn.f32 	%f149, %f133, %f133;
	mul.rn.f32 	%f150, %f134, %f134;
	mul.rn.f32 	%f151, %f135, %f135;
	mul.rn.f32 	%f152, %f136, %f136;
	mul.rn.f32 	%f153, %f137, %f137;
	mul.rn.f32 	%f154, %f138, %f138;
	mul.rn.f32 	%f155, %f139, %f139;
	mul.rn.f32 	%f156, %f140, %f140;
	add.rn.f32 	%f157, %f141, %f142;
	add.rn.f32 	%f158, %f157, %f143;
	add.rn.f32 	%f159, %f158, %f144;
	add.rn.f32 	%f160, %f159, %f145;
	add.rn.f32 	%f161, %f160, %f146;
	add.rn.f32 	%f162, %f161, %f147;
	add.rn.f32 	%f163, %f162, %f148;
	add.rn.f32 	%f164, %f163, %f149;
	add.rn.f32 	%f165, %f164, %f150;
	add.rn.f32 	%f166, %f165, %f151;
	add.rn.f32 	%f167, %f166, %f152;
	add.rn.f32 	%f168, %f167, %f153;
	add.rn.f32 	%f169, %f168, %f154;
	add.rn.f32 	%f170, %f169, %f155;
	add.rn.f32 	%f171, %f170, %f156;
	mov.b32 	%r151, %f171;
	shfl.sync.bfly.b32	%r152, %r151, 16, 31, -1;
	mov.b32 	%f172, %r152;
	add.rn.f32 	%f173, %f171, %f172;
	mov.b32 	%r153, %f173;
	shfl.sync.bfly.b32	%r154, %r153, 8, 31, -1;
	mov.b32 	%f174, %r154;
	add.rn.f32 	%f175, %f173, %f174;
	mov.b32 	%r155, %f175;
	shfl.sync.bfly.b32	%r156, %r155, 4, 31, -1;
	mov.b32 	%f176, %r156;
	add.rn.f32 	%f177, %f175, %f176;
	mov.b32 	%r157, %f177;
	shfl.sync.bfly.b32	%r158, %r157, 2, 31, -1;
	mov.b32 	%f178, %r158;
	add.rn.f32 	%f179, %f177, %f178;
	mov.b32 	%r159, %f179;
	shfl.sync.bfly.b32	%r160, %r159, 1, 31, -1;
	mov.b32 	%f180, %r160;
	add.rn.f32 	%f181, %f179, %f180;
	setp.eq.s32 	%p1, %r142, 0;
	shr.u32 	%r161, %r141, 3;
	and.b32  	%r162, %r161, 4;
	cvt.u64.u32 	%rd47, %r162;
	mov.u64 	%rd48, global_smem;
	add.s64 	%rd49, %rd48, %rd47;
	mov.b32 	%r123, %f181;
	cvt.u32.u64 	%r122, %rd49;
	// begin inline asm
	@%p1 st.shared.b32 [ %r122 + 0 ], %r123;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r141, 2;
	cvt.u64.u32 	%rd50, %r143;
	add.s64 	%rd51, %rd48, %rd50;
	cvt.u32.u64 	%r125, %rd51;
	// begin inline asm
	@%p2 ld.shared.b32 %r124, [ %r125 + 0 ];
	// end inline asm
	mov.b32 	%f182, %r124;
	shfl.sync.bfly.b32	%r163, %r124, 1, 31, -1;
	mov.b32 	%f183, %r163;
	add.rn.f32 	%f184, %f182, %f183;
	setp.eq.s32 	%p3, %r141, 0;
	mov.b32 	%r127, %f184;
	// begin inline asm
	@%p3 st.shared.b32 [ %r125 + 0 ], %r127;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f185, [global_smem];
	mul.rn.f32 	%f186, %f185, 0f3A800000;
	// begin inline asm
	mov.u32 %r128, 0x0;
	ld.global.b32 { %r128 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f187, %r128;
	add.rn.f32 	%f188, %f186, %f187;
	rsqrt.approx.f32 	%f189, %f188;
	mul.rn.f32 	%f190, %f25, %f189;
	mul.rn.f32 	%f191, %f26, %f189;
	mul.rn.f32 	%f192, %f27, %f189;
	mul.rn.f32 	%f193, %f28, %f189;
	shl.b64 	%rd52, %rd30, 1;
	add.s64 	%rd53, %rd26, %rd52;
	add.s64 	%rd14, %rd53, %rd35;
	// begin inline asm
	mov.u32 %r129, 0x0;
	mov.u32 %r130, 0x0;
	ld.global.v2.b32 { %r129, %r130 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r129;
	mov.b32 	{%rs83, %rs84}, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs81;
	// end inline asm
	mov.b32 	%f194, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs82;
	// end inline asm
	mov.b32 	%f195, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs83;
	// end inline asm
	mov.b32 	%f196, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs84;
	// end inline asm
	mov.b32 	%f197, %r134;
	mul.rn.f32 	%f198, %f190, %f194;
	mul.rn.f32 	%f199, %f191, %f195;
	mul.rn.f32 	%f200, %f192, %f196;
	mul.rn.f32 	%f201, %f193, %f197;
	mov.b32 	%r135, %f198;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r135;
	// end inline asm
	mov.b32 	%r136, %f199;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r136;
	// end inline asm
	mov.b32 	%r137, %f200;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r137;
	// end inline asm
	mov.b32 	%r138, %f201;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r138;
	// end inline asm
	add.s64 	%rd54, %rd18, %rd37;
	add.s64 	%rd15, %rd54, %rd35;
	mov.b32 	%r139, {%rs85, %rs86};
	mov.b32 	%r140, {%rs87, %rs88};
	// begin inline asm
	st.global.v2.b32 [ %rd15 + 0 ], { %r139, %r140 };
	// end inline asm
	ret;

}
	// .globl	fusion_112
.visible .entry fusion_112(
	.param .u64 .ptr .align 16 fusion_112_param_0,
	.param .u64 .ptr .align 16 fusion_112_param_1,
	.param .u64 .ptr .align 128 fusion_112_param_2,
	.param .u64 .ptr .align 128 fusion_112_param_3,
	.param .u64 .ptr .align 128 fusion_112_param_4,
	.param .u64 .ptr .align 128 fusion_112_param_5,
	.param .u64 .ptr .align 128 fusion_112_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<129>;
	.reg .b32 	%r<221>;
	.reg .f32 	%f<274>;
	.reg .b64 	%rd<47>;

	ld.param.u64 	%rd18, [fusion_112_param_0];
	ld.param.u64 	%rd19, [fusion_112_param_6];
	cvta.to.global.u64 	%rd20, %rd19;
	ld.param.u64 	%rd21, [fusion_112_param_1];
	ld.param.u64 	%rd22, [fusion_112_param_5];
	cvta.to.global.u64 	%rd23, %rd22;
	ld.param.u64 	%rd24, [fusion_112_param_2];
	ld.param.u64 	%rd25, [fusion_112_param_4];
	cvta.to.global.u64 	%rd26, %rd25;
	ld.param.u64 	%rd27, [fusion_112_param_3];
	cvta.to.global.u64 	%rd28, %rd27;
	cvta.to.global.u64 	%rd29, %rd24;
	cvta.to.global.u64 	%rd30, %rd21;
	cvta.to.global.u64 	%rd13, %rd18;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd31, %r1, 8192;
	shl.b64 	%rd32, %rd31, 1;
	add.s64 	%rd33, %rd28, %rd32;
	mov.u32 	%r201, %tid.x;
	and.b32  	%r202, %r201, 31;
	shl.b32 	%r203, %r201, 3;
	and.b32  	%r204, %r203, 248;
	setp.lt.u32 	%p4, %r201, 32;
	selp.b32 	%r205, 0, 256, %p4;
	or.b32  	%r206, %r204, %r205;
	mul.wide.u32 	%rd34, %r206, 2;
	add.s64 	%rd35, %rd33, %rd34;
	add.s64 	%rd1, %rd35, 10240;
	add.s64 	%rd2, %rd35, 11264;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd36, %r1, 1024;
	shl.b64 	%rd37, %rd36, 1;
	add.s64 	%rd38, %rd29, %rd37;
	add.s64 	%rd3, %rd38, %rd34;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd35, 12288;
	add.s64 	%rd6, %rd35, 13312;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd39, %rd23, %rd37;
	add.s64 	%rd7, %rd39, %rd34;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd9, %rd35, 14336;
	add.s64 	%rd10, %rd35, 15360;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd40, %rd26, %rd37;
	add.s64 	%rd11, %rd40, %rd34;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.rn.f32 	%f97, %f65, %f81;
	add.rn.f32 	%f98, %f66, %f82;
	add.rn.f32 	%f99, %f67, %f83;
	add.rn.f32 	%f100, %f68, %f84;
	add.rn.f32 	%f101, %f69, %f85;
	add.rn.f32 	%f102, %f70, %f86;
	add.rn.f32 	%f103, %f71, %f87;
	add.rn.f32 	%f104, %f72, %f88;
	add.rn.f32 	%f105, %f73, %f89;
	add.rn.f32 	%f106, %f74, %f90;
	add.rn.f32 	%f107, %f75, %f91;
	add.rn.f32 	%f108, %f76, %f92;
	add.rn.f32 	%f109, %f77, %f93;
	add.rn.f32 	%f110, %f78, %f94;
	add.rn.f32 	%f111, %f79, %f95;
	add.rn.f32 	%f112, %f80, %f96;
	add.rn.f32 	%f113, %f49, %f97;
	add.rn.f32 	%f114, %f50, %f98;
	add.rn.f32 	%f115, %f51, %f99;
	add.rn.f32 	%f116, %f52, %f100;
	add.rn.f32 	%f117, %f53, %f101;
	add.rn.f32 	%f118, %f54, %f102;
	add.rn.f32 	%f119, %f55, %f103;
	add.rn.f32 	%f120, %f56, %f104;
	add.rn.f32 	%f121, %f57, %f105;
	add.rn.f32 	%f122, %f58, %f106;
	add.rn.f32 	%f123, %f59, %f107;
	add.rn.f32 	%f124, %f60, %f108;
	add.rn.f32 	%f125, %f61, %f109;
	add.rn.f32 	%f126, %f62, %f110;
	add.rn.f32 	%f127, %f63, %f111;
	add.rn.f32 	%f128, %f64, %f112;
	add.rn.f32 	%f129, %f33, %f113;
	add.rn.f32 	%f130, %f34, %f114;
	add.rn.f32 	%f131, %f35, %f115;
	add.rn.f32 	%f132, %f36, %f116;
	add.rn.f32 	%f133, %f37, %f117;
	add.rn.f32 	%f134, %f38, %f118;
	add.rn.f32 	%f135, %f39, %f119;
	add.rn.f32 	%f136, %f40, %f120;
	add.rn.f32 	%f137, %f41, %f121;
	add.rn.f32 	%f138, %f42, %f122;
	add.rn.f32 	%f139, %f43, %f123;
	add.rn.f32 	%f140, %f44, %f124;
	add.rn.f32 	%f141, %f45, %f125;
	add.rn.f32 	%f142, %f46, %f126;
	add.rn.f32 	%f143, %f47, %f127;
	add.rn.f32 	%f144, %f48, %f128;
	add.rn.f32 	%f145, %f17, %f129;
	add.rn.f32 	%f146, %f18, %f130;
	add.rn.f32 	%f147, %f19, %f131;
	add.rn.f32 	%f148, %f20, %f132;
	add.rn.f32 	%f149, %f21, %f133;
	add.rn.f32 	%f150, %f22, %f134;
	add.rn.f32 	%f151, %f23, %f135;
	add.rn.f32 	%f152, %f24, %f136;
	add.rn.f32 	%f153, %f25, %f137;
	add.rn.f32 	%f154, %f26, %f138;
	add.rn.f32 	%f155, %f27, %f139;
	add.rn.f32 	%f156, %f28, %f140;
	add.rn.f32 	%f157, %f29, %f141;
	add.rn.f32 	%f158, %f30, %f142;
	add.rn.f32 	%f159, %f31, %f143;
	add.rn.f32 	%f160, %f32, %f144;
	add.rn.f32 	%f161, %f1, %f145;
	add.rn.f32 	%f162, %f2, %f146;
	add.rn.f32 	%f163, %f3, %f147;
	add.rn.f32 	%f164, %f4, %f148;
	add.rn.f32 	%f165, %f5, %f149;
	add.rn.f32 	%f166, %f6, %f150;
	add.rn.f32 	%f167, %f7, %f151;
	add.rn.f32 	%f168, %f8, %f152;
	add.rn.f32 	%f169, %f9, %f153;
	add.rn.f32 	%f170, %f10, %f154;
	add.rn.f32 	%f171, %f11, %f155;
	add.rn.f32 	%f172, %f12, %f156;
	add.rn.f32 	%f173, %f13, %f157;
	add.rn.f32 	%f174, %f14, %f158;
	add.rn.f32 	%f175, %f15, %f159;
	add.rn.f32 	%f176, %f16, %f160;
	mul.rn.f32 	%f177, %f161, %f161;
	mul.rn.f32 	%f178, %f162, %f162;
	mul.rn.f32 	%f179, %f163, %f163;
	mul.rn.f32 	%f180, %f164, %f164;
	mul.rn.f32 	%f181, %f165, %f165;
	mul.rn.f32 	%f182, %f166, %f166;
	mul.rn.f32 	%f183, %f167, %f167;
	mul.rn.f32 	%f184, %f168, %f168;
	mul.rn.f32 	%f185, %f169, %f169;
	mul.rn.f32 	%f186, %f170, %f170;
	mul.rn.f32 	%f187, %f171, %f171;
	mul.rn.f32 	%f188, %f172, %f172;
	mul.rn.f32 	%f189, %f173, %f173;
	mul.rn.f32 	%f190, %f174, %f174;
	mul.rn.f32 	%f191, %f175, %f175;
	mul.rn.f32 	%f192, %f176, %f176;
	add.rn.f32 	%f193, %f177, %f178;
	add.rn.f32 	%f194, %f193, %f179;
	add.rn.f32 	%f195, %f194, %f180;
	add.rn.f32 	%f196, %f195, %f181;
	add.rn.f32 	%f197, %f196, %f182;
	add.rn.f32 	%f198, %f197, %f183;
	add.rn.f32 	%f199, %f198, %f184;
	add.rn.f32 	%f200, %f199, %f185;
	add.rn.f32 	%f201, %f200, %f186;
	add.rn.f32 	%f202, %f201, %f187;
	add.rn.f32 	%f203, %f202, %f188;
	add.rn.f32 	%f204, %f203, %f189;
	add.rn.f32 	%f205, %f204, %f190;
	add.rn.f32 	%f206, %f205, %f191;
	add.rn.f32 	%f207, %f206, %f192;
	mov.b32 	%r207, %f207;
	shfl.sync.bfly.b32	%r208, %r207, 16, 31, -1;
	mov.b32 	%f208, %r208;
	add.rn.f32 	%f209, %f207, %f208;
	mov.b32 	%r209, %f209;
	shfl.sync.bfly.b32	%r210, %r209, 8, 31, -1;
	mov.b32 	%f210, %r210;
	add.rn.f32 	%f211, %f209, %f210;
	mov.b32 	%r211, %f211;
	shfl.sync.bfly.b32	%r212, %r211, 4, 31, -1;
	mov.b32 	%f212, %r212;
	add.rn.f32 	%f213, %f211, %f212;
	mov.b32 	%r213, %f213;
	shfl.sync.bfly.b32	%r214, %r213, 2, 31, -1;
	mov.b32 	%f214, %r214;
	add.rn.f32 	%f215, %f213, %f214;
	mov.b32 	%r215, %f215;
	shfl.sync.bfly.b32	%r216, %r215, 1, 31, -1;
	mov.b32 	%f216, %r216;
	add.rn.f32 	%f217, %f215, %f216;
	setp.eq.s32 	%p1, %r202, 0;
	shr.u32 	%r217, %r201, 3;
	and.b32  	%r218, %r217, 4;
	cvt.u64.u32 	%rd41, %r218;
	mov.u64 	%rd42, global_smem;
	add.s64 	%rd43, %rd42, %rd41;
	mov.b32 	%r147, %f217;
	cvt.u32.u64 	%r146, %rd43;
	// begin inline asm
	@%p1 st.shared.b32 [ %r146 + 0 ], %r147;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r201, 2;
	shl.b32 	%r219, %r201, 2;
	cvt.u64.u32 	%rd44, %r219;
	add.s64 	%rd45, %rd42, %rd44;
	cvt.u32.u64 	%r149, %rd45;
	// begin inline asm
	@%p2 ld.shared.b32 %r148, [ %r149 + 0 ];
	// end inline asm
	mov.b32 	%f218, %r148;
	shfl.sync.bfly.b32	%r220, %r148, 1, 31, -1;
	mov.b32 	%f219, %r220;
	add.rn.f32 	%f220, %f218, %f219;
	setp.eq.s32 	%p3, %r201, 0;
	mov.b32 	%r151, %f220;
	// begin inline asm
	@%p3 st.shared.b32 [ %r149 + 0 ], %r151;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f221, [global_smem];
	mul.rn.f32 	%f222, %f221, 0f3A800000;
	// begin inline asm
	mov.u32 %r152, 0x0;
	ld.global.b32 { %r152 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f223, %r152;
	add.rn.f32 	%f224, %f222, %f223;
	rsqrt.approx.f32 	%f225, %f224;
	mul.rn.f32 	%f226, %f161, %f225;
	mul.rn.f32 	%f227, %f162, %f225;
	mul.rn.f32 	%f228, %f163, %f225;
	mul.rn.f32 	%f229, %f164, %f225;
	mul.rn.f32 	%f230, %f165, %f225;
	mul.rn.f32 	%f231, %f166, %f225;
	mul.rn.f32 	%f232, %f167, %f225;
	mul.rn.f32 	%f233, %f168, %f225;
	mul.rn.f32 	%f234, %f169, %f225;
	mul.rn.f32 	%f235, %f170, %f225;
	mul.rn.f32 	%f236, %f171, %f225;
	mul.rn.f32 	%f237, %f172, %f225;
	mul.rn.f32 	%f238, %f173, %f225;
	mul.rn.f32 	%f239, %f174, %f225;
	mul.rn.f32 	%f240, %f175, %f225;
	mul.rn.f32 	%f241, %f176, %f225;
	add.s64 	%rd14, %rd30, %rd34;
	add.s64 	%rd15, %rd14, 1024;
	// begin inline asm
	mov.u32 %r153, 0x0;
	mov.u32 %r154, 0x0;
	mov.u32 %r155, 0x0;
	mov.u32 %r156, 0x0;
	ld.global.v4.b32 { %r153, %r154, %r155, %r156 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r153;
	mov.b32 	{%rs99, %rs100}, %r154;
	mov.b32 	{%rs101, %rs102}, %r155;
	mov.b32 	{%rs103, %rs104}, %r156;
	// begin inline asm
	mov.u32 %r157, 0x0;
	mov.u32 %r158, 0x0;
	mov.u32 %r159, 0x0;
	mov.u32 %r160, 0x0;
	ld.global.v4.b32 { %r157, %r158, %r159, %r160 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r157;
	mov.b32 	{%rs107, %rs108}, %r158;
	mov.b32 	{%rs109, %rs110}, %r159;
	mov.b32 	{%rs111, %rs112}, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs97;
	// end inline asm
	mov.b32 	%f242, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs98;
	// end inline asm
	mov.b32 	%f243, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs99;
	// end inline asm
	mov.b32 	%f244, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs100;
	// end inline asm
	mov.b32 	%f245, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs101;
	// end inline asm
	mov.b32 	%f246, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs102;
	// end inline asm
	mov.b32 	%f247, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs103;
	// end inline asm
	mov.b32 	%f248, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs104;
	// end inline asm
	mov.b32 	%f249, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs105;
	// end inline asm
	mov.b32 	%f250, %r169;
	// begin inline asm
	cvt.f32.bf16 %r170, %rs106;
	// end inline asm
	mov.b32 	%f251, %r170;
	// begin inline asm
	cvt.f32.bf16 %r171, %rs107;
	// end inline asm
	mov.b32 	%f252, %r171;
	// begin inline asm
	cvt.f32.bf16 %r172, %rs108;
	// end inline asm
	mov.b32 	%f253, %r172;
	// begin inline asm
	cvt.f32.bf16 %r173, %rs109;
	// end inline asm
	mov.b32 	%f254, %r173;
	// begin inline asm
	cvt.f32.bf16 %r174, %rs110;
	// end inline asm
	mov.b32 	%f255, %r174;
	// begin inline asm
	cvt.f32.bf16 %r175, %rs111;
	// end inline asm
	mov.b32 	%f256, %r175;
	// begin inline asm
	cvt.f32.bf16 %r176, %rs112;
	// end inline asm
	mov.b32 	%f257, %r176;
	mul.rn.f32 	%f258, %f226, %f242;
	mul.rn.f32 	%f259, %f227, %f243;
	mul.rn.f32 	%f260, %f228, %f244;
	mul.rn.f32 	%f261, %f229, %f245;
	mul.rn.f32 	%f262, %f230, %f246;
	mul.rn.f32 	%f263, %f231, %f247;
	mul.rn.f32 	%f264, %f232, %f248;
	mul.rn.f32 	%f265, %f233, %f249;
	mul.rn.f32 	%f266, %f234, %f250;
	mul.rn.f32 	%f267, %f235, %f251;
	mul.rn.f32 	%f268, %f236, %f252;
	mul.rn.f32 	%f269, %f237, %f253;
	mul.rn.f32 	%f270, %f238, %f254;
	mul.rn.f32 	%f271, %f239, %f255;
	mul.rn.f32 	%f272, %f240, %f256;
	mul.rn.f32 	%f273, %f241, %f257;
	mov.b32 	%r177, %f258;
	// begin inline asm
	cvt.rn.bf16.f32 %rs113, %r177;
	// end inline asm
	mov.b32 	%r178, %f259;
	// begin inline asm
	cvt.rn.bf16.f32 %rs114, %r178;
	// end inline asm
	mov.b32 	%r179, %f260;
	// begin inline asm
	cvt.rn.bf16.f32 %rs115, %r179;
	// end inline asm
	mov.b32 	%r180, %f261;
	// begin inline asm
	cvt.rn.bf16.f32 %rs116, %r180;
	// end inline asm
	mov.b32 	%r181, %f262;
	// begin inline asm
	cvt.rn.bf16.f32 %rs117, %r181;
	// end inline asm
	mov.b32 	%r182, %f263;
	// begin inline asm
	cvt.rn.bf16.f32 %rs118, %r182;
	// end inline asm
	mov.b32 	%r183, %f264;
	// begin inline asm
	cvt.rn.bf16.f32 %rs119, %r183;
	// end inline asm
	mov.b32 	%r184, %f265;
	// begin inline asm
	cvt.rn.bf16.f32 %rs120, %r184;
	// end inline asm
	mov.b32 	%r185, %f266;
	// begin inline asm
	cvt.rn.bf16.f32 %rs121, %r185;
	// end inline asm
	mov.b32 	%r186, %f267;
	// begin inline asm
	cvt.rn.bf16.f32 %rs122, %r186;
	// end inline asm
	mov.b32 	%r187, %f268;
	// begin inline asm
	cvt.rn.bf16.f32 %rs123, %r187;
	// end inline asm
	mov.b32 	%r188, %f269;
	// begin inline asm
	cvt.rn.bf16.f32 %rs124, %r188;
	// end inline asm
	mov.b32 	%r189, %f270;
	// begin inline asm
	cvt.rn.bf16.f32 %rs125, %r189;
	// end inline asm
	mov.b32 	%r190, %f271;
	// begin inline asm
	cvt.rn.bf16.f32 %rs126, %r190;
	// end inline asm
	mov.b32 	%r191, %f272;
	// begin inline asm
	cvt.rn.bf16.f32 %rs127, %r191;
	// end inline asm
	mov.b32 	%r192, %f273;
	// begin inline asm
	cvt.rn.bf16.f32 %rs128, %r192;
	// end inline asm
	add.s64 	%rd46, %rd20, %rd37;
	add.s64 	%rd16, %rd46, %rd34;
	add.s64 	%rd17, %rd16, 1024;
	mov.b32 	%r193, {%rs113, %rs114};
	mov.b32 	%r194, {%rs115, %rs116};
	mov.b32 	%r195, {%rs117, %rs118};
	mov.b32 	%r196, {%rs119, %rs120};
	// begin inline asm
	st.global.v4.b32 [ %rd16 + 0 ], { %r193, %r194, %r195, %r196 };
	// end inline asm
	mov.b32 	%r197, {%rs121, %rs122};
	mov.b32 	%r198, {%rs123, %rs124};
	mov.b32 	%r199, {%rs125, %rs126};
	mov.b32 	%r200, {%rs127, %rs128};
	// begin inline asm
	st.global.v4.b32 [ %rd17 + 0 ], { %r197, %r198, %r199, %r200 };
	// end inline asm
	ret;

}
	// .globl	loop_add_fusion
.visible .entry loop_add_fusion(
	.param .u64 .ptr .align 128 loop_add_fusion_param_0,
	.param .u64 .ptr .align 128 loop_add_fusion_param_1,
	.param .u64 .ptr .align 128 loop_add_fusion_param_2,
	.param .u64 .ptr .align 128 loop_add_fusion_param_3,
	.param .u64 .ptr .align 128 loop_add_fusion_param_4,
	.param .u64 .ptr .align 128 loop_add_fusion_param_5
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<12>;
	.reg .f32 	%f<16>;
	.reg .b64 	%rd<24>;

	ld.param.u64 	%rd1, [loop_add_fusion_param_0];
	ld.param.u64 	%rd2, [loop_add_fusion_param_5];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_add_fusion_param_1];
	ld.param.u64 	%rd5, [loop_add_fusion_param_4];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [loop_add_fusion_param_2];
	ld.param.u64 	%rd8, [loop_add_fusion_param_3];
	cvta.to.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd10, %rd7;
	cvta.to.global.u64 	%rd11, %rd4;
	cvta.to.global.u64 	%rd12, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	or.b32  	%r5, %r4, %r1;
	or.b32  	%r6, %r3, %r1;
	mul.wide.u32 	%rd13, %r6, 2;
	add.s64 	%rd14, %rd9, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	add.s64 	%rd15, %rd6, %rd13;
	ld.global.nc.u16 	%rs2, [%rd15];
	shl.b32 	%r7, %r2, 10;
	and.b32  	%r8, %r7, 122880;
	or.b32  	%r9, %r7, %r5;
	or.b32  	%r10, %r9, 7168;
	mul.wide.u32 	%rd16, %r10, 2;
	add.s64 	%rd17, %rd12, %rd16;
	ld.global.nc.u16 	%rs3, [%rd17];
	cvt.f32.bf16 	%f1, %rs3;
	cvt.f32.bf16 	%f2, %rs1;
	cvt.f32.bf16 	%f3, %rs2;
	add.rn.f32 	%f4, %f2, %f1;
	add.s64 	%rd18, %rd10, %rd13;
	ld.global.nc.u16 	%rs4, [%rd18];
	or.b32  	%r11, %r5, %r8;
	mul.wide.u32 	%rd19, %r11, 2;
	add.s64 	%rd20, %rd12, %rd19;
	ld.global.nc.u16 	%rs5, [%rd20+12288];
	cvt.f32.bf16 	%f5, %rs5;
	add.rn.f32 	%f6, %f4, %f3;
	cvt.f32.bf16 	%f7, %rs4;
	add.rn.f32 	%f8, %f6, %f5;
	add.s64 	%rd21, %rd11, %rd13;
	ld.global.nc.u16 	%rs6, [%rd21];
	ld.global.nc.u16 	%rs7, [%rd20+10240];
	cvt.f32.bf16 	%f9, %rs7;
	add.rn.f32 	%f10, %f8, %f7;
	cvt.f32.bf16 	%f11, %rs6;
	add.rn.f32 	%f12, %f10, %f9;
	ld.global.nc.u16 	%rs8, [%rd20+8192];
	cvt.f32.bf16 	%f13, %rs8;
	add.rn.f32 	%f14, %f12, %f11;
	add.rn.f32 	%f15, %f14, %f13;
	mul.wide.u32 	%rd22, %r6, 4;
	add.s64 	%rd23, %rd3, %rd22;
	st.global.f32 	[%rd23], %f15;
	ret;

}
	// .globl	fusion_110
.visible .entry fusion_110(
	.param .u64 .ptr .align 128 fusion_110_param_0,
	.param .u64 .ptr .align 16 fusion_110_param_1,
	.param .u64 .ptr .align 16 fusion_110_param_2,
	.param .u64 .ptr .align 128 fusion_110_param_3
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<56>;
	.reg .f32 	%f<74>;
	.reg .b64 	%rd<33>;

	ld.param.u64 	%rd9, [fusion_110_param_0];
	ld.param.u64 	%rd10, [fusion_110_param_3];
	cvta.to.global.u64 	%rd11, %rd10;
	ld.param.u64 	%rd12, [fusion_110_param_1];
	ld.param.u64 	%rd13, [fusion_110_param_2];
	cvta.to.global.u64 	%rd14, %rd13;
	cvta.to.global.u64 	%rd6, %rd12;
	cvta.to.global.u64 	%rd15, %rd9;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd16, %r1, 128;
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd18, %rd15, %rd17;
	mov.u32 	%r33, %tid.x;
	and.b32  	%r34, %r33, 31;
	shl.b32 	%r35, %r33, 1;
	and.b32  	%r36, %r35, 62;
	setp.lt.u32 	%p4, %r33, 32;
	selp.b32 	%r37, 0, 64, %p4;
	or.b32  	%r38, %r36, %r37;
	mul.wide.u32 	%rd19, %r38, 4;
	add.s64 	%rd1, %rd18, %rd19;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	%f1, %r2;
	mov.b32 	%f2, %r3;
	and.b64  	%rd20, %rd17, -4096;
	add.s64 	%rd21, %rd15, %rd20;
	shl.b32 	%r39, %r33, 2;
	and.b32  	%r40, %r39, 124;
	selp.b32 	%r41, 0, 128, %p4;
	or.b32  	%r42, %r40, %r41;
	mul.wide.u32 	%rd22, %r42, 4;
	add.s64 	%rd2, %rd21, %rd22;
	add.s64 	%rd3, %rd2, 1024;
	add.s64 	%rd4, %rd2, 2048;
	add.s64 	%rd5, %rd2, 3072;
	// begin inline asm
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	ld.global.v4.b32 { %r4, %r5, %r6, %r7 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f3, %r4;
	mov.b32 	%f4, %r5;
	mov.b32 	%f5, %r6;
	mov.b32 	%f6, %r7;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	ld.global.v4.b32 { %r8, %r9, %r10, %r11 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	%f7, %r8;
	mov.b32 	%f8, %r9;
	mov.b32 	%f9, %r10;
	mov.b32 	%f10, %r11;
	// begin inline asm
	mov.u32 %r12, 0x0;
	mov.u32 %r13, 0x0;
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	ld.global.v4.b32 { %r12, %r13, %r14, %r15 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	%f11, %r12;
	mov.b32 	%f12, %r13;
	mov.b32 	%f13, %r14;
	mov.b32 	%f14, %r15;
	// begin inline asm
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	ld.global.v4.b32 { %r16, %r17, %r18, %r19 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f15, %r16;
	mov.b32 	%f16, %r17;
	mov.b32 	%f17, %r18;
	mov.b32 	%f18, %r19;
	mul.rn.f32 	%f19, %f3, %f3;
	mul.rn.f32 	%f20, %f4, %f4;
	mul.rn.f32 	%f21, %f5, %f5;
	mul.rn.f32 	%f22, %f6, %f6;
	mul.rn.f32 	%f23, %f7, %f7;
	mul.rn.f32 	%f24, %f8, %f8;
	mul.rn.f32 	%f25, %f9, %f9;
	mul.rn.f32 	%f26, %f10, %f10;
	mul.rn.f32 	%f27, %f11, %f11;
	mul.rn.f32 	%f28, %f12, %f12;
	mul.rn.f32 	%f29, %f13, %f13;
	mul.rn.f32 	%f30, %f14, %f14;
	mul.rn.f32 	%f31, %f15, %f15;
	mul.rn.f32 	%f32, %f16, %f16;
	mul.rn.f32 	%f33, %f17, %f17;
	mul.rn.f32 	%f34, %f18, %f18;
	add.rn.f32 	%f35, %f19, %f20;
	add.rn.f32 	%f36, %f21, %f35;
	add.rn.f32 	%f37, %f22, %f36;
	add.rn.f32 	%f38, %f23, %f37;
	add.rn.f32 	%f39, %f24, %f38;
	add.rn.f32 	%f40, %f25, %f39;
	add.rn.f32 	%f41, %f26, %f40;
	add.rn.f32 	%f42, %f27, %f41;
	add.rn.f32 	%f43, %f28, %f42;
	add.rn.f32 	%f44, %f29, %f43;
	add.rn.f32 	%f45, %f30, %f44;
	add.rn.f32 	%f46, %f31, %f45;
	add.rn.f32 	%f47, %f32, %f46;
	add.rn.f32 	%f48, %f33, %f47;
	add.rn.f32 	%f49, %f34, %f48;
	mov.b32 	%r43, %f49;
	shfl.sync.bfly.b32	%r44, %r43, 16, 31, -1;
	mov.b32 	%f50, %r44;
	add.rn.f32 	%f51, %f49, %f50;
	mov.b32 	%r45, %f51;
	shfl.sync.bfly.b32	%r46, %r45, 8, 31, -1;
	mov.b32 	%f52, %r46;
	add.rn.f32 	%f53, %f51, %f52;
	mov.b32 	%r47, %f53;
	shfl.sync.bfly.b32	%r48, %r47, 4, 31, -1;
	mov.b32 	%f54, %r48;
	add.rn.f32 	%f55, %f53, %f54;
	mov.b32 	%r49, %f55;
	shfl.sync.bfly.b32	%r50, %r49, 2, 31, -1;
	mov.b32 	%f56, %r50;
	add.rn.f32 	%f57, %f55, %f56;
	mov.b32 	%r51, %f57;
	shfl.sync.bfly.b32	%r52, %r51, 1, 31, -1;
	mov.b32 	%f58, %r52;
	add.rn.f32 	%f59, %f57, %f58;
	setp.eq.s32 	%p1, %r34, 0;
	shr.u32 	%r53, %r33, 3;
	and.b32  	%r54, %r53, 4;
	cvt.u64.u32 	%rd23, %r54;
	mov.u64 	%rd24, global_smem;
	add.s64 	%rd25, %rd24, %rd23;
	mov.b32 	%r21, %f59;
	cvt.u32.u64 	%r20, %rd25;
	// begin inline asm
	@%p1 st.shared.b32 [ %r20 + 0 ], %r21;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r33, 2;
	cvt.u64.u32 	%rd26, %r39;
	add.s64 	%rd27, %rd24, %rd26;
	cvt.u32.u64 	%r23, %rd27;
	// begin inline asm
	@%p2 ld.shared.b32 %r22, [ %r23 + 0 ];
	// end inline asm
	mov.b32 	%f60, %r22;
	shfl.sync.bfly.b32	%r55, %r22, 1, 31, -1;
	mov.b32 	%f61, %r55;
	add.rn.f32 	%f62, %f60, %f61;
	setp.eq.s32 	%p3, %r33, 0;
	mov.b32 	%r25, %f62;
	// begin inline asm
	@%p3 st.shared.b32 [ %r23 + 0 ], %r25;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f63, [global_smem];
	mul.rn.f32 	%f64, %f63, 0f3A800000;
	// begin inline asm
	mov.u32 %r26, 0x0;
	ld.global.b32 { %r26 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	%f65, %r26;
	add.rn.f32 	%f66, %f64, %f65;
	rsqrt.approx.f32 	%f67, %f66;
	mul.rn.f32 	%f68, %f67, %f1;
	mul.rn.f32 	%f69, %f67, %f2;
	shl.b64 	%rd28, %rd16, 1;
	and.b64  	%rd29, %rd28, 1792;
	add.s64 	%rd30, %rd14, %rd29;
	mul.wide.u32 	%rd31, %r38, 2;
	add.s64 	%rd7, %rd30, %rd31;
	// begin inline asm
	mov.u32 %r27, 0x0;
	ld.global.b32 { %r27 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs1;
	// end inline asm
	mov.b32 	%f70, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs2;
	// end inline asm
	mov.b32 	%f71, %r29;
	mul.rn.f32 	%f72, %f68, %f70;
	mul.rn.f32 	%f73, %f69, %f71;
	mov.b32 	%r30, %f72;
	// begin inline asm
	cvt.rn.bf16.f32 %rs3, %r30;
	// end inline asm
	mov.b32 	%r31, %f73;
	// begin inline asm
	cvt.rn.bf16.f32 %rs4, %r31;
	// end inline asm
	add.s64 	%rd32, %rd11, %rd28;
	add.s64 	%rd8, %rd32, %rd31;
	mov.b32 	%r32, {%rs3, %rs4};
	// begin inline asm
	st.global.b32 [ %rd8 + 0 ], { %r32 };
	// end inline asm
	ret;

}
	// .globl	fusion_108
.visible .entry fusion_108(
	.param .u64 .ptr .align 16 fusion_108_param_0,
	.param .u64 .ptr .align 16 fusion_108_param_1,
	.param .u64 .ptr .align 128 fusion_108_param_2,
	.param .u64 .ptr .align 128 fusion_108_param_3,
	.param .u64 .ptr .align 128 fusion_108_param_4,
	.param .u64 .ptr .align 128 fusion_108_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<141>;
	.reg .f32 	%f<178>;
	.reg .b64 	%rd<42>;

	ld.param.u64 	%rd14, [fusion_108_param_0];
	ld.param.u64 	%rd15, [fusion_108_param_5];
	cvta.to.global.u64 	%rd16, %rd15;
	ld.param.u64 	%rd17, [fusion_108_param_1];
	ld.param.u64 	%rd18, [fusion_108_param_4];
	cvta.to.global.u64 	%rd19, %rd18;
	ld.param.u64 	%rd20, [fusion_108_param_2];
	ld.param.u64 	%rd21, [fusion_108_param_3];
	cvta.to.global.u64 	%rd22, %rd21;
	cvta.to.global.u64 	%rd23, %rd20;
	cvta.to.global.u64 	%rd24, %rd17;
	cvta.to.global.u64 	%rd9, %rd14;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd25, %r1, 8192;
	shl.b64 	%rd26, %rd25, 1;
	add.s64 	%rd27, %rd19, %rd26;
	mov.u32 	%r121, %tid.x;
	and.b32  	%r122, %r121, 31;
	shl.b32 	%r123, %r121, 3;
	and.b32  	%r124, %r123, 248;
	setp.lt.u32 	%p4, %r121, 32;
	selp.b32 	%r125, 0, 256, %p4;
	or.b32  	%r126, %r124, %r125;
	mul.wide.u32 	%rd28, %r126, 2;
	add.s64 	%rd29, %rd27, %rd28;
	add.s64 	%rd1, %rd29, 6144;
	add.s64 	%rd2, %rd29, 7168;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd30, %r1, 1024;
	shl.b64 	%rd31, %rd30, 1;
	add.s64 	%rd32, %rd22, %rd31;
	add.s64 	%rd3, %rd32, %rd28;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	shl.b64 	%rd33, %rd30, 2;
	add.s64 	%rd34, %rd23, %rd33;
	mul.wide.u32 	%rd35, %r126, 4;
	add.s64 	%rd5, %rd34, %rd35;
	add.s64 	%rd6, %rd5, 16;
	add.s64 	%rd7, %rd5, 2048;
	add.s64 	%rd8, %rd5, 2064;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r50;
	mov.b32 	%f34, %r51;
	mov.b32 	%f35, %r52;
	mov.b32 	%f36, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	%f37, %r54;
	mov.b32 	%f38, %r55;
	mov.b32 	%f39, %r56;
	mov.b32 	%f40, %r57;
	// begin inline asm
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	mov.u32 %r60, 0x0;
	mov.u32 %r61, 0x0;
	ld.global.v4.b32 { %r58, %r59, %r60, %r61 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f41, %r58;
	mov.b32 	%f42, %r59;
	mov.b32 	%f43, %r60;
	mov.b32 	%f44, %r61;
	// begin inline asm
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	mov.u32 %r65, 0x0;
	ld.global.v4.b32 { %r62, %r63, %r64, %r65 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	%f45, %r62;
	mov.b32 	%f46, %r63;
	mov.b32 	%f47, %r64;
	mov.b32 	%f48, %r65;
	add.rn.f32 	%f49, %f17, %f33;
	add.rn.f32 	%f50, %f18, %f34;
	add.rn.f32 	%f51, %f19, %f35;
	add.rn.f32 	%f52, %f20, %f36;
	add.rn.f32 	%f53, %f21, %f37;
	add.rn.f32 	%f54, %f22, %f38;
	add.rn.f32 	%f55, %f23, %f39;
	add.rn.f32 	%f56, %f24, %f40;
	add.rn.f32 	%f57, %f25, %f41;
	add.rn.f32 	%f58, %f26, %f42;
	add.rn.f32 	%f59, %f27, %f43;
	add.rn.f32 	%f60, %f28, %f44;
	add.rn.f32 	%f61, %f29, %f45;
	add.rn.f32 	%f62, %f30, %f46;
	add.rn.f32 	%f63, %f31, %f47;
	add.rn.f32 	%f64, %f32, %f48;
	add.rn.f32 	%f65, %f1, %f49;
	add.rn.f32 	%f66, %f2, %f50;
	add.rn.f32 	%f67, %f3, %f51;
	add.rn.f32 	%f68, %f4, %f52;
	add.rn.f32 	%f69, %f5, %f53;
	add.rn.f32 	%f70, %f6, %f54;
	add.rn.f32 	%f71, %f7, %f55;
	add.rn.f32 	%f72, %f8, %f56;
	add.rn.f32 	%f73, %f9, %f57;
	add.rn.f32 	%f74, %f10, %f58;
	add.rn.f32 	%f75, %f11, %f59;
	add.rn.f32 	%f76, %f12, %f60;
	add.rn.f32 	%f77, %f13, %f61;
	add.rn.f32 	%f78, %f14, %f62;
	add.rn.f32 	%f79, %f15, %f63;
	add.rn.f32 	%f80, %f16, %f64;
	mul.rn.f32 	%f81, %f65, %f65;
	mul.rn.f32 	%f82, %f66, %f66;
	mul.rn.f32 	%f83, %f67, %f67;
	mul.rn.f32 	%f84, %f68, %f68;
	mul.rn.f32 	%f85, %f69, %f69;
	mul.rn.f32 	%f86, %f70, %f70;
	mul.rn.f32 	%f87, %f71, %f71;
	mul.rn.f32 	%f88, %f72, %f72;
	mul.rn.f32 	%f89, %f73, %f73;
	mul.rn.f32 	%f90, %f74, %f74;
	mul.rn.f32 	%f91, %f75, %f75;
	mul.rn.f32 	%f92, %f76, %f76;
	mul.rn.f32 	%f93, %f77, %f77;
	mul.rn.f32 	%f94, %f78, %f78;
	mul.rn.f32 	%f95, %f79, %f79;
	mul.rn.f32 	%f96, %f80, %f80;
	add.rn.f32 	%f97, %f81, %f82;
	add.rn.f32 	%f98, %f83, %f97;
	add.rn.f32 	%f99, %f84, %f98;
	add.rn.f32 	%f100, %f85, %f99;
	add.rn.f32 	%f101, %f86, %f100;
	add.rn.f32 	%f102, %f87, %f101;
	add.rn.f32 	%f103, %f88, %f102;
	add.rn.f32 	%f104, %f89, %f103;
	add.rn.f32 	%f105, %f90, %f104;
	add.rn.f32 	%f106, %f91, %f105;
	add.rn.f32 	%f107, %f92, %f106;
	add.rn.f32 	%f108, %f93, %f107;
	add.rn.f32 	%f109, %f94, %f108;
	add.rn.f32 	%f110, %f95, %f109;
	add.rn.f32 	%f111, %f96, %f110;
	mov.b32 	%r127, %f111;
	shfl.sync.bfly.b32	%r128, %r127, 16, 31, -1;
	mov.b32 	%f112, %r128;
	add.rn.f32 	%f113, %f111, %f112;
	mov.b32 	%r129, %f113;
	shfl.sync.bfly.b32	%r130, %r129, 8, 31, -1;
	mov.b32 	%f114, %r130;
	add.rn.f32 	%f115, %f113, %f114;
	mov.b32 	%r131, %f115;
	shfl.sync.bfly.b32	%r132, %r131, 4, 31, -1;
	mov.b32 	%f116, %r132;
	add.rn.f32 	%f117, %f115, %f116;
	mov.b32 	%r133, %f117;
	shfl.sync.bfly.b32	%r134, %r133, 2, 31, -1;
	mov.b32 	%f118, %r134;
	add.rn.f32 	%f119, %f117, %f118;
	mov.b32 	%r135, %f119;
	shfl.sync.bfly.b32	%r136, %r135, 1, 31, -1;
	mov.b32 	%f120, %r136;
	add.rn.f32 	%f121, %f119, %f120;
	setp.eq.s32 	%p1, %r122, 0;
	shr.u32 	%r137, %r121, 3;
	and.b32  	%r138, %r137, 4;
	cvt.u64.u32 	%rd36, %r138;
	mov.u64 	%rd37, global_smem;
	add.s64 	%rd38, %rd37, %rd36;
	mov.b32 	%r67, %f121;
	cvt.u32.u64 	%r66, %rd38;
	// begin inline asm
	@%p1 st.shared.b32 [ %r66 + 0 ], %r67;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r121, 2;
	shl.b32 	%r139, %r121, 2;
	cvt.u64.u32 	%rd39, %r139;
	add.s64 	%rd40, %rd37, %rd39;
	cvt.u32.u64 	%r69, %rd40;
	// begin inline asm
	@%p2 ld.shared.b32 %r68, [ %r69 + 0 ];
	// end inline asm
	mov.b32 	%f122, %r68;
	shfl.sync.bfly.b32	%r140, %r68, 1, 31, -1;
	mov.b32 	%f123, %r140;
	add.rn.f32 	%f124, %f122, %f123;
	setp.eq.s32 	%p3, %r121, 0;
	mov.b32 	%r71, %f124;
	// begin inline asm
	@%p3 st.shared.b32 [ %r69 + 0 ], %r71;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f125, [global_smem];
	mul.rn.f32 	%f126, %f125, 0f3A800000;
	// begin inline asm
	mov.u32 %r72, 0x0;
	ld.global.b32 { %r72 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f127, %r72;
	add.rn.f32 	%f128, %f126, %f127;
	rsqrt.approx.f32 	%f129, %f128;
	mul.rn.f32 	%f130, %f65, %f129;
	mul.rn.f32 	%f131, %f66, %f129;
	mul.rn.f32 	%f132, %f67, %f129;
	mul.rn.f32 	%f133, %f68, %f129;
	mul.rn.f32 	%f134, %f69, %f129;
	mul.rn.f32 	%f135, %f70, %f129;
	mul.rn.f32 	%f136, %f71, %f129;
	mul.rn.f32 	%f137, %f72, %f129;
	mul.rn.f32 	%f138, %f73, %f129;
	mul.rn.f32 	%f139, %f74, %f129;
	mul.rn.f32 	%f140, %f75, %f129;
	mul.rn.f32 	%f141, %f76, %f129;
	mul.rn.f32 	%f142, %f77, %f129;
	mul.rn.f32 	%f143, %f78, %f129;
	mul.rn.f32 	%f144, %f79, %f129;
	mul.rn.f32 	%f145, %f80, %f129;
	add.s64 	%rd10, %rd24, %rd28;
	add.s64 	%rd11, %rd10, 1024;
	// begin inline asm
	mov.u32 %r73, 0x0;
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	ld.global.v4.b32 { %r73, %r74, %r75, %r76 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r73;
	mov.b32 	{%rs35, %rs36}, %r74;
	mov.b32 	{%rs37, %rs38}, %r75;
	mov.b32 	{%rs39, %rs40}, %r76;
	// begin inline asm
	mov.u32 %r77, 0x0;
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	ld.global.v4.b32 { %r77, %r78, %r79, %r80 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r77;
	mov.b32 	{%rs43, %rs44}, %r78;
	mov.b32 	{%rs45, %rs46}, %r79;
	mov.b32 	{%rs47, %rs48}, %r80;
	// begin inline asm
	cvt.f32.bf16 %r81, %rs33;
	// end inline asm
	mov.b32 	%f146, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs34;
	// end inline asm
	mov.b32 	%f147, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs35;
	// end inline asm
	mov.b32 	%f148, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs36;
	// end inline asm
	mov.b32 	%f149, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs37;
	// end inline asm
	mov.b32 	%f150, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs38;
	// end inline asm
	mov.b32 	%f151, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs39;
	// end inline asm
	mov.b32 	%f152, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs40;
	// end inline asm
	mov.b32 	%f153, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs41;
	// end inline asm
	mov.b32 	%f154, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs42;
	// end inline asm
	mov.b32 	%f155, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs43;
	// end inline asm
	mov.b32 	%f156, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs44;
	// end inline asm
	mov.b32 	%f157, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs45;
	// end inline asm
	mov.b32 	%f158, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs46;
	// end inline asm
	mov.b32 	%f159, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs47;
	// end inline asm
	mov.b32 	%f160, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs48;
	// end inline asm
	mov.b32 	%f161, %r96;
	mul.rn.f32 	%f162, %f130, %f146;
	mul.rn.f32 	%f163, %f131, %f147;
	mul.rn.f32 	%f164, %f132, %f148;
	mul.rn.f32 	%f165, %f133, %f149;
	mul.rn.f32 	%f166, %f134, %f150;
	mul.rn.f32 	%f167, %f135, %f151;
	mul.rn.f32 	%f168, %f136, %f152;
	mul.rn.f32 	%f169, %f137, %f153;
	mul.rn.f32 	%f170, %f138, %f154;
	mul.rn.f32 	%f171, %f139, %f155;
	mul.rn.f32 	%f172, %f140, %f156;
	mul.rn.f32 	%f173, %f141, %f157;
	mul.rn.f32 	%f174, %f142, %f158;
	mul.rn.f32 	%f175, %f143, %f159;
	mul.rn.f32 	%f176, %f144, %f160;
	mul.rn.f32 	%f177, %f145, %f161;
	mov.b32 	%r97, %f162;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r97;
	// end inline asm
	mov.b32 	%r98, %f163;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r98;
	// end inline asm
	mov.b32 	%r99, %f164;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r99;
	// end inline asm
	mov.b32 	%r100, %f165;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r100;
	// end inline asm
	mov.b32 	%r101, %f166;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r101;
	// end inline asm
	mov.b32 	%r102, %f167;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r102;
	// end inline asm
	mov.b32 	%r103, %f168;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r103;
	// end inline asm
	mov.b32 	%r104, %f169;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r104;
	// end inline asm
	mov.b32 	%r105, %f170;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r105;
	// end inline asm
	mov.b32 	%r106, %f171;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r106;
	// end inline asm
	mov.b32 	%r107, %f172;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r107;
	// end inline asm
	mov.b32 	%r108, %f173;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r108;
	// end inline asm
	mov.b32 	%r109, %f174;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r109;
	// end inline asm
	mov.b32 	%r110, %f175;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r110;
	// end inline asm
	mov.b32 	%r111, %f176;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r111;
	// end inline asm
	mov.b32 	%r112, %f177;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r112;
	// end inline asm
	add.s64 	%rd41, %rd16, %rd31;
	add.s64 	%rd12, %rd41, %rd28;
	add.s64 	%rd13, %rd12, 1024;
	mov.b32 	%r113, {%rs49, %rs50};
	mov.b32 	%r114, {%rs51, %rs52};
	mov.b32 	%r115, {%rs53, %rs54};
	mov.b32 	%r116, {%rs55, %rs56};
	// begin inline asm
	st.global.v4.b32 [ %rd12 + 0 ], { %r113, %r114, %r115, %r116 };
	// end inline asm
	mov.b32 	%r117, {%rs57, %rs58};
	mov.b32 	%r118, {%rs59, %rs60};
	mov.b32 	%r119, {%rs61, %rs62};
	mov.b32 	%r120, {%rs63, %rs64};
	// begin inline asm
	st.global.v4.b32 [ %rd13 + 0 ], { %r117, %r118, %r119, %r120 };
	// end inline asm
	ret;

}
	// .globl	fusion_106
.visible .entry fusion_106(
	.param .u64 .ptr .align 16 fusion_106_param_0,
	.param .u64 .ptr .align 16 fusion_106_param_1,
	.param .u64 .ptr .align 128 fusion_106_param_2,
	.param .u64 .ptr .align 128 fusion_106_param_3,
	.param .u64 .ptr .align 128 fusion_106_param_4,
	.param .u64 .ptr .align 128 fusion_106_param_5,
	.param .u64 .ptr .align 128 fusion_106_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<189>;
	.reg .f32 	%f<242>;
	.reg .b64 	%rd<49>;

	ld.param.u64 	%rd18, [fusion_106_param_0];
	ld.param.u64 	%rd19, [fusion_106_param_6];
	cvta.to.global.u64 	%rd20, %rd19;
	ld.param.u64 	%rd21, [fusion_106_param_1];
	ld.param.u64 	%rd22, [fusion_106_param_5];
	cvta.to.global.u64 	%rd23, %rd22;
	ld.param.u64 	%rd24, [fusion_106_param_2];
	ld.param.u64 	%rd25, [fusion_106_param_4];
	cvta.to.global.u64 	%rd26, %rd25;
	ld.param.u64 	%rd27, [fusion_106_param_3];
	cvta.to.global.u64 	%rd28, %rd27;
	cvta.to.global.u64 	%rd29, %rd24;
	cvta.to.global.u64 	%rd30, %rd21;
	cvta.to.global.u64 	%rd13, %rd18;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd31, %r1, 8192;
	shl.b64 	%rd32, %rd31, 1;
	add.s64 	%rd33, %rd26, %rd32;
	mov.u32 	%r169, %tid.x;
	and.b32  	%r170, %r169, 31;
	shl.b32 	%r171, %r169, 3;
	and.b32  	%r172, %r171, 248;
	setp.lt.u32 	%p4, %r169, 32;
	selp.b32 	%r173, 0, 256, %p4;
	or.b32  	%r174, %r172, %r173;
	mul.wide.u32 	%rd34, %r174, 2;
	add.s64 	%rd35, %rd33, %rd34;
	add.s64 	%rd1, %rd35, 4096;
	add.s64 	%rd2, %rd35, 5120;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd36, %r1, 1024;
	shl.b64 	%rd37, %rd36, 1;
	add.s64 	%rd38, %rd23, %rd37;
	add.s64 	%rd3, %rd38, %rd34;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd35, 6144;
	add.s64 	%rd6, %rd35, 7168;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd39, %rd28, %rd37;
	add.s64 	%rd7, %rd39, %rd34;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	shl.b64 	%rd40, %rd36, 2;
	add.s64 	%rd41, %rd29, %rd40;
	mul.wide.u32 	%rd42, %r174, 4;
	add.s64 	%rd9, %rd41, %rd42;
	add.s64 	%rd10, %rd9, 16;
	add.s64 	%rd11, %rd9, 2048;
	add.s64 	%rd12, %rd9, 2064;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f65, %r98;
	mov.b32 	%f66, %r99;
	mov.b32 	%f67, %r100;
	mov.b32 	%f68, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	%f69, %r102;
	mov.b32 	%f70, %r103;
	mov.b32 	%f71, %r104;
	mov.b32 	%f72, %r105;
	// begin inline asm
	mov.u32 %r106, 0x0;
	mov.u32 %r107, 0x0;
	mov.u32 %r108, 0x0;
	mov.u32 %r109, 0x0;
	ld.global.v4.b32 { %r106, %r107, %r108, %r109 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	%f73, %r106;
	mov.b32 	%f74, %r107;
	mov.b32 	%f75, %r108;
	mov.b32 	%f76, %r109;
	// begin inline asm
	mov.u32 %r110, 0x0;
	mov.u32 %r111, 0x0;
	mov.u32 %r112, 0x0;
	mov.u32 %r113, 0x0;
	ld.global.v4.b32 { %r110, %r111, %r112, %r113 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	%f77, %r110;
	mov.b32 	%f78, %r111;
	mov.b32 	%f79, %r112;
	mov.b32 	%f80, %r113;
	add.rn.f32 	%f81, %f49, %f65;
	add.rn.f32 	%f82, %f50, %f66;
	add.rn.f32 	%f83, %f51, %f67;
	add.rn.f32 	%f84, %f52, %f68;
	add.rn.f32 	%f85, %f53, %f69;
	add.rn.f32 	%f86, %f54, %f70;
	add.rn.f32 	%f87, %f55, %f71;
	add.rn.f32 	%f88, %f56, %f72;
	add.rn.f32 	%f89, %f57, %f73;
	add.rn.f32 	%f90, %f58, %f74;
	add.rn.f32 	%f91, %f59, %f75;
	add.rn.f32 	%f92, %f60, %f76;
	add.rn.f32 	%f93, %f61, %f77;
	add.rn.f32 	%f94, %f62, %f78;
	add.rn.f32 	%f95, %f63, %f79;
	add.rn.f32 	%f96, %f64, %f80;
	add.rn.f32 	%f97, %f33, %f81;
	add.rn.f32 	%f98, %f34, %f82;
	add.rn.f32 	%f99, %f35, %f83;
	add.rn.f32 	%f100, %f36, %f84;
	add.rn.f32 	%f101, %f37, %f85;
	add.rn.f32 	%f102, %f38, %f86;
	add.rn.f32 	%f103, %f39, %f87;
	add.rn.f32 	%f104, %f40, %f88;
	add.rn.f32 	%f105, %f41, %f89;
	add.rn.f32 	%f106, %f42, %f90;
	add.rn.f32 	%f107, %f43, %f91;
	add.rn.f32 	%f108, %f44, %f92;
	add.rn.f32 	%f109, %f45, %f93;
	add.rn.f32 	%f110, %f46, %f94;
	add.rn.f32 	%f111, %f47, %f95;
	add.rn.f32 	%f112, %f48, %f96;
	add.rn.f32 	%f113, %f17, %f97;
	add.rn.f32 	%f114, %f18, %f98;
	add.rn.f32 	%f115, %f19, %f99;
	add.rn.f32 	%f116, %f20, %f100;
	add.rn.f32 	%f117, %f21, %f101;
	add.rn.f32 	%f118, %f22, %f102;
	add.rn.f32 	%f119, %f23, %f103;
	add.rn.f32 	%f120, %f24, %f104;
	add.rn.f32 	%f121, %f25, %f105;
	add.rn.f32 	%f122, %f26, %f106;
	add.rn.f32 	%f123, %f27, %f107;
	add.rn.f32 	%f124, %f28, %f108;
	add.rn.f32 	%f125, %f29, %f109;
	add.rn.f32 	%f126, %f30, %f110;
	add.rn.f32 	%f127, %f31, %f111;
	add.rn.f32 	%f128, %f32, %f112;
	add.rn.f32 	%f129, %f1, %f113;
	add.rn.f32 	%f130, %f2, %f114;
	add.rn.f32 	%f131, %f3, %f115;
	add.rn.f32 	%f132, %f4, %f116;
	add.rn.f32 	%f133, %f5, %f117;
	add.rn.f32 	%f134, %f6, %f118;
	add.rn.f32 	%f135, %f7, %f119;
	add.rn.f32 	%f136, %f8, %f120;
	add.rn.f32 	%f137, %f9, %f121;
	add.rn.f32 	%f138, %f10, %f122;
	add.rn.f32 	%f139, %f11, %f123;
	add.rn.f32 	%f140, %f12, %f124;
	add.rn.f32 	%f141, %f13, %f125;
	add.rn.f32 	%f142, %f14, %f126;
	add.rn.f32 	%f143, %f15, %f127;
	add.rn.f32 	%f144, %f16, %f128;
	mul.rn.f32 	%f145, %f129, %f129;
	mul.rn.f32 	%f146, %f130, %f130;
	mul.rn.f32 	%f147, %f131, %f131;
	mul.rn.f32 	%f148, %f132, %f132;
	mul.rn.f32 	%f149, %f133, %f133;
	mul.rn.f32 	%f150, %f134, %f134;
	mul.rn.f32 	%f151, %f135, %f135;
	mul.rn.f32 	%f152, %f136, %f136;
	mul.rn.f32 	%f153, %f137, %f137;
	mul.rn.f32 	%f154, %f138, %f138;
	mul.rn.f32 	%f155, %f139, %f139;
	mul.rn.f32 	%f156, %f140, %f140;
	mul.rn.f32 	%f157, %f141, %f141;
	mul.rn.f32 	%f158, %f142, %f142;
	mul.rn.f32 	%f159, %f143, %f143;
	mul.rn.f32 	%f160, %f144, %f144;
	add.rn.f32 	%f161, %f145, %f146;
	add.rn.f32 	%f162, %f147, %f161;
	add.rn.f32 	%f163, %f148, %f162;
	add.rn.f32 	%f164, %f149, %f163;
	add.rn.f32 	%f165, %f150, %f164;
	add.rn.f32 	%f166, %f151, %f165;
	add.rn.f32 	%f167, %f152, %f166;
	add.rn.f32 	%f168, %f153, %f167;
	add.rn.f32 	%f169, %f154, %f168;
	add.rn.f32 	%f170, %f155, %f169;
	add.rn.f32 	%f171, %f156, %f170;
	add.rn.f32 	%f172, %f157, %f171;
	add.rn.f32 	%f173, %f158, %f172;
	add.rn.f32 	%f174, %f159, %f173;
	add.rn.f32 	%f175, %f160, %f174;
	mov.b32 	%r175, %f175;
	shfl.sync.bfly.b32	%r176, %r175, 16, 31, -1;
	mov.b32 	%f176, %r176;
	add.rn.f32 	%f177, %f175, %f176;
	mov.b32 	%r177, %f177;
	shfl.sync.bfly.b32	%r178, %r177, 8, 31, -1;
	mov.b32 	%f178, %r178;
	add.rn.f32 	%f179, %f177, %f178;
	mov.b32 	%r179, %f179;
	shfl.sync.bfly.b32	%r180, %r179, 4, 31, -1;
	mov.b32 	%f180, %r180;
	add.rn.f32 	%f181, %f179, %f180;
	mov.b32 	%r181, %f181;
	shfl.sync.bfly.b32	%r182, %r181, 2, 31, -1;
	mov.b32 	%f182, %r182;
	add.rn.f32 	%f183, %f181, %f182;
	mov.b32 	%r183, %f183;
	shfl.sync.bfly.b32	%r184, %r183, 1, 31, -1;
	mov.b32 	%f184, %r184;
	add.rn.f32 	%f185, %f183, %f184;
	setp.eq.s32 	%p1, %r170, 0;
	shr.u32 	%r185, %r169, 3;
	and.b32  	%r186, %r185, 4;
	cvt.u64.u32 	%rd43, %r186;
	mov.u64 	%rd44, global_smem;
	add.s64 	%rd45, %rd44, %rd43;
	mov.b32 	%r115, %f185;
	cvt.u32.u64 	%r114, %rd45;
	// begin inline asm
	@%p1 st.shared.b32 [ %r114 + 0 ], %r115;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r169, 2;
	shl.b32 	%r187, %r169, 2;
	cvt.u64.u32 	%rd46, %r187;
	add.s64 	%rd47, %rd44, %rd46;
	cvt.u32.u64 	%r117, %rd47;
	// begin inline asm
	@%p2 ld.shared.b32 %r116, [ %r117 + 0 ];
	// end inline asm
	mov.b32 	%f186, %r116;
	shfl.sync.bfly.b32	%r188, %r116, 1, 31, -1;
	mov.b32 	%f187, %r188;
	add.rn.f32 	%f188, %f186, %f187;
	setp.eq.s32 	%p3, %r169, 0;
	mov.b32 	%r119, %f188;
	// begin inline asm
	@%p3 st.shared.b32 [ %r117 + 0 ], %r119;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f189, [global_smem];
	mul.rn.f32 	%f190, %f189, 0f3A800000;
	// begin inline asm
	mov.u32 %r120, 0x0;
	ld.global.b32 { %r120 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f191, %r120;
	add.rn.f32 	%f192, %f190, %f191;
	rsqrt.approx.f32 	%f193, %f192;
	mul.rn.f32 	%f194, %f129, %f193;
	mul.rn.f32 	%f195, %f130, %f193;
	mul.rn.f32 	%f196, %f131, %f193;
	mul.rn.f32 	%f197, %f132, %f193;
	mul.rn.f32 	%f198, %f133, %f193;
	mul.rn.f32 	%f199, %f134, %f193;
	mul.rn.f32 	%f200, %f135, %f193;
	mul.rn.f32 	%f201, %f136, %f193;
	mul.rn.f32 	%f202, %f137, %f193;
	mul.rn.f32 	%f203, %f138, %f193;
	mul.rn.f32 	%f204, %f139, %f193;
	mul.rn.f32 	%f205, %f140, %f193;
	mul.rn.f32 	%f206, %f141, %f193;
	mul.rn.f32 	%f207, %f142, %f193;
	mul.rn.f32 	%f208, %f143, %f193;
	mul.rn.f32 	%f209, %f144, %f193;
	add.s64 	%rd14, %rd30, %rd34;
	add.s64 	%rd15, %rd14, 1024;
	// begin inline asm
	mov.u32 %r121, 0x0;
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	ld.global.v4.b32 { %r121, %r122, %r123, %r124 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r121;
	mov.b32 	{%rs67, %rs68}, %r122;
	mov.b32 	{%rs69, %rs70}, %r123;
	mov.b32 	{%rs71, %rs72}, %r124;
	// begin inline asm
	mov.u32 %r125, 0x0;
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	ld.global.v4.b32 { %r125, %r126, %r127, %r128 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r125;
	mov.b32 	{%rs75, %rs76}, %r126;
	mov.b32 	{%rs77, %rs78}, %r127;
	mov.b32 	{%rs79, %rs80}, %r128;
	// begin inline asm
	cvt.f32.bf16 %r129, %rs65;
	// end inline asm
	mov.b32 	%f210, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs66;
	// end inline asm
	mov.b32 	%f211, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs67;
	// end inline asm
	mov.b32 	%f212, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs68;
	// end inline asm
	mov.b32 	%f213, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs69;
	// end inline asm
	mov.b32 	%f214, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs70;
	// end inline asm
	mov.b32 	%f215, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs71;
	// end inline asm
	mov.b32 	%f216, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs72;
	// end inline asm
	mov.b32 	%f217, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs73;
	// end inline asm
	mov.b32 	%f218, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs74;
	// end inline asm
	mov.b32 	%f219, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs75;
	// end inline asm
	mov.b32 	%f220, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs76;
	// end inline asm
	mov.b32 	%f221, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs77;
	// end inline asm
	mov.b32 	%f222, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs78;
	// end inline asm
	mov.b32 	%f223, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs79;
	// end inline asm
	mov.b32 	%f224, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs80;
	// end inline asm
	mov.b32 	%f225, %r144;
	mul.rn.f32 	%f226, %f194, %f210;
	mul.rn.f32 	%f227, %f195, %f211;
	mul.rn.f32 	%f228, %f196, %f212;
	mul.rn.f32 	%f229, %f197, %f213;
	mul.rn.f32 	%f230, %f198, %f214;
	mul.rn.f32 	%f231, %f199, %f215;
	mul.rn.f32 	%f232, %f200, %f216;
	mul.rn.f32 	%f233, %f201, %f217;
	mul.rn.f32 	%f234, %f202, %f218;
	mul.rn.f32 	%f235, %f203, %f219;
	mul.rn.f32 	%f236, %f204, %f220;
	mul.rn.f32 	%f237, %f205, %f221;
	mul.rn.f32 	%f238, %f206, %f222;
	mul.rn.f32 	%f239, %f207, %f223;
	mul.rn.f32 	%f240, %f208, %f224;
	mul.rn.f32 	%f241, %f209, %f225;
	mov.b32 	%r145, %f226;
	// begin inline asm
	cvt.rn.bf16.f32 %rs81, %r145;
	// end inline asm
	mov.b32 	%r146, %f227;
	// begin inline asm
	cvt.rn.bf16.f32 %rs82, %r146;
	// end inline asm
	mov.b32 	%r147, %f228;
	// begin inline asm
	cvt.rn.bf16.f32 %rs83, %r147;
	// end inline asm
	mov.b32 	%r148, %f229;
	// begin inline asm
	cvt.rn.bf16.f32 %rs84, %r148;
	// end inline asm
	mov.b32 	%r149, %f230;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r149;
	// end inline asm
	mov.b32 	%r150, %f231;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r150;
	// end inline asm
	mov.b32 	%r151, %f232;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r151;
	// end inline asm
	mov.b32 	%r152, %f233;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r152;
	// end inline asm
	mov.b32 	%r153, %f234;
	// begin inline asm
	cvt.rn.bf16.f32 %rs89, %r153;
	// end inline asm
	mov.b32 	%r154, %f235;
	// begin inline asm
	cvt.rn.bf16.f32 %rs90, %r154;
	// end inline asm
	mov.b32 	%r155, %f236;
	// begin inline asm
	cvt.rn.bf16.f32 %rs91, %r155;
	// end inline asm
	mov.b32 	%r156, %f237;
	// begin inline asm
	cvt.rn.bf16.f32 %rs92, %r156;
	// end inline asm
	mov.b32 	%r157, %f238;
	// begin inline asm
	cvt.rn.bf16.f32 %rs93, %r157;
	// end inline asm
	mov.b32 	%r158, %f239;
	// begin inline asm
	cvt.rn.bf16.f32 %rs94, %r158;
	// end inline asm
	mov.b32 	%r159, %f240;
	// begin inline asm
	cvt.rn.bf16.f32 %rs95, %r159;
	// end inline asm
	mov.b32 	%r160, %f241;
	// begin inline asm
	cvt.rn.bf16.f32 %rs96, %r160;
	// end inline asm
	add.s64 	%rd48, %rd20, %rd37;
	add.s64 	%rd16, %rd48, %rd34;
	add.s64 	%rd17, %rd16, 1024;
	mov.b32 	%r161, {%rs81, %rs82};
	mov.b32 	%r162, {%rs83, %rs84};
	mov.b32 	%r163, {%rs85, %rs86};
	mov.b32 	%r164, {%rs87, %rs88};
	// begin inline asm
	st.global.v4.b32 [ %rd16 + 0 ], { %r161, %r162, %r163, %r164 };
	// end inline asm
	mov.b32 	%r165, {%rs89, %rs90};
	mov.b32 	%r166, {%rs91, %rs92};
	mov.b32 	%r167, {%rs93, %rs94};
	mov.b32 	%r168, {%rs95, %rs96};
	// begin inline asm
	st.global.v4.b32 [ %rd17 + 0 ], { %r165, %r166, %r167, %r168 };
	// end inline asm
	ret;

}
	// .globl	fusion_104
.visible .entry fusion_104(
	.param .u64 .ptr .align 16 fusion_104_param_0,
	.param .u64 .ptr .align 16 fusion_104_param_1,
	.param .u64 .ptr .align 128 fusion_104_param_2,
	.param .u64 .ptr .align 128 fusion_104_param_3,
	.param .u64 .ptr .align 128 fusion_104_param_4,
	.param .u64 .ptr .align 128 fusion_104_param_5,
	.param .u64 .ptr .align 128 fusion_104_param_6,
	.param .u64 .ptr .align 128 fusion_104_param_7
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<129>;
	.reg .b32 	%r<237>;
	.reg .f32 	%f<306>;
	.reg .b64 	%rd<56>;

	ld.param.u64 	%rd22, [fusion_104_param_0];
	ld.param.u64 	%rd23, [fusion_104_param_7];
	cvta.to.global.u64 	%rd24, %rd23;
	ld.param.u64 	%rd25, [fusion_104_param_1];
	ld.param.u64 	%rd26, [fusion_104_param_6];
	cvta.to.global.u64 	%rd27, %rd26;
	ld.param.u64 	%rd28, [fusion_104_param_2];
	ld.param.u64 	%rd29, [fusion_104_param_5];
	cvta.to.global.u64 	%rd30, %rd29;
	ld.param.u64 	%rd31, [fusion_104_param_3];
	ld.param.u64 	%rd32, [fusion_104_param_4];
	cvta.to.global.u64 	%rd33, %rd32;
	cvta.to.global.u64 	%rd34, %rd31;
	cvta.to.global.u64 	%rd35, %rd28;
	cvta.to.global.u64 	%rd36, %rd25;
	cvta.to.global.u64 	%rd17, %rd22;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd37, %r1, 8192;
	shl.b64 	%rd38, %rd37, 1;
	add.s64 	%rd39, %rd34, %rd38;
	mov.u32 	%r217, %tid.x;
	and.b32  	%r218, %r217, 31;
	shl.b32 	%r219, %r217, 3;
	and.b32  	%r220, %r219, 248;
	setp.lt.u32 	%p4, %r217, 32;
	selp.b32 	%r221, 0, 256, %p4;
	or.b32  	%r222, %r220, %r221;
	mul.wide.u32 	%rd40, %r222, 2;
	add.s64 	%rd41, %rd39, %rd40;
	add.s64 	%rd1, %rd41, 2048;
	add.s64 	%rd2, %rd41, 3072;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd42, %r1, 1024;
	shl.b64 	%rd43, %rd42, 1;
	add.s64 	%rd44, %rd35, %rd43;
	add.s64 	%rd3, %rd44, %rd40;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd41, 4096;
	add.s64 	%rd6, %rd41, 5120;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd45, %rd27, %rd43;
	add.s64 	%rd7, %rd45, %rd40;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd9, %rd41, 6144;
	add.s64 	%rd10, %rd41, 7168;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd46, %rd30, %rd43;
	add.s64 	%rd11, %rd46, %rd40;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	shl.b64 	%rd47, %rd42, 2;
	add.s64 	%rd48, %rd33, %rd47;
	mul.wide.u32 	%rd49, %r222, 4;
	add.s64 	%rd13, %rd48, %rd49;
	add.s64 	%rd14, %rd13, 16;
	add.s64 	%rd15, %rd13, 2048;
	add.s64 	%rd16, %rd13, 2064;
	// begin inline asm
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	ld.global.v4.b32 { %r146, %r147, %r148, %r149 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f97, %r146;
	mov.b32 	%f98, %r147;
	mov.b32 	%f99, %r148;
	mov.b32 	%f100, %r149;
	// begin inline asm
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	ld.global.v4.b32 { %r150, %r151, %r152, %r153 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	%f101, %r150;
	mov.b32 	%f102, %r151;
	mov.b32 	%f103, %r152;
	mov.b32 	%f104, %r153;
	// begin inline asm
	mov.u32 %r154, 0x0;
	mov.u32 %r155, 0x0;
	mov.u32 %r156, 0x0;
	mov.u32 %r157, 0x0;
	ld.global.v4.b32 { %r154, %r155, %r156, %r157 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	%f105, %r154;
	mov.b32 	%f106, %r155;
	mov.b32 	%f107, %r156;
	mov.b32 	%f108, %r157;
	// begin inline asm
	mov.u32 %r158, 0x0;
	mov.u32 %r159, 0x0;
	mov.u32 %r160, 0x0;
	mov.u32 %r161, 0x0;
	ld.global.v4.b32 { %r158, %r159, %r160, %r161 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	%f109, %r158;
	mov.b32 	%f110, %r159;
	mov.b32 	%f111, %r160;
	mov.b32 	%f112, %r161;
	add.rn.f32 	%f113, %f81, %f97;
	add.rn.f32 	%f114, %f82, %f98;
	add.rn.f32 	%f115, %f83, %f99;
	add.rn.f32 	%f116, %f84, %f100;
	add.rn.f32 	%f117, %f85, %f101;
	add.rn.f32 	%f118, %f86, %f102;
	add.rn.f32 	%f119, %f87, %f103;
	add.rn.f32 	%f120, %f88, %f104;
	add.rn.f32 	%f121, %f89, %f105;
	add.rn.f32 	%f122, %f90, %f106;
	add.rn.f32 	%f123, %f91, %f107;
	add.rn.f32 	%f124, %f92, %f108;
	add.rn.f32 	%f125, %f93, %f109;
	add.rn.f32 	%f126, %f94, %f110;
	add.rn.f32 	%f127, %f95, %f111;
	add.rn.f32 	%f128, %f96, %f112;
	add.rn.f32 	%f129, %f65, %f113;
	add.rn.f32 	%f130, %f66, %f114;
	add.rn.f32 	%f131, %f67, %f115;
	add.rn.f32 	%f132, %f68, %f116;
	add.rn.f32 	%f133, %f69, %f117;
	add.rn.f32 	%f134, %f70, %f118;
	add.rn.f32 	%f135, %f71, %f119;
	add.rn.f32 	%f136, %f72, %f120;
	add.rn.f32 	%f137, %f73, %f121;
	add.rn.f32 	%f138, %f74, %f122;
	add.rn.f32 	%f139, %f75, %f123;
	add.rn.f32 	%f140, %f76, %f124;
	add.rn.f32 	%f141, %f77, %f125;
	add.rn.f32 	%f142, %f78, %f126;
	add.rn.f32 	%f143, %f79, %f127;
	add.rn.f32 	%f144, %f80, %f128;
	add.rn.f32 	%f145, %f49, %f129;
	add.rn.f32 	%f146, %f50, %f130;
	add.rn.f32 	%f147, %f51, %f131;
	add.rn.f32 	%f148, %f52, %f132;
	add.rn.f32 	%f149, %f53, %f133;
	add.rn.f32 	%f150, %f54, %f134;
	add.rn.f32 	%f151, %f55, %f135;
	add.rn.f32 	%f152, %f56, %f136;
	add.rn.f32 	%f153, %f57, %f137;
	add.rn.f32 	%f154, %f58, %f138;
	add.rn.f32 	%f155, %f59, %f139;
	add.rn.f32 	%f156, %f60, %f140;
	add.rn.f32 	%f157, %f61, %f141;
	add.rn.f32 	%f158, %f62, %f142;
	add.rn.f32 	%f159, %f63, %f143;
	add.rn.f32 	%f160, %f64, %f144;
	add.rn.f32 	%f161, %f33, %f145;
	add.rn.f32 	%f162, %f34, %f146;
	add.rn.f32 	%f163, %f35, %f147;
	add.rn.f32 	%f164, %f36, %f148;
	add.rn.f32 	%f165, %f37, %f149;
	add.rn.f32 	%f166, %f38, %f150;
	add.rn.f32 	%f167, %f39, %f151;
	add.rn.f32 	%f168, %f40, %f152;
	add.rn.f32 	%f169, %f41, %f153;
	add.rn.f32 	%f170, %f42, %f154;
	add.rn.f32 	%f171, %f43, %f155;
	add.rn.f32 	%f172, %f44, %f156;
	add.rn.f32 	%f173, %f45, %f157;
	add.rn.f32 	%f174, %f46, %f158;
	add.rn.f32 	%f175, %f47, %f159;
	add.rn.f32 	%f176, %f48, %f160;
	add.rn.f32 	%f177, %f17, %f161;
	add.rn.f32 	%f178, %f18, %f162;
	add.rn.f32 	%f179, %f19, %f163;
	add.rn.f32 	%f180, %f20, %f164;
	add.rn.f32 	%f181, %f21, %f165;
	add.rn.f32 	%f182, %f22, %f166;
	add.rn.f32 	%f183, %f23, %f167;
	add.rn.f32 	%f184, %f24, %f168;
	add.rn.f32 	%f185, %f25, %f169;
	add.rn.f32 	%f186, %f26, %f170;
	add.rn.f32 	%f187, %f27, %f171;
	add.rn.f32 	%f188, %f28, %f172;
	add.rn.f32 	%f189, %f29, %f173;
	add.rn.f32 	%f190, %f30, %f174;
	add.rn.f32 	%f191, %f31, %f175;
	add.rn.f32 	%f192, %f32, %f176;
	add.rn.f32 	%f193, %f1, %f177;
	add.rn.f32 	%f194, %f2, %f178;
	add.rn.f32 	%f195, %f3, %f179;
	add.rn.f32 	%f196, %f4, %f180;
	add.rn.f32 	%f197, %f5, %f181;
	add.rn.f32 	%f198, %f6, %f182;
	add.rn.f32 	%f199, %f7, %f183;
	add.rn.f32 	%f200, %f8, %f184;
	add.rn.f32 	%f201, %f9, %f185;
	add.rn.f32 	%f202, %f10, %f186;
	add.rn.f32 	%f203, %f11, %f187;
	add.rn.f32 	%f204, %f12, %f188;
	add.rn.f32 	%f205, %f13, %f189;
	add.rn.f32 	%f206, %f14, %f190;
	add.rn.f32 	%f207, %f15, %f191;
	add.rn.f32 	%f208, %f16, %f192;
	mul.rn.f32 	%f209, %f193, %f193;
	mul.rn.f32 	%f210, %f194, %f194;
	mul.rn.f32 	%f211, %f195, %f195;
	mul.rn.f32 	%f212, %f196, %f196;
	mul.rn.f32 	%f213, %f197, %f197;
	mul.rn.f32 	%f214, %f198, %f198;
	mul.rn.f32 	%f215, %f199, %f199;
	mul.rn.f32 	%f216, %f200, %f200;
	mul.rn.f32 	%f217, %f201, %f201;
	mul.rn.f32 	%f218, %f202, %f202;
	mul.rn.f32 	%f219, %f203, %f203;
	mul.rn.f32 	%f220, %f204, %f204;
	mul.rn.f32 	%f221, %f205, %f205;
	mul.rn.f32 	%f222, %f206, %f206;
	mul.rn.f32 	%f223, %f207, %f207;
	mul.rn.f32 	%f224, %f208, %f208;
	add.rn.f32 	%f225, %f209, %f210;
	add.rn.f32 	%f226, %f211, %f225;
	add.rn.f32 	%f227, %f212, %f226;
	add.rn.f32 	%f228, %f213, %f227;
	add.rn.f32 	%f229, %f214, %f228;
	add.rn.f32 	%f230, %f215, %f229;
	add.rn.f32 	%f231, %f216, %f230;
	add.rn.f32 	%f232, %f217, %f231;
	add.rn.f32 	%f233, %f218, %f232;
	add.rn.f32 	%f234, %f219, %f233;
	add.rn.f32 	%f235, %f220, %f234;
	add.rn.f32 	%f236, %f221, %f235;
	add.rn.f32 	%f237, %f222, %f236;
	add.rn.f32 	%f238, %f223, %f237;
	add.rn.f32 	%f239, %f224, %f238;
	mov.b32 	%r223, %f239;
	shfl.sync.bfly.b32	%r224, %r223, 16, 31, -1;
	mov.b32 	%f240, %r224;
	add.rn.f32 	%f241, %f239, %f240;
	mov.b32 	%r225, %f241;
	shfl.sync.bfly.b32	%r226, %r225, 8, 31, -1;
	mov.b32 	%f242, %r226;
	add.rn.f32 	%f243, %f241, %f242;
	mov.b32 	%r227, %f243;
	shfl.sync.bfly.b32	%r228, %r227, 4, 31, -1;
	mov.b32 	%f244, %r228;
	add.rn.f32 	%f245, %f243, %f244;
	mov.b32 	%r229, %f245;
	shfl.sync.bfly.b32	%r230, %r229, 2, 31, -1;
	mov.b32 	%f246, %r230;
	add.rn.f32 	%f247, %f245, %f246;
	mov.b32 	%r231, %f247;
	shfl.sync.bfly.b32	%r232, %r231, 1, 31, -1;
	mov.b32 	%f248, %r232;
	add.rn.f32 	%f249, %f247, %f248;
	setp.eq.s32 	%p1, %r218, 0;
	shr.u32 	%r233, %r217, 3;
	and.b32  	%r234, %r233, 4;
	cvt.u64.u32 	%rd50, %r234;
	mov.u64 	%rd51, global_smem;
	add.s64 	%rd52, %rd51, %rd50;
	mov.b32 	%r163, %f249;
	cvt.u32.u64 	%r162, %rd52;
	// begin inline asm
	@%p1 st.shared.b32 [ %r162 + 0 ], %r163;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r217, 2;
	shl.b32 	%r235, %r217, 2;
	cvt.u64.u32 	%rd53, %r235;
	add.s64 	%rd54, %rd51, %rd53;
	cvt.u32.u64 	%r165, %rd54;
	// begin inline asm
	@%p2 ld.shared.b32 %r164, [ %r165 + 0 ];
	// end inline asm
	mov.b32 	%f250, %r164;
	shfl.sync.bfly.b32	%r236, %r164, 1, 31, -1;
	mov.b32 	%f251, %r236;
	add.rn.f32 	%f252, %f250, %f251;
	setp.eq.s32 	%p3, %r217, 0;
	mov.b32 	%r167, %f252;
	// begin inline asm
	@%p3 st.shared.b32 [ %r165 + 0 ], %r167;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f253, [global_smem];
	mul.rn.f32 	%f254, %f253, 0f3A800000;
	// begin inline asm
	mov.u32 %r168, 0x0;
	ld.global.b32 { %r168 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	%f255, %r168;
	add.rn.f32 	%f256, %f254, %f255;
	rsqrt.approx.f32 	%f257, %f256;
	mul.rn.f32 	%f258, %f193, %f257;
	mul.rn.f32 	%f259, %f194, %f257;
	mul.rn.f32 	%f260, %f195, %f257;
	mul.rn.f32 	%f261, %f196, %f257;
	mul.rn.f32 	%f262, %f197, %f257;
	mul.rn.f32 	%f263, %f198, %f257;
	mul.rn.f32 	%f264, %f199, %f257;
	mul.rn.f32 	%f265, %f200, %f257;
	mul.rn.f32 	%f266, %f201, %f257;
	mul.rn.f32 	%f267, %f202, %f257;
	mul.rn.f32 	%f268, %f203, %f257;
	mul.rn.f32 	%f269, %f204, %f257;
	mul.rn.f32 	%f270, %f205, %f257;
	mul.rn.f32 	%f271, %f206, %f257;
	mul.rn.f32 	%f272, %f207, %f257;
	mul.rn.f32 	%f273, %f208, %f257;
	add.s64 	%rd18, %rd36, %rd40;
	add.s64 	%rd19, %rd18, 1024;
	// begin inline asm
	mov.u32 %r169, 0x0;
	mov.u32 %r170, 0x0;
	mov.u32 %r171, 0x0;
	mov.u32 %r172, 0x0;
	ld.global.v4.b32 { %r169, %r170, %r171, %r172 }, [ %rd18 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r169;
	mov.b32 	{%rs99, %rs100}, %r170;
	mov.b32 	{%rs101, %rs102}, %r171;
	mov.b32 	{%rs103, %rs104}, %r172;
	// begin inline asm
	mov.u32 %r173, 0x0;
	mov.u32 %r174, 0x0;
	mov.u32 %r175, 0x0;
	mov.u32 %r176, 0x0;
	ld.global.v4.b32 { %r173, %r174, %r175, %r176 }, [ %rd19 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r173;
	mov.b32 	{%rs107, %rs108}, %r174;
	mov.b32 	{%rs109, %rs110}, %r175;
	mov.b32 	{%rs111, %rs112}, %r176;
	// begin inline asm
	cvt.f32.bf16 %r177, %rs97;
	// end inline asm
	mov.b32 	%f274, %r177;
	// begin inline asm
	cvt.f32.bf16 %r178, %rs98;
	// end inline asm
	mov.b32 	%f275, %r178;
	// begin inline asm
	cvt.f32.bf16 %r179, %rs99;
	// end inline asm
	mov.b32 	%f276, %r179;
	// begin inline asm
	cvt.f32.bf16 %r180, %rs100;
	// end inline asm
	mov.b32 	%f277, %r180;
	// begin inline asm
	cvt.f32.bf16 %r181, %rs101;
	// end inline asm
	mov.b32 	%f278, %r181;
	// begin inline asm
	cvt.f32.bf16 %r182, %rs102;
	// end inline asm
	mov.b32 	%f279, %r182;
	// begin inline asm
	cvt.f32.bf16 %r183, %rs103;
	// end inline asm
	mov.b32 	%f280, %r183;
	// begin inline asm
	cvt.f32.bf16 %r184, %rs104;
	// end inline asm
	mov.b32 	%f281, %r184;
	// begin inline asm
	cvt.f32.bf16 %r185, %rs105;
	// end inline asm
	mov.b32 	%f282, %r185;
	// begin inline asm
	cvt.f32.bf16 %r186, %rs106;
	// end inline asm
	mov.b32 	%f283, %r186;
	// begin inline asm
	cvt.f32.bf16 %r187, %rs107;
	// end inline asm
	mov.b32 	%f284, %r187;
	// begin inline asm
	cvt.f32.bf16 %r188, %rs108;
	// end inline asm
	mov.b32 	%f285, %r188;
	// begin inline asm
	cvt.f32.bf16 %r189, %rs109;
	// end inline asm
	mov.b32 	%f286, %r189;
	// begin inline asm
	cvt.f32.bf16 %r190, %rs110;
	// end inline asm
	mov.b32 	%f287, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs111;
	// end inline asm
	mov.b32 	%f288, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs112;
	// end inline asm
	mov.b32 	%f289, %r192;
	mul.rn.f32 	%f290, %f258, %f274;
	mul.rn.f32 	%f291, %f259, %f275;
	mul.rn.f32 	%f292, %f260, %f276;
	mul.rn.f32 	%f293, %f261, %f277;
	mul.rn.f32 	%f294, %f262, %f278;
	mul.rn.f32 	%f295, %f263, %f279;
	mul.rn.f32 	%f296, %f264, %f280;
	mul.rn.f32 	%f297, %f265, %f281;
	mul.rn.f32 	%f298, %f266, %f282;
	mul.rn.f32 	%f299, %f267, %f283;
	mul.rn.f32 	%f300, %f268, %f284;
	mul.rn.f32 	%f301, %f269, %f285;
	mul.rn.f32 	%f302, %f270, %f286;
	mul.rn.f32 	%f303, %f271, %f287;
	mul.rn.f32 	%f304, %f272, %f288;
	mul.rn.f32 	%f305, %f273, %f289;
	mov.b32 	%r193, %f290;
	// begin inline asm
	cvt.rn.bf16.f32 %rs113, %r193;
	// end inline asm
	mov.b32 	%r194, %f291;
	// begin inline asm
	cvt.rn.bf16.f32 %rs114, %r194;
	// end inline asm
	mov.b32 	%r195, %f292;
	// begin inline asm
	cvt.rn.bf16.f32 %rs115, %r195;
	// end inline asm
	mov.b32 	%r196, %f293;
	// begin inline asm
	cvt.rn.bf16.f32 %rs116, %r196;
	// end inline asm
	mov.b32 	%r197, %f294;
	// begin inline asm
	cvt.rn.bf16.f32 %rs117, %r197;
	// end inline asm
	mov.b32 	%r198, %f295;
	// begin inline asm
	cvt.rn.bf16.f32 %rs118, %r198;
	// end inline asm
	mov.b32 	%r199, %f296;
	// begin inline asm
	cvt.rn.bf16.f32 %rs119, %r199;
	// end inline asm
	mov.b32 	%r200, %f297;
	// begin inline asm
	cvt.rn.bf16.f32 %rs120, %r200;
	// end inline asm
	mov.b32 	%r201, %f298;
	// begin inline asm
	cvt.rn.bf16.f32 %rs121, %r201;
	// end inline asm
	mov.b32 	%r202, %f299;
	// begin inline asm
	cvt.rn.bf16.f32 %rs122, %r202;
	// end inline asm
	mov.b32 	%r203, %f300;
	// begin inline asm
	cvt.rn.bf16.f32 %rs123, %r203;
	// end inline asm
	mov.b32 	%r204, %f301;
	// begin inline asm
	cvt.rn.bf16.f32 %rs124, %r204;
	// end inline asm
	mov.b32 	%r205, %f302;
	// begin inline asm
	cvt.rn.bf16.f32 %rs125, %r205;
	// end inline asm
	mov.b32 	%r206, %f303;
	// begin inline asm
	cvt.rn.bf16.f32 %rs126, %r206;
	// end inline asm
	mov.b32 	%r207, %f304;
	// begin inline asm
	cvt.rn.bf16.f32 %rs127, %r207;
	// end inline asm
	mov.b32 	%r208, %f305;
	// begin inline asm
	cvt.rn.bf16.f32 %rs128, %r208;
	// end inline asm
	add.s64 	%rd55, %rd24, %rd43;
	add.s64 	%rd20, %rd55, %rd40;
	add.s64 	%rd21, %rd20, 1024;
	mov.b32 	%r209, {%rs113, %rs114};
	mov.b32 	%r210, {%rs115, %rs116};
	mov.b32 	%r211, {%rs117, %rs118};
	mov.b32 	%r212, {%rs119, %rs120};
	// begin inline asm
	st.global.v4.b32 [ %rd20 + 0 ], { %r209, %r210, %r211, %r212 };
	// end inline asm
	mov.b32 	%r213, {%rs121, %rs122};
	mov.b32 	%r214, {%rs123, %rs124};
	mov.b32 	%r215, {%rs125, %rs126};
	mov.b32 	%r216, {%rs127, %rs128};
	// begin inline asm
	st.global.v4.b32 [ %rd21 + 0 ], { %r213, %r214, %r215, %r216 };
	// end inline asm
	ret;

}
	// .globl	fusion_102
.visible .entry fusion_102(
	.param .u64 .ptr .align 16 fusion_102_param_0,
	.param .u64 .ptr .align 16 fusion_102_param_1,
	.param .u64 .ptr .align 128 fusion_102_param_2,
	.param .u64 .ptr .align 128 fusion_102_param_3,
	.param .u64 .ptr .align 128 fusion_102_param_4,
	.param .u64 .ptr .align 128 fusion_102_param_5,
	.param .u64 .ptr .align 128 fusion_102_param_6,
	.param .u64 .ptr .align 128 fusion_102_param_7,
	.param .u64 .ptr .align 128 fusion_102_param_8
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<161>;
	.reg .b32 	%r<285>;
	.reg .f32 	%f<370>;
	.reg .b64 	%rd<62>;

	ld.param.u64 	%rd26, [fusion_102_param_0];
	ld.param.u64 	%rd27, [fusion_102_param_8];
	cvta.to.global.u64 	%rd28, %rd27;
	ld.param.u64 	%rd29, [fusion_102_param_1];
	ld.param.u64 	%rd30, [fusion_102_param_7];
	cvta.to.global.u64 	%rd31, %rd30;
	ld.param.u64 	%rd32, [fusion_102_param_2];
	ld.param.u64 	%rd33, [fusion_102_param_6];
	cvta.to.global.u64 	%rd34, %rd33;
	ld.param.u64 	%rd35, [fusion_102_param_3];
	ld.param.u64 	%rd36, [fusion_102_param_5];
	cvta.to.global.u64 	%rd37, %rd36;
	ld.param.u64 	%rd38, [fusion_102_param_4];
	cvta.to.global.u64 	%rd39, %rd38;
	cvta.to.global.u64 	%rd40, %rd35;
	cvta.to.global.u64 	%rd41, %rd32;
	cvta.to.global.u64 	%rd42, %rd29;
	cvta.to.global.u64 	%rd21, %rd26;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd43, %r1, 8192;
	shl.b64 	%rd44, %rd43, 1;
	add.s64 	%rd45, %rd40, %rd44;
	mov.u32 	%r265, %tid.x;
	and.b32  	%r266, %r265, 31;
	shl.b32 	%r267, %r265, 3;
	and.b32  	%r268, %r267, 248;
	setp.lt.u32 	%p4, %r265, 32;
	selp.b32 	%r269, 0, 256, %p4;
	or.b32  	%r270, %r268, %r269;
	mul.wide.u32 	%rd46, %r270, 2;
	add.s64 	%rd1, %rd45, %rd46;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd47, %r1, 1024;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd49, %rd39, %rd48;
	add.s64 	%rd3, %rd49, %rd46;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd1, 2048;
	add.s64 	%rd6, %rd1, 3072;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd50, %rd41, %rd48;
	add.s64 	%rd7, %rd50, %rd46;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd9, %rd1, 4096;
	add.s64 	%rd10, %rd1, 5120;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd51, %rd31, %rd48;
	add.s64 	%rd11, %rd51, %rd46;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.s64 	%rd13, %rd1, 6144;
	add.s64 	%rd14, %rd1, 7168;
	// begin inline asm
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	ld.global.v4.b32 { %r146, %r147, %r148, %r149 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r146;
	mov.b32 	{%rs99, %rs100}, %r147;
	mov.b32 	{%rs101, %rs102}, %r148;
	mov.b32 	{%rs103, %rs104}, %r149;
	// begin inline asm
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	ld.global.v4.b32 { %r150, %r151, %r152, %r153 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r150;
	mov.b32 	{%rs107, %rs108}, %r151;
	mov.b32 	{%rs109, %rs110}, %r152;
	mov.b32 	{%rs111, %rs112}, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs97;
	// end inline asm
	mov.b32 	%f97, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs98;
	// end inline asm
	mov.b32 	%f98, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs99;
	// end inline asm
	mov.b32 	%f99, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs100;
	// end inline asm
	mov.b32 	%f100, %r157;
	// begin inline asm
	cvt.f32.bf16 %r158, %rs101;
	// end inline asm
	mov.b32 	%f101, %r158;
	// begin inline asm
	cvt.f32.bf16 %r159, %rs102;
	// end inline asm
	mov.b32 	%f102, %r159;
	// begin inline asm
	cvt.f32.bf16 %r160, %rs103;
	// end inline asm
	mov.b32 	%f103, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs104;
	// end inline asm
	mov.b32 	%f104, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs105;
	// end inline asm
	mov.b32 	%f105, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs106;
	// end inline asm
	mov.b32 	%f106, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs107;
	// end inline asm
	mov.b32 	%f107, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs108;
	// end inline asm
	mov.b32 	%f108, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs109;
	// end inline asm
	mov.b32 	%f109, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs110;
	// end inline asm
	mov.b32 	%f110, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs111;
	// end inline asm
	mov.b32 	%f111, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs112;
	// end inline asm
	mov.b32 	%f112, %r169;
	add.s64 	%rd52, %rd34, %rd48;
	add.s64 	%rd15, %rd52, %rd46;
	add.s64 	%rd16, %rd15, 1024;
	// begin inline asm
	mov.u32 %r170, 0x0;
	mov.u32 %r171, 0x0;
	mov.u32 %r172, 0x0;
	mov.u32 %r173, 0x0;
	ld.global.v4.b32 { %r170, %r171, %r172, %r173 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs113, %rs114}, %r170;
	mov.b32 	{%rs115, %rs116}, %r171;
	mov.b32 	{%rs117, %rs118}, %r172;
	mov.b32 	{%rs119, %rs120}, %r173;
	// begin inline asm
	mov.u32 %r174, 0x0;
	mov.u32 %r175, 0x0;
	mov.u32 %r176, 0x0;
	mov.u32 %r177, 0x0;
	ld.global.v4.b32 { %r174, %r175, %r176, %r177 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs121, %rs122}, %r174;
	mov.b32 	{%rs123, %rs124}, %r175;
	mov.b32 	{%rs125, %rs126}, %r176;
	mov.b32 	{%rs127, %rs128}, %r177;
	// begin inline asm
	cvt.f32.bf16 %r178, %rs113;
	// end inline asm
	mov.b32 	%f113, %r178;
	// begin inline asm
	cvt.f32.bf16 %r179, %rs114;
	// end inline asm
	mov.b32 	%f114, %r179;
	// begin inline asm
	cvt.f32.bf16 %r180, %rs115;
	// end inline asm
	mov.b32 	%f115, %r180;
	// begin inline asm
	cvt.f32.bf16 %r181, %rs116;
	// end inline asm
	mov.b32 	%f116, %r181;
	// begin inline asm
	cvt.f32.bf16 %r182, %rs117;
	// end inline asm
	mov.b32 	%f117, %r182;
	// begin inline asm
	cvt.f32.bf16 %r183, %rs118;
	// end inline asm
	mov.b32 	%f118, %r183;
	// begin inline asm
	cvt.f32.bf16 %r184, %rs119;
	// end inline asm
	mov.b32 	%f119, %r184;
	// begin inline asm
	cvt.f32.bf16 %r185, %rs120;
	// end inline asm
	mov.b32 	%f120, %r185;
	// begin inline asm
	cvt.f32.bf16 %r186, %rs121;
	// end inline asm
	mov.b32 	%f121, %r186;
	// begin inline asm
	cvt.f32.bf16 %r187, %rs122;
	// end inline asm
	mov.b32 	%f122, %r187;
	// begin inline asm
	cvt.f32.bf16 %r188, %rs123;
	// end inline asm
	mov.b32 	%f123, %r188;
	// begin inline asm
	cvt.f32.bf16 %r189, %rs124;
	// end inline asm
	mov.b32 	%f124, %r189;
	// begin inline asm
	cvt.f32.bf16 %r190, %rs125;
	// end inline asm
	mov.b32 	%f125, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs126;
	// end inline asm
	mov.b32 	%f126, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs127;
	// end inline asm
	mov.b32 	%f127, %r192;
	// begin inline asm
	cvt.f32.bf16 %r193, %rs128;
	// end inline asm
	mov.b32 	%f128, %r193;
	shl.b64 	%rd53, %rd47, 2;
	add.s64 	%rd54, %rd37, %rd53;
	mul.wide.u32 	%rd55, %r270, 4;
	add.s64 	%rd17, %rd54, %rd55;
	add.s64 	%rd18, %rd17, 16;
	add.s64 	%rd19, %rd17, 2048;
	add.s64 	%rd20, %rd17, 2064;
	// begin inline asm
	mov.u32 %r194, 0x0;
	mov.u32 %r195, 0x0;
	mov.u32 %r196, 0x0;
	mov.u32 %r197, 0x0;
	ld.global.v4.b32 { %r194, %r195, %r196, %r197 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	%f129, %r194;
	mov.b32 	%f130, %r195;
	mov.b32 	%f131, %r196;
	mov.b32 	%f132, %r197;
	// begin inline asm
	mov.u32 %r198, 0x0;
	mov.u32 %r199, 0x0;
	mov.u32 %r200, 0x0;
	mov.u32 %r201, 0x0;
	ld.global.v4.b32 { %r198, %r199, %r200, %r201 }, [ %rd18 + 0 ];
	// end inline asm
	mov.b32 	%f133, %r198;
	mov.b32 	%f134, %r199;
	mov.b32 	%f135, %r200;
	mov.b32 	%f136, %r201;
	// begin inline asm
	mov.u32 %r202, 0x0;
	mov.u32 %r203, 0x0;
	mov.u32 %r204, 0x0;
	mov.u32 %r205, 0x0;
	ld.global.v4.b32 { %r202, %r203, %r204, %r205 }, [ %rd19 + 0 ];
	// end inline asm
	mov.b32 	%f137, %r202;
	mov.b32 	%f138, %r203;
	mov.b32 	%f139, %r204;
	mov.b32 	%f140, %r205;
	// begin inline asm
	mov.u32 %r206, 0x0;
	mov.u32 %r207, 0x0;
	mov.u32 %r208, 0x0;
	mov.u32 %r209, 0x0;
	ld.global.v4.b32 { %r206, %r207, %r208, %r209 }, [ %rd20 + 0 ];
	// end inline asm
	mov.b32 	%f141, %r206;
	mov.b32 	%f142, %r207;
	mov.b32 	%f143, %r208;
	mov.b32 	%f144, %r209;
	add.rn.f32 	%f145, %f113, %f129;
	add.rn.f32 	%f146, %f114, %f130;
	add.rn.f32 	%f147, %f115, %f131;
	add.rn.f32 	%f148, %f116, %f132;
	add.rn.f32 	%f149, %f117, %f133;
	add.rn.f32 	%f150, %f118, %f134;
	add.rn.f32 	%f151, %f119, %f135;
	add.rn.f32 	%f152, %f120, %f136;
	add.rn.f32 	%f153, %f121, %f137;
	add.rn.f32 	%f154, %f122, %f138;
	add.rn.f32 	%f155, %f123, %f139;
	add.rn.f32 	%f156, %f124, %f140;
	add.rn.f32 	%f157, %f125, %f141;
	add.rn.f32 	%f158, %f126, %f142;
	add.rn.f32 	%f159, %f127, %f143;
	add.rn.f32 	%f160, %f128, %f144;
	add.rn.f32 	%f161, %f97, %f145;
	add.rn.f32 	%f162, %f98, %f146;
	add.rn.f32 	%f163, %f99, %f147;
	add.rn.f32 	%f164, %f100, %f148;
	add.rn.f32 	%f165, %f101, %f149;
	add.rn.f32 	%f166, %f102, %f150;
	add.rn.f32 	%f167, %f103, %f151;
	add.rn.f32 	%f168, %f104, %f152;
	add.rn.f32 	%f169, %f105, %f153;
	add.rn.f32 	%f170, %f106, %f154;
	add.rn.f32 	%f171, %f107, %f155;
	add.rn.f32 	%f172, %f108, %f156;
	add.rn.f32 	%f173, %f109, %f157;
	add.rn.f32 	%f174, %f110, %f158;
	add.rn.f32 	%f175, %f111, %f159;
	add.rn.f32 	%f176, %f112, %f160;
	add.rn.f32 	%f177, %f81, %f161;
	add.rn.f32 	%f178, %f82, %f162;
	add.rn.f32 	%f179, %f83, %f163;
	add.rn.f32 	%f180, %f84, %f164;
	add.rn.f32 	%f181, %f85, %f165;
	add.rn.f32 	%f182, %f86, %f166;
	add.rn.f32 	%f183, %f87, %f167;
	add.rn.f32 	%f184, %f88, %f168;
	add.rn.f32 	%f185, %f89, %f169;
	add.rn.f32 	%f186, %f90, %f170;
	add.rn.f32 	%f187, %f91, %f171;
	add.rn.f32 	%f188, %f92, %f172;
	add.rn.f32 	%f189, %f93, %f173;
	add.rn.f32 	%f190, %f94, %f174;
	add.rn.f32 	%f191, %f95, %f175;
	add.rn.f32 	%f192, %f96, %f176;
	add.rn.f32 	%f193, %f65, %f177;
	add.rn.f32 	%f194, %f66, %f178;
	add.rn.f32 	%f195, %f67, %f179;
	add.rn.f32 	%f196, %f68, %f180;
	add.rn.f32 	%f197, %f69, %f181;
	add.rn.f32 	%f198, %f70, %f182;
	add.rn.f32 	%f199, %f71, %f183;
	add.rn.f32 	%f200, %f72, %f184;
	add.rn.f32 	%f201, %f73, %f185;
	add.rn.f32 	%f202, %f74, %f186;
	add.rn.f32 	%f203, %f75, %f187;
	add.rn.f32 	%f204, %f76, %f188;
	add.rn.f32 	%f205, %f77, %f189;
	add.rn.f32 	%f206, %f78, %f190;
	add.rn.f32 	%f207, %f79, %f191;
	add.rn.f32 	%f208, %f80, %f192;
	add.rn.f32 	%f209, %f49, %f193;
	add.rn.f32 	%f210, %f50, %f194;
	add.rn.f32 	%f211, %f51, %f195;
	add.rn.f32 	%f212, %f52, %f196;
	add.rn.f32 	%f213, %f53, %f197;
	add.rn.f32 	%f214, %f54, %f198;
	add.rn.f32 	%f215, %f55, %f199;
	add.rn.f32 	%f216, %f56, %f200;
	add.rn.f32 	%f217, %f57, %f201;
	add.rn.f32 	%f218, %f58, %f202;
	add.rn.f32 	%f219, %f59, %f203;
	add.rn.f32 	%f220, %f60, %f204;
	add.rn.f32 	%f221, %f61, %f205;
	add.rn.f32 	%f222, %f62, %f206;
	add.rn.f32 	%f223, %f63, %f207;
	add.rn.f32 	%f224, %f64, %f208;
	add.rn.f32 	%f225, %f33, %f209;
	add.rn.f32 	%f226, %f34, %f210;
	add.rn.f32 	%f227, %f35, %f211;
	add.rn.f32 	%f228, %f36, %f212;
	add.rn.f32 	%f229, %f37, %f213;
	add.rn.f32 	%f230, %f38, %f214;
	add.rn.f32 	%f231, %f39, %f215;
	add.rn.f32 	%f232, %f40, %f216;
	add.rn.f32 	%f233, %f41, %f217;
	add.rn.f32 	%f234, %f42, %f218;
	add.rn.f32 	%f235, %f43, %f219;
	add.rn.f32 	%f236, %f44, %f220;
	add.rn.f32 	%f237, %f45, %f221;
	add.rn.f32 	%f238, %f46, %f222;
	add.rn.f32 	%f239, %f47, %f223;
	add.rn.f32 	%f240, %f48, %f224;
	add.rn.f32 	%f241, %f17, %f225;
	add.rn.f32 	%f242, %f18, %f226;
	add.rn.f32 	%f243, %f19, %f227;
	add.rn.f32 	%f244, %f20, %f228;
	add.rn.f32 	%f245, %f21, %f229;
	add.rn.f32 	%f246, %f22, %f230;
	add.rn.f32 	%f247, %f23, %f231;
	add.rn.f32 	%f248, %f24, %f232;
	add.rn.f32 	%f249, %f25, %f233;
	add.rn.f32 	%f250, %f26, %f234;
	add.rn.f32 	%f251, %f27, %f235;
	add.rn.f32 	%f252, %f28, %f236;
	add.rn.f32 	%f253, %f29, %f237;
	add.rn.f32 	%f254, %f30, %f238;
	add.rn.f32 	%f255, %f31, %f239;
	add.rn.f32 	%f256, %f32, %f240;
	add.rn.f32 	%f257, %f1, %f241;
	add.rn.f32 	%f258, %f2, %f242;
	add.rn.f32 	%f259, %f3, %f243;
	add.rn.f32 	%f260, %f4, %f244;
	add.rn.f32 	%f261, %f5, %f245;
	add.rn.f32 	%f262, %f6, %f246;
	add.rn.f32 	%f263, %f7, %f247;
	add.rn.f32 	%f264, %f8, %f248;
	add.rn.f32 	%f265, %f9, %f249;
	add.rn.f32 	%f266, %f10, %f250;
	add.rn.f32 	%f267, %f11, %f251;
	add.rn.f32 	%f268, %f12, %f252;
	add.rn.f32 	%f269, %f13, %f253;
	add.rn.f32 	%f270, %f14, %f254;
	add.rn.f32 	%f271, %f15, %f255;
	add.rn.f32 	%f272, %f16, %f256;
	mul.rn.f32 	%f273, %f257, %f257;
	mul.rn.f32 	%f274, %f258, %f258;
	mul.rn.f32 	%f275, %f259, %f259;
	mul.rn.f32 	%f276, %f260, %f260;
	mul.rn.f32 	%f277, %f261, %f261;
	mul.rn.f32 	%f278, %f262, %f262;
	mul.rn.f32 	%f279, %f263, %f263;
	mul.rn.f32 	%f280, %f264, %f264;
	mul.rn.f32 	%f281, %f265, %f265;
	mul.rn.f32 	%f282, %f266, %f266;
	mul.rn.f32 	%f283, %f267, %f267;
	mul.rn.f32 	%f284, %f268, %f268;
	mul.rn.f32 	%f285, %f269, %f269;
	mul.rn.f32 	%f286, %f270, %f270;
	mul.rn.f32 	%f287, %f271, %f271;
	mul.rn.f32 	%f288, %f272, %f272;
	add.rn.f32 	%f289, %f273, %f274;
	add.rn.f32 	%f290, %f275, %f289;
	add.rn.f32 	%f291, %f276, %f290;
	add.rn.f32 	%f292, %f277, %f291;
	add.rn.f32 	%f293, %f278, %f292;
	add.rn.f32 	%f294, %f279, %f293;
	add.rn.f32 	%f295, %f280, %f294;
	add.rn.f32 	%f296, %f281, %f295;
	add.rn.f32 	%f297, %f282, %f296;
	add.rn.f32 	%f298, %f283, %f297;
	add.rn.f32 	%f299, %f284, %f298;
	add.rn.f32 	%f300, %f285, %f299;
	add.rn.f32 	%f301, %f286, %f300;
	add.rn.f32 	%f302, %f287, %f301;
	add.rn.f32 	%f303, %f288, %f302;
	mov.b32 	%r271, %f303;
	shfl.sync.bfly.b32	%r272, %r271, 16, 31, -1;
	mov.b32 	%f304, %r272;
	add.rn.f32 	%f305, %f303, %f304;
	mov.b32 	%r273, %f305;
	shfl.sync.bfly.b32	%r274, %r273, 8, 31, -1;
	mov.b32 	%f306, %r274;
	add.rn.f32 	%f307, %f305, %f306;
	mov.b32 	%r275, %f307;
	shfl.sync.bfly.b32	%r276, %r275, 4, 31, -1;
	mov.b32 	%f308, %r276;
	add.rn.f32 	%f309, %f307, %f308;
	mov.b32 	%r277, %f309;
	shfl.sync.bfly.b32	%r278, %r277, 2, 31, -1;
	mov.b32 	%f310, %r278;
	add.rn.f32 	%f311, %f309, %f310;
	mov.b32 	%r279, %f311;
	shfl.sync.bfly.b32	%r280, %r279, 1, 31, -1;
	mov.b32 	%f312, %r280;
	add.rn.f32 	%f313, %f311, %f312;
	setp.eq.s32 	%p1, %r266, 0;
	shr.u32 	%r281, %r265, 3;
	and.b32  	%r282, %r281, 4;
	cvt.u64.u32 	%rd56, %r282;
	mov.u64 	%rd57, global_smem;
	add.s64 	%rd58, %rd57, %rd56;
	mov.b32 	%r211, %f313;
	cvt.u32.u64 	%r210, %rd58;
	// begin inline asm
	@%p1 st.shared.b32 [ %r210 + 0 ], %r211;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r265, 2;
	shl.b32 	%r283, %r265, 2;
	cvt.u64.u32 	%rd59, %r283;
	add.s64 	%rd60, %rd57, %rd59;
	cvt.u32.u64 	%r213, %rd60;
	// begin inline asm
	@%p2 ld.shared.b32 %r212, [ %r213 + 0 ];
	// end inline asm
	mov.b32 	%f314, %r212;
	shfl.sync.bfly.b32	%r284, %r212, 1, 31, -1;
	mov.b32 	%f315, %r284;
	add.rn.f32 	%f316, %f314, %f315;
	setp.eq.s32 	%p3, %r265, 0;
	mov.b32 	%r215, %f316;
	// begin inline asm
	@%p3 st.shared.b32 [ %r213 + 0 ], %r215;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f317, [global_smem];
	mul.rn.f32 	%f318, %f317, 0f3A800000;
	// begin inline asm
	mov.u32 %r216, 0x0;
	ld.global.b32 { %r216 }, [ %rd21 + 0 ];
	// end inline asm
	mov.b32 	%f319, %r216;
	add.rn.f32 	%f320, %f318, %f319;
	rsqrt.approx.f32 	%f321, %f320;
	mul.rn.f32 	%f322, %f257, %f321;
	mul.rn.f32 	%f323, %f258, %f321;
	mul.rn.f32 	%f324, %f259, %f321;
	mul.rn.f32 	%f325, %f260, %f321;
	mul.rn.f32 	%f326, %f261, %f321;
	mul.rn.f32 	%f327, %f262, %f321;
	mul.rn.f32 	%f328, %f263, %f321;
	mul.rn.f32 	%f329, %f264, %f321;
	mul.rn.f32 	%f330, %f265, %f321;
	mul.rn.f32 	%f331, %f266, %f321;
	mul.rn.f32 	%f332, %f267, %f321;
	mul.rn.f32 	%f333, %f268, %f321;
	mul.rn.f32 	%f334, %f269, %f321;
	mul.rn.f32 	%f335, %f270, %f321;
	mul.rn.f32 	%f336, %f271, %f321;
	mul.rn.f32 	%f337, %f272, %f321;
	add.s64 	%rd22, %rd42, %rd46;
	add.s64 	%rd23, %rd22, 1024;
	// begin inline asm
	mov.u32 %r217, 0x0;
	mov.u32 %r218, 0x0;
	mov.u32 %r219, 0x0;
	mov.u32 %r220, 0x0;
	ld.global.v4.b32 { %r217, %r218, %r219, %r220 }, [ %rd22 + 0 ];
	// end inline asm
	mov.b32 	{%rs129, %rs130}, %r217;
	mov.b32 	{%rs131, %rs132}, %r218;
	mov.b32 	{%rs133, %rs134}, %r219;
	mov.b32 	{%rs135, %rs136}, %r220;
	// begin inline asm
	mov.u32 %r221, 0x0;
	mov.u32 %r222, 0x0;
	mov.u32 %r223, 0x0;
	mov.u32 %r224, 0x0;
	ld.global.v4.b32 { %r221, %r222, %r223, %r224 }, [ %rd23 + 0 ];
	// end inline asm
	mov.b32 	{%rs137, %rs138}, %r221;
	mov.b32 	{%rs139, %rs140}, %r222;
	mov.b32 	{%rs141, %rs142}, %r223;
	mov.b32 	{%rs143, %rs144}, %r224;
	// begin inline asm
	cvt.f32.bf16 %r225, %rs129;
	// end inline asm
	mov.b32 	%f338, %r225;
	// begin inline asm
	cvt.f32.bf16 %r226, %rs130;
	// end inline asm
	mov.b32 	%f339, %r226;
	// begin inline asm
	cvt.f32.bf16 %r227, %rs131;
	// end inline asm
	mov.b32 	%f340, %r227;
	// begin inline asm
	cvt.f32.bf16 %r228, %rs132;
	// end inline asm
	mov.b32 	%f341, %r228;
	// begin inline asm
	cvt.f32.bf16 %r229, %rs133;
	// end inline asm
	mov.b32 	%f342, %r229;
	// begin inline asm
	cvt.f32.bf16 %r230, %rs134;
	// end inline asm
	mov.b32 	%f343, %r230;
	// begin inline asm
	cvt.f32.bf16 %r231, %rs135;
	// end inline asm
	mov.b32 	%f344, %r231;
	// begin inline asm
	cvt.f32.bf16 %r232, %rs136;
	// end inline asm
	mov.b32 	%f345, %r232;
	// begin inline asm
	cvt.f32.bf16 %r233, %rs137;
	// end inline asm
	mov.b32 	%f346, %r233;
	// begin inline asm
	cvt.f32.bf16 %r234, %rs138;
	// end inline asm
	mov.b32 	%f347, %r234;
	// begin inline asm
	cvt.f32.bf16 %r235, %rs139;
	// end inline asm
	mov.b32 	%f348, %r235;
	// begin inline asm
	cvt.f32.bf16 %r236, %rs140;
	// end inline asm
	mov.b32 	%f349, %r236;
	// begin inline asm
	cvt.f32.bf16 %r237, %rs141;
	// end inline asm
	mov.b32 	%f350, %r237;
	// begin inline asm
	cvt.f32.bf16 %r238, %rs142;
	// end inline asm
	mov.b32 	%f351, %r238;
	// begin inline asm
	cvt.f32.bf16 %r239, %rs143;
	// end inline asm
	mov.b32 	%f352, %r239;
	// begin inline asm
	cvt.f32.bf16 %r240, %rs144;
	// end inline asm
	mov.b32 	%f353, %r240;
	mul.rn.f32 	%f354, %f322, %f338;
	mul.rn.f32 	%f355, %f323, %f339;
	mul.rn.f32 	%f356, %f324, %f340;
	mul.rn.f32 	%f357, %f325, %f341;
	mul.rn.f32 	%f358, %f326, %f342;
	mul.rn.f32 	%f359, %f327, %f343;
	mul.rn.f32 	%f360, %f328, %f344;
	mul.rn.f32 	%f361, %f329, %f345;
	mul.rn.f32 	%f362, %f330, %f346;
	mul.rn.f32 	%f363, %f331, %f347;
	mul.rn.f32 	%f364, %f332, %f348;
	mul.rn.f32 	%f365, %f333, %f349;
	mul.rn.f32 	%f366, %f334, %f350;
	mul.rn.f32 	%f367, %f335, %f351;
	mul.rn.f32 	%f368, %f336, %f352;
	mul.rn.f32 	%f369, %f337, %f353;
	mov.b32 	%r241, %f354;
	// begin inline asm
	cvt.rn.bf16.f32 %rs145, %r241;
	// end inline asm
	mov.b32 	%r242, %f355;
	// begin inline asm
	cvt.rn.bf16.f32 %rs146, %r242;
	// end inline asm
	mov.b32 	%r243, %f356;
	// begin inline asm
	cvt.rn.bf16.f32 %rs147, %r243;
	// end inline asm
	mov.b32 	%r244, %f357;
	// begin inline asm
	cvt.rn.bf16.f32 %rs148, %r244;
	// end inline asm
	mov.b32 	%r245, %f358;
	// begin inline asm
	cvt.rn.bf16.f32 %rs149, %r245;
	// end inline asm
	mov.b32 	%r246, %f359;
	// begin inline asm
	cvt.rn.bf16.f32 %rs150, %r246;
	// end inline asm
	mov.b32 	%r247, %f360;
	// begin inline asm
	cvt.rn.bf16.f32 %rs151, %r247;
	// end inline asm
	mov.b32 	%r248, %f361;
	// begin inline asm
	cvt.rn.bf16.f32 %rs152, %r248;
	// end inline asm
	mov.b32 	%r249, %f362;
	// begin inline asm
	cvt.rn.bf16.f32 %rs153, %r249;
	// end inline asm
	mov.b32 	%r250, %f363;
	// begin inline asm
	cvt.rn.bf16.f32 %rs154, %r250;
	// end inline asm
	mov.b32 	%r251, %f364;
	// begin inline asm
	cvt.rn.bf16.f32 %rs155, %r251;
	// end inline asm
	mov.b32 	%r252, %f365;
	// begin inline asm
	cvt.rn.bf16.f32 %rs156, %r252;
	// end inline asm
	mov.b32 	%r253, %f366;
	// begin inline asm
	cvt.rn.bf16.f32 %rs157, %r253;
	// end inline asm
	mov.b32 	%r254, %f367;
	// begin inline asm
	cvt.rn.bf16.f32 %rs158, %r254;
	// end inline asm
	mov.b32 	%r255, %f368;
	// begin inline asm
	cvt.rn.bf16.f32 %rs159, %r255;
	// end inline asm
	mov.b32 	%r256, %f369;
	// begin inline asm
	cvt.rn.bf16.f32 %rs160, %r256;
	// end inline asm
	add.s64 	%rd61, %rd28, %rd48;
	add.s64 	%rd24, %rd61, %rd46;
	add.s64 	%rd25, %rd24, 1024;
	mov.b32 	%r257, {%rs145, %rs146};
	mov.b32 	%r258, {%rs147, %rs148};
	mov.b32 	%r259, {%rs149, %rs150};
	mov.b32 	%r260, {%rs151, %rs152};
	// begin inline asm
	st.global.v4.b32 [ %rd24 + 0 ], { %r257, %r258, %r259, %r260 };
	// end inline asm
	mov.b32 	%r261, {%rs153, %rs154};
	mov.b32 	%r262, {%rs155, %rs156};
	mov.b32 	%r263, {%rs157, %rs158};
	mov.b32 	%r264, {%rs159, %rs160};
	// begin inline asm
	st.global.v4.b32 [ %rd25 + 0 ], { %r261, %r262, %r263, %r264 };
	// end inline asm
	ret;

}
	// .globl	fusion_100
.visible .entry fusion_100(
	.param .u64 .ptr .align 16 fusion_100_param_0,
	.param .u64 .ptr .align 128 fusion_100_param_1,
	.param .u64 .ptr .align 16 fusion_100_param_2,
	.param .u64 .ptr .align 128 fusion_100_param_3,
	.param .u64 .ptr .align 128 fusion_100_param_4,
	.param .u64 .ptr .align 128 fusion_100_param_5,
	.param .u64 .ptr .align 128 fusion_100_param_6,
	.param .u64 .ptr .align 128 fusion_100_param_7,
	.param .u64 .ptr .align 128 fusion_100_param_8,
	.param .u64 .ptr .align 128 fusion_100_param_9
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<177>;
	.reg .b32 	%r<309>;
	.reg .f32 	%f<402>;
	.reg .b64 	%rd<67>;

	ld.param.u64 	%rd28, [fusion_100_param_0];
	ld.param.u64 	%rd29, [fusion_100_param_9];
	cvta.to.global.u64 	%rd30, %rd29;
	ld.param.u64 	%rd31, [fusion_100_param_1];
	ld.param.u64 	%rd32, [fusion_100_param_8];
	cvta.to.global.u64 	%rd33, %rd32;
	ld.param.u64 	%rd34, [fusion_100_param_2];
	ld.param.u64 	%rd35, [fusion_100_param_7];
	cvta.to.global.u64 	%rd36, %rd35;
	ld.param.u64 	%rd37, [fusion_100_param_3];
	ld.param.u64 	%rd38, [fusion_100_param_6];
	cvta.to.global.u64 	%rd39, %rd38;
	ld.param.u64 	%rd40, [fusion_100_param_4];
	ld.param.u64 	%rd41, [fusion_100_param_5];
	cvta.to.global.u64 	%rd42, %rd41;
	cvta.to.global.u64 	%rd43, %rd40;
	cvta.to.global.u64 	%rd44, %rd37;
	cvta.to.global.u64 	%rd45, %rd34;
	cvta.to.global.u64 	%rd46, %rd31;
	cvta.to.global.u64 	%rd23, %rd28;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd47, %r1, 1024;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd49, %rd46, %rd48;
	mov.u32 	%r289, %tid.x;
	and.b32  	%r290, %r289, 31;
	shl.b32 	%r291, %r289, 3;
	and.b32  	%r292, %r291, 248;
	setp.lt.u32 	%p4, %r289, 32;
	selp.b32 	%r293, 0, 256, %p4;
	or.b32  	%r294, %r292, %r293;
	mul.wide.u32 	%rd50, %r294, 2;
	add.s64 	%rd1, %rd49, %rd50;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd51, %r1, 8192;
	shl.b64 	%rd52, %rd51, 1;
	add.s64 	%rd53, %rd43, %rd52;
	add.s64 	%rd3, %rd53, %rd50;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd54, %rd42, %rd48;
	add.s64 	%rd5, %rd54, %rd50;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd7, %rd3, 2048;
	add.s64 	%rd8, %rd3, 3072;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd55, %rd44, %rd48;
	add.s64 	%rd9, %rd55, %rd50;
	add.s64 	%rd10, %rd9, 1024;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd11, %rd3, 4096;
	add.s64 	%rd12, %rd3, 5120;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.s64 	%rd56, %rd33, %rd48;
	add.s64 	%rd13, %rd56, %rd50;
	add.s64 	%rd14, %rd13, 1024;
	// begin inline asm
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	ld.global.v4.b32 { %r146, %r147, %r148, %r149 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r146;
	mov.b32 	{%rs99, %rs100}, %r147;
	mov.b32 	{%rs101, %rs102}, %r148;
	mov.b32 	{%rs103, %rs104}, %r149;
	// begin inline asm
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	ld.global.v4.b32 { %r150, %r151, %r152, %r153 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r150;
	mov.b32 	{%rs107, %rs108}, %r151;
	mov.b32 	{%rs109, %rs110}, %r152;
	mov.b32 	{%rs111, %rs112}, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs97;
	// end inline asm
	mov.b32 	%f97, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs98;
	// end inline asm
	mov.b32 	%f98, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs99;
	// end inline asm
	mov.b32 	%f99, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs100;
	// end inline asm
	mov.b32 	%f100, %r157;
	// begin inline asm
	cvt.f32.bf16 %r158, %rs101;
	// end inline asm
	mov.b32 	%f101, %r158;
	// begin inline asm
	cvt.f32.bf16 %r159, %rs102;
	// end inline asm
	mov.b32 	%f102, %r159;
	// begin inline asm
	cvt.f32.bf16 %r160, %rs103;
	// end inline asm
	mov.b32 	%f103, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs104;
	// end inline asm
	mov.b32 	%f104, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs105;
	// end inline asm
	mov.b32 	%f105, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs106;
	// end inline asm
	mov.b32 	%f106, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs107;
	// end inline asm
	mov.b32 	%f107, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs108;
	// end inline asm
	mov.b32 	%f108, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs109;
	// end inline asm
	mov.b32 	%f109, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs110;
	// end inline asm
	mov.b32 	%f110, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs111;
	// end inline asm
	mov.b32 	%f111, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs112;
	// end inline asm
	mov.b32 	%f112, %r169;
	add.s64 	%rd15, %rd3, 6144;
	add.s64 	%rd16, %rd3, 7168;
	// begin inline asm
	mov.u32 %r170, 0x0;
	mov.u32 %r171, 0x0;
	mov.u32 %r172, 0x0;
	mov.u32 %r173, 0x0;
	ld.global.v4.b32 { %r170, %r171, %r172, %r173 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs113, %rs114}, %r170;
	mov.b32 	{%rs115, %rs116}, %r171;
	mov.b32 	{%rs117, %rs118}, %r172;
	mov.b32 	{%rs119, %rs120}, %r173;
	// begin inline asm
	mov.u32 %r174, 0x0;
	mov.u32 %r175, 0x0;
	mov.u32 %r176, 0x0;
	mov.u32 %r177, 0x0;
	ld.global.v4.b32 { %r174, %r175, %r176, %r177 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs121, %rs122}, %r174;
	mov.b32 	{%rs123, %rs124}, %r175;
	mov.b32 	{%rs125, %rs126}, %r176;
	mov.b32 	{%rs127, %rs128}, %r177;
	// begin inline asm
	cvt.f32.bf16 %r178, %rs113;
	// end inline asm
	mov.b32 	%f113, %r178;
	// begin inline asm
	cvt.f32.bf16 %r179, %rs114;
	// end inline asm
	mov.b32 	%f114, %r179;
	// begin inline asm
	cvt.f32.bf16 %r180, %rs115;
	// end inline asm
	mov.b32 	%f115, %r180;
	// begin inline asm
	cvt.f32.bf16 %r181, %rs116;
	// end inline asm
	mov.b32 	%f116, %r181;
	// begin inline asm
	cvt.f32.bf16 %r182, %rs117;
	// end inline asm
	mov.b32 	%f117, %r182;
	// begin inline asm
	cvt.f32.bf16 %r183, %rs118;
	// end inline asm
	mov.b32 	%f118, %r183;
	// begin inline asm
	cvt.f32.bf16 %r184, %rs119;
	// end inline asm
	mov.b32 	%f119, %r184;
	// begin inline asm
	cvt.f32.bf16 %r185, %rs120;
	// end inline asm
	mov.b32 	%f120, %r185;
	// begin inline asm
	cvt.f32.bf16 %r186, %rs121;
	// end inline asm
	mov.b32 	%f121, %r186;
	// begin inline asm
	cvt.f32.bf16 %r187, %rs122;
	// end inline asm
	mov.b32 	%f122, %r187;
	// begin inline asm
	cvt.f32.bf16 %r188, %rs123;
	// end inline asm
	mov.b32 	%f123, %r188;
	// begin inline asm
	cvt.f32.bf16 %r189, %rs124;
	// end inline asm
	mov.b32 	%f124, %r189;
	// begin inline asm
	cvt.f32.bf16 %r190, %rs125;
	// end inline asm
	mov.b32 	%f125, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs126;
	// end inline asm
	mov.b32 	%f126, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs127;
	// end inline asm
	mov.b32 	%f127, %r192;
	// begin inline asm
	cvt.f32.bf16 %r193, %rs128;
	// end inline asm
	mov.b32 	%f128, %r193;
	add.s64 	%rd57, %rd36, %rd48;
	add.s64 	%rd17, %rd57, %rd50;
	add.s64 	%rd18, %rd17, 1024;
	// begin inline asm
	mov.u32 %r194, 0x0;
	mov.u32 %r195, 0x0;
	mov.u32 %r196, 0x0;
	mov.u32 %r197, 0x0;
	ld.global.v4.b32 { %r194, %r195, %r196, %r197 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	{%rs129, %rs130}, %r194;
	mov.b32 	{%rs131, %rs132}, %r195;
	mov.b32 	{%rs133, %rs134}, %r196;
	mov.b32 	{%rs135, %rs136}, %r197;
	// begin inline asm
	mov.u32 %r198, 0x0;
	mov.u32 %r199, 0x0;
	mov.u32 %r200, 0x0;
	mov.u32 %r201, 0x0;
	ld.global.v4.b32 { %r198, %r199, %r200, %r201 }, [ %rd18 + 0 ];
	// end inline asm
	mov.b32 	{%rs137, %rs138}, %r198;
	mov.b32 	{%rs139, %rs140}, %r199;
	mov.b32 	{%rs141, %rs142}, %r200;
	mov.b32 	{%rs143, %rs144}, %r201;
	// begin inline asm
	cvt.f32.bf16 %r202, %rs129;
	// end inline asm
	mov.b32 	%f129, %r202;
	// begin inline asm
	cvt.f32.bf16 %r203, %rs130;
	// end inline asm
	mov.b32 	%f130, %r203;
	// begin inline asm
	cvt.f32.bf16 %r204, %rs131;
	// end inline asm
	mov.b32 	%f131, %r204;
	// begin inline asm
	cvt.f32.bf16 %r205, %rs132;
	// end inline asm
	mov.b32 	%f132, %r205;
	// begin inline asm
	cvt.f32.bf16 %r206, %rs133;
	// end inline asm
	mov.b32 	%f133, %r206;
	// begin inline asm
	cvt.f32.bf16 %r207, %rs134;
	// end inline asm
	mov.b32 	%f134, %r207;
	// begin inline asm
	cvt.f32.bf16 %r208, %rs135;
	// end inline asm
	mov.b32 	%f135, %r208;
	// begin inline asm
	cvt.f32.bf16 %r209, %rs136;
	// end inline asm
	mov.b32 	%f136, %r209;
	// begin inline asm
	cvt.f32.bf16 %r210, %rs137;
	// end inline asm
	mov.b32 	%f137, %r210;
	// begin inline asm
	cvt.f32.bf16 %r211, %rs138;
	// end inline asm
	mov.b32 	%f138, %r211;
	// begin inline asm
	cvt.f32.bf16 %r212, %rs139;
	// end inline asm
	mov.b32 	%f139, %r212;
	// begin inline asm
	cvt.f32.bf16 %r213, %rs140;
	// end inline asm
	mov.b32 	%f140, %r213;
	// begin inline asm
	cvt.f32.bf16 %r214, %rs141;
	// end inline asm
	mov.b32 	%f141, %r214;
	// begin inline asm
	cvt.f32.bf16 %r215, %rs142;
	// end inline asm
	mov.b32 	%f142, %r215;
	// begin inline asm
	cvt.f32.bf16 %r216, %rs143;
	// end inline asm
	mov.b32 	%f143, %r216;
	// begin inline asm
	cvt.f32.bf16 %r217, %rs144;
	// end inline asm
	mov.b32 	%f144, %r217;
	shl.b64 	%rd58, %rd47, 2;
	add.s64 	%rd59, %rd39, %rd58;
	mul.wide.u32 	%rd60, %r294, 4;
	add.s64 	%rd19, %rd59, %rd60;
	add.s64 	%rd20, %rd19, 16;
	add.s64 	%rd21, %rd19, 2048;
	add.s64 	%rd22, %rd19, 2064;
	// begin inline asm
	mov.u32 %r218, 0x0;
	mov.u32 %r219, 0x0;
	mov.u32 %r220, 0x0;
	mov.u32 %r221, 0x0;
	ld.global.v4.b32 { %r218, %r219, %r220, %r221 }, [ %rd19 + 0 ];
	// end inline asm
	mov.b32 	%f145, %r218;
	mov.b32 	%f146, %r219;
	mov.b32 	%f147, %r220;
	mov.b32 	%f148, %r221;
	// begin inline asm
	mov.u32 %r222, 0x0;
	mov.u32 %r223, 0x0;
	mov.u32 %r224, 0x0;
	mov.u32 %r225, 0x0;
	ld.global.v4.b32 { %r222, %r223, %r224, %r225 }, [ %rd20 + 0 ];
	// end inline asm
	mov.b32 	%f149, %r222;
	mov.b32 	%f150, %r223;
	mov.b32 	%f151, %r224;
	mov.b32 	%f152, %r225;
	// begin inline asm
	mov.u32 %r226, 0x0;
	mov.u32 %r227, 0x0;
	mov.u32 %r228, 0x0;
	mov.u32 %r229, 0x0;
	ld.global.v4.b32 { %r226, %r227, %r228, %r229 }, [ %rd21 + 0 ];
	// end inline asm
	mov.b32 	%f153, %r226;
	mov.b32 	%f154, %r227;
	mov.b32 	%f155, %r228;
	mov.b32 	%f156, %r229;
	// begin inline asm
	mov.u32 %r230, 0x0;
	mov.u32 %r231, 0x0;
	mov.u32 %r232, 0x0;
	mov.u32 %r233, 0x0;
	ld.global.v4.b32 { %r230, %r231, %r232, %r233 }, [ %rd22 + 0 ];
	// end inline asm
	mov.b32 	%f157, %r230;
	mov.b32 	%f158, %r231;
	mov.b32 	%f159, %r232;
	mov.b32 	%f160, %r233;
	add.rn.f32 	%f161, %f129, %f145;
	add.rn.f32 	%f162, %f130, %f146;
	add.rn.f32 	%f163, %f131, %f147;
	add.rn.f32 	%f164, %f132, %f148;
	add.rn.f32 	%f165, %f133, %f149;
	add.rn.f32 	%f166, %f134, %f150;
	add.rn.f32 	%f167, %f135, %f151;
	add.rn.f32 	%f168, %f136, %f152;
	add.rn.f32 	%f169, %f137, %f153;
	add.rn.f32 	%f170, %f138, %f154;
	add.rn.f32 	%f171, %f139, %f155;
	add.rn.f32 	%f172, %f140, %f156;
	add.rn.f32 	%f173, %f141, %f157;
	add.rn.f32 	%f174, %f142, %f158;
	add.rn.f32 	%f175, %f143, %f159;
	add.rn.f32 	%f176, %f144, %f160;
	add.rn.f32 	%f177, %f113, %f161;
	add.rn.f32 	%f178, %f114, %f162;
	add.rn.f32 	%f179, %f115, %f163;
	add.rn.f32 	%f180, %f116, %f164;
	add.rn.f32 	%f181, %f117, %f165;
	add.rn.f32 	%f182, %f118, %f166;
	add.rn.f32 	%f183, %f119, %f167;
	add.rn.f32 	%f184, %f120, %f168;
	add.rn.f32 	%f185, %f121, %f169;
	add.rn.f32 	%f186, %f122, %f170;
	add.rn.f32 	%f187, %f123, %f171;
	add.rn.f32 	%f188, %f124, %f172;
	add.rn.f32 	%f189, %f125, %f173;
	add.rn.f32 	%f190, %f126, %f174;
	add.rn.f32 	%f191, %f127, %f175;
	add.rn.f32 	%f192, %f128, %f176;
	add.rn.f32 	%f193, %f97, %f177;
	add.rn.f32 	%f194, %f98, %f178;
	add.rn.f32 	%f195, %f99, %f179;
	add.rn.f32 	%f196, %f100, %f180;
	add.rn.f32 	%f197, %f101, %f181;
	add.rn.f32 	%f198, %f102, %f182;
	add.rn.f32 	%f199, %f103, %f183;
	add.rn.f32 	%f200, %f104, %f184;
	add.rn.f32 	%f201, %f105, %f185;
	add.rn.f32 	%f202, %f106, %f186;
	add.rn.f32 	%f203, %f107, %f187;
	add.rn.f32 	%f204, %f108, %f188;
	add.rn.f32 	%f205, %f109, %f189;
	add.rn.f32 	%f206, %f110, %f190;
	add.rn.f32 	%f207, %f111, %f191;
	add.rn.f32 	%f208, %f112, %f192;
	add.rn.f32 	%f209, %f81, %f193;
	add.rn.f32 	%f210, %f82, %f194;
	add.rn.f32 	%f211, %f83, %f195;
	add.rn.f32 	%f212, %f84, %f196;
	add.rn.f32 	%f213, %f85, %f197;
	add.rn.f32 	%f214, %f86, %f198;
	add.rn.f32 	%f215, %f87, %f199;
	add.rn.f32 	%f216, %f88, %f200;
	add.rn.f32 	%f217, %f89, %f201;
	add.rn.f32 	%f218, %f90, %f202;
	add.rn.f32 	%f219, %f91, %f203;
	add.rn.f32 	%f220, %f92, %f204;
	add.rn.f32 	%f221, %f93, %f205;
	add.rn.f32 	%f222, %f94, %f206;
	add.rn.f32 	%f223, %f95, %f207;
	add.rn.f32 	%f224, %f96, %f208;
	add.rn.f32 	%f225, %f65, %f209;
	add.rn.f32 	%f226, %f66, %f210;
	add.rn.f32 	%f227, %f67, %f211;
	add.rn.f32 	%f228, %f68, %f212;
	add.rn.f32 	%f229, %f69, %f213;
	add.rn.f32 	%f230, %f70, %f214;
	add.rn.f32 	%f231, %f71, %f215;
	add.rn.f32 	%f232, %f72, %f216;
	add.rn.f32 	%f233, %f73, %f217;
	add.rn.f32 	%f234, %f74, %f218;
	add.rn.f32 	%f235, %f75, %f219;
	add.rn.f32 	%f236, %f76, %f220;
	add.rn.f32 	%f237, %f77, %f221;
	add.rn.f32 	%f238, %f78, %f222;
	add.rn.f32 	%f239, %f79, %f223;
	add.rn.f32 	%f240, %f80, %f224;
	add.rn.f32 	%f241, %f49, %f225;
	add.rn.f32 	%f242, %f50, %f226;
	add.rn.f32 	%f243, %f51, %f227;
	add.rn.f32 	%f244, %f52, %f228;
	add.rn.f32 	%f245, %f53, %f229;
	add.rn.f32 	%f246, %f54, %f230;
	add.rn.f32 	%f247, %f55, %f231;
	add.rn.f32 	%f248, %f56, %f232;
	add.rn.f32 	%f249, %f57, %f233;
	add.rn.f32 	%f250, %f58, %f234;
	add.rn.f32 	%f251, %f59, %f235;
	add.rn.f32 	%f252, %f60, %f236;
	add.rn.f32 	%f253, %f61, %f237;
	add.rn.f32 	%f254, %f62, %f238;
	add.rn.f32 	%f255, %f63, %f239;
	add.rn.f32 	%f256, %f64, %f240;
	add.rn.f32 	%f257, %f33, %f241;
	add.rn.f32 	%f258, %f34, %f242;
	add.rn.f32 	%f259, %f35, %f243;
	add.rn.f32 	%f260, %f36, %f244;
	add.rn.f32 	%f261, %f37, %f245;
	add.rn.f32 	%f262, %f38, %f246;
	add.rn.f32 	%f263, %f39, %f247;
	add.rn.f32 	%f264, %f40, %f248;
	add.rn.f32 	%f265, %f41, %f249;
	add.rn.f32 	%f266, %f42, %f250;
	add.rn.f32 	%f267, %f43, %f251;
	add.rn.f32 	%f268, %f44, %f252;
	add.rn.f32 	%f269, %f45, %f253;
	add.rn.f32 	%f270, %f46, %f254;
	add.rn.f32 	%f271, %f47, %f255;
	add.rn.f32 	%f272, %f48, %f256;
	add.rn.f32 	%f273, %f17, %f257;
	add.rn.f32 	%f274, %f18, %f258;
	add.rn.f32 	%f275, %f19, %f259;
	add.rn.f32 	%f276, %f20, %f260;
	add.rn.f32 	%f277, %f21, %f261;
	add.rn.f32 	%f278, %f22, %f262;
	add.rn.f32 	%f279, %f23, %f263;
	add.rn.f32 	%f280, %f24, %f264;
	add.rn.f32 	%f281, %f25, %f265;
	add.rn.f32 	%f282, %f26, %f266;
	add.rn.f32 	%f283, %f27, %f267;
	add.rn.f32 	%f284, %f28, %f268;
	add.rn.f32 	%f285, %f29, %f269;
	add.rn.f32 	%f286, %f30, %f270;
	add.rn.f32 	%f287, %f31, %f271;
	add.rn.f32 	%f288, %f32, %f272;
	add.rn.f32 	%f289, %f1, %f273;
	add.rn.f32 	%f290, %f2, %f274;
	add.rn.f32 	%f291, %f3, %f275;
	add.rn.f32 	%f292, %f4, %f276;
	add.rn.f32 	%f293, %f5, %f277;
	add.rn.f32 	%f294, %f6, %f278;
	add.rn.f32 	%f295, %f7, %f279;
	add.rn.f32 	%f296, %f8, %f280;
	add.rn.f32 	%f297, %f9, %f281;
	add.rn.f32 	%f298, %f10, %f282;
	add.rn.f32 	%f299, %f11, %f283;
	add.rn.f32 	%f300, %f12, %f284;
	add.rn.f32 	%f301, %f13, %f285;
	add.rn.f32 	%f302, %f14, %f286;
	add.rn.f32 	%f303, %f15, %f287;
	add.rn.f32 	%f304, %f16, %f288;
	mul.rn.f32 	%f305, %f289, %f289;
	mul.rn.f32 	%f306, %f290, %f290;
	mul.rn.f32 	%f307, %f291, %f291;
	mul.rn.f32 	%f308, %f292, %f292;
	mul.rn.f32 	%f309, %f293, %f293;
	mul.rn.f32 	%f310, %f294, %f294;
	mul.rn.f32 	%f311, %f295, %f295;
	mul.rn.f32 	%f312, %f296, %f296;
	mul.rn.f32 	%f313, %f297, %f297;
	mul.rn.f32 	%f314, %f298, %f298;
	mul.rn.f32 	%f315, %f299, %f299;
	mul.rn.f32 	%f316, %f300, %f300;
	mul.rn.f32 	%f317, %f301, %f301;
	mul.rn.f32 	%f318, %f302, %f302;
	mul.rn.f32 	%f319, %f303, %f303;
	mul.rn.f32 	%f320, %f304, %f304;
	add.rn.f32 	%f321, %f305, %f306;
	add.rn.f32 	%f322, %f307, %f321;
	add.rn.f32 	%f323, %f308, %f322;
	add.rn.f32 	%f324, %f309, %f323;
	add.rn.f32 	%f325, %f310, %f324;
	add.rn.f32 	%f326, %f311, %f325;
	add.rn.f32 	%f327, %f312, %f326;
	add.rn.f32 	%f328, %f313, %f327;
	add.rn.f32 	%f329, %f314, %f328;
	add.rn.f32 	%f330, %f315, %f329;
	add.rn.f32 	%f331, %f316, %f330;
	add.rn.f32 	%f332, %f317, %f331;
	add.rn.f32 	%f333, %f318, %f332;
	add.rn.f32 	%f334, %f319, %f333;
	add.rn.f32 	%f335, %f320, %f334;
	mov.b32 	%r295, %f335;
	shfl.sync.bfly.b32	%r296, %r295, 16, 31, -1;
	mov.b32 	%f336, %r296;
	add.rn.f32 	%f337, %f335, %f336;
	mov.b32 	%r297, %f337;
	shfl.sync.bfly.b32	%r298, %r297, 8, 31, -1;
	mov.b32 	%f338, %r298;
	add.rn.f32 	%f339, %f337, %f338;
	mov.b32 	%r299, %f339;
	shfl.sync.bfly.b32	%r300, %r299, 4, 31, -1;
	mov.b32 	%f340, %r300;
	add.rn.f32 	%f341, %f339, %f340;
	mov.b32 	%r301, %f341;
	shfl.sync.bfly.b32	%r302, %r301, 2, 31, -1;
	mov.b32 	%f342, %r302;
	add.rn.f32 	%f343, %f341, %f342;
	mov.b32 	%r303, %f343;
	shfl.sync.bfly.b32	%r304, %r303, 1, 31, -1;
	mov.b32 	%f344, %r304;
	add.rn.f32 	%f345, %f343, %f344;
	setp.eq.s32 	%p1, %r290, 0;
	shr.u32 	%r305, %r289, 3;
	and.b32  	%r306, %r305, 4;
	cvt.u64.u32 	%rd61, %r306;
	mov.u64 	%rd62, global_smem;
	add.s64 	%rd63, %rd62, %rd61;
	mov.b32 	%r235, %f345;
	cvt.u32.u64 	%r234, %rd63;
	// begin inline asm
	@%p1 st.shared.b32 [ %r234 + 0 ], %r235;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r289, 2;
	shl.b32 	%r307, %r289, 2;
	cvt.u64.u32 	%rd64, %r307;
	add.s64 	%rd65, %rd62, %rd64;
	cvt.u32.u64 	%r237, %rd65;
	// begin inline asm
	@%p2 ld.shared.b32 %r236, [ %r237 + 0 ];
	// end inline asm
	mov.b32 	%f346, %r236;
	shfl.sync.bfly.b32	%r308, %r236, 1, 31, -1;
	mov.b32 	%f347, %r308;
	add.rn.f32 	%f348, %f346, %f347;
	setp.eq.s32 	%p3, %r289, 0;
	mov.b32 	%r239, %f348;
	// begin inline asm
	@%p3 st.shared.b32 [ %r237 + 0 ], %r239;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f349, [global_smem];
	mul.rn.f32 	%f350, %f349, 0f3A800000;
	// begin inline asm
	mov.u32 %r240, 0x0;
	ld.global.b32 { %r240 }, [ %rd23 + 0 ];
	// end inline asm
	mov.b32 	%f351, %r240;
	add.rn.f32 	%f352, %f350, %f351;
	rsqrt.approx.f32 	%f353, %f352;
	mul.rn.f32 	%f354, %f289, %f353;
	mul.rn.f32 	%f355, %f290, %f353;
	mul.rn.f32 	%f356, %f291, %f353;
	mul.rn.f32 	%f357, %f292, %f353;
	mul.rn.f32 	%f358, %f293, %f353;
	mul.rn.f32 	%f359, %f294, %f353;
	mul.rn.f32 	%f360, %f295, %f353;
	mul.rn.f32 	%f361, %f296, %f353;
	mul.rn.f32 	%f362, %f297, %f353;
	mul.rn.f32 	%f363, %f298, %f353;
	mul.rn.f32 	%f364, %f299, %f353;
	mul.rn.f32 	%f365, %f300, %f353;
	mul.rn.f32 	%f366, %f301, %f353;
	mul.rn.f32 	%f367, %f302, %f353;
	mul.rn.f32 	%f368, %f303, %f353;
	mul.rn.f32 	%f369, %f304, %f353;
	add.s64 	%rd24, %rd45, %rd50;
	add.s64 	%rd25, %rd24, 1024;
	// begin inline asm
	mov.u32 %r241, 0x0;
	mov.u32 %r242, 0x0;
	mov.u32 %r243, 0x0;
	mov.u32 %r244, 0x0;
	ld.global.v4.b32 { %r241, %r242, %r243, %r244 }, [ %rd24 + 0 ];
	// end inline asm
	mov.b32 	{%rs145, %rs146}, %r241;
	mov.b32 	{%rs147, %rs148}, %r242;
	mov.b32 	{%rs149, %rs150}, %r243;
	mov.b32 	{%rs151, %rs152}, %r244;
	// begin inline asm
	mov.u32 %r245, 0x0;
	mov.u32 %r246, 0x0;
	mov.u32 %r247, 0x0;
	mov.u32 %r248, 0x0;
	ld.global.v4.b32 { %r245, %r246, %r247, %r248 }, [ %rd25 + 0 ];
	// end inline asm
	mov.b32 	{%rs153, %rs154}, %r245;
	mov.b32 	{%rs155, %rs156}, %r246;
	mov.b32 	{%rs157, %rs158}, %r247;
	mov.b32 	{%rs159, %rs160}, %r248;
	// begin inline asm
	cvt.f32.bf16 %r249, %rs145;
	// end inline asm
	mov.b32 	%f370, %r249;
	// begin inline asm
	cvt.f32.bf16 %r250, %rs146;
	// end inline asm
	mov.b32 	%f371, %r250;
	// begin inline asm
	cvt.f32.bf16 %r251, %rs147;
	// end inline asm
	mov.b32 	%f372, %r251;
	// begin inline asm
	cvt.f32.bf16 %r252, %rs148;
	// end inline asm
	mov.b32 	%f373, %r252;
	// begin inline asm
	cvt.f32.bf16 %r253, %rs149;
	// end inline asm
	mov.b32 	%f374, %r253;
	// begin inline asm
	cvt.f32.bf16 %r254, %rs150;
	// end inline asm
	mov.b32 	%f375, %r254;
	// begin inline asm
	cvt.f32.bf16 %r255, %rs151;
	// end inline asm
	mov.b32 	%f376, %r255;
	// begin inline asm
	cvt.f32.bf16 %r256, %rs152;
	// end inline asm
	mov.b32 	%f377, %r256;
	// begin inline asm
	cvt.f32.bf16 %r257, %rs153;
	// end inline asm
	mov.b32 	%f378, %r257;
	// begin inline asm
	cvt.f32.bf16 %r258, %rs154;
	// end inline asm
	mov.b32 	%f379, %r258;
	// begin inline asm
	cvt.f32.bf16 %r259, %rs155;
	// end inline asm
	mov.b32 	%f380, %r259;
	// begin inline asm
	cvt.f32.bf16 %r260, %rs156;
	// end inline asm
	mov.b32 	%f381, %r260;
	// begin inline asm
	cvt.f32.bf16 %r261, %rs157;
	// end inline asm
	mov.b32 	%f382, %r261;
	// begin inline asm
	cvt.f32.bf16 %r262, %rs158;
	// end inline asm
	mov.b32 	%f383, %r262;
	// begin inline asm
	cvt.f32.bf16 %r263, %rs159;
	// end inline asm
	mov.b32 	%f384, %r263;
	// begin inline asm
	cvt.f32.bf16 %r264, %rs160;
	// end inline asm
	mov.b32 	%f385, %r264;
	mul.rn.f32 	%f386, %f354, %f370;
	mul.rn.f32 	%f387, %f355, %f371;
	mul.rn.f32 	%f388, %f356, %f372;
	mul.rn.f32 	%f389, %f357, %f373;
	mul.rn.f32 	%f390, %f358, %f374;
	mul.rn.f32 	%f391, %f359, %f375;
	mul.rn.f32 	%f392, %f360, %f376;
	mul.rn.f32 	%f393, %f361, %f377;
	mul.rn.f32 	%f394, %f362, %f378;
	mul.rn.f32 	%f395, %f363, %f379;
	mul.rn.f32 	%f396, %f364, %f380;
	mul.rn.f32 	%f397, %f365, %f381;
	mul.rn.f32 	%f398, %f366, %f382;
	mul.rn.f32 	%f399, %f367, %f383;
	mul.rn.f32 	%f400, %f368, %f384;
	mul.rn.f32 	%f401, %f369, %f385;
	mov.b32 	%r265, %f386;
	// begin inline asm
	cvt.rn.bf16.f32 %rs161, %r265;
	// end inline asm
	mov.b32 	%r266, %f387;
	// begin inline asm
	cvt.rn.bf16.f32 %rs162, %r266;
	// end inline asm
	mov.b32 	%r267, %f388;
	// begin inline asm
	cvt.rn.bf16.f32 %rs163, %r267;
	// end inline asm
	mov.b32 	%r268, %f389;
	// begin inline asm
	cvt.rn.bf16.f32 %rs164, %r268;
	// end inline asm
	mov.b32 	%r269, %f390;
	// begin inline asm
	cvt.rn.bf16.f32 %rs165, %r269;
	// end inline asm
	mov.b32 	%r270, %f391;
	// begin inline asm
	cvt.rn.bf16.f32 %rs166, %r270;
	// end inline asm
	mov.b32 	%r271, %f392;
	// begin inline asm
	cvt.rn.bf16.f32 %rs167, %r271;
	// end inline asm
	mov.b32 	%r272, %f393;
	// begin inline asm
	cvt.rn.bf16.f32 %rs168, %r272;
	// end inline asm
	mov.b32 	%r273, %f394;
	// begin inline asm
	cvt.rn.bf16.f32 %rs169, %r273;
	// end inline asm
	mov.b32 	%r274, %f395;
	// begin inline asm
	cvt.rn.bf16.f32 %rs170, %r274;
	// end inline asm
	mov.b32 	%r275, %f396;
	// begin inline asm
	cvt.rn.bf16.f32 %rs171, %r275;
	// end inline asm
	mov.b32 	%r276, %f397;
	// begin inline asm
	cvt.rn.bf16.f32 %rs172, %r276;
	// end inline asm
	mov.b32 	%r277, %f398;
	// begin inline asm
	cvt.rn.bf16.f32 %rs173, %r277;
	// end inline asm
	mov.b32 	%r278, %f399;
	// begin inline asm
	cvt.rn.bf16.f32 %rs174, %r278;
	// end inline asm
	mov.b32 	%r279, %f400;
	// begin inline asm
	cvt.rn.bf16.f32 %rs175, %r279;
	// end inline asm
	mov.b32 	%r280, %f401;
	// begin inline asm
	cvt.rn.bf16.f32 %rs176, %r280;
	// end inline asm
	add.s64 	%rd66, %rd30, %rd48;
	add.s64 	%rd26, %rd66, %rd50;
	add.s64 	%rd27, %rd26, 1024;
	mov.b32 	%r281, {%rs161, %rs162};
	mov.b32 	%r282, {%rs163, %rs164};
	mov.b32 	%r283, {%rs165, %rs166};
	mov.b32 	%r284, {%rs167, %rs168};
	// begin inline asm
	st.global.v4.b32 [ %rd26 + 0 ], { %r281, %r282, %r283, %r284 };
	// end inline asm
	mov.b32 	%r285, {%rs169, %rs170};
	mov.b32 	%r286, {%rs171, %rs172};
	mov.b32 	%r287, {%rs173, %rs174};
	mov.b32 	%r288, {%rs175, %rs176};
	// begin inline asm
	st.global.v4.b32 [ %rd27 + 0 ], { %r285, %r286, %r287, %r288 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 61440;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	triton_softmax_10_0
.visible .entry triton_softmax_10_0(
	.param .u64 .ptr .align 16 triton_softmax_10_0_param_0,
	.param .u64 .ptr .align 128 triton_softmax_10_0_param_1,
	.param .u64 .ptr .align 128 triton_softmax_10_0_param_2
)
.reqntid 32, 1, 1
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<29>;
	.reg .f32 	%f<30>;
	.reg .b64 	%rd<20>;

	ld.param.u64 	%rd4, [triton_softmax_10_0_param_0];
	ld.param.u64 	%rd5, [triton_softmax_10_0_param_2];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [triton_softmax_10_0_param_1];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd2, %rd4;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r13, %r1, 7;
	cvt.u64.u32 	%rd9, %r13;
	and.b64  	%rd10, %rd9, 896;
	mul.wide.s32 	%rd11, %r1, 512;
	and.b64  	%rd12, %rd11, 9223372036854771712;
	or.b64  	%rd13, %rd12, %rd10;
	shl.b64 	%rd14, %rd13, 1;
	add.s64 	%rd15, %rd8, %rd14;
	mov.u32 	%r14, %tid.x;
	shl.b32 	%r15, %r14, 2;
	and.b32  	%r16, %r15, 60;
	setp.lt.u32 	%p1, %r14, 16;
	selp.b32 	%r17, 0, 64, %p1;
	or.b32  	%r18, %r16, %r17;
	mul.wide.u32 	%rd16, %r18, 2;
	add.s64 	%rd17, %rd15, %rd16;
	add.s64 	%rd1, %rd17, 4096;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	mul.rn.f32 	%f5, %f1, %f1;
	mul.rn.f32 	%f6, %f2, %f2;
	mul.rn.f32 	%f7, %f3, %f3;
	mul.rn.f32 	%f8, %f4, %f4;
	add.rn.f32 	%f9, %f5, %f6;
	add.rn.f32 	%f10, %f9, %f7;
	add.rn.f32 	%f11, %f10, %f8;
	mov.b32 	%r19, %f11;
	shfl.sync.bfly.b32	%r20, %r19, 16, 31, -1;
	mov.b32 	%f12, %r20;
	add.rn.f32 	%f13, %f11, %f12;
	mov.b32 	%r21, %f13;
	shfl.sync.bfly.b32	%r22, %r21, 8, 31, -1;
	mov.b32 	%f14, %r22;
	add.rn.f32 	%f15, %f13, %f14;
	mov.b32 	%r23, %f15;
	shfl.sync.bfly.b32	%r24, %r23, 4, 31, -1;
	mov.b32 	%f16, %r24;
	add.rn.f32 	%f17, %f15, %f16;
	mov.b32 	%r25, %f17;
	shfl.sync.bfly.b32	%r26, %r25, 2, 31, -1;
	mov.b32 	%f18, %r26;
	add.rn.f32 	%f19, %f17, %f18;
	mov.b32 	%r27, %f19;
	shfl.sync.bfly.b32	%r28, %r27, 1, 31, -1;
	mov.b32 	%f20, %r28;
	add.rn.f32 	%f21, %f19, %f20;
	mul.rn.f32 	%f22, %f21, 0f3C000000;
	// begin inline asm
	mov.u32 %r8, 0x0;
	ld.global.b32 { %r8 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f23, %r8;
	add.rn.f32 	%f24, %f22, %f23;
	rsqrt.approx.f32 	%f25, %f24;
	mul.rn.f32 	%f26, %f1, %f25;
	mul.rn.f32 	%f27, %f2, %f25;
	mul.rn.f32 	%f28, %f3, %f25;
	mul.rn.f32 	%f29, %f4, %f25;
	add.s64 	%rd18, %rd6, %rd11;
	mul.wide.u32 	%rd19, %r18, 4;
	add.s64 	%rd3, %rd18, %rd19;
	mov.b32 	%r9, %f26;
	mov.b32 	%r10, %f27;
	mov.b32 	%r11, %f28;
	mov.b32 	%r12, %f29;
	// begin inline asm
	st.global.v4.b32 [ %rd3 + 0 ], { %r9, %r10, %r11, %r12 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_3,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_4
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<7>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<15>;
	.reg .b64 	%rd<25>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_4];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd9, %rd4;
	cvta.to.global.u64 	%rd10, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd11, %r8, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	mul.wide.u32 	%rd13, %r3, 2;
	add.s64 	%rd14, %rd9, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd15, %r9;
	add.s64 	%rd16, %rd6, %rd15;
	ld.global.nc.u32 	%r10, [%rd16];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd17, %r14, 2;
	add.s64 	%rd18, %rd8, %rd17;
	ld.global.nc.u16 	%rs2, [%rd18];
	cvt.f32.bf16 	%f4, %rs2;
	mul.rn.f32 	%f5, %f3, %f4;
	or.b32  	%r15, %r1, 64;
	ld.global.nc.f32 	%f6, [%rd12+256];
	mul.wide.u32 	%rd19, %r15, 2;
	add.s64 	%rd20, %rd9, %rd19;
	ld.global.nc.u16 	%rs3, [%rd20];
	cvt.f32.bf16 	%f7, %rs3;
	mul.rn.f32 	%f8, %f6, %f7;
	or.b32  	%r16, %r13, %r15;
	mul.wide.u32 	%rd21, %r16, 2;
	add.s64 	%rd22, %rd8, %rd21;
	ld.global.nc.u16 	%rs4, [%rd22];
	cvt.f32.bf16 	%f9, %rs4;
	mul.rn.f32 	%f10, %f8, %f9;
	sub.rn.f32 	%f11, %f5, %f10;
	cvt.rn.bf16.f32 	%rs5, %f11;
	mul.wide.u32 	%rd23, %r8, 2;
	add.s64 	%rd24, %rd3, %rd23;
	st.global.b16 	[%rd24], %rs5;
	mul.rn.f32 	%f12, %f8, %f4;
	mul.rn.f32 	%f13, %f3, %f9;
	add.rn.f32 	%f14, %f12, %f13;
	cvt.rn.bf16.f32 	%rs6, %f14;
	st.global.b16 	[%rd24+128], %rs6;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

#indexing_map = #xla.indexing_map<"(bl_x) -> (bl_x floordiv 8), domain: bl_x in [0, 127]">
#indexing_map1 = #xla.indexing_map<"(d0) -> (d0 mod 8), domain: d0 in [0, 127]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_1 * 128), domain: tid_0 in [0, 15], tid_1 in [0, 7]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024 + tid_1 * 128), domain: tid_0 in [0, 15], tid_1 in [0, 7]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 15], tid_1 in [0, 7]">
#indexing_map5 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 15], tid_1 in [0, 7]">
module {
  tt.func @fusion_292_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %c1_i64 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %5 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64 = arith.constant 16 : i64
    %6 = arith.index_castui %3 : index to i64
    %7 = arith.subi %c16_i64, %6 : i64
    %c1024_i64_0 = arith.constant 1024 : i64
    %8 = arith.index_castui %5 : index to i64
    %9 = arith.subi %c1024_i64_0, %8 : i64
    %10 = xla.apply_indexing #indexing_map3(%3, %4)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg0, %11 : !tt.ptr<f32>, i64
    %c0_i32 = arith.constant 0 : i32
    %13 = tt.make_tensor_ptr %12, [%7, %9], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x128xf32>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x128xf32>>
    %c1_i64_1 = arith.constant 1 : i64
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = xla.apply_indexing #indexing_map4(%3, %4)
    %c16_i64_3 = arith.constant 16 : i64
    %16 = arith.index_castui %3 : index to i64
    %17 = arith.subi %c16_i64_3, %16 : i64
    %c1024_i64_4 = arith.constant 1024 : i64
    %18 = arith.index_castui %15 : index to i64
    %19 = arith.subi %c1024_i64_4, %18 : i64
    %20 = xla.apply_indexing #indexing_map5(%3, %4)
    %21 = arith.index_castui %20 : index to i64
    %22 = tt.addptr %arg0, %21 : !tt.ptr<f32>, i64
    %c0_i32_5 = arith.constant 0 : i32
    %23 = tt.make_tensor_ptr %22, [%17, %19], [%c1024_i64_2, %c1_i64_1], [%c0_i32_5, %c0_i32_5] {order = array<i32: 1, 0>} : <tensor<1x1024xf32>>
    %24 = tt.load %23 : !tt.ptr<tensor<1x1024xf32>>
    %25 = arith.mulf %24, %24 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %26 = "tt.reduce"(%25) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %62 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %62 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_6 = arith.constant 9.765625E-4 : f32
    %27 = tt.splat %cst_6 : f32 -> tensor<1xf32>
    %28 = arith.mulf %26, %27 : tensor<1xf32>
    %29 = xla.apply_indexing #indexing_map4(%3, %4)
    %30 = arith.index_castui %29 : index to i64
    %31 = tt.addptr %arg1, %30 : !tt.ptr<f32>, i64
    %c0_i32_7 = arith.constant 0 : i32
    %32 = tt.make_tensor_ptr %31, [], [], [] {order = array<i32>} : <tensor<f32>>
    %33 = tt.load %31 : !tt.ptr<f32>
    %34 = tt.splat %33 : f32 -> tensor<1xf32>
    %35 = arith.addf %28, %34 : tensor<1xf32>
    %36 = tt.extern_elementwise %35 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %37 = tt.expand_dims %36 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %38 = tt.broadcast %37 : tensor<1x1xf32> -> tensor<1x128xf32>
    %39 = arith.mulf %14, %38 : tensor<1x128xf32>
    %c1_i64_8 = arith.constant 1 : i64
    %40 = xla.apply_indexing #indexing_map2(%3, %4)
    %c1024_i64_9 = arith.constant 1024 : i64
    %41 = arith.index_castui %40 : index to i64
    %42 = arith.subi %c1024_i64_9, %41 : i64
    %43 = xla.apply_indexing #indexing_map2(%3, %4)
    %44 = arith.index_castui %43 : index to i64
    %45 = tt.addptr %arg2, %44 : !tt.ptr<bf16>, i64
    %c0_i32_10 = arith.constant 0 : i32
    %46 = tt.make_tensor_ptr %45, [%42], [%c1_i64_8], [%c0_i32_10] {order = array<i32: 0>} : <tensor<128xbf16>>
    %47 = tt.load %46 : !tt.ptr<tensor<128xbf16>>
    %48 = arith.extf %47 : tensor<128xbf16> to tensor<128xf32>
    %49 = tt.expand_dims %48 {axis = 0 : i32} : tensor<128xf32> -> tensor<1x128xf32>
    %50 = tt.broadcast %49 : tensor<1x128xf32> -> tensor<1x128xf32>
    %51 = arith.mulf %39, %50 : tensor<1x128xf32>
    %52 = arith.truncf %51 : tensor<1x128xf32> to tensor<1x128xbf16>
    %c1_i64_11 = arith.constant 1 : i64
    %c1024_i64_12 = arith.constant 1024 : i64
    %53 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64_13 = arith.constant 16 : i64
    %54 = arith.index_castui %3 : index to i64
    %55 = arith.subi %c16_i64_13, %54 : i64
    %c1024_i64_14 = arith.constant 1024 : i64
    %56 = arith.index_castui %53 : index to i64
    %57 = arith.subi %c1024_i64_14, %56 : i64
    %58 = xla.apply_indexing #indexing_map3(%3, %4)
    %59 = arith.index_castui %58 : index to i64
    %60 = tt.addptr %arg3, %59 : !tt.ptr<bf16>, i64
    %c0_i32_15 = arith.constant 0 : i32
    %61 = tt.make_tensor_ptr %60, [%55, %57], [%c1024_i64_12, %c1_i64_11], [%c0_i32_15, %c0_i32_15] {order = array<i32: 1, 0>} : <tensor<1x128xbf16>>
    tt.store %61, %52 : !tt.ptr<tensor<1x128xbf16>>
    tt.return
  }
}

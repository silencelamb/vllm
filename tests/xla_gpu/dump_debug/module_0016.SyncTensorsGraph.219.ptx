//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	gemm_fusion_dot_29_0
.visible .entry gemm_fusion_dot_29_0(
	.param .u64 .ptr .align 16 gemm_fusion_dot_29_0_param_0,
	.param .u64 .ptr .align 128 gemm_fusion_dot_29_0_param_1
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<11>;
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<381>;
	.reg .f32 	%f<149>;
	.reg .b64 	%rd<160>;

	ld.param.u64 	%rd47, [gemm_fusion_dot_29_0_param_0];
	ld.param.u64 	%rd48, [gemm_fusion_dot_29_0_param_1];
	cvta.to.global.u64 	%rd1, %rd48;
	cvta.to.global.u64 	%rd49, %rd47;
	// begin inline asm
	mov.u32 %r13, %ctaid.x;
	// end inline asm
	shr.s32 	%r33, %r13, 31;
	shr.u32 	%r34, %r33, 29;
	add.s32 	%r35, %r13, %r34;
	shr.s32 	%r2, %r35, 3;
	and.b32  	%r36, %r35, -8;
	sub.s32 	%r37, 64, %r36;
	min.s32 	%r3, %r37, 8;
	rem.s32 	%r38, %r13, %r3;
	add.s32 	%r39, %r36, %r38;
	shl.b32 	%r40, %r39, 4;
	cvt.s64.s32 	%rd2, %r40;
	mov.u32 	%r4, %tid.x;
	and.b32  	%r5, %r4, 32;
	bfe.s32 	%r41, %r4, 5, 1;
	bfe.u32 	%r42, %r4, 5, 1;
	setp.lt.u32 	%p1, %r4, 64;
	selp.b32 	%r43, 0, 2, %p1;
	or.b32  	%r44, %r42, %r43;
	or.b32  	%r45, %r44, 4;
	or.b32  	%r46, %r44, 8;
	or.b32  	%r47, %r44, 12;
	cvt.u64.u32 	%rd50, %r44;
	cvt.u64.u32 	%rd51, %r45;
	cvt.u64.u32 	%rd52, %r46;
	cvt.u64.u32 	%rd53, %r47;
	or.b64  	%rd54, %rd2, %rd50;
	or.b64  	%rd55, %rd2, %rd51;
	or.b64  	%rd56, %rd2, %rd52;
	or.b64  	%rd57, %rd2, %rd53;
	and.b32  	%r48, %r4, 1;
	neg.s32 	%r49, %r48;
	bfe.s32 	%r50, %r4, 1, 1;
	shl.b32 	%r51, %r4, 3;
	and.b32  	%r52, %r51, 24;
	bfe.s32 	%r53, %r4, 2, 1;
	and.b32  	%r54, %r4, 4;
	shl.b32 	%r55, %r54, 3;
	or.b32  	%r56, %r52, %r55;
	and.b32  	%r57, %r4, 8;
	shl.b32 	%r58, %r57, 3;
	or.b32  	%r59, %r56, %r58;
	and.b32  	%r6, %r4, 16;
	shl.b32 	%r60, %r6, 3;
	or.b32  	%r61, %r59, %r60;
	shl.b64 	%rd58, %rd54, 12;
	mul.wide.u32 	%rd59, %r61, 2;
	add.s64 	%rd60, %rd58, %rd49;
	add.s64 	%rd38, %rd60, %rd59;
	shl.b64 	%rd61, %rd55, 12;
	add.s64 	%rd62, %rd61, %rd49;
	add.s64 	%rd39, %rd62, %rd59;
	shl.b64 	%rd63, %rd56, 12;
	add.s64 	%rd64, %rd63, %rd49;
	add.s64 	%rd40, %rd64, %rd59;
	shl.b64 	%rd65, %rd57, 12;
	add.s64 	%rd66, %rd65, %rd49;
	add.s64 	%rd41, %rd66, %rd59;
	and.b32  	%r62, %r41, 264;
	selp.b32 	%r63, 0, 528, %p1;
	or.b32  	%r64, %r62, %r63;
	xor.b32  	%r65, %r64, %r61;
	cvt.u64.u32 	%rd3, %r65;
	mul.wide.u32 	%rd67, %r65, 2;
	mov.u64 	%rd46, global_smem;
	add.s64 	%rd68, %rd46, %rd67;
	or.b32  	%r66, %r52, 1056;
	xor.b32  	%r67, %r66, %r55;
	or.b32  	%r68, %r58, %r67;
	or.b32  	%r69, %r68, %r60;
	xor.b32  	%r70, %r64, %r69;
	cvt.u64.u32 	%rd4, %r70;
	mul.wide.u32 	%rd69, %r70, 2;
	add.s64 	%rd70, %rd46, %rd69;
	or.b32  	%r71, %r61, 2048;
	xor.b32  	%r72, %r64, %r71;
	cvt.u64.u32 	%rd5, %r72;
	mul.wide.u32 	%rd71, %r72, 2;
	add.s64 	%rd72, %rd46, %rd71;
	or.b32  	%r73, %r52, 3104;
	xor.b32  	%r74, %r73, %r55;
	or.b32  	%r75, %r58, %r74;
	or.b32  	%r76, %r75, %r60;
	xor.b32  	%r77, %r64, %r76;
	cvt.u64.u32 	%rd6, %r77;
	mul.wide.u32 	%rd73, %r77, 2;
	add.s64 	%rd74, %rd46, %rd73;
	cvt.u32.u64 	%r14, %rd68;
	mov.b32 	%r15, 16;
	// begin inline asm
	cp.async.cg.shared.global [ %r14 + 0 ], [ %rd38 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r16, %rd70;
	// begin inline asm
	cp.async.cg.shared.global [ %r16 + 0 ], [ %rd39 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r18, %rd72;
	// begin inline asm
	cp.async.cg.shared.global [ %r18 + 0 ], [ %rd40 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r20, %rd74;
	// begin inline asm
	cp.async.cg.shared.global [ %r20 + 0 ], [ %rd41 + 0 ], 0x10, %r15;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s64 	%rd42, %rd38, 512;
	add.s64 	%rd43, %rd39, 512;
	add.s64 	%rd44, %rd40, 512;
	add.s64 	%rd45, %rd41, 512;
	bar.sync 	0;
	add.s64 	%rd75, %rd46, 8192;
	add.s64 	%rd76, %rd75, %rd67;
	add.s64 	%rd77, %rd75, %rd69;
	add.s64 	%rd78, %rd75, %rd71;
	add.s64 	%rd79, %rd75, %rd73;
	cvt.u32.u64 	%r22, %rd76;
	// begin inline asm
	cp.async.cg.shared.global [ %r22 + 0 ], [ %rd42 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r24, %rd77;
	// begin inline asm
	cp.async.cg.shared.global [ %r24 + 0 ], [ %rd43 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r26, %rd78;
	// begin inline asm
	cp.async.cg.shared.global [ %r26 + 0 ], [ %rd44 + 0 ], 0x10, %r15;
	// end inline asm
	cvt.u32.u64 	%r28, %rd79;
	// begin inline asm
	cp.async.cg.shared.global [ %r28 + 0 ], [ %rd45 + 0 ], 0x10, %r15;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x1;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r78, %r49, 264;
	and.b32  	%r79, %r50, 528;
	or.b32  	%r80, %r78, %r79;
	and.b32  	%r81, %r53, 1056;
	shl.b32 	%r82, %r57, 8;
	or.b32  	%r83, %r81, %r82;
	or.b32  	%r84, %r83, %r80;
	shr.u32 	%r85, %r6, 1;
	xor.b32  	%r86, %r84, %r85;
	cvt.u64.u32 	%rd7, %r86;
	or.b32  	%r87, %r78, 16;
	xor.b32  	%r88, %r87, %r79;
	or.b32  	%r89, %r82, %r88;
	or.b32  	%r90, %r89, %r81;
	xor.b32  	%r91, %r90, %r85;
	cvt.u64.u32 	%rd8, %r91;
	or.b32  	%r92, %r80, 32;
	xor.b32  	%r93, %r92, %r81;
	or.b32  	%r94, %r93, %r82;
	xor.b32  	%r95, %r94, %r85;
	cvt.u64.u32 	%rd9, %r95;
	or.b32  	%r96, %r78, 48;
	or.b32  	%r97, %r81, %r79;
	xor.b32  	%r98, %r97, %r96;
	or.b32  	%r99, %r98, %r82;
	xor.b32  	%r100, %r99, %r85;
	cvt.u64.u32 	%rd10, %r100;
	or.b32  	%r101, %r84, 64;
	xor.b32  	%r102, %r101, %r85;
	cvt.u64.u32 	%rd11, %r102;
	or.b32  	%r103, %r78, 80;
	xor.b32  	%r104, %r103, %r79;
	or.b32  	%r105, %r82, %r104;
	or.b32  	%r106, %r105, %r81;
	xor.b32  	%r107, %r106, %r85;
	cvt.u64.u32 	%rd12, %r107;
	or.b32  	%r108, %r80, 96;
	xor.b32  	%r109, %r108, %r81;
	or.b32  	%r110, %r109, %r82;
	xor.b32  	%r111, %r110, %r85;
	cvt.u64.u32 	%rd13, %r111;
	or.b32  	%r112, %r78, 112;
	xor.b32  	%r113, %r97, %r112;
	or.b32  	%r114, %r113, %r82;
	xor.b32  	%r115, %r114, %r85;
	cvt.u64.u32 	%rd14, %r115;
	or.b32  	%r116, %r84, 128;
	xor.b32  	%r117, %r116, %r85;
	cvt.u64.u32 	%rd15, %r117;
	or.b32  	%r118, %r78, 144;
	xor.b32  	%r119, %r118, %r79;
	or.b32  	%r120, %r82, %r119;
	or.b32  	%r121, %r120, %r81;
	xor.b32  	%r122, %r121, %r85;
	cvt.u64.u32 	%rd16, %r122;
	or.b32  	%r123, %r80, 160;
	xor.b32  	%r124, %r123, %r81;
	or.b32  	%r125, %r124, %r82;
	xor.b32  	%r126, %r125, %r85;
	cvt.u64.u32 	%rd17, %r126;
	or.b32  	%r127, %r78, 176;
	xor.b32  	%r128, %r97, %r127;
	or.b32  	%r129, %r128, %r82;
	xor.b32  	%r130, %r129, %r85;
	cvt.u64.u32 	%rd18, %r130;
	or.b32  	%r131, %r84, 192;
	xor.b32  	%r132, %r131, %r85;
	cvt.u64.u32 	%rd19, %r132;
	or.b32  	%r133, %r78, 208;
	xor.b32  	%r134, %r133, %r79;
	or.b32  	%r135, %r82, %r134;
	or.b32  	%r136, %r135, %r81;
	xor.b32  	%r137, %r136, %r85;
	cvt.u64.u32 	%rd20, %r137;
	or.b32  	%r138, %r80, 224;
	xor.b32  	%r139, %r138, %r81;
	or.b32  	%r140, %r139, %r82;
	xor.b32  	%r141, %r140, %r85;
	cvt.u64.u32 	%rd21, %r141;
	or.b32  	%r142, %r78, 240;
	xor.b32  	%r143, %r97, %r142;
	or.b32  	%r144, %r143, %r82;
	xor.b32  	%r145, %r144, %r85;
	cvt.u64.u32 	%rd22, %r145;
	or.b32  	%r146, %r60, %r58;
	or.b32  	%r147, %r146, %r55;
	or.b32  	%r148, %r147, %r52;
	mul.wide.u32 	%rd23, %r148, 2;
	add.s64 	%rd158, %rd66, 1024;
	add.s64 	%rd157, %rd64, 1024;
	add.s64 	%rd156, %rd62, 1024;
	add.s64 	%rd155, %rd60, 1024;
	mov.f32 	%f145, 0f00000000;
	mov.b32 	%r380, 1;
	mov.b32 	%r233, 0;
	mov.b32 	%r378, -256;
	shl.b64 	%rd84, %rd7, 1;
	shl.b64 	%rd86, %rd8, 1;
	shl.b64 	%rd88, %rd9, 1;
	shl.b64 	%rd90, %rd10, 1;
	shl.b64 	%rd92, %rd11, 1;
	shl.b64 	%rd94, %rd12, 1;
	shl.b64 	%rd96, %rd13, 1;
	shl.b64 	%rd98, %rd14, 1;
	shl.b64 	%rd100, %rd15, 1;
	shl.b64 	%rd102, %rd16, 1;
	shl.b64 	%rd104, %rd17, 1;
	shl.b64 	%rd106, %rd18, 1;
	shl.b64 	%rd108, %rd19, 1;
	shl.b64 	%rd110, %rd20, 1;
	shl.b64 	%rd112, %rd21, 1;
	shl.b64 	%rd114, %rd22, 1;
	shl.b64 	%rd119, %rd3, 1;
	shl.b64 	%rd121, %rd4, 1;
	shl.b64 	%rd123, %rd5, 1;
	shl.b64 	%rd125, %rd6, 1;
	mov.u64 	%rd159, %rd46;
	mov.u32 	%r379, %r233;
	mov.f32 	%f146, %f145;
	mov.f32 	%f147, %f145;
	mov.f32 	%f148, %f145;
$L__BB1_1:
	add.s32 	%r378, %r378, 256;
	setp.lt.u32 	%p2, %r378, 1536;
	add.s64 	%rd85, %rd159, %rd84;
	cvt.u32.u64 	%r153, %rd85;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r149, %r150, %r151, %r152}, [%r153];
	// end inline asm
	add.s64 	%rd87, %rd159, %rd86;
	cvt.u32.u64 	%r158, %rd87;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r154, %r155, %r156, %r157}, [%r158];
	// end inline asm
	add.s64 	%rd89, %rd159, %rd88;
	cvt.u32.u64 	%r163, %rd89;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r159, %r160, %r161, %r162}, [%r163];
	// end inline asm
	add.s64 	%rd91, %rd159, %rd90;
	cvt.u32.u64 	%r168, %rd91;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r164, %r165, %r166, %r167}, [%r168];
	// end inline asm
	add.s64 	%rd93, %rd159, %rd92;
	cvt.u32.u64 	%r173, %rd93;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r169, %r170, %r171, %r172}, [%r173];
	// end inline asm
	add.s64 	%rd95, %rd159, %rd94;
	cvt.u32.u64 	%r178, %rd95;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r174, %r175, %r176, %r177}, [%r178];
	// end inline asm
	add.s64 	%rd97, %rd159, %rd96;
	cvt.u32.u64 	%r183, %rd97;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r179, %r180, %r181, %r182}, [%r183];
	// end inline asm
	add.s64 	%rd99, %rd159, %rd98;
	cvt.u32.u64 	%r188, %rd99;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r184, %r185, %r186, %r187}, [%r188];
	// end inline asm
	add.s64 	%rd101, %rd159, %rd100;
	cvt.u32.u64 	%r193, %rd101;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r189, %r190, %r191, %r192}, [%r193];
	// end inline asm
	add.s64 	%rd103, %rd159, %rd102;
	cvt.u32.u64 	%r198, %rd103;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r194, %r195, %r196, %r197}, [%r198];
	// end inline asm
	add.s64 	%rd105, %rd159, %rd104;
	cvt.u32.u64 	%r203, %rd105;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r199, %r200, %r201, %r202}, [%r203];
	// end inline asm
	add.s64 	%rd107, %rd159, %rd106;
	cvt.u32.u64 	%r208, %rd107;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r204, %r205, %r206, %r207}, [%r208];
	// end inline asm
	add.s64 	%rd109, %rd159, %rd108;
	cvt.u32.u64 	%r213, %rd109;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r209, %r210, %r211, %r212}, [%r213];
	// end inline asm
	add.s64 	%rd111, %rd159, %rd110;
	cvt.u32.u64 	%r218, %rd111;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r214, %r215, %r216, %r217}, [%r218];
	// end inline asm
	add.s64 	%rd113, %rd159, %rd112;
	cvt.u32.u64 	%r223, %rd113;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r219, %r220, %r221, %r222}, [%r223];
	// end inline asm
	add.s64 	%rd115, %rd159, %rd114;
	cvt.u32.u64 	%r228, %rd115;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r224, %r225, %r226, %r227}, [%r228];
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r149, %r150, %r151, %r152 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r154, %r155, %r156, %r157 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r159, %r160, %r161, %r162 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r164, %r165, %r166, %r167 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r169, %r170, %r171, %r172 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r174, %r175, %r176, %r177 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r179, %r180, %r181, %r182 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r184, %r185, %r186, %r187 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r189, %r190, %r191, %r192 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r194, %r195, %r196, %r197 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r199, %r200, %r201, %r202 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r204, %r205, %r206, %r207 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r209, %r210, %r211, %r212 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r214, %r215, %r216, %r217 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r219, %r220, %r221, %r222 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r224, %r225, %r226, %r227 }, { %r233, %r233 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	add.s32 	%r333, %r380, 1;
	setp.lt.s32 	%p3, %r333, 2;
	selp.b32 	%r380, %r333, 0, %p3;
	add.s64 	%rd80, %rd155, %rd23;
	add.s64 	%rd81, %rd156, %rd23;
	add.s64 	%rd82, %rd157, %rd23;
	add.s64 	%rd83, %rd158, %rd23;
	shl.b32 	%r334, %r380, 12;
	mul.wide.s32 	%rd116, %r334, 2;
	add.s64 	%rd118, %rd46, %rd116;
	bar.sync 	0;
	add.s64 	%rd120, %rd118, %rd119;
	add.s64 	%rd122, %rd118, %rd121;
	add.s64 	%rd124, %rd118, %rd123;
	add.s64 	%rd126, %rd118, %rd125;
	selp.b32 	%r326, 16, 0, %p2;
	cvt.u32.u64 	%r325, %rd120;
	// begin inline asm
	cp.async.cg.shared.global [ %r325 + 0 ], [ %rd80 + 0 ], 0x10, %r326;
	// end inline asm
	cvt.u32.u64 	%r327, %rd122;
	// begin inline asm
	cp.async.cg.shared.global [ %r327 + 0 ], [ %rd81 + 0 ], 0x10, %r326;
	// end inline asm
	cvt.u32.u64 	%r329, %rd124;
	// begin inline asm
	cp.async.cg.shared.global [ %r329 + 0 ], [ %rd82 + 0 ], 0x10, %r326;
	// end inline asm
	cvt.u32.u64 	%r331, %rd126;
	// begin inline asm
	cp.async.cg.shared.global [ %r331 + 0 ], [ %rd83 + 0 ], 0x10, %r326;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s32 	%r335, %r379, 1;
	setp.lt.s32 	%p4, %r335, 2;
	selp.b32 	%r379, %r335, 0, %p4;
	// begin inline asm
	cp.async.wait_group 0x1;
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r336, %r379, 12;
	mul.wide.s32 	%rd127, %r336, 2;
	add.s64 	%rd159, %rd46, %rd127;
	add.s64 	%rd158, %rd158, 512;
	add.s64 	%rd157, %rd157, 512;
	add.s64 	%rd156, %rd156, 512;
	add.s64 	%rd155, %rd155, 512;
	setp.lt.u32 	%p5, %r378, 1792;
	@%p5 bra 	$L__BB1_1;
	shl.b32 	%r346, %r2, 3;
	sub.s32 	%r347, %r13, %r346;
	div.s32 	%r348, %r347, %r3;
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	mov.b32 	%r337, %f145;
	// begin inline asm
	cvt.rn.bf16.f32 %rs5, %r337;
	// end inline asm
	mov.b32 	%r338, %f146;
	// begin inline asm
	cvt.rn.bf16.f32 %rs6, %r338;
	// end inline asm
	mov.b32 	%r339, %f147;
	// begin inline asm
	cvt.rn.bf16.f32 %rs7, %r339;
	// end inline asm
	mov.b32 	%r340, %f148;
	// begin inline asm
	cvt.rn.bf16.f32 %rs8, %r340;
	// end inline asm
	shl.b32 	%r349, %r348, 4;
	cvt.s64.s32 	%rd129, %r349;
	shl.b32 	%r350, %r4, 1;
	and.b32  	%r351, %r350, 14;
	bfe.u32 	%r352, %r4, 3, 3;
	selp.b32 	%r353, 0, 8, %p1;
	or.b32  	%r354, %r352, %r353;
	cvt.u64.u32 	%rd130, %r351;
	cvt.u64.u32 	%rd131, %r354;
	or.b64  	%rd132, %rd2, %rd130;
	or.b64  	%rd133, %rd129, %rd131;
	shl.b64 	%rd134, %rd132, 1;
	add.s64 	%rd135, %rd1, %rd134;
	shl.b64 	%rd136, %rd133, 11;
	add.s64 	%rd128, %rd135, %rd136;
	shl.b32 	%r355, %r4, 5;
	shr.u32 	%r356, %r4, 2;
	or.b32  	%r357, %r356, %r355;
	and.b32  	%r358, %r357, 99;
	shr.u32 	%r359, %r6, 2;
	or.b32  	%r360, %r358, %r359;
	shl.b32 	%r361, %r5, 2;
	or.b32  	%r362, %r360, %r361;
	and.b32  	%r363, %r350, 126;
	selp.b32 	%r364, 0, 128, %p1;
	or.b32  	%r365, %r363, %r364;
	shr.u32 	%r366, %r362, 3;
	add.s32 	%r367, %r366, %r362;
	shl.b32 	%r368, %r367, 1;
	cvt.u64.u32 	%rd137, %r368;
	mov.u64 	%rd138, global_smem;
	add.s64 	%rd139, %rd138, %rd137;
	cvt.u32.u64 	%r341, %rd139;
	mov.pred 	%p6, -1;
	// begin inline asm
	@%p6 st.shared.b16 [ %r341 + 0 ], %rs5;
	// end inline asm
	or.b32  	%r369, %r362, 16;
	shr.u32 	%r370, %r369, 3;
	cvt.u64.u32 	%rd140, %r370;
	cvt.u64.u32 	%rd141, %r362;
	add.s64 	%rd142, %rd140, %rd141;
	shl.b64 	%rd143, %rd142, 1;
	add.s64 	%rd144, %rd138, %rd143;
	cvt.u32.u64 	%r371, %rd144;
	add.s32 	%r342, %r371, 32;
	// begin inline asm
	@%p6 st.shared.b16 [ %r342 + 0 ], %rs6;
	// end inline asm
	cvt.u64.u32 	%rd145, %r366;
	add.s64 	%rd146, %rd141, %rd145;
	shl.b64 	%rd147, %rd146, 1;
	add.s64 	%rd148, %rd138, %rd147;
	cvt.u32.u64 	%r372, %rd148;
	add.s32 	%r343, %r372, 16;
	// begin inline asm
	@%p6 st.shared.b16 [ %r343 + 0 ], %rs7;
	// end inline asm
	and.b32  	%r373, %r370, 30;
	cvt.u64.u32 	%rd149, %r373;
	add.s64 	%rd150, %rd149, %rd141;
	shl.b64 	%rd151, %rd150, 1;
	add.s64 	%rd152, %rd138, %rd151;
	cvt.u32.u64 	%r374, %rd152;
	add.s32 	%r344, %r374, 48;
	// begin inline asm
	@%p6 st.shared.b16 [ %r344 + 0 ], %rs8;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r375, %r365, 3;
	and.b32  	%r376, %r375, 30;
	add.s32 	%r377, %r376, %r365;
	mul.wide.u32 	%rd153, %r377, 2;
	add.s64 	%rd154, %rd138, %rd153;
	ld.shared.u32 	%r345, [%rd154];
	// begin inline asm
	st.global.b32 [ %rd128 + 0 ], { %r345 };
	// end inline asm
	ret;

}
	// .globl	fusion_23
.visible .entry fusion_23(
	.param .u64 .ptr .align 16 fusion_23_param_0,
	.param .u64 .ptr .align 128 fusion_23_param_1,
	.param .u64 .ptr .align 128 fusion_23_param_2,
	.param .u64 .ptr .align 16 fusion_23_param_3,
	.param .u64 .ptr .align 128 fusion_23_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<49>;
	.reg .b32 	%r<104>;
	.reg .f32 	%f<122>;
	.reg .b64 	%rd<36>;

	ld.param.u64 	%rd10, [fusion_23_param_0];
	ld.param.u64 	%rd11, [fusion_23_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_23_param_1];
	ld.param.u64 	%rd14, [fusion_23_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_23_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd7, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd19, %r1, 256;
	shl.b64 	%rd20, %rd19, 1;
	add.s64 	%rd21, %rd17, %rd20;
	mov.u32 	%r81, %tid.x;
	and.b32  	%r82, %r81, 31;
	shl.b32 	%r83, %r81, 2;
	and.b32  	%r84, %r83, 124;
	setp.lt.u32 	%p4, %r81, 32;
	selp.b32 	%r85, 0, 128, %p4;
	or.b32  	%r86, %r84, %r85;
	mul.wide.u32 	%rd22, %r86, 2;
	add.s64 	%rd1, %rd21, %rd22;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	add.s64 	%rd23, %rd18, %rd20;
	add.s64 	%rd2, %rd23, %rd22;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.rn.f32 	%f9, %f1, %f5;
	add.rn.f32 	%f10, %f2, %f6;
	add.rn.f32 	%f11, %f3, %f7;
	add.rn.f32 	%f12, %f4, %f8;
	and.b64  	%rd24, %rd20, -2048;
	add.s64 	%rd25, %rd17, %rd24;
	shl.b32 	%r87, %r81, 3;
	and.b32  	%r88, %r87, 248;
	selp.b32 	%r89, 0, 256, %p4;
	or.b32  	%r90, %r88, %r89;
	mul.wide.u32 	%rd26, %r90, 2;
	add.s64 	%rd3, %rd25, %rd26;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	ld.global.v4.b32 { %r14, %r15, %r16, %r17 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	mov.b32 	{%rs13, %rs14}, %r16;
	mov.b32 	{%rs15, %rs16}, %r17;
	// begin inline asm
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v4.b32 { %r18, %r19, %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r18;
	mov.b32 	{%rs19, %rs20}, %r19;
	mov.b32 	{%rs21, %rs22}, %r20;
	mov.b32 	{%rs23, %rs24}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs9;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs10;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs11;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs12;
	// end inline asm
	mov.b32 	%f16, %r25;
	// begin inline asm
	cvt.f32.bf16 %r26, %rs13;
	// end inline asm
	mov.b32 	%f17, %r26;
	// begin inline asm
	cvt.f32.bf16 %r27, %rs14;
	// end inline asm
	mov.b32 	%f18, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs15;
	// end inline asm
	mov.b32 	%f19, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs16;
	// end inline asm
	mov.b32 	%f20, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs17;
	// end inline asm
	mov.b32 	%f21, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs18;
	// end inline asm
	mov.b32 	%f22, %r31;
	// begin inline asm
	cvt.f32.bf16 %r32, %rs19;
	// end inline asm
	mov.b32 	%f23, %r32;
	// begin inline asm
	cvt.f32.bf16 %r33, %rs20;
	// end inline asm
	mov.b32 	%f24, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs21;
	// end inline asm
	mov.b32 	%f25, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs22;
	// end inline asm
	mov.b32 	%f26, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs23;
	// end inline asm
	mov.b32 	%f27, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs24;
	// end inline asm
	mov.b32 	%f28, %r37;
	add.s64 	%rd27, %rd18, %rd24;
	add.s64 	%rd5, %rd27, %rd26;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	mov.u32 %r41, 0x0;
	ld.global.v4.b32 { %r38, %r39, %r40, %r41 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r38;
	mov.b32 	{%rs27, %rs28}, %r39;
	mov.b32 	{%rs29, %rs30}, %r40;
	mov.b32 	{%rs31, %rs32}, %r41;
	// begin inline asm
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	mov.u32 %r45, 0x0;
	ld.global.v4.b32 { %r42, %r43, %r44, %r45 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r42;
	mov.b32 	{%rs35, %rs36}, %r43;
	mov.b32 	{%rs37, %rs38}, %r44;
	mov.b32 	{%rs39, %rs40}, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs25;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs26;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs27;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs28;
	// end inline asm
	mov.b32 	%f32, %r49;
	// begin inline asm
	cvt.f32.bf16 %r50, %rs29;
	// end inline asm
	mov.b32 	%f33, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs30;
	// end inline asm
	mov.b32 	%f34, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs31;
	// end inline asm
	mov.b32 	%f35, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs32;
	// end inline asm
	mov.b32 	%f36, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs33;
	// end inline asm
	mov.b32 	%f37, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs34;
	// end inline asm
	mov.b32 	%f38, %r55;
	// begin inline asm
	cvt.f32.bf16 %r56, %rs35;
	// end inline asm
	mov.b32 	%f39, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs36;
	// end inline asm
	mov.b32 	%f40, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs37;
	// end inline asm
	mov.b32 	%f41, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs38;
	// end inline asm
	mov.b32 	%f42, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs39;
	// end inline asm
	mov.b32 	%f43, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs40;
	// end inline asm
	mov.b32 	%f44, %r61;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	add.rn.f32 	%f49, %f17, %f33;
	add.rn.f32 	%f50, %f18, %f34;
	add.rn.f32 	%f51, %f19, %f35;
	add.rn.f32 	%f52, %f20, %f36;
	add.rn.f32 	%f53, %f21, %f37;
	add.rn.f32 	%f54, %f22, %f38;
	add.rn.f32 	%f55, %f23, %f39;
	add.rn.f32 	%f56, %f24, %f40;
	add.rn.f32 	%f57, %f25, %f41;
	add.rn.f32 	%f58, %f26, %f42;
	add.rn.f32 	%f59, %f27, %f43;
	add.rn.f32 	%f60, %f28, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	mul.rn.f32 	%f65, %f49, %f49;
	mul.rn.f32 	%f66, %f50, %f50;
	mul.rn.f32 	%f67, %f51, %f51;
	mul.rn.f32 	%f68, %f52, %f52;
	mul.rn.f32 	%f69, %f53, %f53;
	mul.rn.f32 	%f70, %f54, %f54;
	mul.rn.f32 	%f71, %f55, %f55;
	mul.rn.f32 	%f72, %f56, %f56;
	mul.rn.f32 	%f73, %f57, %f57;
	mul.rn.f32 	%f74, %f58, %f58;
	mul.rn.f32 	%f75, %f59, %f59;
	mul.rn.f32 	%f76, %f60, %f60;
	add.rn.f32 	%f77, %f61, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	add.rn.f32 	%f80, %f79, %f65;
	add.rn.f32 	%f81, %f80, %f66;
	add.rn.f32 	%f82, %f81, %f67;
	add.rn.f32 	%f83, %f82, %f68;
	add.rn.f32 	%f84, %f83, %f69;
	add.rn.f32 	%f85, %f84, %f70;
	add.rn.f32 	%f86, %f85, %f71;
	add.rn.f32 	%f87, %f86, %f72;
	add.rn.f32 	%f88, %f87, %f73;
	add.rn.f32 	%f89, %f88, %f74;
	add.rn.f32 	%f90, %f89, %f75;
	add.rn.f32 	%f91, %f90, %f76;
	mov.b32 	%r91, %f91;
	shfl.sync.bfly.b32	%r92, %r91, 16, 31, -1;
	mov.b32 	%f92, %r92;
	add.rn.f32 	%f93, %f91, %f92;
	mov.b32 	%r93, %f93;
	shfl.sync.bfly.b32	%r94, %r93, 8, 31, -1;
	mov.b32 	%f94, %r94;
	add.rn.f32 	%f95, %f93, %f94;
	mov.b32 	%r95, %f95;
	shfl.sync.bfly.b32	%r96, %r95, 4, 31, -1;
	mov.b32 	%f96, %r96;
	add.rn.f32 	%f97, %f95, %f96;
	mov.b32 	%r97, %f97;
	shfl.sync.bfly.b32	%r98, %r97, 2, 31, -1;
	mov.b32 	%f98, %r98;
	add.rn.f32 	%f99, %f97, %f98;
	mov.b32 	%r99, %f99;
	shfl.sync.bfly.b32	%r100, %r99, 1, 31, -1;
	mov.b32 	%f100, %r100;
	add.rn.f32 	%f101, %f99, %f100;
	setp.eq.s32 	%p1, %r82, 0;
	shr.u32 	%r101, %r81, 3;
	and.b32  	%r102, %r101, 4;
	cvt.u64.u32 	%rd28, %r102;
	mov.u64 	%rd29, global_smem;
	add.s64 	%rd30, %rd29, %rd28;
	mov.b32 	%r63, %f101;
	cvt.u32.u64 	%r62, %rd30;
	// begin inline asm
	@%p1 st.shared.b32 [ %r62 + 0 ], %r63;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r81, 2;
	cvt.u64.u32 	%rd31, %r83;
	add.s64 	%rd32, %rd29, %rd31;
	cvt.u32.u64 	%r65, %rd32;
	// begin inline asm
	@%p2 ld.shared.b32 %r64, [ %r65 + 0 ];
	// end inline asm
	mov.b32 	%f102, %r64;
	shfl.sync.bfly.b32	%r103, %r64, 1, 31, -1;
	mov.b32 	%f103, %r103;
	add.rn.f32 	%f104, %f102, %f103;
	setp.eq.s32 	%p3, %r81, 0;
	mov.b32 	%r67, %f104;
	// begin inline asm
	@%p3 st.shared.b32 [ %r65 + 0 ], %r67;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f105, [global_smem];
	mul.rn.f32 	%f106, %f105, 0f3A800000;
	// begin inline asm
	mov.u32 %r68, 0x0;
	ld.global.b32 { %r68 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f107, %r68;
	add.rn.f32 	%f108, %f106, %f107;
	rsqrt.approx.f32 	%f109, %f108;
	mul.rn.f32 	%f110, %f9, %f109;
	mul.rn.f32 	%f111, %f10, %f109;
	mul.rn.f32 	%f112, %f11, %f109;
	mul.rn.f32 	%f113, %f12, %f109;
	and.b64  	%rd33, %rd20, 1536;
	add.s64 	%rd34, %rd15, %rd33;
	add.s64 	%rd8, %rd34, %rd22;
	// begin inline asm
	mov.u32 %r69, 0x0;
	mov.u32 %r70, 0x0;
	ld.global.v2.b32 { %r69, %r70 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r69;
	mov.b32 	{%rs43, %rs44}, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs41;
	// end inline asm
	mov.b32 	%f114, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs42;
	// end inline asm
	mov.b32 	%f115, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs43;
	// end inline asm
	mov.b32 	%f116, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs44;
	// end inline asm
	mov.b32 	%f117, %r74;
	mul.rn.f32 	%f118, %f110, %f114;
	mul.rn.f32 	%f119, %f111, %f115;
	mul.rn.f32 	%f120, %f112, %f116;
	mul.rn.f32 	%f121, %f113, %f117;
	mov.b32 	%r75, %f118;
	// begin inline asm
	cvt.rn.bf16.f32 %rs45, %r75;
	// end inline asm
	mov.b32 	%r76, %f119;
	// begin inline asm
	cvt.rn.bf16.f32 %rs46, %r76;
	// end inline asm
	mov.b32 	%r77, %f120;
	// begin inline asm
	cvt.rn.bf16.f32 %rs47, %r77;
	// end inline asm
	mov.b32 	%r78, %f121;
	// begin inline asm
	cvt.rn.bf16.f32 %rs48, %r78;
	// end inline asm
	add.s64 	%rd35, %rd12, %rd20;
	add.s64 	%rd9, %rd35, %rd22;
	mov.b32 	%r79, {%rs45, %rs46};
	mov.b32 	%r80, {%rs47, %rs48};
	// begin inline asm
	st.global.v2.b32 [ %rd9 + 0 ], { %r79, %r80 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion
.visible .entry loop_convert_fusion(
	.param .u64 .ptr .align 128 loop_convert_fusion_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 4;
	mul.lo.s16 	%rs4, %rs3, 24;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 7;
	cvt.u32.u16 	%r3, %rs6;
	or.b32  	%r4, %r1, %r3;
	mul.wide.u16 	%r5, %rs3, 6144;
	add.s32 	%r6, %r4, %r5;
	mul.wide.u32 	%rd5, %r6, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs7, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	mul.rn.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.f32 	%f3, %f2;
	cvt.rn.bf16.f32 	%rs8, %f3;
	cvt.f32.bf16 	%f4, %rs8;
	add.rn.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.f32 	%f6, %f5;
	ld.global.nc.u16 	%rs9, [%rd6+6144];
	mul.rn.f32 	%f7, %f6, %f1;
	cvt.f32.bf16 	%f8, %rs9;
	mul.rn.f32 	%f9, %f7, %f8;
	cvt.rn.bf16.f32 	%rs10, %f9;
	shl.b32 	%r7, %r2, 7;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd7, %r8, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs10;
	ret;

}
	// .globl	fusion_21
.visible .entry fusion_21(
	.param .u64 .ptr .align 16 fusion_21_param_0,
	.param .u64 .ptr .align 16 fusion_21_param_1,
	.param .u64 .ptr .align 128 fusion_21_param_2,
	.param .u64 .ptr .align 128 fusion_21_param_3,
	.param .u64 .ptr .align 128 fusion_21_param_4,
	.param .u64 .ptr .align 128 fusion_21_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<69>;
	.reg .b32 	%r<134>;
	.reg .f32 	%f<162>;
	.reg .b64 	%rd<43>;

	ld.param.u64 	%rd13, [fusion_21_param_0];
	ld.param.u64 	%rd14, [fusion_21_param_5];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_21_param_1];
	ld.param.u64 	%rd17, [fusion_21_param_4];
	cvta.to.global.u64 	%rd18, %rd17;
	ld.param.u64 	%rd19, [fusion_21_param_2];
	ld.param.u64 	%rd20, [fusion_21_param_3];
	cvta.to.global.u64 	%rd21, %rd20;
	cvta.to.global.u64 	%rd22, %rd19;
	cvta.to.global.u64 	%rd23, %rd16;
	cvta.to.global.u64 	%rd10, %rd13;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd24, %r1, 256;
	shl.b64 	%rd25, %rd24, 1;
	add.s64 	%rd26, %rd18, %rd25;
	mov.u32 	%r111, %tid.x;
	and.b32  	%r112, %r111, 31;
	shl.b32 	%r113, %r111, 2;
	and.b32  	%r114, %r113, 124;
	setp.lt.u32 	%p4, %r111, 32;
	selp.b32 	%r115, 0, 128, %p4;
	or.b32  	%r116, %r114, %r115;
	mul.wide.u32 	%rd27, %r116, 2;
	add.s64 	%rd1, %rd26, %rd27;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	add.s64 	%rd28, %rd21, %rd25;
	add.s64 	%rd2, %rd28, %rd27;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.s64 	%rd29, %rd22, %rd25;
	add.s64 	%rd3, %rd29, %rd27;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	ld.global.v2.b32 { %r14, %r15 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs9;
	// end inline asm
	mov.b32 	%f9, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs10;
	// end inline asm
	mov.b32 	%f10, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs11;
	// end inline asm
	mov.b32 	%f11, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs12;
	// end inline asm
	mov.b32 	%f12, %r19;
	add.rn.f32 	%f13, %f5, %f9;
	add.rn.f32 	%f14, %f6, %f10;
	add.rn.f32 	%f15, %f7, %f11;
	add.rn.f32 	%f16, %f8, %f12;
	add.rn.f32 	%f17, %f1, %f13;
	add.rn.f32 	%f18, %f2, %f14;
	add.rn.f32 	%f19, %f3, %f15;
	add.rn.f32 	%f20, %f4, %f16;
	and.b64  	%rd30, %rd25, -2048;
	add.s64 	%rd31, %rd18, %rd30;
	shl.b32 	%r117, %r111, 3;
	and.b32  	%r118, %r117, 248;
	selp.b32 	%r119, 0, 256, %p4;
	or.b32  	%r120, %r118, %r119;
	mul.wide.u32 	%rd32, %r120, 2;
	add.s64 	%rd4, %rd31, %rd32;
	add.s64 	%rd5, %rd4, 1024;
	// begin inline asm
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	mov.u32 %r22, 0x0;
	mov.u32 %r23, 0x0;
	ld.global.v4.b32 { %r20, %r21, %r22, %r23 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs13, %rs14}, %r20;
	mov.b32 	{%rs15, %rs16}, %r21;
	mov.b32 	{%rs17, %rs18}, %r22;
	mov.b32 	{%rs19, %rs20}, %r23;
	// begin inline asm
	mov.u32 %r24, 0x0;
	mov.u32 %r25, 0x0;
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	ld.global.v4.b32 { %r24, %r25, %r26, %r27 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs21, %rs22}, %r24;
	mov.b32 	{%rs23, %rs24}, %r25;
	mov.b32 	{%rs25, %rs26}, %r26;
	mov.b32 	{%rs27, %rs28}, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs13;
	// end inline asm
	mov.b32 	%f21, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs14;
	// end inline asm
	mov.b32 	%f22, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs15;
	// end inline asm
	mov.b32 	%f23, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs16;
	// end inline asm
	mov.b32 	%f24, %r31;
	// begin inline asm
	cvt.f32.bf16 %r32, %rs17;
	// end inline asm
	mov.b32 	%f25, %r32;
	// begin inline asm
	cvt.f32.bf16 %r33, %rs18;
	// end inline asm
	mov.b32 	%f26, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs19;
	// end inline asm
	mov.b32 	%f27, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs20;
	// end inline asm
	mov.b32 	%f28, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs21;
	// end inline asm
	mov.b32 	%f29, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs22;
	// end inline asm
	mov.b32 	%f30, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs23;
	// end inline asm
	mov.b32 	%f31, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs24;
	// end inline asm
	mov.b32 	%f32, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs25;
	// end inline asm
	mov.b32 	%f33, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs26;
	// end inline asm
	mov.b32 	%f34, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs27;
	// end inline asm
	mov.b32 	%f35, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs28;
	// end inline asm
	mov.b32 	%f36, %r43;
	add.s64 	%rd33, %rd21, %rd30;
	add.s64 	%rd6, %rd33, %rd32;
	add.s64 	%rd7, %rd6, 1024;
	// begin inline asm
	mov.u32 %r44, 0x0;
	mov.u32 %r45, 0x0;
	mov.u32 %r46, 0x0;
	mov.u32 %r47, 0x0;
	ld.global.v4.b32 { %r44, %r45, %r46, %r47 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs29, %rs30}, %r44;
	mov.b32 	{%rs31, %rs32}, %r45;
	mov.b32 	{%rs33, %rs34}, %r46;
	mov.b32 	{%rs35, %rs36}, %r47;
	// begin inline asm
	mov.u32 %r48, 0x0;
	mov.u32 %r49, 0x0;
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	ld.global.v4.b32 { %r48, %r49, %r50, %r51 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs37, %rs38}, %r48;
	mov.b32 	{%rs39, %rs40}, %r49;
	mov.b32 	{%rs41, %rs42}, %r50;
	mov.b32 	{%rs43, %rs44}, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs29;
	// end inline asm
	mov.b32 	%f37, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs30;
	// end inline asm
	mov.b32 	%f38, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs31;
	// end inline asm
	mov.b32 	%f39, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs32;
	// end inline asm
	mov.b32 	%f40, %r55;
	// begin inline asm
	cvt.f32.bf16 %r56, %rs33;
	// end inline asm
	mov.b32 	%f41, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs34;
	// end inline asm
	mov.b32 	%f42, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs35;
	// end inline asm
	mov.b32 	%f43, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs36;
	// end inline asm
	mov.b32 	%f44, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs37;
	// end inline asm
	mov.b32 	%f45, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs38;
	// end inline asm
	mov.b32 	%f46, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs39;
	// end inline asm
	mov.b32 	%f47, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs40;
	// end inline asm
	mov.b32 	%f48, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs41;
	// end inline asm
	mov.b32 	%f49, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs42;
	// end inline asm
	mov.b32 	%f50, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs43;
	// end inline asm
	mov.b32 	%f51, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs44;
	// end inline asm
	mov.b32 	%f52, %r67;
	add.s64 	%rd34, %rd22, %rd30;
	add.s64 	%rd8, %rd34, %rd32;
	add.s64 	%rd9, %rd8, 1024;
	// begin inline asm
	mov.u32 %r68, 0x0;
	mov.u32 %r69, 0x0;
	mov.u32 %r70, 0x0;
	mov.u32 %r71, 0x0;
	ld.global.v4.b32 { %r68, %r69, %r70, %r71 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs45, %rs46}, %r68;
	mov.b32 	{%rs47, %rs48}, %r69;
	mov.b32 	{%rs49, %rs50}, %r70;
	mov.b32 	{%rs51, %rs52}, %r71;
	// begin inline asm
	mov.u32 %r72, 0x0;
	mov.u32 %r73, 0x0;
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	ld.global.v4.b32 { %r72, %r73, %r74, %r75 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs53, %rs54}, %r72;
	mov.b32 	{%rs55, %rs56}, %r73;
	mov.b32 	{%rs57, %rs58}, %r74;
	mov.b32 	{%rs59, %rs60}, %r75;
	// begin inline asm
	cvt.f32.bf16 %r76, %rs45;
	// end inline asm
	mov.b32 	%f53, %r76;
	// begin inline asm
	cvt.f32.bf16 %r77, %rs46;
	// end inline asm
	mov.b32 	%f54, %r77;
	// begin inline asm
	cvt.f32.bf16 %r78, %rs47;
	// end inline asm
	mov.b32 	%f55, %r78;
	// begin inline asm
	cvt.f32.bf16 %r79, %rs48;
	// end inline asm
	mov.b32 	%f56, %r79;
	// begin inline asm
	cvt.f32.bf16 %r80, %rs49;
	// end inline asm
	mov.b32 	%f57, %r80;
	// begin inline asm
	cvt.f32.bf16 %r81, %rs50;
	// end inline asm
	mov.b32 	%f58, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs51;
	// end inline asm
	mov.b32 	%f59, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs52;
	// end inline asm
	mov.b32 	%f60, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs53;
	// end inline asm
	mov.b32 	%f61, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs54;
	// end inline asm
	mov.b32 	%f62, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs55;
	// end inline asm
	mov.b32 	%f63, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs56;
	// end inline asm
	mov.b32 	%f64, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs57;
	// end inline asm
	mov.b32 	%f65, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs58;
	// end inline asm
	mov.b32 	%f66, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs59;
	// end inline asm
	mov.b32 	%f67, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs60;
	// end inline asm
	mov.b32 	%f68, %r91;
	add.rn.f32 	%f69, %f37, %f53;
	add.rn.f32 	%f70, %f38, %f54;
	add.rn.f32 	%f71, %f39, %f55;
	add.rn.f32 	%f72, %f40, %f56;
	add.rn.f32 	%f73, %f41, %f57;
	add.rn.f32 	%f74, %f42, %f58;
	add.rn.f32 	%f75, %f43, %f59;
	add.rn.f32 	%f76, %f44, %f60;
	add.rn.f32 	%f77, %f45, %f61;
	add.rn.f32 	%f78, %f46, %f62;
	add.rn.f32 	%f79, %f47, %f63;
	add.rn.f32 	%f80, %f48, %f64;
	add.rn.f32 	%f81, %f49, %f65;
	add.rn.f32 	%f82, %f50, %f66;
	add.rn.f32 	%f83, %f51, %f67;
	add.rn.f32 	%f84, %f52, %f68;
	add.rn.f32 	%f85, %f21, %f69;
	add.rn.f32 	%f86, %f22, %f70;
	add.rn.f32 	%f87, %f23, %f71;
	add.rn.f32 	%f88, %f24, %f72;
	add.rn.f32 	%f89, %f25, %f73;
	add.rn.f32 	%f90, %f26, %f74;
	add.rn.f32 	%f91, %f27, %f75;
	add.rn.f32 	%f92, %f28, %f76;
	add.rn.f32 	%f93, %f29, %f77;
	add.rn.f32 	%f94, %f30, %f78;
	add.rn.f32 	%f95, %f31, %f79;
	add.rn.f32 	%f96, %f32, %f80;
	add.rn.f32 	%f97, %f33, %f81;
	add.rn.f32 	%f98, %f34, %f82;
	add.rn.f32 	%f99, %f35, %f83;
	add.rn.f32 	%f100, %f36, %f84;
	mul.rn.f32 	%f101, %f85, %f85;
	mul.rn.f32 	%f102, %f86, %f86;
	mul.rn.f32 	%f103, %f87, %f87;
	mul.rn.f32 	%f104, %f88, %f88;
	mul.rn.f32 	%f105, %f89, %f89;
	mul.rn.f32 	%f106, %f90, %f90;
	mul.rn.f32 	%f107, %f91, %f91;
	mul.rn.f32 	%f108, %f92, %f92;
	mul.rn.f32 	%f109, %f93, %f93;
	mul.rn.f32 	%f110, %f94, %f94;
	mul.rn.f32 	%f111, %f95, %f95;
	mul.rn.f32 	%f112, %f96, %f96;
	mul.rn.f32 	%f113, %f97, %f97;
	mul.rn.f32 	%f114, %f98, %f98;
	mul.rn.f32 	%f115, %f99, %f99;
	mul.rn.f32 	%f116, %f100, %f100;
	add.rn.f32 	%f117, %f101, %f102;
	add.rn.f32 	%f118, %f117, %f103;
	add.rn.f32 	%f119, %f118, %f104;
	add.rn.f32 	%f120, %f119, %f105;
	add.rn.f32 	%f121, %f120, %f106;
	add.rn.f32 	%f122, %f121, %f107;
	add.rn.f32 	%f123, %f122, %f108;
	add.rn.f32 	%f124, %f123, %f109;
	add.rn.f32 	%f125, %f124, %f110;
	add.rn.f32 	%f126, %f125, %f111;
	add.rn.f32 	%f127, %f126, %f112;
	add.rn.f32 	%f128, %f127, %f113;
	add.rn.f32 	%f129, %f128, %f114;
	add.rn.f32 	%f130, %f129, %f115;
	add.rn.f32 	%f131, %f130, %f116;
	mov.b32 	%r121, %f131;
	shfl.sync.bfly.b32	%r122, %r121, 16, 31, -1;
	mov.b32 	%f132, %r122;
	add.rn.f32 	%f133, %f131, %f132;
	mov.b32 	%r123, %f133;
	shfl.sync.bfly.b32	%r124, %r123, 8, 31, -1;
	mov.b32 	%f134, %r124;
	add.rn.f32 	%f135, %f133, %f134;
	mov.b32 	%r125, %f135;
	shfl.sync.bfly.b32	%r126, %r125, 4, 31, -1;
	mov.b32 	%f136, %r126;
	add.rn.f32 	%f137, %f135, %f136;
	mov.b32 	%r127, %f137;
	shfl.sync.bfly.b32	%r128, %r127, 2, 31, -1;
	mov.b32 	%f138, %r128;
	add.rn.f32 	%f139, %f137, %f138;
	mov.b32 	%r129, %f139;
	shfl.sync.bfly.b32	%r130, %r129, 1, 31, -1;
	mov.b32 	%f140, %r130;
	add.rn.f32 	%f141, %f139, %f140;
	setp.eq.s32 	%p1, %r112, 0;
	shr.u32 	%r131, %r111, 3;
	and.b32  	%r132, %r131, 4;
	cvt.u64.u32 	%rd35, %r132;
	mov.u64 	%rd36, global_smem;
	add.s64 	%rd37, %rd36, %rd35;
	mov.b32 	%r93, %f141;
	cvt.u32.u64 	%r92, %rd37;
	// begin inline asm
	@%p1 st.shared.b32 [ %r92 + 0 ], %r93;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r111, 2;
	cvt.u64.u32 	%rd38, %r113;
	add.s64 	%rd39, %rd36, %rd38;
	cvt.u32.u64 	%r95, %rd39;
	// begin inline asm
	@%p2 ld.shared.b32 %r94, [ %r95 + 0 ];
	// end inline asm
	mov.b32 	%f142, %r94;
	shfl.sync.bfly.b32	%r133, %r94, 1, 31, -1;
	mov.b32 	%f143, %r133;
	add.rn.f32 	%f144, %f142, %f143;
	setp.eq.s32 	%p3, %r111, 0;
	mov.b32 	%r97, %f144;
	// begin inline asm
	@%p3 st.shared.b32 [ %r95 + 0 ], %r97;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f145, [global_smem];
	mul.rn.f32 	%f146, %f145, 0f3A800000;
	// begin inline asm
	mov.u32 %r98, 0x0;
	ld.global.b32 { %r98 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	%f147, %r98;
	add.rn.f32 	%f148, %f146, %f147;
	rsqrt.approx.f32 	%f149, %f148;
	mul.rn.f32 	%f150, %f17, %f149;
	mul.rn.f32 	%f151, %f18, %f149;
	mul.rn.f32 	%f152, %f19, %f149;
	mul.rn.f32 	%f153, %f20, %f149;
	and.b64  	%rd40, %rd25, 1536;
	add.s64 	%rd41, %rd23, %rd40;
	add.s64 	%rd11, %rd41, %rd27;
	// begin inline asm
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	ld.global.v2.b32 { %r99, %r100 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs61, %rs62}, %r99;
	mov.b32 	{%rs63, %rs64}, %r100;
	// begin inline asm
	cvt.f32.bf16 %r101, %rs61;
	// end inline asm
	mov.b32 	%f154, %r101;
	// begin inline asm
	cvt.f32.bf16 %r102, %rs62;
	// end inline asm
	mov.b32 	%f155, %r102;
	// begin inline asm
	cvt.f32.bf16 %r103, %rs63;
	// end inline asm
	mov.b32 	%f156, %r103;
	// begin inline asm
	cvt.f32.bf16 %r104, %rs64;
	// end inline asm
	mov.b32 	%f157, %r104;
	mul.rn.f32 	%f158, %f150, %f154;
	mul.rn.f32 	%f159, %f151, %f155;
	mul.rn.f32 	%f160, %f152, %f156;
	mul.rn.f32 	%f161, %f153, %f157;
	mov.b32 	%r105, %f158;
	// begin inline asm
	cvt.rn.bf16.f32 %rs65, %r105;
	// end inline asm
	mov.b32 	%r106, %f159;
	// begin inline asm
	cvt.rn.bf16.f32 %rs66, %r106;
	// end inline asm
	mov.b32 	%r107, %f160;
	// begin inline asm
	cvt.rn.bf16.f32 %rs67, %r107;
	// end inline asm
	mov.b32 	%r108, %f161;
	// begin inline asm
	cvt.rn.bf16.f32 %rs68, %r108;
	// end inline asm
	add.s64 	%rd42, %rd15, %rd25;
	add.s64 	%rd12, %rd42, %rd27;
	mov.b32 	%r109, {%rs65, %rs66};
	mov.b32 	%r110, {%rs67, %rs68};
	// begin inline asm
	st.global.v2.b32 [ %rd12 + 0 ], { %r109, %r110 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 61440;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	triton_softmax_3_0
.visible .entry triton_softmax_3_0(
	.param .u64 .ptr .align 16 triton_softmax_3_0_param_0,
	.param .u64 .ptr .align 128 triton_softmax_3_0_param_1,
	.param .u64 .ptr .align 128 triton_softmax_3_0_param_2
)
.reqntid 32, 1, 1
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<29>;
	.reg .f32 	%f<30>;
	.reg .b64 	%rd<20>;

	ld.param.u64 	%rd4, [triton_softmax_3_0_param_0];
	ld.param.u64 	%rd5, [triton_softmax_3_0_param_2];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [triton_softmax_3_0_param_1];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd2, %rd4;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r13, %r1, 7;
	cvt.u64.u32 	%rd9, %r13;
	and.b64  	%rd10, %rd9, 896;
	mul.wide.s32 	%rd11, %r1, 512;
	and.b64  	%rd12, %rd11, 9223372036854771712;
	or.b64  	%rd13, %rd12, %rd10;
	shl.b64 	%rd14, %rd13, 1;
	add.s64 	%rd15, %rd8, %rd14;
	mov.u32 	%r14, %tid.x;
	shl.b32 	%r15, %r14, 2;
	and.b32  	%r16, %r15, 60;
	setp.lt.u32 	%p1, %r14, 16;
	selp.b32 	%r17, 0, 64, %p1;
	or.b32  	%r18, %r16, %r17;
	mul.wide.u32 	%rd16, %r18, 2;
	add.s64 	%rd17, %rd15, %rd16;
	add.s64 	%rd1, %rd17, 4096;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	mul.rn.f32 	%f5, %f1, %f1;
	mul.rn.f32 	%f6, %f2, %f2;
	mul.rn.f32 	%f7, %f3, %f3;
	mul.rn.f32 	%f8, %f4, %f4;
	add.rn.f32 	%f9, %f5, %f6;
	add.rn.f32 	%f10, %f9, %f7;
	add.rn.f32 	%f11, %f10, %f8;
	mov.b32 	%r19, %f11;
	shfl.sync.bfly.b32	%r20, %r19, 16, 31, -1;
	mov.b32 	%f12, %r20;
	add.rn.f32 	%f13, %f11, %f12;
	mov.b32 	%r21, %f13;
	shfl.sync.bfly.b32	%r22, %r21, 8, 31, -1;
	mov.b32 	%f14, %r22;
	add.rn.f32 	%f15, %f13, %f14;
	mov.b32 	%r23, %f15;
	shfl.sync.bfly.b32	%r24, %r23, 4, 31, -1;
	mov.b32 	%f16, %r24;
	add.rn.f32 	%f17, %f15, %f16;
	mov.b32 	%r25, %f17;
	shfl.sync.bfly.b32	%r26, %r25, 2, 31, -1;
	mov.b32 	%f18, %r26;
	add.rn.f32 	%f19, %f17, %f18;
	mov.b32 	%r27, %f19;
	shfl.sync.bfly.b32	%r28, %r27, 1, 31, -1;
	mov.b32 	%f20, %r28;
	add.rn.f32 	%f21, %f19, %f20;
	mul.rn.f32 	%f22, %f21, 0f3C000000;
	// begin inline asm
	mov.u32 %r8, 0x0;
	ld.global.b32 { %r8 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f23, %r8;
	add.rn.f32 	%f24, %f22, %f23;
	rsqrt.approx.f32 	%f25, %f24;
	mul.rn.f32 	%f26, %f1, %f25;
	mul.rn.f32 	%f27, %f2, %f25;
	mul.rn.f32 	%f28, %f3, %f25;
	mul.rn.f32 	%f29, %f4, %f25;
	add.s64 	%rd18, %rd6, %rd11;
	mul.wide.u32 	%rd19, %r18, 4;
	add.s64 	%rd3, %rd18, %rd19;
	mov.b32 	%r9, %f26;
	mov.b32 	%r10, %f27;
	mov.b32 	%r11, %f28;
	mov.b32 	%r12, %f29;
	// begin inline asm
	st.global.v4.b32 [ %rd3 + 0 ], { %r9, %r10, %r11, %r12 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_3,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_4
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<7>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<15>;
	.reg .b64 	%rd<25>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_4];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd9, %rd4;
	cvta.to.global.u64 	%rd10, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd11, %r8, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	mul.wide.u32 	%rd13, %r3, 2;
	add.s64 	%rd14, %rd9, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd15, %r9;
	add.s64 	%rd16, %rd6, %rd15;
	ld.global.nc.u32 	%r10, [%rd16];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd17, %r14, 2;
	add.s64 	%rd18, %rd8, %rd17;
	ld.global.nc.u16 	%rs2, [%rd18];
	cvt.f32.bf16 	%f4, %rs2;
	mul.rn.f32 	%f5, %f3, %f4;
	or.b32  	%r15, %r1, 64;
	ld.global.nc.f32 	%f6, [%rd12+256];
	mul.wide.u32 	%rd19, %r15, 2;
	add.s64 	%rd20, %rd9, %rd19;
	ld.global.nc.u16 	%rs3, [%rd20];
	cvt.f32.bf16 	%f7, %rs3;
	mul.rn.f32 	%f8, %f6, %f7;
	or.b32  	%r16, %r13, %r15;
	mul.wide.u32 	%rd21, %r16, 2;
	add.s64 	%rd22, %rd8, %rd21;
	ld.global.nc.u16 	%rs4, [%rd22];
	cvt.f32.bf16 	%f9, %rs4;
	mul.rn.f32 	%f10, %f8, %f9;
	sub.rn.f32 	%f11, %f5, %f10;
	cvt.rn.bf16.f32 	%rs5, %f11;
	mul.wide.u32 	%rd23, %r8, 2;
	add.s64 	%rd24, %rd3, %rd23;
	st.global.b16 	[%rd24], %rs5;
	mul.rn.f32 	%f12, %f8, %f4;
	mul.rn.f32 	%f13, %f3, %f9;
	add.rn.f32 	%f14, %f12, %f13;
	cvt.rn.bf16.f32 	%rs6, %f14;
	st.global.b16 	[%rd24+128], %rs6;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

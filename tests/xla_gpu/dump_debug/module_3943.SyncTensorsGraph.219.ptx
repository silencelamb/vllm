//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	gemm_fusion_dot_29_0
.visible .entry gemm_fusion_dot_29_0(
	.param .u64 .ptr .align 16 gemm_fusion_dot_29_0_param_0,
	.param .u64 .ptr .align 128 gemm_fusion_dot_29_0_param_1
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<497>;
	.reg .f32 	%f<277>;
	.reg .b64 	%rd<89>;

	ld.param.u64 	%rd14, [gemm_fusion_dot_29_0_param_0];
	ld.param.u64 	%rd15, [gemm_fusion_dot_29_0_param_1];
	cvta.to.global.u64 	%rd1, %rd15;
	cvta.to.global.u64 	%rd16, %rd14;
	// begin inline asm
	mov.u32 %r27, %ctaid.x;
	// end inline asm
	shr.s32 	%r29, %r27, 31;
	shr.u32 	%r30, %r29, 23;
	add.s32 	%r31, %r27, %r30;
	shr.s32 	%r32, %r31, 9;
	shl.b32 	%r2, %r32, 3;
	sub.s32 	%r33, 4, %r2;
	min.s32 	%r3, %r33, 8;
	and.b32  	%r34, %r31, -512;
	sub.s32 	%r35, %r27, %r34;
	div.s32 	%r36, %r35, %r3;
	shl.b32 	%r37, %r36, 4;
	cvt.s64.s32 	%rd2, %r37;
	mov.u32 	%r4, %tid.x;
	and.b32  	%r38, %r4, 1;
	neg.s32 	%r39, %r38;
	shl.b32 	%r40, %r38, 3;
	bfe.s32 	%r41, %r4, 1, 1;
	and.b32  	%r42, %r4, 2;
	shl.b32 	%r43, %r42, 3;
	or.b32  	%r44, %r40, %r43;
	bfe.s32 	%r45, %r4, 2, 1;
	and.b32  	%r5, %r4, 4;
	shl.b32 	%r46, %r5, 3;
	and.b32  	%r6, %r4, 8;
	shl.b32 	%r47, %r6, 3;
	or.b32  	%r48, %r47, %r46;
	or.b32  	%r49, %r48, %r44;
	and.b32  	%r7, %r4, 16;
	shl.b32 	%r50, %r7, 3;
	or.b32  	%r51, %r49, %r50;
	and.b32  	%r8, %r4, 32;
	shl.b32 	%r52, %r8, 3;
	or.b32  	%r53, %r51, %r52;
	setp.gt.u32 	%p1, %r4, 63;
	selp.u64 	%rd17, 1, 0, %p1;
	selp.b32 	%r54, 520, 0, %p1;
	xor.b32  	%r55, %r53, %r54;
	mul.wide.u32 	%rd18, %r55, 2;
	mov.u64 	%rd19, global_smem;
	add.s64 	%rd3, %rd19, %rd18;
	or.b32  	%r56, %r40, 1040;
	xor.b32  	%r57, %r56, %r43;
	or.b32  	%r58, %r46, %r57;
	or.b32  	%r59, %r58, %r47;
	or.b32  	%r60, %r52, %r50;
	or.b32  	%r61, %r60, %r54;
	xor.b32  	%r62, %r61, %r59;
	mul.wide.u32 	%rd20, %r62, 2;
	add.s64 	%rd4, %rd19, %rd20;
	or.b32  	%r63, %r44, 2080;
	xor.b32  	%r64, %r63, %r46;
	or.b32  	%r65, %r64, %r47;
	xor.b32  	%r66, %r61, %r65;
	mul.wide.u32 	%rd21, %r66, 2;
	add.s64 	%rd5, %rd19, %rd21;
	or.b32  	%r67, %r40, 3120;
	or.b32  	%r68, %r46, %r43;
	xor.b32  	%r69, %r68, %r67;
	or.b32  	%r70, %r69, %r47;
	xor.b32  	%r71, %r61, %r70;
	mul.wide.u32 	%rd22, %r71, 2;
	add.s64 	%rd6, %rd19, %rd22;
	or.b32  	%r72, %r49, 4096;
	xor.b32  	%r73, %r61, %r72;
	mul.wide.u32 	%rd23, %r73, 2;
	add.s64 	%rd7, %rd19, %rd23;
	or.b32  	%r74, %r40, 5136;
	xor.b32  	%r75, %r74, %r43;
	or.b32  	%r76, %r46, %r75;
	or.b32  	%r77, %r76, %r47;
	xor.b32  	%r78, %r61, %r77;
	mul.wide.u32 	%rd24, %r78, 2;
	add.s64 	%rd8, %rd19, %rd24;
	or.b32  	%r79, %r44, 6176;
	xor.b32  	%r80, %r79, %r46;
	or.b32  	%r81, %r80, %r47;
	xor.b32  	%r82, %r61, %r81;
	mul.wide.u32 	%rd25, %r82, 2;
	add.s64 	%rd9, %rd19, %rd25;
	or.b32  	%r83, %r40, 7216;
	xor.b32  	%r84, %r68, %r83;
	or.b32  	%r85, %r84, %r47;
	xor.b32  	%r86, %r61, %r85;
	mul.wide.u32 	%rd26, %r86, 2;
	add.s64 	%rd10, %rd19, %rd26;
	and.b32  	%r87, %r39, 520;
	and.b32  	%r88, %r41, 1040;
	or.b32  	%r89, %r87, %r88;
	and.b32  	%r90, %r45, 2080;
	or.b32  	%r91, %r89, %r90;
	and.b32  	%r92, %r4, 24;
	xor.b32  	%r93, %r91, %r92;
	shl.b32 	%r94, %r8, 7;
	or.b32  	%r95, %r93, %r94;
	shl.b32 	%r96, %r95, 1;
	cvt.u64.u32 	%rd27, %r96;
	add.s64 	%rd28, %rd19, %rd27;
	cvt.u32.u64 	%r183, %rd28;
	or.b32  	%r97, %r89, 32;
	or.b32  	%r98, %r94, %r92;
	or.b32  	%r99, %r98, %r90;
	xor.b32  	%r100, %r99, %r97;
	shl.b32 	%r101, %r100, 1;
	cvt.u64.u32 	%rd29, %r101;
	add.s64 	%rd30, %rd19, %rd29;
	cvt.u32.u64 	%r188, %rd30;
	or.b32  	%r102, %r91, 64;
	xor.b32  	%r103, %r98, %r102;
	shl.b32 	%r104, %r103, 1;
	cvt.u64.u32 	%rd31, %r104;
	add.s64 	%rd32, %rd19, %rd31;
	cvt.u32.u64 	%r193, %rd32;
	or.b32  	%r105, %r89, 96;
	xor.b32  	%r106, %r99, %r105;
	shl.b32 	%r107, %r106, 1;
	cvt.u64.u32 	%rd33, %r107;
	add.s64 	%rd34, %rd19, %rd33;
	cvt.u32.u64 	%r198, %rd34;
	or.b32  	%r108, %r91, 128;
	xor.b32  	%r109, %r98, %r108;
	shl.b32 	%r110, %r109, 1;
	cvt.u64.u32 	%rd35, %r110;
	add.s64 	%rd36, %rd19, %rd35;
	cvt.u32.u64 	%r203, %rd36;
	or.b32  	%r111, %r89, 160;
	xor.b32  	%r112, %r99, %r111;
	shl.b32 	%r113, %r112, 1;
	cvt.u64.u32 	%rd37, %r113;
	add.s64 	%rd38, %rd19, %rd37;
	cvt.u32.u64 	%r208, %rd38;
	or.b32  	%r114, %r91, 192;
	xor.b32  	%r115, %r98, %r114;
	shl.b32 	%r116, %r115, 1;
	cvt.u64.u32 	%rd39, %r116;
	add.s64 	%rd40, %rd19, %rd39;
	cvt.u32.u64 	%r213, %rd40;
	or.b32  	%r117, %r89, 224;
	xor.b32  	%r118, %r99, %r117;
	shl.b32 	%r119, %r118, 1;
	cvt.u64.u32 	%rd41, %r119;
	add.s64 	%rd42, %rd19, %rd41;
	cvt.u32.u64 	%r218, %rd42;
	or.b32  	%r120, %r91, 256;
	xor.b32  	%r121, %r98, %r120;
	shl.b32 	%r122, %r121, 1;
	cvt.u64.u32 	%rd43, %r122;
	add.s64 	%rd44, %rd19, %rd43;
	cvt.u32.u64 	%r223, %rd44;
	or.b32  	%r123, %r89, 288;
	xor.b32  	%r124, %r99, %r123;
	shl.b32 	%r125, %r124, 1;
	cvt.u64.u32 	%rd45, %r125;
	add.s64 	%rd46, %rd19, %rd45;
	cvt.u32.u64 	%r228, %rd46;
	or.b32  	%r126, %r91, 320;
	xor.b32  	%r127, %r98, %r126;
	shl.b32 	%r128, %r127, 1;
	cvt.u64.u32 	%rd47, %r128;
	add.s64 	%rd48, %rd19, %rd47;
	cvt.u32.u64 	%r233, %rd48;
	or.b32  	%r129, %r89, 352;
	xor.b32  	%r130, %r99, %r129;
	shl.b32 	%r131, %r130, 1;
	cvt.u64.u32 	%rd49, %r131;
	add.s64 	%rd50, %rd19, %rd49;
	cvt.u32.u64 	%r238, %rd50;
	or.b32  	%r132, %r91, 384;
	xor.b32  	%r133, %r98, %r132;
	shl.b32 	%r134, %r133, 1;
	cvt.u64.u32 	%rd51, %r134;
	add.s64 	%rd52, %rd19, %rd51;
	cvt.u32.u64 	%r243, %rd52;
	or.b32  	%r135, %r89, 416;
	xor.b32  	%r136, %r99, %r135;
	shl.b32 	%r137, %r136, 1;
	cvt.u64.u32 	%rd53, %r137;
	add.s64 	%rd54, %rd19, %rd53;
	cvt.u32.u64 	%r248, %rd54;
	or.b32  	%r138, %r91, 448;
	xor.b32  	%r139, %r98, %r138;
	shl.b32 	%r140, %r139, 1;
	cvt.u64.u32 	%rd55, %r140;
	add.s64 	%rd56, %rd19, %rd55;
	cvt.u32.u64 	%r253, %rd56;
	or.b32  	%r141, %r89, 480;
	xor.b32  	%r142, %r99, %r141;
	shl.b32 	%r143, %r142, 1;
	cvt.u64.u32 	%rd57, %r143;
	add.s64 	%rd58, %rd19, %rd57;
	cvt.u32.u64 	%r258, %rd58;
	or.b64  	%rd59, %rd2, %rd17;
	shl.b64 	%rd60, %rd59, 12;
	or.b32  	%r144, %r60, %r47;
	or.b32  	%r145, %r68, %r144;
	or.b32  	%r146, %r145, %r40;
	mul.wide.u32 	%rd61, %r146, 2;
	add.s64 	%rd62, %rd60, %rd61;
	add.s64 	%rd63, %rd62, %rd16;
	add.s64 	%rd88, %rd63, 57344;
	mov.f32 	%f273, 0f00000000;
	mov.b32 	%r496, -512;
	mov.f32 	%f274, %f273;
	mov.f32 	%f275, %f273;
	mov.f32 	%f276, %f273;
$L__BB1_1:
	add.s64 	%rd64, %rd88, -57344;
	add.s64 	%rd65, %rd88, -49152;
	add.s64 	%rd66, %rd88, -40960;
	add.s64 	%rd67, %rd88, -32768;
	add.s64 	%rd68, %rd88, -24576;
	add.s64 	%rd69, %rd88, -16384;
	add.s64 	%rd70, %rd88, -8192;
	// begin inline asm
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	mov.u32 %r150, 0x0;
	ld.global.v4.b32 { %r147, %r148, %r149, %r150 }, [ %rd64 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	mov.u32 %r154, 0x0;
	ld.global.v4.b32 { %r151, %r152, %r153, %r154 }, [ %rd65 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r155, 0x0;
	mov.u32 %r156, 0x0;
	mov.u32 %r157, 0x0;
	mov.u32 %r158, 0x0;
	ld.global.v4.b32 { %r155, %r156, %r157, %r158 }, [ %rd66 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r159, 0x0;
	mov.u32 %r160, 0x0;
	mov.u32 %r161, 0x0;
	mov.u32 %r162, 0x0;
	ld.global.v4.b32 { %r159, %r160, %r161, %r162 }, [ %rd67 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r163, 0x0;
	mov.u32 %r164, 0x0;
	mov.u32 %r165, 0x0;
	mov.u32 %r166, 0x0;
	ld.global.v4.b32 { %r163, %r164, %r165, %r166 }, [ %rd68 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r167, 0x0;
	mov.u32 %r168, 0x0;
	mov.u32 %r169, 0x0;
	mov.u32 %r170, 0x0;
	ld.global.v4.b32 { %r167, %r168, %r169, %r170 }, [ %rd69 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r171, 0x0;
	mov.u32 %r172, 0x0;
	mov.u32 %r173, 0x0;
	mov.u32 %r174, 0x0;
	ld.global.v4.b32 { %r171, %r172, %r173, %r174 }, [ %rd70 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r175, 0x0;
	mov.u32 %r176, 0x0;
	mov.u32 %r177, 0x0;
	mov.u32 %r178, 0x0;
	ld.global.v4.b32 { %r175, %r176, %r177, %r178 }, [ %rd88 + 0 ];
	// end inline asm
	bar.sync 	0;
	st.shared.v4.b32 	[%rd3], {%r147, %r148, %r149, %r150};
	st.shared.v4.b32 	[%rd4], {%r151, %r152, %r153, %r154};
	st.shared.v4.b32 	[%rd5], {%r155, %r156, %r157, %r158};
	st.shared.v4.b32 	[%rd6], {%r159, %r160, %r161, %r162};
	st.shared.v4.b32 	[%rd7], {%r163, %r164, %r165, %r166};
	st.shared.v4.b32 	[%rd8], {%r167, %r168, %r169, %r170};
	st.shared.v4.b32 	[%rd9], {%r171, %r172, %r173, %r174};
	st.shared.v4.b32 	[%rd10], {%r175, %r176, %r177, %r178};
	bar.sync 	0;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r179, %r180, %r181, %r182}, [%r183];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r184, %r185, %r186, %r187}, [%r188];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r189, %r190, %r191, %r192}, [%r193];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r194, %r195, %r196, %r197}, [%r198];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r199, %r200, %r201, %r202}, [%r203];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r204, %r205, %r206, %r207}, [%r208];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r209, %r210, %r211, %r212}, [%r213];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r214, %r215, %r216, %r217}, [%r218];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r219, %r220, %r221, %r222}, [%r223];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r224, %r225, %r226, %r227}, [%r228];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r229, %r230, %r231, %r232}, [%r233];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r234, %r235, %r236, %r237}, [%r238];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r239, %r240, %r241, %r242}, [%r243];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r244, %r245, %r246, %r247}, [%r248];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r249, %r250, %r251, %r252}, [%r253];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r254, %r255, %r256, %r257}, [%r258];
	// end inline asm
	mov.b32 	%r259, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r179, %r180 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r181, %r182 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r184, %r185 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r186, %r187 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r189, %r190 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r191, %r192 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r194, %r195 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r196, %r197 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r199, %r200 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r201, %r202 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r204, %r205 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r206, %r207 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r209, %r210 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r211, %r212 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r214, %r215 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r216, %r217 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r219, %r220 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r221, %r222 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r224, %r225 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r226, %r227 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r229, %r230 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r231, %r232 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r234, %r235 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r236, %r237 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r239, %r240 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r241, %r242 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r244, %r245 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r246, %r247 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r249, %r250 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r251, %r252 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r254, %r255 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f273, %f274, %f275, %f276 }, { %r259, %r259, %r259, %r259 }, { %r256, %r257 }, { %f273, %f274, %f275, %f276 };
	// end inline asm
	add.s32 	%r496, %r496, 512;
	add.s64 	%rd88, %rd88, 1024;
	setp.lt.u32 	%p2, %r496, 1536;
	@%p2 bra 	$L__BB1_1;
	rem.s32 	%r459, %r27, %r3;
	add.s32 	%r460, %r459, %r2;
	mov.b32 	%r451, %f273;
	// begin inline asm
	cvt.rn.bf16.f32 %rs5, %r451;
	// end inline asm
	mov.b32 	%r452, %f274;
	// begin inline asm
	cvt.rn.bf16.f32 %rs6, %r452;
	// end inline asm
	mov.b32 	%r453, %f275;
	// begin inline asm
	cvt.rn.bf16.f32 %rs7, %r453;
	// end inline asm
	mov.b32 	%r454, %f276;
	// begin inline asm
	cvt.rn.bf16.f32 %rs8, %r454;
	// end inline asm
	shl.b32 	%r461, %r460, 5;
	cvt.s64.s32 	%rd73, %r461;
	bfe.u32 	%r462, %r4, 2, 3;
	shr.u32 	%r463, %r8, 2;
	selp.b32 	%r464, 16, 0, %p1;
	or.b32  	%r465, %r462, %r464;
	or.b32  	%r466, %r465, %r463;
	cvt.u64.u32 	%rd74, %r466;
	or.b64  	%rd75, %rd73, %rd74;
	shl.b32 	%r467, %r4, 2;
	and.b32  	%r468, %r467, 12;
	cvt.u64.u32 	%rd76, %r468;
	or.b64  	%rd77, %rd2, %rd76;
	shl.b64 	%rd78, %rd75, 11;
	add.s64 	%rd79, %rd1, %rd78;
	shl.b64 	%rd80, %rd77, 1;
	add.s64 	%rd72, %rd79, %rd80;
	bar.sync 	0;
	shl.b32 	%r469, %r4, 1;
	and.b32  	%r470, %r469, 6;
	shl.b32 	%r471, %r5, 2;
	or.b32  	%r472, %r470, %r471;
	shl.b32 	%r473, %r6, 2;
	or.b32  	%r474, %r472, %r473;
	shl.b32 	%r475, %r7, 2;
	or.b32  	%r476, %r474, %r475;
	or.b32  	%r477, %r476, %r463;
	selp.b32 	%r478, 256, 0, %p1;
	or.b32  	%r479, %r477, %r478;
	and.b32  	%r480, %r467, 156;
	or.b32  	%r481, %r473, %r480;
	or.b32  	%r482, %r481, %r475;
	or.b32  	%r483, %r482, %r478;
	shr.u32 	%r484, %r479, 2;
	and.b32  	%r485, %r484, 1073741820;
	add.s32 	%r486, %r485, %r479;
	shl.b32 	%r487, %r486, 1;
	cvt.u64.u32 	%rd81, %r487;
	add.s64 	%rd83, %rd19, %rd81;
	cvt.u32.u64 	%r455, %rd83;
	mov.pred 	%p3, -1;
	// begin inline asm
	@%p3 st.shared.v2.b16 [ %r455 + 0 ], { %rs5, %rs6 };
	// end inline asm
	xor.b32  	%r488, %r479, 128;
	shr.u32 	%r489, %r488, 2;
	and.b32  	%r490, %r489, 1073741820;
	add.s32 	%r491, %r490, %r488;
	shl.b32 	%r492, %r491, 1;
	cvt.u64.u32 	%rd84, %r492;
	add.s64 	%rd85, %rd19, %rd84;
	cvt.u32.u64 	%r456, %rd85;
	// begin inline asm
	@%p3 st.shared.v2.b16 [ %r456 + 0 ], { %rs7, %rs8 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r493, %r483, 2;
	and.b32  	%r494, %r493, 124;
	add.s32 	%r495, %r494, %r483;
	mul.wide.u32 	%rd86, %r495, 2;
	add.s64 	%rd87, %rd19, %rd86;
	ld.shared.v2.u32 	{%r457, %r458}, [%rd87];
	// begin inline asm
	st.global.v2.b32 [ %rd72 + 0 ], { %r457, %r458 };
	// end inline asm
	ret;

}
	// .globl	fusion_24
.visible .entry fusion_24(
	.param .u64 .ptr .align 16 fusion_24_param_0,
	.param .u64 .ptr .align 128 fusion_24_param_1,
	.param .u64 .ptr .align 128 fusion_24_param_2,
	.param .u64 .ptr .align 16 fusion_24_param_3,
	.param .u64 .ptr .align 128 fusion_24_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<125>;
	.reg .f32 	%f<146>;
	.reg .b64 	%rd<30>;

	ld.param.u64 	%rd10, [fusion_24_param_0];
	ld.param.u64 	%rd11, [fusion_24_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_24_param_1];
	ld.param.u64 	%rd14, [fusion_24_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_24_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd5, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd19, %r1, 1024;
	shl.b64 	%rd20, %rd19, 1;
	add.s64 	%rd21, %rd17, %rd20;
	mov.u32 	%r105, %tid.x;
	and.b32  	%r106, %r105, 31;
	shl.b32 	%r107, %r105, 3;
	and.b32  	%r108, %r107, 248;
	setp.lt.u32 	%p4, %r105, 32;
	selp.b32 	%r109, 0, 256, %p4;
	or.b32  	%r110, %r108, %r109;
	mul.wide.u32 	%rd22, %r110, 2;
	add.s64 	%rd1, %rd21, %rd22;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	add.s64 	%rd23, %rd18, %rd20;
	add.s64 	%rd3, %rd23, %rd22;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.rn.f32 	%f33, %f1, %f17;
	add.rn.f32 	%f34, %f2, %f18;
	add.rn.f32 	%f35, %f3, %f19;
	add.rn.f32 	%f36, %f4, %f20;
	add.rn.f32 	%f37, %f5, %f21;
	add.rn.f32 	%f38, %f6, %f22;
	add.rn.f32 	%f39, %f7, %f23;
	add.rn.f32 	%f40, %f8, %f24;
	add.rn.f32 	%f41, %f9, %f25;
	add.rn.f32 	%f42, %f10, %f26;
	add.rn.f32 	%f43, %f11, %f27;
	add.rn.f32 	%f44, %f12, %f28;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	mul.rn.f32 	%f49, %f33, %f33;
	mul.rn.f32 	%f50, %f34, %f34;
	mul.rn.f32 	%f51, %f35, %f35;
	mul.rn.f32 	%f52, %f36, %f36;
	mul.rn.f32 	%f53, %f37, %f37;
	mul.rn.f32 	%f54, %f38, %f38;
	mul.rn.f32 	%f55, %f39, %f39;
	mul.rn.f32 	%f56, %f40, %f40;
	mul.rn.f32 	%f57, %f41, %f41;
	mul.rn.f32 	%f58, %f42, %f42;
	mul.rn.f32 	%f59, %f43, %f43;
	mul.rn.f32 	%f60, %f44, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	add.rn.f32 	%f65, %f49, %f50;
	add.rn.f32 	%f66, %f65, %f51;
	add.rn.f32 	%f67, %f66, %f52;
	add.rn.f32 	%f68, %f67, %f53;
	add.rn.f32 	%f69, %f68, %f54;
	add.rn.f32 	%f70, %f69, %f55;
	add.rn.f32 	%f71, %f70, %f56;
	add.rn.f32 	%f72, %f71, %f57;
	add.rn.f32 	%f73, %f72, %f58;
	add.rn.f32 	%f74, %f73, %f59;
	add.rn.f32 	%f75, %f74, %f60;
	add.rn.f32 	%f76, %f75, %f61;
	add.rn.f32 	%f77, %f76, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	mov.b32 	%r111, %f79;
	shfl.sync.bfly.b32	%r112, %r111, 16, 31, -1;
	mov.b32 	%f80, %r112;
	add.rn.f32 	%f81, %f79, %f80;
	mov.b32 	%r113, %f81;
	shfl.sync.bfly.b32	%r114, %r113, 8, 31, -1;
	mov.b32 	%f82, %r114;
	add.rn.f32 	%f83, %f81, %f82;
	mov.b32 	%r115, %f83;
	shfl.sync.bfly.b32	%r116, %r115, 4, 31, -1;
	mov.b32 	%f84, %r116;
	add.rn.f32 	%f85, %f83, %f84;
	mov.b32 	%r117, %f85;
	shfl.sync.bfly.b32	%r118, %r117, 2, 31, -1;
	mov.b32 	%f86, %r118;
	add.rn.f32 	%f87, %f85, %f86;
	mov.b32 	%r119, %f87;
	shfl.sync.bfly.b32	%r120, %r119, 1, 31, -1;
	mov.b32 	%f88, %r120;
	add.rn.f32 	%f89, %f87, %f88;
	setp.eq.s32 	%p1, %r106, 0;
	shr.u32 	%r121, %r105, 3;
	and.b32  	%r122, %r121, 4;
	cvt.u64.u32 	%rd24, %r122;
	mov.u64 	%rd25, global_smem;
	add.s64 	%rd26, %rd25, %rd24;
	mov.b32 	%r51, %f89;
	cvt.u32.u64 	%r50, %rd26;
	// begin inline asm
	@%p1 st.shared.b32 [ %r50 + 0 ], %r51;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r105, 2;
	shl.b32 	%r123, %r105, 2;
	cvt.u64.u32 	%rd27, %r123;
	add.s64 	%rd28, %rd25, %rd27;
	cvt.u32.u64 	%r53, %rd28;
	// begin inline asm
	@%p2 ld.shared.b32 %r52, [ %r53 + 0 ];
	// end inline asm
	mov.b32 	%f90, %r52;
	shfl.sync.bfly.b32	%r124, %r52, 1, 31, -1;
	mov.b32 	%f91, %r124;
	add.rn.f32 	%f92, %f90, %f91;
	setp.eq.s32 	%p3, %r105, 0;
	mov.b32 	%r55, %f92;
	// begin inline asm
	@%p3 st.shared.b32 [ %r53 + 0 ], %r55;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f93, [global_smem];
	mul.rn.f32 	%f94, %f93, 0f3A800000;
	// begin inline asm
	mov.u32 %r56, 0x0;
	ld.global.b32 { %r56 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f95, %r56;
	add.rn.f32 	%f96, %f94, %f95;
	rsqrt.approx.f32 	%f97, %f96;
	mul.rn.f32 	%f98, %f33, %f97;
	mul.rn.f32 	%f99, %f34, %f97;
	mul.rn.f32 	%f100, %f35, %f97;
	mul.rn.f32 	%f101, %f36, %f97;
	mul.rn.f32 	%f102, %f37, %f97;
	mul.rn.f32 	%f103, %f38, %f97;
	mul.rn.f32 	%f104, %f39, %f97;
	mul.rn.f32 	%f105, %f40, %f97;
	mul.rn.f32 	%f106, %f41, %f97;
	mul.rn.f32 	%f107, %f42, %f97;
	mul.rn.f32 	%f108, %f43, %f97;
	mul.rn.f32 	%f109, %f44, %f97;
	mul.rn.f32 	%f110, %f45, %f97;
	mul.rn.f32 	%f111, %f46, %f97;
	mul.rn.f32 	%f112, %f47, %f97;
	mul.rn.f32 	%f113, %f48, %f97;
	add.s64 	%rd6, %rd15, %rd22;
	add.s64 	%rd7, %rd6, 1024;
	// begin inline asm
	mov.u32 %r57, 0x0;
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	mov.u32 %r60, 0x0;
	ld.global.v4.b32 { %r57, %r58, %r59, %r60 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r57;
	mov.b32 	{%rs35, %rs36}, %r58;
	mov.b32 	{%rs37, %rs38}, %r59;
	mov.b32 	{%rs39, %rs40}, %r60;
	// begin inline asm
	mov.u32 %r61, 0x0;
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	ld.global.v4.b32 { %r61, %r62, %r63, %r64 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r61;
	mov.b32 	{%rs43, %rs44}, %r62;
	mov.b32 	{%rs45, %rs46}, %r63;
	mov.b32 	{%rs47, %rs48}, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs33;
	// end inline asm
	mov.b32 	%f114, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs34;
	// end inline asm
	mov.b32 	%f115, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs35;
	// end inline asm
	mov.b32 	%f116, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs36;
	// end inline asm
	mov.b32 	%f117, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs37;
	// end inline asm
	mov.b32 	%f118, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs38;
	// end inline asm
	mov.b32 	%f119, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs39;
	// end inline asm
	mov.b32 	%f120, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs40;
	// end inline asm
	mov.b32 	%f121, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs41;
	// end inline asm
	mov.b32 	%f122, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs42;
	// end inline asm
	mov.b32 	%f123, %r74;
	// begin inline asm
	cvt.f32.bf16 %r75, %rs43;
	// end inline asm
	mov.b32 	%f124, %r75;
	// begin inline asm
	cvt.f32.bf16 %r76, %rs44;
	// end inline asm
	mov.b32 	%f125, %r76;
	// begin inline asm
	cvt.f32.bf16 %r77, %rs45;
	// end inline asm
	mov.b32 	%f126, %r77;
	// begin inline asm
	cvt.f32.bf16 %r78, %rs46;
	// end inline asm
	mov.b32 	%f127, %r78;
	// begin inline asm
	cvt.f32.bf16 %r79, %rs47;
	// end inline asm
	mov.b32 	%f128, %r79;
	// begin inline asm
	cvt.f32.bf16 %r80, %rs48;
	// end inline asm
	mov.b32 	%f129, %r80;
	mul.rn.f32 	%f130, %f98, %f114;
	mul.rn.f32 	%f131, %f99, %f115;
	mul.rn.f32 	%f132, %f100, %f116;
	mul.rn.f32 	%f133, %f101, %f117;
	mul.rn.f32 	%f134, %f102, %f118;
	mul.rn.f32 	%f135, %f103, %f119;
	mul.rn.f32 	%f136, %f104, %f120;
	mul.rn.f32 	%f137, %f105, %f121;
	mul.rn.f32 	%f138, %f106, %f122;
	mul.rn.f32 	%f139, %f107, %f123;
	mul.rn.f32 	%f140, %f108, %f124;
	mul.rn.f32 	%f141, %f109, %f125;
	mul.rn.f32 	%f142, %f110, %f126;
	mul.rn.f32 	%f143, %f111, %f127;
	mul.rn.f32 	%f144, %f112, %f128;
	mul.rn.f32 	%f145, %f113, %f129;
	mov.b32 	%r81, %f130;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r81;
	// end inline asm
	mov.b32 	%r82, %f131;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r82;
	// end inline asm
	mov.b32 	%r83, %f132;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r83;
	// end inline asm
	mov.b32 	%r84, %f133;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r84;
	// end inline asm
	mov.b32 	%r85, %f134;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r85;
	// end inline asm
	mov.b32 	%r86, %f135;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r86;
	// end inline asm
	mov.b32 	%r87, %f136;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r87;
	// end inline asm
	mov.b32 	%r88, %f137;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r88;
	// end inline asm
	mov.b32 	%r89, %f138;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r89;
	// end inline asm
	mov.b32 	%r90, %f139;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r90;
	// end inline asm
	mov.b32 	%r91, %f140;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r91;
	// end inline asm
	mov.b32 	%r92, %f141;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r92;
	// end inline asm
	mov.b32 	%r93, %f142;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r93;
	// end inline asm
	mov.b32 	%r94, %f143;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r94;
	// end inline asm
	mov.b32 	%r95, %f144;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r95;
	// end inline asm
	mov.b32 	%r96, %f145;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r96;
	// end inline asm
	add.s64 	%rd29, %rd12, %rd20;
	add.s64 	%rd8, %rd29, %rd22;
	add.s64 	%rd9, %rd8, 1024;
	mov.b32 	%r97, {%rs49, %rs50};
	mov.b32 	%r98, {%rs51, %rs52};
	mov.b32 	%r99, {%rs53, %rs54};
	mov.b32 	%r100, {%rs55, %rs56};
	// begin inline asm
	st.global.v4.b32 [ %rd8 + 0 ], { %r97, %r98, %r99, %r100 };
	// end inline asm
	mov.b32 	%r101, {%rs57, %rs58};
	mov.b32 	%r102, {%rs59, %rs60};
	mov.b32 	%r103, {%rs61, %rs62};
	mov.b32 	%r104, {%rs63, %rs64};
	// begin inline asm
	st.global.v4.b32 [ %rd9 + 0 ], { %r101, %r102, %r103, %r104 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion
.visible .entry loop_convert_fusion(
	.param .u64 .ptr .align 128 loop_convert_fusion_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<27>;
	.reg .b32 	%r<10>;
	.reg .f32 	%f<41>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 2;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.lo.s16 	%rs4, %rs3, 6;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 9;
	cvt.u32.u16 	%r6, %rs6;
	or.b32  	%r7, %r3, %r6;
	mul.wide.u16 	%r8, %rs3, 6144;
	add.s32 	%r9, %r7, %r8;
	mul.wide.u32 	%rd5, %r9, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs7, %rs8, %rs9, %rs10}, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	neg.bf16 	%rs11, %rs7;
	cvt.f32.bf16 	%f2, %rs11;
	mul.rn.f32 	%f3, %f2, 0f3FB8AA3B;
	ex2.approx.f32 	%f4, %f3;
	cvt.rn.bf16.f32 	%rs12, %f4;
	cvt.f32.bf16 	%f5, %rs12;
	add.rn.f32 	%f6, %f5, 0f3F800000;
	rcp.approx.f32 	%f7, %f6;
	ld.global.nc.u16 	%rs13, [%rd6+6144];
	mul.rn.f32 	%f8, %f7, %f1;
	cvt.f32.bf16 	%f9, %rs13;
	mul.rn.f32 	%f10, %f8, %f9;
	cvt.rn.bf16.f32 	%rs14, %f10;
	cvt.f32.bf16 	%f11, %rs8;
	neg.bf16 	%rs15, %rs8;
	cvt.f32.bf16 	%f12, %rs15;
	mul.rn.f32 	%f13, %f12, 0f3FB8AA3B;
	ex2.approx.f32 	%f14, %f13;
	cvt.rn.bf16.f32 	%rs16, %f14;
	cvt.f32.bf16 	%f15, %rs16;
	add.rn.f32 	%f16, %f15, 0f3F800000;
	rcp.approx.f32 	%f17, %f16;
	ld.global.nc.u16 	%rs17, [%rd6+6146];
	mul.rn.f32 	%f18, %f17, %f11;
	cvt.f32.bf16 	%f19, %rs17;
	mul.rn.f32 	%f20, %f18, %f19;
	cvt.rn.bf16.f32 	%rs18, %f20;
	cvt.f32.bf16 	%f21, %rs9;
	neg.bf16 	%rs19, %rs9;
	cvt.f32.bf16 	%f22, %rs19;
	mul.rn.f32 	%f23, %f22, 0f3FB8AA3B;
	ex2.approx.f32 	%f24, %f23;
	cvt.rn.bf16.f32 	%rs20, %f24;
	cvt.f32.bf16 	%f25, %rs20;
	add.rn.f32 	%f26, %f25, 0f3F800000;
	rcp.approx.f32 	%f27, %f26;
	ld.global.nc.u16 	%rs21, [%rd6+6148];
	mul.rn.f32 	%f28, %f27, %f21;
	cvt.f32.bf16 	%f29, %rs21;
	mul.rn.f32 	%f30, %f28, %f29;
	cvt.rn.bf16.f32 	%rs22, %f30;
	cvt.f32.bf16 	%f31, %rs10;
	neg.bf16 	%rs23, %rs10;
	cvt.f32.bf16 	%f32, %rs23;
	mul.rn.f32 	%f33, %f32, 0f3FB8AA3B;
	ex2.approx.f32 	%f34, %f33;
	cvt.rn.bf16.f32 	%rs24, %f34;
	cvt.f32.bf16 	%f35, %rs24;
	add.rn.f32 	%f36, %f35, 0f3F800000;
	rcp.approx.f32 	%f37, %f36;
	ld.global.nc.u16 	%rs25, [%rd6+6150];
	mul.rn.f32 	%f38, %f37, %f31;
	cvt.f32.bf16 	%f39, %rs25;
	mul.rn.f32 	%f40, %f38, %f39;
	cvt.rn.bf16.f32 	%rs26, %f40;
	mul.wide.u32 	%rd7, %r5, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.v4.b16 	[%rd8], {%rs14, %rs18, %rs22, %rs26};
	ret;

}
	// .globl	fusion_22
.visible .entry fusion_22(
	.param .u64 .ptr .align 16 fusion_22_param_0,
	.param .u64 .ptr .align 128 fusion_22_param_1,
	.param .u64 .ptr .align 128 fusion_22_param_2,
	.param .u64 .ptr .align 128 fusion_22_param_3,
	.param .u64 .ptr .align 16 fusion_22_param_4,
	.param .u64 .ptr .align 128 fusion_22_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<81>;
	.reg .b32 	%r<149>;
	.reg .f32 	%f<178>;
	.reg .b64 	%rd<35>;

	ld.param.u64 	%rd12, [fusion_22_param_0];
	ld.param.u64 	%rd13, [fusion_22_param_5];
	cvta.to.global.u64 	%rd14, %rd13;
	ld.param.u64 	%rd15, [fusion_22_param_1];
	ld.param.u64 	%rd16, [fusion_22_param_4];
	cvta.to.global.u64 	%rd17, %rd16;
	ld.param.u64 	%rd18, [fusion_22_param_2];
	ld.param.u64 	%rd19, [fusion_22_param_3];
	cvta.to.global.u64 	%rd20, %rd19;
	cvta.to.global.u64 	%rd21, %rd18;
	cvta.to.global.u64 	%rd22, %rd15;
	cvta.to.global.u64 	%rd7, %rd12;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd23, %r1, 1024;
	shl.b64 	%rd24, %rd23, 1;
	add.s64 	%rd25, %rd20, %rd24;
	mov.u32 	%r129, %tid.x;
	and.b32  	%r130, %r129, 31;
	shl.b32 	%r131, %r129, 3;
	and.b32  	%r132, %r131, 248;
	setp.lt.u32 	%p4, %r129, 32;
	selp.b32 	%r133, 0, 256, %p4;
	or.b32  	%r134, %r132, %r133;
	mul.wide.u32 	%rd26, %r134, 2;
	add.s64 	%rd1, %rd25, %rd26;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	add.s64 	%rd27, %rd21, %rd24;
	add.s64 	%rd3, %rd27, %rd26;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd28, %rd22, %rd24;
	add.s64 	%rd5, %rd28, %rd26;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.rn.f32 	%f49, %f17, %f33;
	add.rn.f32 	%f50, %f18, %f34;
	add.rn.f32 	%f51, %f19, %f35;
	add.rn.f32 	%f52, %f20, %f36;
	add.rn.f32 	%f53, %f21, %f37;
	add.rn.f32 	%f54, %f22, %f38;
	add.rn.f32 	%f55, %f23, %f39;
	add.rn.f32 	%f56, %f24, %f40;
	add.rn.f32 	%f57, %f25, %f41;
	add.rn.f32 	%f58, %f26, %f42;
	add.rn.f32 	%f59, %f27, %f43;
	add.rn.f32 	%f60, %f28, %f44;
	add.rn.f32 	%f61, %f29, %f45;
	add.rn.f32 	%f62, %f30, %f46;
	add.rn.f32 	%f63, %f31, %f47;
	add.rn.f32 	%f64, %f32, %f48;
	add.rn.f32 	%f65, %f1, %f49;
	add.rn.f32 	%f66, %f2, %f50;
	add.rn.f32 	%f67, %f3, %f51;
	add.rn.f32 	%f68, %f4, %f52;
	add.rn.f32 	%f69, %f5, %f53;
	add.rn.f32 	%f70, %f6, %f54;
	add.rn.f32 	%f71, %f7, %f55;
	add.rn.f32 	%f72, %f8, %f56;
	add.rn.f32 	%f73, %f9, %f57;
	add.rn.f32 	%f74, %f10, %f58;
	add.rn.f32 	%f75, %f11, %f59;
	add.rn.f32 	%f76, %f12, %f60;
	add.rn.f32 	%f77, %f13, %f61;
	add.rn.f32 	%f78, %f14, %f62;
	add.rn.f32 	%f79, %f15, %f63;
	add.rn.f32 	%f80, %f16, %f64;
	mul.rn.f32 	%f81, %f65, %f65;
	mul.rn.f32 	%f82, %f66, %f66;
	mul.rn.f32 	%f83, %f67, %f67;
	mul.rn.f32 	%f84, %f68, %f68;
	mul.rn.f32 	%f85, %f69, %f69;
	mul.rn.f32 	%f86, %f70, %f70;
	mul.rn.f32 	%f87, %f71, %f71;
	mul.rn.f32 	%f88, %f72, %f72;
	mul.rn.f32 	%f89, %f73, %f73;
	mul.rn.f32 	%f90, %f74, %f74;
	mul.rn.f32 	%f91, %f75, %f75;
	mul.rn.f32 	%f92, %f76, %f76;
	mul.rn.f32 	%f93, %f77, %f77;
	mul.rn.f32 	%f94, %f78, %f78;
	mul.rn.f32 	%f95, %f79, %f79;
	mul.rn.f32 	%f96, %f80, %f80;
	add.rn.f32 	%f97, %f81, %f82;
	add.rn.f32 	%f98, %f97, %f83;
	add.rn.f32 	%f99, %f98, %f84;
	add.rn.f32 	%f100, %f99, %f85;
	add.rn.f32 	%f101, %f100, %f86;
	add.rn.f32 	%f102, %f101, %f87;
	add.rn.f32 	%f103, %f102, %f88;
	add.rn.f32 	%f104, %f103, %f89;
	add.rn.f32 	%f105, %f104, %f90;
	add.rn.f32 	%f106, %f105, %f91;
	add.rn.f32 	%f107, %f106, %f92;
	add.rn.f32 	%f108, %f107, %f93;
	add.rn.f32 	%f109, %f108, %f94;
	add.rn.f32 	%f110, %f109, %f95;
	add.rn.f32 	%f111, %f110, %f96;
	mov.b32 	%r135, %f111;
	shfl.sync.bfly.b32	%r136, %r135, 16, 31, -1;
	mov.b32 	%f112, %r136;
	add.rn.f32 	%f113, %f111, %f112;
	mov.b32 	%r137, %f113;
	shfl.sync.bfly.b32	%r138, %r137, 8, 31, -1;
	mov.b32 	%f114, %r138;
	add.rn.f32 	%f115, %f113, %f114;
	mov.b32 	%r139, %f115;
	shfl.sync.bfly.b32	%r140, %r139, 4, 31, -1;
	mov.b32 	%f116, %r140;
	add.rn.f32 	%f117, %f115, %f116;
	mov.b32 	%r141, %f117;
	shfl.sync.bfly.b32	%r142, %r141, 2, 31, -1;
	mov.b32 	%f118, %r142;
	add.rn.f32 	%f119, %f117, %f118;
	mov.b32 	%r143, %f119;
	shfl.sync.bfly.b32	%r144, %r143, 1, 31, -1;
	mov.b32 	%f120, %r144;
	add.rn.f32 	%f121, %f119, %f120;
	setp.eq.s32 	%p1, %r130, 0;
	shr.u32 	%r145, %r129, 3;
	and.b32  	%r146, %r145, 4;
	cvt.u64.u32 	%rd29, %r146;
	mov.u64 	%rd30, global_smem;
	add.s64 	%rd31, %rd30, %rd29;
	mov.b32 	%r75, %f121;
	cvt.u32.u64 	%r74, %rd31;
	// begin inline asm
	@%p1 st.shared.b32 [ %r74 + 0 ], %r75;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r129, 2;
	shl.b32 	%r147, %r129, 2;
	cvt.u64.u32 	%rd32, %r147;
	add.s64 	%rd33, %rd30, %rd32;
	cvt.u32.u64 	%r77, %rd33;
	// begin inline asm
	@%p2 ld.shared.b32 %r76, [ %r77 + 0 ];
	// end inline asm
	mov.b32 	%f122, %r76;
	shfl.sync.bfly.b32	%r148, %r76, 1, 31, -1;
	mov.b32 	%f123, %r148;
	add.rn.f32 	%f124, %f122, %f123;
	setp.eq.s32 	%p3, %r129, 0;
	mov.b32 	%r79, %f124;
	// begin inline asm
	@%p3 st.shared.b32 [ %r77 + 0 ], %r79;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f125, [global_smem];
	mul.rn.f32 	%f126, %f125, 0f3A800000;
	// begin inline asm
	mov.u32 %r80, 0x0;
	ld.global.b32 { %r80 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f127, %r80;
	add.rn.f32 	%f128, %f126, %f127;
	rsqrt.approx.f32 	%f129, %f128;
	mul.rn.f32 	%f130, %f65, %f129;
	mul.rn.f32 	%f131, %f66, %f129;
	mul.rn.f32 	%f132, %f67, %f129;
	mul.rn.f32 	%f133, %f68, %f129;
	mul.rn.f32 	%f134, %f69, %f129;
	mul.rn.f32 	%f135, %f70, %f129;
	mul.rn.f32 	%f136, %f71, %f129;
	mul.rn.f32 	%f137, %f72, %f129;
	mul.rn.f32 	%f138, %f73, %f129;
	mul.rn.f32 	%f139, %f74, %f129;
	mul.rn.f32 	%f140, %f75, %f129;
	mul.rn.f32 	%f141, %f76, %f129;
	mul.rn.f32 	%f142, %f77, %f129;
	mul.rn.f32 	%f143, %f78, %f129;
	mul.rn.f32 	%f144, %f79, %f129;
	mul.rn.f32 	%f145, %f80, %f129;
	add.s64 	%rd8, %rd17, %rd26;
	add.s64 	%rd9, %rd8, 1024;
	// begin inline asm
	mov.u32 %r81, 0x0;
	mov.u32 %r82, 0x0;
	mov.u32 %r83, 0x0;
	mov.u32 %r84, 0x0;
	ld.global.v4.b32 { %r81, %r82, %r83, %r84 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r81;
	mov.b32 	{%rs51, %rs52}, %r82;
	mov.b32 	{%rs53, %rs54}, %r83;
	mov.b32 	{%rs55, %rs56}, %r84;
	// begin inline asm
	mov.u32 %r85, 0x0;
	mov.u32 %r86, 0x0;
	mov.u32 %r87, 0x0;
	mov.u32 %r88, 0x0;
	ld.global.v4.b32 { %r85, %r86, %r87, %r88 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r85;
	mov.b32 	{%rs59, %rs60}, %r86;
	mov.b32 	{%rs61, %rs62}, %r87;
	mov.b32 	{%rs63, %rs64}, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs49;
	// end inline asm
	mov.b32 	%f146, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs50;
	// end inline asm
	mov.b32 	%f147, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs51;
	// end inline asm
	mov.b32 	%f148, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs52;
	// end inline asm
	mov.b32 	%f149, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs53;
	// end inline asm
	mov.b32 	%f150, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs54;
	// end inline asm
	mov.b32 	%f151, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs55;
	// end inline asm
	mov.b32 	%f152, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs56;
	// end inline asm
	mov.b32 	%f153, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs57;
	// end inline asm
	mov.b32 	%f154, %r97;
	// begin inline asm
	cvt.f32.bf16 %r98, %rs58;
	// end inline asm
	mov.b32 	%f155, %r98;
	// begin inline asm
	cvt.f32.bf16 %r99, %rs59;
	// end inline asm
	mov.b32 	%f156, %r99;
	// begin inline asm
	cvt.f32.bf16 %r100, %rs60;
	// end inline asm
	mov.b32 	%f157, %r100;
	// begin inline asm
	cvt.f32.bf16 %r101, %rs61;
	// end inline asm
	mov.b32 	%f158, %r101;
	// begin inline asm
	cvt.f32.bf16 %r102, %rs62;
	// end inline asm
	mov.b32 	%f159, %r102;
	// begin inline asm
	cvt.f32.bf16 %r103, %rs63;
	// end inline asm
	mov.b32 	%f160, %r103;
	// begin inline asm
	cvt.f32.bf16 %r104, %rs64;
	// end inline asm
	mov.b32 	%f161, %r104;
	mul.rn.f32 	%f162, %f130, %f146;
	mul.rn.f32 	%f163, %f131, %f147;
	mul.rn.f32 	%f164, %f132, %f148;
	mul.rn.f32 	%f165, %f133, %f149;
	mul.rn.f32 	%f166, %f134, %f150;
	mul.rn.f32 	%f167, %f135, %f151;
	mul.rn.f32 	%f168, %f136, %f152;
	mul.rn.f32 	%f169, %f137, %f153;
	mul.rn.f32 	%f170, %f138, %f154;
	mul.rn.f32 	%f171, %f139, %f155;
	mul.rn.f32 	%f172, %f140, %f156;
	mul.rn.f32 	%f173, %f141, %f157;
	mul.rn.f32 	%f174, %f142, %f158;
	mul.rn.f32 	%f175, %f143, %f159;
	mul.rn.f32 	%f176, %f144, %f160;
	mul.rn.f32 	%f177, %f145, %f161;
	mov.b32 	%r105, %f162;
	// begin inline asm
	cvt.rn.bf16.f32 %rs65, %r105;
	// end inline asm
	mov.b32 	%r106, %f163;
	// begin inline asm
	cvt.rn.bf16.f32 %rs66, %r106;
	// end inline asm
	mov.b32 	%r107, %f164;
	// begin inline asm
	cvt.rn.bf16.f32 %rs67, %r107;
	// end inline asm
	mov.b32 	%r108, %f165;
	// begin inline asm
	cvt.rn.bf16.f32 %rs68, %r108;
	// end inline asm
	mov.b32 	%r109, %f166;
	// begin inline asm
	cvt.rn.bf16.f32 %rs69, %r109;
	// end inline asm
	mov.b32 	%r110, %f167;
	// begin inline asm
	cvt.rn.bf16.f32 %rs70, %r110;
	// end inline asm
	mov.b32 	%r111, %f168;
	// begin inline asm
	cvt.rn.bf16.f32 %rs71, %r111;
	// end inline asm
	mov.b32 	%r112, %f169;
	// begin inline asm
	cvt.rn.bf16.f32 %rs72, %r112;
	// end inline asm
	mov.b32 	%r113, %f170;
	// begin inline asm
	cvt.rn.bf16.f32 %rs73, %r113;
	// end inline asm
	mov.b32 	%r114, %f171;
	// begin inline asm
	cvt.rn.bf16.f32 %rs74, %r114;
	// end inline asm
	mov.b32 	%r115, %f172;
	// begin inline asm
	cvt.rn.bf16.f32 %rs75, %r115;
	// end inline asm
	mov.b32 	%r116, %f173;
	// begin inline asm
	cvt.rn.bf16.f32 %rs76, %r116;
	// end inline asm
	mov.b32 	%r117, %f174;
	// begin inline asm
	cvt.rn.bf16.f32 %rs77, %r117;
	// end inline asm
	mov.b32 	%r118, %f175;
	// begin inline asm
	cvt.rn.bf16.f32 %rs78, %r118;
	// end inline asm
	mov.b32 	%r119, %f176;
	// begin inline asm
	cvt.rn.bf16.f32 %rs79, %r119;
	// end inline asm
	mov.b32 	%r120, %f177;
	// begin inline asm
	cvt.rn.bf16.f32 %rs80, %r120;
	// end inline asm
	add.s64 	%rd34, %rd14, %rd24;
	add.s64 	%rd10, %rd34, %rd26;
	add.s64 	%rd11, %rd10, 1024;
	mov.b32 	%r121, {%rs65, %rs66};
	mov.b32 	%r122, {%rs67, %rs68};
	mov.b32 	%r123, {%rs69, %rs70};
	mov.b32 	%r124, {%rs71, %rs72};
	// begin inline asm
	st.global.v4.b32 [ %rd10 + 0 ], { %r121, %r122, %r123, %r124 };
	// end inline asm
	mov.b32 	%r125, {%rs73, %rs74};
	mov.b32 	%r126, {%rs75, %rs76};
	mov.b32 	%r127, {%rs77, %rs78};
	mov.b32 	%r128, {%rs79, %rs80};
	// begin inline asm
	st.global.v4.b32 [ %rd11 + 0 ], { %r125, %r126, %r127, %r128 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 520192;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	triton_softmax_3_0
.visible .entry triton_softmax_3_0(
	.param .u64 .ptr .align 16 triton_softmax_3_0_param_0,
	.param .u64 .ptr .align 128 triton_softmax_3_0_param_1,
	.param .u64 .ptr .align 128 triton_softmax_3_0_param_2
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<59>;
	.reg .f32 	%f<44>;
	.reg .b64 	%rd<36>;

	ld.param.u64 	%rd5, [triton_softmax_3_0_param_0];
	ld.param.u64 	%rd6, [triton_softmax_3_0_param_2];
	cvta.to.global.u64 	%rd7, %rd6;
	ld.param.u64 	%rd8, [triton_softmax_3_0_param_1];
	cvta.to.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd2, %rd5;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r33, %r1, 9;
	cvt.u64.u32 	%rd10, %r33;
	and.b64  	%rd11, %rd10, 512;
	mul.wide.s32 	%rd12, %r1, 2048;
	or.b64  	%rd13, %rd12, %rd11;
	shl.b64 	%rd14, %rd13, 1;
	or.b64  	%rd15, %rd14, 4096;
	add.s64 	%rd16, %rd9, %rd15;
	mov.u32 	%r34, %tid.x;
	shl.b32 	%r35, %r34, 3;
	and.b32  	%r36, %r35, 248;
	setp.gt.u32 	%p3, %r34, 31;
	selp.b32 	%r37, 256, 0, %p3;
	or.b32  	%r38, %r36, %r37;
	mul.wide.u32 	%rd17, %r38, 2;
	add.s64 	%rd1, %rd16, %rd17;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs1;
	// end inline asm
	mov.b32 	%f1, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs2;
	// end inline asm
	mov.b32 	%f2, %r7;
	// begin inline asm
	cvt.f32.bf16 %r8, %rs3;
	// end inline asm
	mov.b32 	%f3, %r8;
	// begin inline asm
	cvt.f32.bf16 %r9, %rs4;
	// end inline asm
	mov.b32 	%f4, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	mul.rn.f32 	%f9, %f1, %f1;
	mul.rn.f32 	%f10, %f2, %f2;
	mul.rn.f32 	%f11, %f3, %f3;
	mul.rn.f32 	%f12, %f4, %f4;
	mul.rn.f32 	%f13, %f5, %f5;
	mul.rn.f32 	%f14, %f6, %f6;
	mul.rn.f32 	%f15, %f7, %f7;
	mul.rn.f32 	%f16, %f8, %f8;
	add.rn.f32 	%f17, %f9, %f10;
	add.rn.f32 	%f18, %f17, %f11;
	add.rn.f32 	%f19, %f18, %f12;
	add.rn.f32 	%f20, %f19, %f13;
	add.rn.f32 	%f21, %f20, %f14;
	add.rn.f32 	%f22, %f21, %f15;
	add.rn.f32 	%f23, %f22, %f16;
	mov.b32 	%r39, %f23;
	shfl.sync.bfly.b32	%r40, %r39, 8, 31, -1;
	mov.b32 	%f24, %r40;
	add.rn.f32 	%f25, %f23, %f24;
	mov.b32 	%r41, %f25;
	shfl.sync.bfly.b32	%r42, %r41, 4, 31, -1;
	mov.b32 	%f26, %r42;
	add.rn.f32 	%f27, %f25, %f26;
	mov.b32 	%r43, %f27;
	shfl.sync.bfly.b32	%r44, %r43, 2, 31, -1;
	mov.b32 	%f28, %r44;
	add.rn.f32 	%f29, %f27, %f28;
	mov.b32 	%r45, %f29;
	shfl.sync.bfly.b32	%r46, %r45, 1, 31, -1;
	mov.b32 	%f30, %r46;
	add.rn.f32 	%f31, %f29, %f30;
	mul.rn.f32 	%f32, %f31, 0f3C000000;
	// begin inline asm
	mov.u32 %r14, 0x0;
	ld.global.b32 { %r14 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r14;
	add.rn.f32 	%f34, %f32, %f33;
	rsqrt.approx.f32 	%f35, %f34;
	mul.rn.f32 	%f36, %f1, %f35;
	mul.rn.f32 	%f37, %f2, %f35;
	mul.rn.f32 	%f38, %f3, %f35;
	mul.rn.f32 	%f39, %f4, %f35;
	mul.rn.f32 	%f40, %f5, %f35;
	mul.rn.f32 	%f41, %f6, %f35;
	mul.rn.f32 	%f42, %f7, %f35;
	mul.rn.f32 	%f43, %f8, %f35;
	add.s64 	%rd18, %rd7, %rd12;
	selp.b64 	%rd19, 128, 0, %p3;
	selp.b64 	%rd20, 384, 256, %p3;
	shl.b32 	%r47, %r34, 2;
	and.b32  	%r48, %r47, 124;
	cvt.u64.u32 	%rd21, %r48;
	or.b64  	%rd22, %rd19, %rd21;
	or.b64  	%rd23, %rd20, %rd21;
	shl.b64 	%rd24, %rd22, 2;
	add.s64 	%rd3, %rd18, %rd24;
	shl.b64 	%rd25, %rd23, 2;
	add.s64 	%rd4, %rd18, %rd25;
	selp.b32 	%r49, 128, 0, %p3;
	or.b32  	%r50, %r48, %r49;
	shr.u32 	%r51, %r38, 4;
	and.b32  	%r52, %r51, 24;
	add.s32 	%r53, %r52, %r38;
	shl.b32 	%r54, %r53, 2;
	cvt.u64.u32 	%rd26, %r54;
	mov.u64 	%rd27, global_smem;
	add.s64 	%rd28, %rd27, %rd26;
	mov.b32 	%r16, %f36;
	mov.b32 	%r17, %f37;
	mov.b32 	%r18, %f38;
	mov.b32 	%r19, %f39;
	mov.b32 	%r21, %f40;
	mov.b32 	%r22, %f41;
	mov.b32 	%r23, %f42;
	mov.b32 	%r24, %f43;
	cvt.u32.u64 	%r15, %rd28;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r15 + 0 ], { %r16, %r17, %r18, %r19 };
	// end inline asm
	add.s32 	%r20, %r15, 16;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r20 + 0 ], { %r21, %r22, %r23, %r24 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r55, %r49, 4;
	add.s32 	%r56, %r55, %r50;
	mul.wide.u32 	%rd29, %r56, 4;
	add.s64 	%rd30, %rd27, %rd29;
	or.b32  	%r57, %r49, 256;
	shr.u32 	%r58, %r57, 4;
	cvt.u64.u32 	%rd31, %r58;
	cvt.u64.u32 	%rd32, %r50;
	add.s64 	%rd33, %rd31, %rd32;
	shl.b64 	%rd34, %rd33, 2;
	add.s64 	%rd35, %rd27, %rd34;
	ld.shared.v4.u32 	{%r29, %r30, %r31, %r32}, [%rd35+1024];
	ld.shared.v4.u32 	{%r25, %r26, %r27, %r28}, [%rd30];
	// begin inline asm
	st.global.v4.b32 [ %rd3 + 0 ], { %r25, %r26, %r27, %r28 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd4 + 0 ], { %r29, %r30, %r31, %r32 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_3,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_4
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<7>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<15>;
	.reg .b64 	%rd<25>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_4];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd9, %rd4;
	cvta.to.global.u64 	%rd10, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd11, %r8, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	mul.wide.u32 	%rd13, %r3, 2;
	add.s64 	%rd14, %rd9, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd15, %r9;
	add.s64 	%rd16, %rd6, %rd15;
	ld.global.nc.u32 	%r10, [%rd16];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd17, %r14, 2;
	add.s64 	%rd18, %rd8, %rd17;
	ld.global.nc.u16 	%rs2, [%rd18];
	cvt.f32.bf16 	%f4, %rs2;
	mul.rn.f32 	%f5, %f3, %f4;
	or.b32  	%r15, %r1, 64;
	ld.global.nc.f32 	%f6, [%rd12+256];
	mul.wide.u32 	%rd19, %r15, 2;
	add.s64 	%rd20, %rd9, %rd19;
	ld.global.nc.u16 	%rs3, [%rd20];
	cvt.f32.bf16 	%f7, %rs3;
	mul.rn.f32 	%f8, %f6, %f7;
	or.b32  	%r16, %r13, %r15;
	mul.wide.u32 	%rd21, %r16, 2;
	add.s64 	%rd22, %rd8, %rd21;
	ld.global.nc.u16 	%rs4, [%rd22];
	cvt.f32.bf16 	%f9, %rs4;
	mul.rn.f32 	%f10, %f8, %f9;
	sub.rn.f32 	%f11, %f5, %f10;
	cvt.rn.bf16.f32 	%rs5, %f11;
	mul.wide.u32 	%rd23, %r8, 2;
	add.s64 	%rd24, %rd3, %rd23;
	st.global.b16 	[%rd24], %rs5;
	mul.rn.f32 	%f12, %f8, %f4;
	mul.rn.f32 	%f13, %f3, %f9;
	add.rn.f32 	%f14, %f12, %f13;
	cvt.rn.bf16.f32 	%rs6, %f14;
	st.global.b16 	[%rd24+128], %rs6;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

#indexing_map = #xla.indexing_map<"(d0) -> (0), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(tid_0, tid_1) -> (17408), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 28672 + 17408), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
module {
  tt.func @fusion_333_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %c1_i64 = arith.constant 1 : i64
    %c28672_i64 = arith.constant 28672 : i64
    %4 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64 = arith.constant 64 : i64
    %5 = arith.index_castui %2 : index to i64
    %6 = arith.subi %c64_i64, %5 : i64
    %c28672_i64_0 = arith.constant 28672 : i64
    %7 = arith.index_castui %4 : index to i64
    %8 = arith.subi %c28672_i64_0, %7 : i64
    %9 = xla.apply_indexing #indexing_map2(%2, %3)
    %10 = arith.index_castui %9 : index to i64
    %11 = tt.addptr %arg3, %10 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %12 = tt.make_tensor_ptr %11, [%6, %8], [%c28672_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %13 = tt.load %12 : !tt.ptr<tensor<1x1024xbf16>>
    %14 = arith.extf %13 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_1 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %15 = xla.apply_indexing #indexing_map3(%2, %3)
    %c64_i64_2 = arith.constant 64 : i64
    %16 = arith.index_castui %2 : index to i64
    %17 = arith.subi %c64_i64_2, %16 : i64
    %c1024_i64_3 = arith.constant 1024 : i64
    %18 = arith.index_castui %15 : index to i64
    %19 = arith.subi %c1024_i64_3, %18 : i64
    %20 = xla.apply_indexing #indexing_map4(%2, %3)
    %21 = arith.index_castui %20 : index to i64
    %22 = tt.addptr %arg2, %21 : !tt.ptr<bf16>, i64
    %c0_i32_4 = arith.constant 0 : i32
    %23 = tt.make_tensor_ptr %22, [%17, %19], [%c1024_i64, %c1_i64_1], [%c0_i32_4, %c0_i32_4] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %24 = tt.load %23 : !tt.ptr<tensor<1x1024xbf16>>
    %25 = arith.extf %24 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_5 = arith.constant 1 : i64
    %c1024_i64_6 = arith.constant 1024 : i64
    %26 = xla.apply_indexing #indexing_map3(%2, %3)
    %c64_i64_7 = arith.constant 64 : i64
    %27 = arith.index_castui %2 : index to i64
    %28 = arith.subi %c64_i64_7, %27 : i64
    %c1024_i64_8 = arith.constant 1024 : i64
    %29 = arith.index_castui %26 : index to i64
    %30 = arith.subi %c1024_i64_8, %29 : i64
    %31 = xla.apply_indexing #indexing_map4(%2, %3)
    %32 = arith.index_castui %31 : index to i64
    %33 = tt.addptr %arg1, %32 : !tt.ptr<f32>, i64
    %c0_i32_9 = arith.constant 0 : i32
    %34 = tt.make_tensor_ptr %33, [%28, %30], [%c1024_i64_6, %c1_i64_5], [%c0_i32_9, %c0_i32_9] {order = array<i32: 1, 0>} : <tensor<1x1024xf32>>
    %35 = tt.load %34 : !tt.ptr<tensor<1x1024xf32>>
    %36 = arith.addf %25, %35 : tensor<1x1024xf32>
    %37 = arith.addf %14, %36 : tensor<1x1024xf32>
    %38 = arith.mulf %37, %37 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %39 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %75 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %75 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_10 = arith.constant 9.765625E-4 : f32
    %40 = tt.splat %cst_10 : f32 -> tensor<1xf32>
    %41 = arith.mulf %39, %40 : tensor<1xf32>
    %42 = xla.apply_indexing #indexing_map3(%2, %3)
    %43 = arith.index_castui %42 : index to i64
    %44 = tt.addptr %arg0, %43 : !tt.ptr<f32>, i64
    %c0_i32_11 = arith.constant 0 : i32
    %45 = tt.make_tensor_ptr %44, [], [], [] {order = array<i32>} : <tensor<f32>>
    %46 = tt.load %44 : !tt.ptr<f32>
    %47 = tt.splat %46 : f32 -> tensor<1xf32>
    %48 = arith.addf %41, %47 : tensor<1xf32>
    %49 = tt.extern_elementwise %48 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %50 = tt.expand_dims %49 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %51 = tt.broadcast %50 : tensor<1x1xf32> -> tensor<1x1024xf32>
    %52 = arith.mulf %37, %51 : tensor<1x1024xf32>
    %c1_i64_12 = arith.constant 1 : i64
    %53 = xla.apply_indexing #indexing_map3(%2, %3)
    %c1024_i64_13 = arith.constant 1024 : i64
    %54 = arith.index_castui %53 : index to i64
    %55 = arith.subi %c1024_i64_13, %54 : i64
    %56 = xla.apply_indexing #indexing_map3(%2, %3)
    %57 = arith.index_castui %56 : index to i64
    %58 = tt.addptr %arg4, %57 : !tt.ptr<bf16>, i64
    %c0_i32_14 = arith.constant 0 : i32
    %59 = tt.make_tensor_ptr %58, [%55], [%c1_i64_12], [%c0_i32_14] {order = array<i32: 0>} : <tensor<1024xbf16>>
    %60 = tt.load %59 : !tt.ptr<tensor<1024xbf16>>
    %61 = arith.extf %60 : tensor<1024xbf16> to tensor<1024xf32>
    %62 = tt.expand_dims %61 {axis = 0 : i32} : tensor<1024xf32> -> tensor<1x1024xf32>
    %63 = tt.broadcast %62 : tensor<1x1024xf32> -> tensor<1x1024xf32>
    %64 = arith.mulf %52, %63 : tensor<1x1024xf32>
    %65 = arith.truncf %64 : tensor<1x1024xf32> to tensor<1x1024xbf16>
    %c1_i64_15 = arith.constant 1 : i64
    %c1024_i64_16 = arith.constant 1024 : i64
    %66 = xla.apply_indexing #indexing_map3(%2, %3)
    %c64_i64_17 = arith.constant 64 : i64
    %67 = arith.index_castui %2 : index to i64
    %68 = arith.subi %c64_i64_17, %67 : i64
    %c1024_i64_18 = arith.constant 1024 : i64
    %69 = arith.index_castui %66 : index to i64
    %70 = arith.subi %c1024_i64_18, %69 : i64
    %71 = xla.apply_indexing #indexing_map4(%2, %3)
    %72 = arith.index_castui %71 : index to i64
    %73 = tt.addptr %arg5, %72 : !tt.ptr<bf16>, i64
    %c0_i32_19 = arith.constant 0 : i32
    %74 = tt.make_tensor_ptr %73, [%68, %70], [%c1024_i64_16, %c1_i64_15], [%c0_i32_19, %c0_i32_19] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    tt.store %74, %65 : !tt.ptr<tensor<1x1024xbf16>>
    tt.return
  }
}

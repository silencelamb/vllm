#indexing_map = #xla.indexing_map<"(d0) -> (d0 floordiv 4), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(d0) -> ((d0 mod 4) floordiv 4), domain: d0 in [0, 63]">
#indexing_map2 = #xla.indexing_map<"(d0) -> (d0 mod 4), domain: d0 in [0, 63]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1, tid_2) -> (0), domain: tid_0 in [0, 15], tid_1 in [0, 0], tid_2 in [0, 3]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1, tid_2) -> (tid_2 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 0], tid_2 in [0, 3]">
#indexing_map5 = #xla.indexing_map<"(tid_0, tid_1, tid_2) -> (tid_0 * 1024 + tid_2 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 0], tid_2 in [0, 3]">
#indexing_map6 = #xla.indexing_map<"(tid_0, tid_1, tid_2) -> (tid_0 * 1024), domain: tid_0 in [0, 15], tid_1 in [0, 0], tid_2 in [0, 3]">
module {
  tt.func @fusion_9_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %5 = xla.apply_indexing #indexing_map2(%2)
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %6 = xla.apply_indexing #indexing_map3(%3, %4, %5)
    %7 = xla.apply_indexing #indexing_map4(%3, %4, %5)
    %c16_i64 = arith.constant 16 : i64
    %8 = arith.index_castui %3 : index to i64
    %9 = arith.subi %c16_i64, %8 : i64
    %c1_i64_0 = arith.constant 1 : i64
    %10 = arith.index_castui %6 : index to i64
    %11 = arith.subi %c1_i64_0, %10 : i64
    %c1024_i64_1 = arith.constant 1024 : i64
    %12 = arith.index_castui %7 : index to i64
    %13 = arith.subi %c1024_i64_1, %12 : i64
    %14 = xla.apply_indexing #indexing_map5(%3, %4, %5)
    %15 = arith.index_castui %14 : index to i64
    %16 = tt.addptr %arg1, %15 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %17 = tt.make_tensor_ptr %16, [%9, %11, %13], [%c1024_i64, %c0_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    %18 = tt.load %17 : !tt.ptr<tensor<1x1x256xbf16>>
    %19 = arith.extf %18 : tensor<1x1x256xbf16> to tensor<1x1x256xf32>
    %c1_i64_2 = arith.constant 1 : i64
    %c0_i64_3 = arith.constant 0 : i64
    %c1024_i64_4 = arith.constant 1024 : i64
    %20 = xla.apply_indexing #indexing_map3(%3, %4, %5)
    %21 = xla.apply_indexing #indexing_map3(%3, %4, %5)
    %c16_i64_5 = arith.constant 16 : i64
    %22 = arith.index_castui %3 : index to i64
    %23 = arith.subi %c16_i64_5, %22 : i64
    %c1_i64_6 = arith.constant 1 : i64
    %24 = arith.index_castui %20 : index to i64
    %25 = arith.subi %c1_i64_6, %24 : i64
    %c1024_i64_7 = arith.constant 1024 : i64
    %26 = arith.index_castui %21 : index to i64
    %27 = arith.subi %c1024_i64_7, %26 : i64
    %28 = xla.apply_indexing #indexing_map6(%3, %4, %5)
    %29 = arith.index_castui %28 : index to i64
    %30 = tt.addptr %arg1, %29 : !tt.ptr<bf16>, i64
    %c0_i32_8 = arith.constant 0 : i32
    %31 = tt.make_tensor_ptr %30, [%23, %25, %27], [%c1024_i64_4, %c0_i64_3, %c1_i64_2], [%c0_i32_8, %c0_i32_8, %c0_i32_8] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %32 = tt.load %31 : !tt.ptr<tensor<1x1x1024xbf16>>
    %33 = arith.extf %32 : tensor<1x1x1024xbf16> to tensor<1x1x1024xf32>
    %34 = arith.mulf %33, %33 : tensor<1x1x1024xf32>
    %35 = tt.reshape %34 : tensor<1x1x1024xf32> -> tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %77 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %77 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_9 = arith.constant 9.765625E-4 : f32
    %37 = tt.splat %cst_9 : f32 -> tensor<1xf32>
    %38 = arith.mulf %36, %37 : tensor<1xf32>
    %39 = xla.apply_indexing #indexing_map3(%3, %4, %5)
    %40 = arith.index_castui %39 : index to i64
    %41 = tt.addptr %arg0, %40 : !tt.ptr<f32>, i64
    %c0_i32_10 = arith.constant 0 : i32
    %42 = tt.make_tensor_ptr %41, [], [], [] {order = array<i32>} : <tensor<f32>>
    %43 = tt.load %41 : !tt.ptr<f32>
    %44 = tt.splat %43 : f32 -> tensor<1xf32>
    %45 = arith.addf %38, %44 : tensor<1xf32>
    %46 = tt.extern_elementwise %45 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %47 = tt.expand_dims %46 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %48 = tt.expand_dims %47 {axis = 2 : i32} : tensor<1x1xf32> -> tensor<1x1x1xf32>
    %49 = tt.broadcast %48 : tensor<1x1x1xf32> -> tensor<1x1x256xf32>
    %50 = arith.mulf %19, %49 : tensor<1x1x256xf32>
    %c1_i64_11 = arith.constant 1 : i64
    %51 = xla.apply_indexing #indexing_map4(%3, %4, %5)
    %c1024_i64_12 = arith.constant 1024 : i64
    %52 = arith.index_castui %51 : index to i64
    %53 = arith.subi %c1024_i64_12, %52 : i64
    %54 = xla.apply_indexing #indexing_map4(%3, %4, %5)
    %55 = arith.index_castui %54 : index to i64
    %56 = tt.addptr %arg2, %55 : !tt.ptr<bf16>, i64
    %c0_i32_13 = arith.constant 0 : i32
    %57 = tt.make_tensor_ptr %56, [%53], [%c1_i64_11], [%c0_i32_13] {order = array<i32: 0>} : <tensor<256xbf16>>
    %58 = tt.load %57 : !tt.ptr<tensor<256xbf16>>
    %59 = arith.extf %58 : tensor<256xbf16> to tensor<256xf32>
    %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<256xf32> -> tensor<1x256xf32>
    %61 = tt.expand_dims %60 {axis = 1 : i32} : tensor<1x256xf32> -> tensor<1x1x256xf32>
    %62 = tt.broadcast %61 : tensor<1x1x256xf32> -> tensor<1x1x256xf32>
    %63 = arith.mulf %50, %62 : tensor<1x1x256xf32>
    %64 = arith.truncf %63 : tensor<1x1x256xf32> to tensor<1x1x256xbf16>
    %c1_i64_14 = arith.constant 1 : i64
    %c1024_i64_15 = arith.constant 1024 : i64
    %c1024_i64_16 = arith.constant 1024 : i64
    %65 = xla.apply_indexing #indexing_map3(%3, %4, %5)
    %66 = xla.apply_indexing #indexing_map4(%3, %4, %5)
    %c16_i64_17 = arith.constant 16 : i64
    %67 = arith.index_castui %3 : index to i64
    %68 = arith.subi %c16_i64_17, %67 : i64
    %c1_i64_18 = arith.constant 1 : i64
    %69 = arith.index_castui %65 : index to i64
    %70 = arith.subi %c1_i64_18, %69 : i64
    %c1024_i64_19 = arith.constant 1024 : i64
    %71 = arith.index_castui %66 : index to i64
    %72 = arith.subi %c1024_i64_19, %71 : i64
    %73 = xla.apply_indexing #indexing_map5(%3, %4, %5)
    %74 = arith.index_castui %73 : index to i64
    %75 = tt.addptr %arg3, %74 : !tt.ptr<bf16>, i64
    %c0_i32_20 = arith.constant 0 : i32
    %76 = tt.make_tensor_ptr %75, [%68, %70, %72], [%c1024_i64_16, %c1024_i64_15, %c1_i64_14], [%c0_i32_20, %c0_i32_20, %c0_i32_20] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    tt.store %76, %64 : !tt.ptr<tensor<1x1x256xbf16>>
    tt.return
  }
}

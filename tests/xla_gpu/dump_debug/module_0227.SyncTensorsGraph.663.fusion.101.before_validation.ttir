#indexing_map = #xla.indexing_map<"(d0) -> (d0 floordiv 4), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(d0) -> (d0 mod 4), domain: d0 in [0, 63]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_1 * 256 + 5120), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 7168 + tid_1 * 256 + 5120), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_1 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map5 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024 + tid_1 * 256), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map6 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_1 * 256 + 6144), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map7 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 7168 + tid_1 * 256 + 6144), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map8 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map9 = #xla.indexing_map<"(tid_0, tid_1) -> (5120), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map10 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 7168 + 5120), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map11 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map12 = #xla.indexing_map<"(tid_0, tid_1) -> (6144), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
#indexing_map13 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 7168 + 6144), domain: tid_0 in [0, 15], tid_1 in [0, 3]">
module {
  tt.func @fusion_101_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %c1_i64 = arith.constant 1 : i64
    %c7168_i64 = arith.constant 7168 : i64
    %5 = xla.apply_indexing #indexing_map2(%3, %4)
    %c16_i64 = arith.constant 16 : i64
    %6 = arith.index_castui %3 : index to i64
    %7 = arith.subi %c16_i64, %6 : i64
    %c7168_i64_0 = arith.constant 7168 : i64
    %8 = arith.index_castui %5 : index to i64
    %9 = arith.subi %c7168_i64_0, %8 : i64
    %10 = xla.apply_indexing #indexing_map3(%3, %4)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg3, %11 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %13 = tt.make_tensor_ptr %12, [%7, %9], [%c7168_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x256xbf16>>
    %15 = arith.extf %14 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_1 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %16 = xla.apply_indexing #indexing_map4(%3, %4)
    %c16_i64_2 = arith.constant 16 : i64
    %17 = arith.index_castui %3 : index to i64
    %18 = arith.subi %c16_i64_2, %17 : i64
    %c1024_i64_3 = arith.constant 1024 : i64
    %19 = arith.index_castui %16 : index to i64
    %20 = arith.subi %c1024_i64_3, %19 : i64
    %21 = xla.apply_indexing #indexing_map5(%3, %4)
    %22 = arith.index_castui %21 : index to i64
    %23 = tt.addptr %arg4, %22 : !tt.ptr<bf16>, i64
    %c0_i32_4 = arith.constant 0 : i32
    %24 = tt.make_tensor_ptr %23, [%18, %20], [%c1024_i64, %c1_i64_1], [%c0_i32_4, %c0_i32_4] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %25 = tt.load %24 : !tt.ptr<tensor<1x256xbf16>>
    %26 = arith.extf %25 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_5 = arith.constant 1 : i64
    %c7168_i64_6 = arith.constant 7168 : i64
    %27 = xla.apply_indexing #indexing_map6(%3, %4)
    %c16_i64_7 = arith.constant 16 : i64
    %28 = arith.index_castui %3 : index to i64
    %29 = arith.subi %c16_i64_7, %28 : i64
    %c7168_i64_8 = arith.constant 7168 : i64
    %30 = arith.index_castui %27 : index to i64
    %31 = arith.subi %c7168_i64_8, %30 : i64
    %32 = xla.apply_indexing #indexing_map7(%3, %4)
    %33 = arith.index_castui %32 : index to i64
    %34 = tt.addptr %arg3, %33 : !tt.ptr<bf16>, i64
    %c0_i32_9 = arith.constant 0 : i32
    %35 = tt.make_tensor_ptr %34, [%29, %31], [%c7168_i64_6, %c1_i64_5], [%c0_i32_9, %c0_i32_9] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %36 = tt.load %35 : !tt.ptr<tensor<1x256xbf16>>
    %37 = arith.extf %36 : tensor<1x256xbf16> to tensor<1x256xf32>
    %c1_i64_10 = arith.constant 1 : i64
    %c1024_i64_11 = arith.constant 1024 : i64
    %c0_i64 = arith.constant 0 : i64
    %38 = xla.apply_indexing #indexing_map8(%3, %4)
    %39 = xla.apply_indexing #indexing_map4(%3, %4)
    %c16_i64_12 = arith.constant 16 : i64
    %40 = arith.index_castui %3 : index to i64
    %41 = arith.subi %c16_i64_12, %40 : i64
    %c1_i64_13 = arith.constant 1 : i64
    %42 = arith.index_castui %38 : index to i64
    %43 = arith.subi %c1_i64_13, %42 : i64
    %c1024_i64_14 = arith.constant 1024 : i64
    %44 = arith.index_castui %39 : index to i64
    %45 = arith.subi %c1024_i64_14, %44 : i64
    %46 = xla.apply_indexing #indexing_map5(%3, %4)
    %47 = arith.index_castui %46 : index to i64
    %48 = tt.addptr %arg2, %47 : !tt.ptr<bf16>, i64
    %c0_i32_15 = arith.constant 0 : i32
    %49 = tt.make_tensor_ptr %48, [%41, %43, %45], [%c1024_i64_11, %c0_i64, %c1_i64_10], [%c0_i32_15, %c0_i32_15, %c0_i32_15] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    %50 = tt.load %49 : !tt.ptr<tensor<1x1x256xbf16>>
    %51 = tt.trans %50 {order = array<i32: 1, 0, 2>} : tensor<1x1x256xbf16> -> tensor<1x1x256xbf16>
    %52 = tt.reshape %51 : tensor<1x1x256xbf16> -> tensor<1x256xbf16>
    %53 = arith.extf %52 : tensor<1x256xbf16> to tensor<1x256xf32>
    %54 = arith.addf %37, %53 : tensor<1x256xf32>
    %55 = arith.addf %26, %54 : tensor<1x256xf32>
    %56 = arith.addf %15, %55 : tensor<1x256xf32>
    %c1_i64_16 = arith.constant 1 : i64
    %c7168_i64_17 = arith.constant 7168 : i64
    %57 = xla.apply_indexing #indexing_map9(%3, %4)
    %c16_i64_18 = arith.constant 16 : i64
    %58 = arith.index_castui %3 : index to i64
    %59 = arith.subi %c16_i64_18, %58 : i64
    %c7168_i64_19 = arith.constant 7168 : i64
    %60 = arith.index_castui %57 : index to i64
    %61 = arith.subi %c7168_i64_19, %60 : i64
    %62 = xla.apply_indexing #indexing_map10(%3, %4)
    %63 = arith.index_castui %62 : index to i64
    %64 = tt.addptr %arg3, %63 : !tt.ptr<bf16>, i64
    %c0_i32_20 = arith.constant 0 : i32
    %65 = tt.make_tensor_ptr %64, [%59, %61], [%c7168_i64_17, %c1_i64_16], [%c0_i32_20, %c0_i32_20] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %66 = tt.load %65 : !tt.ptr<tensor<1x1024xbf16>>
    %67 = arith.extf %66 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_21 = arith.constant 1 : i64
    %c1024_i64_22 = arith.constant 1024 : i64
    %68 = xla.apply_indexing #indexing_map8(%3, %4)
    %c16_i64_23 = arith.constant 16 : i64
    %69 = arith.index_castui %3 : index to i64
    %70 = arith.subi %c16_i64_23, %69 : i64
    %c1024_i64_24 = arith.constant 1024 : i64
    %71 = arith.index_castui %68 : index to i64
    %72 = arith.subi %c1024_i64_24, %71 : i64
    %73 = xla.apply_indexing #indexing_map11(%3, %4)
    %74 = arith.index_castui %73 : index to i64
    %75 = tt.addptr %arg4, %74 : !tt.ptr<bf16>, i64
    %c0_i32_25 = arith.constant 0 : i32
    %76 = tt.make_tensor_ptr %75, [%70, %72], [%c1024_i64_22, %c1_i64_21], [%c0_i32_25, %c0_i32_25] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %77 = tt.load %76 : !tt.ptr<tensor<1x1024xbf16>>
    %78 = arith.extf %77 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_26 = arith.constant 1 : i64
    %c7168_i64_27 = arith.constant 7168 : i64
    %79 = xla.apply_indexing #indexing_map12(%3, %4)
    %c16_i64_28 = arith.constant 16 : i64
    %80 = arith.index_castui %3 : index to i64
    %81 = arith.subi %c16_i64_28, %80 : i64
    %c7168_i64_29 = arith.constant 7168 : i64
    %82 = arith.index_castui %79 : index to i64
    %83 = arith.subi %c7168_i64_29, %82 : i64
    %84 = xla.apply_indexing #indexing_map13(%3, %4)
    %85 = arith.index_castui %84 : index to i64
    %86 = tt.addptr %arg3, %85 : !tt.ptr<bf16>, i64
    %c0_i32_30 = arith.constant 0 : i32
    %87 = tt.make_tensor_ptr %86, [%81, %83], [%c7168_i64_27, %c1_i64_26], [%c0_i32_30, %c0_i32_30] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %88 = tt.load %87 : !tt.ptr<tensor<1x1024xbf16>>
    %89 = arith.extf %88 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_31 = arith.constant 1 : i64
    %c1024_i64_32 = arith.constant 1024 : i64
    %c0_i64_33 = arith.constant 0 : i64
    %90 = xla.apply_indexing #indexing_map8(%3, %4)
    %91 = xla.apply_indexing #indexing_map8(%3, %4)
    %c16_i64_34 = arith.constant 16 : i64
    %92 = arith.index_castui %3 : index to i64
    %93 = arith.subi %c16_i64_34, %92 : i64
    %c1_i64_35 = arith.constant 1 : i64
    %94 = arith.index_castui %90 : index to i64
    %95 = arith.subi %c1_i64_35, %94 : i64
    %c1024_i64_36 = arith.constant 1024 : i64
    %96 = arith.index_castui %91 : index to i64
    %97 = arith.subi %c1024_i64_36, %96 : i64
    %98 = xla.apply_indexing #indexing_map11(%3, %4)
    %99 = arith.index_castui %98 : index to i64
    %100 = tt.addptr %arg2, %99 : !tt.ptr<bf16>, i64
    %c0_i32_37 = arith.constant 0 : i32
    %101 = tt.make_tensor_ptr %100, [%93, %95, %97], [%c1024_i64_32, %c0_i64_33, %c1_i64_31], [%c0_i32_37, %c0_i32_37, %c0_i32_37] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %102 = tt.load %101 : !tt.ptr<tensor<1x1x1024xbf16>>
    %103 = tt.trans %102 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %104 = tt.reshape %103 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %105 = arith.extf %104 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %106 = arith.addf %89, %105 : tensor<1x1024xf32>
    %107 = arith.addf %78, %106 : tensor<1x1024xf32>
    %108 = arith.addf %67, %107 : tensor<1x1024xf32>
    %109 = arith.mulf %108, %108 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %110 = "tt.reduce"(%109) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %146 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %146 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_38 = arith.constant 9.765625E-4 : f32
    %111 = tt.splat %cst_38 : f32 -> tensor<1xf32>
    %112 = arith.mulf %110, %111 : tensor<1xf32>
    %113 = xla.apply_indexing #indexing_map8(%3, %4)
    %114 = arith.index_castui %113 : index to i64
    %115 = tt.addptr %arg0, %114 : !tt.ptr<f32>, i64
    %c0_i32_39 = arith.constant 0 : i32
    %116 = tt.make_tensor_ptr %115, [], [], [] {order = array<i32>} : <tensor<f32>>
    %117 = tt.load %115 : !tt.ptr<f32>
    %118 = tt.splat %117 : f32 -> tensor<1xf32>
    %119 = arith.addf %112, %118 : tensor<1xf32>
    %120 = tt.extern_elementwise %119 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %121 = tt.expand_dims %120 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %122 = tt.broadcast %121 : tensor<1x1xf32> -> tensor<1x256xf32>
    %123 = arith.mulf %56, %122 : tensor<1x256xf32>
    %c1_i64_40 = arith.constant 1 : i64
    %124 = xla.apply_indexing #indexing_map4(%3, %4)
    %c1024_i64_41 = arith.constant 1024 : i64
    %125 = arith.index_castui %124 : index to i64
    %126 = arith.subi %c1024_i64_41, %125 : i64
    %127 = xla.apply_indexing #indexing_map4(%3, %4)
    %128 = arith.index_castui %127 : index to i64
    %129 = tt.addptr %arg1, %128 : !tt.ptr<bf16>, i64
    %c0_i32_42 = arith.constant 0 : i32
    %130 = tt.make_tensor_ptr %129, [%126], [%c1_i64_40], [%c0_i32_42] {order = array<i32: 0>} : <tensor<256xbf16>>
    %131 = tt.load %130 : !tt.ptr<tensor<256xbf16>>
    %132 = arith.extf %131 : tensor<256xbf16> to tensor<256xf32>
    %133 = tt.expand_dims %132 {axis = 0 : i32} : tensor<256xf32> -> tensor<1x256xf32>
    %134 = tt.broadcast %133 : tensor<1x256xf32> -> tensor<1x256xf32>
    %135 = arith.mulf %123, %134 : tensor<1x256xf32>
    %136 = arith.truncf %135 : tensor<1x256xf32> to tensor<1x256xbf16>
    %c1_i64_43 = arith.constant 1 : i64
    %c1024_i64_44 = arith.constant 1024 : i64
    %137 = xla.apply_indexing #indexing_map4(%3, %4)
    %c16_i64_45 = arith.constant 16 : i64
    %138 = arith.index_castui %3 : index to i64
    %139 = arith.subi %c16_i64_45, %138 : i64
    %c1024_i64_46 = arith.constant 1024 : i64
    %140 = arith.index_castui %137 : index to i64
    %141 = arith.subi %c1024_i64_46, %140 : i64
    %142 = xla.apply_indexing #indexing_map5(%3, %4)
    %143 = arith.index_castui %142 : index to i64
    %144 = tt.addptr %arg5, %143 : !tt.ptr<bf16>, i64
    %c0_i32_47 = arith.constant 0 : i32
    %145 = tt.make_tensor_ptr %144, [%139, %141], [%c1024_i64_44, %c1_i64_43], [%c0_i32_47, %c0_i32_47] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    tt.store %145, %136 : !tt.ptr<tensor<1x256xbf16>>
    tt.return
  }
}

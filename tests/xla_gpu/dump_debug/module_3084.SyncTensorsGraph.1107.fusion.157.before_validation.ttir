#indexing_map = #xla.indexing_map<"(d0) -> (0), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(tid_0, tid_1) -> (0), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 1024), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map3 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 13312), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map4 = #xla.indexing_map<"(tid_0, tid_1) -> (1024), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
#indexing_map5 = #xla.indexing_map<"(tid_0, tid_1) -> (tid_0 * 13312 + 1024), domain: tid_0 in [0, 63], tid_1 in [0, 0]">
module {
  tt.func @fusion_157_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %c1_i64 = arith.constant 1 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %4 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64 = arith.constant 64 : i64
    %5 = arith.index_castui %2 : index to i64
    %6 = arith.subi %c64_i64, %5 : i64
    %c1024_i64_0 = arith.constant 1024 : i64
    %7 = arith.index_castui %4 : index to i64
    %8 = arith.subi %c1024_i64_0, %7 : i64
    %9 = xla.apply_indexing #indexing_map2(%2, %3)
    %10 = arith.index_castui %9 : index to i64
    %11 = tt.addptr %arg1, %10 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %12 = tt.make_tensor_ptr %11, [%6, %8], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %13 = tt.load %12 : !tt.ptr<tensor<1x1024xbf16>>
    %14 = arith.extf %13 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_1 = arith.constant 1 : i64
    %c13312_i64 = arith.constant 13312 : i64
    %15 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_2 = arith.constant 64 : i64
    %16 = arith.index_castui %2 : index to i64
    %17 = arith.subi %c64_i64_2, %16 : i64
    %c13312_i64_3 = arith.constant 13312 : i64
    %18 = arith.index_castui %15 : index to i64
    %19 = arith.subi %c13312_i64_3, %18 : i64
    %20 = xla.apply_indexing #indexing_map3(%2, %3)
    %21 = arith.index_castui %20 : index to i64
    %22 = tt.addptr %arg5, %21 : !tt.ptr<bf16>, i64
    %c0_i32_4 = arith.constant 0 : i32
    %23 = tt.make_tensor_ptr %22, [%17, %19], [%c13312_i64, %c1_i64_1], [%c0_i32_4, %c0_i32_4] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %24 = tt.load %23 : !tt.ptr<tensor<1x1024xbf16>>
    %25 = arith.extf %24 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_5 = arith.constant 1 : i64
    %c1024_i64_6 = arith.constant 1024 : i64
    %26 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_7 = arith.constant 64 : i64
    %27 = arith.index_castui %2 : index to i64
    %28 = arith.subi %c64_i64_7, %27 : i64
    %c1024_i64_8 = arith.constant 1024 : i64
    %29 = arith.index_castui %26 : index to i64
    %30 = arith.subi %c1024_i64_8, %29 : i64
    %31 = xla.apply_indexing #indexing_map2(%2, %3)
    %32 = arith.index_castui %31 : index to i64
    %33 = tt.addptr %arg6, %32 : !tt.ptr<bf16>, i64
    %c0_i32_9 = arith.constant 0 : i32
    %34 = tt.make_tensor_ptr %33, [%28, %30], [%c1024_i64_6, %c1_i64_5], [%c0_i32_9, %c0_i32_9] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %35 = tt.load %34 : !tt.ptr<tensor<1x1024xbf16>>
    %36 = arith.extf %35 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_10 = arith.constant 1 : i64
    %c13312_i64_11 = arith.constant 13312 : i64
    %37 = xla.apply_indexing #indexing_map4(%2, %3)
    %c64_i64_12 = arith.constant 64 : i64
    %38 = arith.index_castui %2 : index to i64
    %39 = arith.subi %c64_i64_12, %38 : i64
    %c13312_i64_13 = arith.constant 13312 : i64
    %40 = arith.index_castui %37 : index to i64
    %41 = arith.subi %c13312_i64_13, %40 : i64
    %42 = xla.apply_indexing #indexing_map5(%2, %3)
    %43 = arith.index_castui %42 : index to i64
    %44 = tt.addptr %arg5, %43 : !tt.ptr<bf16>, i64
    %c0_i32_14 = arith.constant 0 : i32
    %45 = tt.make_tensor_ptr %44, [%39, %41], [%c13312_i64_11, %c1_i64_10], [%c0_i32_14, %c0_i32_14] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %46 = tt.load %45 : !tt.ptr<tensor<1x1024xbf16>>
    %47 = arith.extf %46 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_15 = arith.constant 1 : i64
    %c1024_i64_16 = arith.constant 1024 : i64
    %48 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_17 = arith.constant 64 : i64
    %49 = arith.index_castui %2 : index to i64
    %50 = arith.subi %c64_i64_17, %49 : i64
    %c1024_i64_18 = arith.constant 1024 : i64
    %51 = arith.index_castui %48 : index to i64
    %52 = arith.subi %c1024_i64_18, %51 : i64
    %53 = xla.apply_indexing #indexing_map2(%2, %3)
    %54 = arith.index_castui %53 : index to i64
    %55 = tt.addptr %arg4, %54 : !tt.ptr<bf16>, i64
    %c0_i32_19 = arith.constant 0 : i32
    %56 = tt.make_tensor_ptr %55, [%50, %52], [%c1024_i64_16, %c1_i64_15], [%c0_i32_19, %c0_i32_19] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %57 = tt.load %56 : !tt.ptr<tensor<1x1024xbf16>>
    %58 = arith.extf %57 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %c1_i64_20 = arith.constant 1 : i64
    %c1024_i64_21 = arith.constant 1024 : i64
    %59 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_22 = arith.constant 64 : i64
    %60 = arith.index_castui %2 : index to i64
    %61 = arith.subi %c64_i64_22, %60 : i64
    %c1024_i64_23 = arith.constant 1024 : i64
    %62 = arith.index_castui %59 : index to i64
    %63 = arith.subi %c1024_i64_23, %62 : i64
    %64 = xla.apply_indexing #indexing_map2(%2, %3)
    %65 = arith.index_castui %64 : index to i64
    %66 = tt.addptr %arg3, %65 : !tt.ptr<f32>, i64
    %c0_i32_24 = arith.constant 0 : i32
    %67 = tt.make_tensor_ptr %66, [%61, %63], [%c1024_i64_21, %c1_i64_20], [%c0_i32_24, %c0_i32_24] {order = array<i32: 1, 0>} : <tensor<1x1024xf32>>
    %68 = tt.load %67 : !tt.ptr<tensor<1x1024xf32>>
    %69 = arith.addf %58, %68 : tensor<1x1024xf32>
    %70 = arith.addf %47, %69 : tensor<1x1024xf32>
    %71 = arith.addf %36, %70 : tensor<1x1024xf32>
    %72 = arith.addf %25, %71 : tensor<1x1024xf32>
    %73 = arith.addf %14, %72 : tensor<1x1024xf32>
    %74 = arith.mulf %73, %73 : tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %75 = "tt.reduce"(%74) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %111 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %111 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_25 = arith.constant 9.765625E-4 : f32
    %76 = tt.splat %cst_25 : f32 -> tensor<1xf32>
    %77 = arith.mulf %75, %76 : tensor<1xf32>
    %78 = xla.apply_indexing #indexing_map1(%2, %3)
    %79 = arith.index_castui %78 : index to i64
    %80 = tt.addptr %arg0, %79 : !tt.ptr<f32>, i64
    %c0_i32_26 = arith.constant 0 : i32
    %81 = tt.make_tensor_ptr %80, [], [], [] {order = array<i32>} : <tensor<f32>>
    %82 = tt.load %80 : !tt.ptr<f32>
    %83 = tt.splat %82 : f32 -> tensor<1xf32>
    %84 = arith.addf %77, %83 : tensor<1xf32>
    %85 = tt.extern_elementwise %84 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %86 = tt.expand_dims %85 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %87 = tt.broadcast %86 : tensor<1x1xf32> -> tensor<1x1024xf32>
    %88 = arith.mulf %73, %87 : tensor<1x1024xf32>
    %c1_i64_27 = arith.constant 1 : i64
    %89 = xla.apply_indexing #indexing_map1(%2, %3)
    %c1024_i64_28 = arith.constant 1024 : i64
    %90 = arith.index_castui %89 : index to i64
    %91 = arith.subi %c1024_i64_28, %90 : i64
    %92 = xla.apply_indexing #indexing_map1(%2, %3)
    %93 = arith.index_castui %92 : index to i64
    %94 = tt.addptr %arg2, %93 : !tt.ptr<bf16>, i64
    %c0_i32_29 = arith.constant 0 : i32
    %95 = tt.make_tensor_ptr %94, [%91], [%c1_i64_27], [%c0_i32_29] {order = array<i32: 0>} : <tensor<1024xbf16>>
    %96 = tt.load %95 : !tt.ptr<tensor<1024xbf16>>
    %97 = arith.extf %96 : tensor<1024xbf16> to tensor<1024xf32>
    %98 = tt.expand_dims %97 {axis = 0 : i32} : tensor<1024xf32> -> tensor<1x1024xf32>
    %99 = tt.broadcast %98 : tensor<1x1024xf32> -> tensor<1x1024xf32>
    %100 = arith.mulf %88, %99 : tensor<1x1024xf32>
    %101 = arith.truncf %100 : tensor<1x1024xf32> to tensor<1x1024xbf16>
    %c1_i64_30 = arith.constant 1 : i64
    %c1024_i64_31 = arith.constant 1024 : i64
    %102 = xla.apply_indexing #indexing_map1(%2, %3)
    %c64_i64_32 = arith.constant 64 : i64
    %103 = arith.index_castui %2 : index to i64
    %104 = arith.subi %c64_i64_32, %103 : i64
    %c1024_i64_33 = arith.constant 1024 : i64
    %105 = arith.index_castui %102 : index to i64
    %106 = arith.subi %c1024_i64_33, %105 : i64
    %107 = xla.apply_indexing #indexing_map2(%2, %3)
    %108 = arith.index_castui %107 : index to i64
    %109 = tt.addptr %arg7, %108 : !tt.ptr<bf16>, i64
    %c0_i32_34 = arith.constant 0 : i32
    %110 = tt.make_tensor_ptr %109, [%104, %106], [%c1024_i64_31, %c1_i64_30], [%c0_i32_34, %c0_i32_34] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    tt.store %110, %101 : !tt.ptr<tensor<1x1024xbf16>>
    tt.return
  }
}

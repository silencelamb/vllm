#indexing_map = #xla.indexing_map<"(d0) -> (d0 floordiv 4), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(d0) -> (d0 mod 4), domain: d0 in [0, 63]">
#indexing_map2 = #xla.indexing_map<"(tid_1) -> (tid_1 * 256 + 6144), domain: tid_1 in [0, 3]">
#indexing_map3 = #xla.indexing_map<"(d0) -> ((d0 mod 4) * 256 + (d0 floordiv 4) * 8192 + 6144), domain: d0 in [0, 63]">
#indexing_map4 = #xla.indexing_map<"(tid_1) -> (tid_1 * 256), domain: tid_1 in [0, 3]">
#indexing_map5 = #xla.indexing_map<"(d0) -> (d0 * 256), domain: d0 in [0, 63]">
#indexing_map6 = #xla.indexing_map<"(tid_1) -> (tid_1 * 256 + 7168), domain: tid_1 in [0, 3]">
#indexing_map7 = #xla.indexing_map<"(d0) -> ((d0 mod 4) * 256 + (d0 floordiv 4) * 8192 + 7168), domain: d0 in [0, 63]">
#indexing_map8 = #xla.indexing_map<"(tid_0) -> (tid_0 * 8192 + 6144), domain: tid_0 in [0, 15]">
#indexing_map9 = #xla.indexing_map<"(tid_0) -> (tid_0 * 1024), domain: tid_0 in [0, 15]">
#indexing_map10 = #xla.indexing_map<"(tid_0) -> (tid_0 * 8192 + 7168), domain: tid_0 in [0, 15]">
module {
  tt.func @fusion_114_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<9.765625E-4> : tensor<1xf32>
    %c2048_i64 = arith.constant 2048 : i64
    %c0_i64 = arith.constant 0 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %c0_i32 = arith.constant 0 : i32
    %c16_i64 = arith.constant 16 : i64
    %c8192_i64 = arith.constant 8192 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %5 = xla.apply_indexing #indexing_map2(%4)
    %6 = arith.index_castui %3 : index to i64
    %7 = arith.subi %c16_i64, %6 : i64
    %8 = arith.index_castui %5 : index to i64
    %9 = arith.subi %c8192_i64, %8 : i64
    %10 = xla.apply_indexing #indexing_map3(%2)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg3, %11 : !tt.ptr<bf16>, i64
    %13 = tt.make_tensor_ptr %12, [%7, %9], [%c8192_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x256xbf16>>
    %15 = arith.extf %14 : tensor<1x256xbf16> to tensor<1x256xf32>
    %16 = xla.apply_indexing #indexing_map4(%4)
    %17 = arith.index_castui %16 : index to i64
    %18 = arith.subi %c1024_i64, %17 : i64
    %19 = xla.apply_indexing #indexing_map5(%2)
    %20 = arith.index_castui %19 : index to i64
    %21 = tt.addptr %arg4, %20 : !tt.ptr<bf16>, i64
    %22 = tt.make_tensor_ptr %21, [%7, %18], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %23 = tt.load %22 : !tt.ptr<tensor<1x256xbf16>>
    %24 = arith.extf %23 : tensor<1x256xbf16> to tensor<1x256xf32>
    %25 = xla.apply_indexing #indexing_map6(%4)
    %26 = arith.index_castui %25 : index to i64
    %27 = arith.subi %c8192_i64, %26 : i64
    %28 = xla.apply_indexing #indexing_map7(%2)
    %29 = arith.index_castui %28 : index to i64
    %30 = tt.addptr %arg3, %29 : !tt.ptr<bf16>, i64
    %31 = tt.make_tensor_ptr %30, [%7, %27], [%c8192_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    %32 = tt.load %31 : !tt.ptr<tensor<1x256xbf16>>
    %33 = arith.extf %32 : tensor<1x256xbf16> to tensor<1x256xf32>
    %34 = tt.addptr %arg2, %20 : !tt.ptr<bf16>, i64
    %35 = tt.make_tensor_ptr %34, [%7, %c1_i64, %18], [%c1024_i64, %c0_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x256xbf16>>
    %36 = tt.load %35 : !tt.ptr<tensor<1x1x256xbf16>>
    %37 = tt.trans %36 {order = array<i32: 1, 0, 2>} : tensor<1x1x256xbf16> -> tensor<1x1x256xbf16>
    %38 = tt.reshape %37 : tensor<1x1x256xbf16> -> tensor<1x256xbf16>
    %39 = arith.extf %38 : tensor<1x256xbf16> to tensor<1x256xf32>
    %40 = arith.addf %33, %39 : tensor<1x256xf32>
    %41 = arith.addf %24, %40 : tensor<1x256xf32>
    %42 = arith.addf %15, %41 : tensor<1x256xf32>
    %43 = xla.apply_indexing #indexing_map8(%3)
    %44 = arith.index_castui %43 : index to i64
    %45 = tt.addptr %arg3, %44 : !tt.ptr<bf16>, i64
    %46 = tt.make_tensor_ptr %45, [%7, %c2048_i64], [%c8192_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %47 = tt.load %46 : !tt.ptr<tensor<1x1024xbf16>>
    %48 = arith.extf %47 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %49 = xla.apply_indexing #indexing_map9(%3)
    %50 = arith.index_castui %49 : index to i64
    %51 = tt.addptr %arg4, %50 : !tt.ptr<bf16>, i64
    %52 = tt.make_tensor_ptr %51, [%7, %c1024_i64], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %53 = tt.load %52 : !tt.ptr<tensor<1x1024xbf16>>
    %54 = arith.extf %53 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %55 = xla.apply_indexing #indexing_map10(%3)
    %56 = arith.index_castui %55 : index to i64
    %57 = tt.addptr %arg3, %56 : !tt.ptr<bf16>, i64
    %58 = tt.make_tensor_ptr %57, [%7, %c1024_i64], [%c8192_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x1024xbf16>>
    %59 = tt.load %58 : !tt.ptr<tensor<1x1024xbf16>>
    %60 = arith.extf %59 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %61 = tt.addptr %arg2, %50 : !tt.ptr<bf16>, i64
    %62 = tt.make_tensor_ptr %61, [%7, %c1_i64, %c1024_i64], [%c1024_i64, %c0_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %63 = tt.load %62 : !tt.ptr<tensor<1x1x1024xbf16>>
    %64 = tt.trans %63 {order = array<i32: 1, 0, 2>} : tensor<1x1x1024xbf16> -> tensor<1x1x1024xbf16>
    %65 = tt.reshape %64 : tensor<1x1x1024xbf16> -> tensor<1x1024xbf16>
    %66 = arith.extf %65 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %67 = arith.addf %60, %66 : tensor<1x1024xf32>
    %68 = arith.addf %54, %67 : tensor<1x1024xf32>
    %69 = arith.addf %48, %68 : tensor<1x1024xf32>
    %70 = arith.mulf %69, %69 : tensor<1x1024xf32>
    %71 = "tt.reduce"(%70) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %89 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %89 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %72 = arith.mulf %71, %cst : tensor<1xf32>
    %73 = tt.load %arg0 : !tt.ptr<f32>
    %74 = tt.splat %73 : f32 -> tensor<1xf32>
    %75 = arith.addf %72, %74 : tensor<1xf32>
    %76 = tt.extern_elementwise %75 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %77 = tt.expand_dims %76 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %78 = tt.broadcast %77 : tensor<1x1xf32> -> tensor<1x256xf32>
    %79 = arith.mulf %42, %78 : tensor<1x256xf32>
    %80 = tt.addptr %arg1, %17 : !tt.ptr<bf16>, i64
    %81 = tt.make_tensor_ptr %80, [%18], [%c1_i64], [%c0_i32] {order = array<i32: 0>} : <tensor<256xbf16>>
    %82 = tt.load %81 : !tt.ptr<tensor<256xbf16>>
    %83 = arith.extf %82 : tensor<256xbf16> to tensor<256xf32>
    %84 = tt.expand_dims %83 {axis = 0 : i32} : tensor<256xf32> -> tensor<1x256xf32>
    %85 = arith.mulf %79, %84 : tensor<1x256xf32>
    %86 = arith.truncf %85 : tensor<1x256xf32> to tensor<1x256xbf16>
    %87 = tt.addptr %arg5, %20 : !tt.ptr<bf16>, i64
    %88 = tt.make_tensor_ptr %87, [%7, %18], [%c1024_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x256xbf16>>
    tt.store %88, %86 : !tt.ptr<tensor<1x256xbf16>>
    tt.return
  }
}

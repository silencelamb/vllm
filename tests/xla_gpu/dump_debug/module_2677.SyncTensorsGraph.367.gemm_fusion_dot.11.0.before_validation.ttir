module {
  tt.func @gemm_fusion_dot_11_0_impl(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x64xf32>
    %0 = tt.get_program_id x : i32
    %c8_i32 = arith.constant 8 : i32
    %1 = arith.divsi %0, %c8_i32 : i32
    %c8_i32_0 = arith.constant 8 : i32
    %2 = arith.muli %1, %c8_i32_0 : i32
    %c192_i32 = arith.constant 192 : i32
    %3 = arith.subi %c192_i32, %2 : i32
    %4 = arith.cmpi slt, %3, %c8_i32_0 : i32
    %5 = arith.select %4, %3, %c8_i32_0 : i32
    %6 = arith.remsi %0, %5 : i32
    %7 = arith.addi %2, %6 : i32
    %c8_i32_1 = arith.constant 8 : i32
    %8 = arith.remsi %0, %c8_i32_1 : i32
    %9 = arith.divsi %8, %5 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.muli %7, %c16_i32 : i32
    %11 = arith.cmpi slt, %10, %c1024_i32 : i32
    %12 = arith.select %11, %arg0, %arg1 : !tt.ptr<bf16>
    %13 = arith.cmpi slt, %10, %c2048_i32 : i32
    %14 = arith.select %13, %12, %arg2 : !tt.ptr<bf16>
    %c16_i32_2 = arith.constant 16 : i32
    %15 = arith.muli %7, %c16_i32_2 : i32
    %c2048_i64 = arith.constant 2048 : i64
    %c0_i32 = arith.constant 0 : i32
    %16 = arith.addi %15, %c0_i32 : i32
    %c1024_i64 = arith.constant 1024 : i64
    %c2048_i64_3 = arith.constant 2048 : i64
    %c-1024_i32 = arith.constant -1024 : i32
    %17 = arith.addi %15, %c-1024_i32 : i32
    %c1024_i64_4 = arith.constant 1024 : i64
    %c2048_i64_5 = arith.constant 2048 : i64
    %c-2048_i32 = arith.constant -2048 : i32
    %18 = arith.addi %15, %c-2048_i32 : i32
    %c1024_i64_6 = arith.constant 1024 : i64
    %19 = arith.cmpi slt, %10, %c1024_i32 : i32
    %20 = arith.select %19, %c2048_i64, %c2048_i64_3 : i64
    %21 = arith.cmpi slt, %10, %c2048_i32 : i32
    %22 = arith.select %21, %20, %c2048_i64_5 : i64
    %23 = arith.cmpi slt, %15, %c1024_i32 : i32
    %24 = arith.select %23, %16, %17 : i32
    %25 = arith.cmpi slt, %15, %c2048_i32 : i32
    %26 = arith.select %25, %24, %18 : i32
    %27 = arith.cmpi slt, %15, %c1024_i32 : i32
    %28 = arith.select %27, %c1024_i64, %c1024_i64_4 : i64
    %29 = arith.cmpi slt, %15, %c2048_i32 : i32
    %30 = arith.select %29, %28, %c1024_i64_6 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %31 = arith.addi %c0_i32_8, %c0_i32_9 : i32
    %c2048_i64_10 = arith.constant 2048 : i64
    %c1_i64_11 = arith.constant 1 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %32 = arith.addi %c0_i32_8, %c0_i32_12 : i32
    %c2048_i64_13 = arith.constant 2048 : i64
    %c1_i64_14 = arith.constant 1 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %33 = arith.addi %c0_i32_8, %c0_i32_15 : i32
    %c2048_i64_16 = arith.constant 2048 : i64
    %34 = arith.cmpi slt, %10, %c1024_i32 : i32
    %35 = arith.select %34, %c1_i64, %c1_i64_11 : i64
    %36 = arith.cmpi slt, %10, %c2048_i32 : i32
    %37 = arith.select %36, %35, %c1_i64_14 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %c2048_i64_18 = arith.constant 2048 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %c0_i32_21 = arith.constant 0 : i32
    %38 = arith.cmpi slt, %10, %c1024_i32 : i32
    %39 = arith.select %38, %c0_i32_19, %c0_i32_20 : i32
    %40 = arith.cmpi slt, %10, %c2048_i32 : i32
    %41 = arith.select %40, %39, %c0_i32_21 : i32
    %42 = tt.make_tensor_ptr %14, [%30, %c2048_i64_18], [%22, %37], [%c0_i32_7, %c0_i32_17] {order = array<i32: 1, 0>} : <tensor<16x128xbf16>>
    %43 = tt.advance %42, [%26, %c0_i32_8] : <tensor<16x128xbf16>>
    %c128_i32 = arith.constant 128 : i32
    %c2048_i32_22 = arith.constant 2048 : i32
    %c0_i32_23 = arith.constant 0 : i32
    %44:2 = scf.for %arg4 = %c0_i32_23 to %c2048_i32_22 step %c128_i32 iter_args(%arg5 = %43, %arg6 = %cst) -> (!tt.ptr<tensor<16x128xbf16>>, tensor<16x64xf32>)  : i32 {
      %52 = tt.load %arg5 : !tt.ptr<tensor<16x128xbf16>>
      %c0_i32_34 = arith.constant 0 : i32
      %c128_i32_35 = arith.constant 128 : i32
      %53 = tt.advance %arg5, [%c0_i32_34, %c128_i32_35] : <tensor<16x128xbf16>>
      %cst_36 = arith.constant 0.000000e+00 : bf16
      %54 = tt.splat %cst_36 : bf16 -> tensor<bf16>
      %55 = tt.expand_dims %54 {axis = 0 : i32} : tensor<bf16> -> tensor<1xbf16>
      %56 = tt.expand_dims %55 {axis = 1 : i32} : tensor<1xbf16> -> tensor<1x1xbf16>
      %57 = tt.broadcast %56 : tensor<1x1xbf16> -> tensor<128x64xbf16>
      %58 = tt.dot %52, %57, %arg6, inputPrecision = tf32 : tensor<16x128xbf16> * tensor<128x64xbf16> -> tensor<16x64xf32>
      scf.yield %53, %58 : !tt.ptr<tensor<16x128xbf16>>, tensor<16x64xf32>
    }
    %45 = arith.truncf %44#1 : tensor<16x64xf32> to tensor<16x64xbf16>
    %c16_i32_24 = arith.constant 16 : i32
    %46 = arith.muli %7, %c16_i32_24 : i32
    %c1_i64_25 = arith.constant 1 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %47 = arith.addi %46, %c0_i32_26 : i32
    %c3072_i64 = arith.constant 3072 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %c3072_i64_28 = arith.constant 3072 : i64
    %c64_i32 = arith.constant 64 : i32
    %48 = arith.muli %9, %c64_i32 : i32
    %c3072_i64_29 = arith.constant 3072 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %49 = arith.addi %48, %c0_i32_30 : i32
    %c64_i64 = arith.constant 64 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %c64_i64_32 = arith.constant 64 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %50 = tt.make_tensor_ptr %arg3, [%c3072_i64_28, %c64_i64_32], [%c1_i64_25, %c3072_i64_29], [%c0_i32_27, %c0_i32_31] {order = array<i32: 1, 0>} : <tensor<16x64xbf16>>
    %51 = tt.advance %50, [%46, %48] : <tensor<16x64xbf16>>
    tt.store %51, %45 : !tt.ptr<tensor<16x64xbf16>>
    tt.return
  }
}

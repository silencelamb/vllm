#indexing_map = #xla.indexing_map<"(d0) -> (d0 floordiv 2), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(d0) -> (d0 mod 2), domain: d0 in [0, 63]">
#indexing_map2 = #xla.indexing_map<"(tid_1) -> (tid_1 * 512 + 2048), domain: tid_1 in [0, 1]">
#indexing_map3 = #xla.indexing_map<"(d0) -> ((d0 mod 2) * 512 + (d0 floordiv 2) * 4096 + 2048), domain: d0 in [0, 63]">
#indexing_map4 = #xla.indexing_map<"(tid_1) -> (tid_1 * 4), domain: tid_1 in [0, 1]">
#indexing_map5 = #xla.indexing_map<"(d0) -> (d0 * 512), domain: d0 in [0, 63]">
module {
  tt.func @fusion_276_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<7.812500e-03> : tensor<1x4xf32>
    %c8_i64 = arith.constant 8 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %c128_i64 = arith.constant 128 : i64
    %c0_i32 = arith.constant 0 : i32
    %c32_i64 = arith.constant 32 : i64
    %c4096_i64 = arith.constant 4096 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map1(%2)
    %5 = xla.apply_indexing #indexing_map2(%4)
    %6 = arith.index_castui %3 : index to i64
    %7 = arith.subi %c32_i64, %6 : i64
    %8 = arith.index_castui %5 : index to i64
    %9 = arith.subi %c4096_i64, %8 : i64
    %10 = xla.apply_indexing #indexing_map3(%2)
    %11 = arith.index_castui %10 : index to i64
    %12 = tt.addptr %arg1, %11 : !tt.ptr<bf16>, i64
    %13 = tt.make_tensor_ptr %12, [%7, %9], [%c4096_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<1x512xbf16>>
    %14 = tt.load %13 : !tt.ptr<tensor<1x512xbf16>>
    %15 = tt.reshape %14 : tensor<1x512xbf16> -> tensor<1x4x128xbf16>
    %16 = arith.extf %15 : tensor<1x4x128xbf16> to tensor<1x4x128xf32>
    %17 = arith.mulf %16, %16 : tensor<1x4x128xf32>
    %18 = "tt.reduce"(%17) <{axis = 2 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %41 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %41 : f32
    }) : (tensor<1x4x128xf32>) -> tensor<1x4xf32>
    %19 = arith.mulf %18, %cst : tensor<1x4xf32>
    %20 = tt.load %arg0 : !tt.ptr<f32>
    %21 = tt.splat %20 : f32 -> tensor<1x4xf32>
    %22 = arith.addf %19, %21 : tensor<1x4xf32>
    %23 = tt.extern_elementwise %22 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x4xf32>) -> tensor<1x4xf32>
    %24 = tt.expand_dims %23 {axis = 2 : i32} : tensor<1x4xf32> -> tensor<1x4x1xf32>
    %25 = tt.broadcast %24 : tensor<1x4x1xf32> -> tensor<1x4x128xf32>
    %26 = arith.mulf %16, %25 : tensor<1x4x128xf32>
    %27 = tt.make_tensor_ptr %arg2, [%c128_i64], [%c1_i64], [%c0_i32] {order = array<i32: 0>} : <tensor<128xbf16>>
    %28 = tt.load %27 : !tt.ptr<tensor<128xbf16>>
    %29 = arith.extf %28 : tensor<128xbf16> to tensor<128xf32>
    %30 = tt.expand_dims %29 {axis = 0 : i32} : tensor<128xf32> -> tensor<1x128xf32>
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<1x128xf32> -> tensor<1x1x128xf32>
    %32 = tt.broadcast %31 : tensor<1x1x128xf32> -> tensor<1x4x128xf32>
    %33 = arith.mulf %26, %32 : tensor<1x4x128xf32>
    %34 = xla.apply_indexing #indexing_map4(%4)
    %35 = arith.index_castui %34 : index to i64
    %36 = arith.subi %c8_i64, %35 : i64
    %37 = xla.apply_indexing #indexing_map5(%2)
    %38 = arith.index_castui %37 : index to i64
    %39 = tt.addptr %arg3, %38 : !tt.ptr<f32>, i64
    %40 = tt.make_tensor_ptr %39, [%7, %36, %c128_i64], [%c1024_i64, %c128_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x4x128xf32>>
    tt.store %40, %33 : !tt.ptr<tensor<1x4x128xf32>>
    tt.return
  }
}

//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	gemm_fusion_dot_11_0
.visible .entry gemm_fusion_dot_11_0(
	.param .u64 .ptr .align 16 gemm_fusion_dot_11_0_param_0,
	.param .u64 .ptr .align 16 gemm_fusion_dot_11_0_param_1,
	.param .u64 .ptr .align 16 gemm_fusion_dot_11_0_param_2,
	.param .u64 .ptr .align 128 gemm_fusion_dot_11_0_param_3
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<17>;
	.reg .b16 	%rs<17>;
	.reg .b32 	%r<384>;
	.reg .f32 	%f<169>;
	.reg .b64 	%rd<264>;

	ld.param.u64 	%rd70, [gemm_fusion_dot_11_0_param_0];
	ld.param.u64 	%rd71, [gemm_fusion_dot_11_0_param_3];
	cvta.to.global.u64 	%rd1, %rd71;
	ld.param.u64 	%rd72, [gemm_fusion_dot_11_0_param_1];
	ld.param.u64 	%rd73, [gemm_fusion_dot_11_0_param_2];
	cvta.to.global.u64 	%rd74, %rd73;
	cvta.to.global.u64 	%rd75, %rd72;
	cvta.to.global.u64 	%rd76, %rd70;
	// begin inline asm
	mov.u32 %r15, %ctaid.x;
	// end inline asm
	shr.s32 	%r67, %r15, 31;
	shr.u32 	%r68, %r67, 29;
	add.s32 	%r69, %r15, %r68;
	shr.s32 	%r2, %r69, 3;
	and.b32  	%r70, %r69, -8;
	sub.s32 	%r71, 48, %r70;
	min.s32 	%r3, %r71, 8;
	rem.s32 	%r72, %r15, %r3;
	add.s32 	%r73, %r70, %r72;
	shl.b32 	%r4, %r73, 6;
	setp.lt.s32 	%p1, %r4, 1024;
	selp.b64 	%rd77, %rd76, %rd75, %p1;
	setp.lt.s32 	%p2, %r4, 2048;
	selp.b64 	%rd78, %rd77, %rd74, %p2;
	add.s32 	%r74, %r4, -1024;
	add.s32 	%r75, %r4, -2048;
	selp.b32 	%r76, %r4, %r74, %p1;
	selp.b32 	%r77, %r76, %r75, %p2;
	cvt.s64.s32 	%rd79, %r77;
	mov.u32 	%r5, %tid.x;
	and.b32  	%r78, %r5, 16;
	bfe.s32 	%r79, %r5, 4, 1;
	and.b32  	%r6, %r5, 32;
	bfe.s32 	%r80, %r5, 5, 1;
	bfe.u32 	%r81, %r5, 4, 2;
	setp.lt.u32 	%p3, %r5, 64;
	selp.b32 	%r82, 0, 4, %p3;
	or.b32  	%r83, %r81, %r82;
	or.b32  	%r84, %r83, 8;
	or.b32  	%r85, %r83, 16;
	or.b32  	%r86, %r83, 24;
	or.b32  	%r87, %r83, 32;
	or.b32  	%r88, %r83, 40;
	or.b32  	%r89, %r83, 48;
	or.b32  	%r90, %r83, 56;
	cvt.u64.u32 	%rd80, %r83;
	cvt.u64.u32 	%rd81, %r84;
	cvt.u64.u32 	%rd82, %r85;
	cvt.u64.u32 	%rd83, %r86;
	cvt.u64.u32 	%rd84, %r87;
	cvt.u64.u32 	%rd85, %r88;
	cvt.u64.u32 	%rd86, %r89;
	cvt.u64.u32 	%rd87, %r90;
	or.b64  	%rd88, %rd79, %rd80;
	or.b64  	%rd89, %rd79, %rd81;
	or.b64  	%rd90, %rd79, %rd82;
	or.b64  	%rd91, %rd79, %rd83;
	or.b64  	%rd92, %rd79, %rd84;
	or.b64  	%rd93, %rd79, %rd85;
	or.b64  	%rd94, %rd79, %rd86;
	or.b64  	%rd95, %rd79, %rd87;
	shl.b64 	%rd96, %rd88, 11;
	shl.b64 	%rd97, %rd89, 11;
	shl.b64 	%rd98, %rd90, 11;
	shl.b64 	%rd99, %rd91, 11;
	shl.b64 	%rd100, %rd92, 11;
	shl.b64 	%rd101, %rd93, 11;
	shl.b64 	%rd102, %rd94, 11;
	shl.b64 	%rd103, %rd95, 11;
	and.b32  	%r91, %r5, 1;
	neg.s32 	%r92, %r91;
	bfe.s32 	%r93, %r5, 1, 1;
	bfe.s32 	%r94, %r5, 2, 1;
	shl.b32 	%r7, %r5, 3;
	and.b32  	%r95, %r7, 120;
	cvt.u64.u32 	%rd104, %r95;
	or.b64  	%rd105, %rd96, %rd104;
	or.b64  	%rd106, %rd97, %rd104;
	or.b64  	%rd107, %rd98, %rd104;
	or.b64  	%rd108, %rd99, %rd104;
	or.b64  	%rd109, %rd100, %rd104;
	or.b64  	%rd110, %rd101, %rd104;
	or.b64  	%rd111, %rd102, %rd104;
	or.b64  	%rd112, %rd103, %rd104;
	shl.b64 	%rd113, %rd105, 1;
	add.s64 	%rd45, %rd78, %rd113;
	shl.b64 	%rd114, %rd106, 1;
	add.s64 	%rd46, %rd78, %rd114;
	shl.b64 	%rd115, %rd107, 1;
	add.s64 	%rd47, %rd78, %rd115;
	shl.b64 	%rd116, %rd108, 1;
	add.s64 	%rd48, %rd78, %rd116;
	shl.b64 	%rd117, %rd109, 1;
	add.s64 	%rd49, %rd78, %rd117;
	shl.b64 	%rd118, %rd110, 1;
	add.s64 	%rd50, %rd78, %rd118;
	shl.b64 	%rd119, %rd111, 1;
	add.s64 	%rd51, %rd78, %rd119;
	shl.b64 	%rd120, %rd112, 1;
	add.s64 	%rd52, %rd78, %rd120;
	and.b32  	%r96, %r79, 136;
	and.b32  	%r97, %r80, 272;
	selp.b32 	%r98, 0, 544, %p3;
	or.b32  	%r99, %r96, %r98;
	xor.b32  	%r100, %r99, %r95;
	xor.b32  	%r101, %r100, %r97;
	cvt.u64.u32 	%rd2, %r101;
	mul.wide.u32 	%rd121, %r101, 2;
	mov.u64 	%rd69, global_smem;
	add.s64 	%rd122, %rd69, %rd121;
	or.b32  	%r102, %r95, 1024;
	xor.b32  	%r103, %r99, %r102;
	xor.b32  	%r104, %r103, %r97;
	cvt.u64.u32 	%rd3, %r104;
	mul.wide.u32 	%rd123, %r104, 2;
	add.s64 	%rd124, %rd69, %rd123;
	or.b32  	%r105, %r95, 2048;
	xor.b32  	%r106, %r99, %r105;
	xor.b32  	%r107, %r106, %r97;
	cvt.u64.u32 	%rd4, %r107;
	mul.wide.u32 	%rd125, %r107, 2;
	add.s64 	%rd126, %rd69, %rd125;
	or.b32  	%r108, %r95, 3072;
	xor.b32  	%r109, %r99, %r108;
	xor.b32  	%r110, %r109, %r97;
	cvt.u64.u32 	%rd5, %r110;
	mul.wide.u32 	%rd127, %r110, 2;
	add.s64 	%rd128, %rd69, %rd127;
	or.b32  	%r111, %r95, 4096;
	xor.b32  	%r112, %r99, %r111;
	xor.b32  	%r113, %r112, %r97;
	cvt.u64.u32 	%rd6, %r113;
	mul.wide.u32 	%rd129, %r113, 2;
	add.s64 	%rd130, %rd69, %rd129;
	or.b32  	%r114, %r95, 5120;
	xor.b32  	%r115, %r99, %r114;
	xor.b32  	%r116, %r115, %r97;
	cvt.u64.u32 	%rd7, %r116;
	mul.wide.u32 	%rd131, %r116, 2;
	add.s64 	%rd132, %rd69, %rd131;
	or.b32  	%r117, %r95, 6144;
	xor.b32  	%r118, %r99, %r117;
	xor.b32  	%r119, %r118, %r97;
	cvt.u64.u32 	%rd8, %r119;
	mul.wide.u32 	%rd133, %r119, 2;
	add.s64 	%rd134, %rd69, %rd133;
	or.b32  	%r120, %r95, 7168;
	xor.b32  	%r121, %r99, %r120;
	xor.b32  	%r122, %r121, %r97;
	cvt.u64.u32 	%rd9, %r122;
	mul.wide.u32 	%rd135, %r122, 2;
	add.s64 	%rd136, %rd69, %rd135;
	cvt.u32.u64 	%r16, %rd122;
	mov.b32 	%r17, 16;
	// begin inline asm
	cp.async.cg.shared.global [ %r16 + 0 ], [ %rd45 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r18, %rd124;
	// begin inline asm
	cp.async.cg.shared.global [ %r18 + 0 ], [ %rd46 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r20, %rd126;
	// begin inline asm
	cp.async.cg.shared.global [ %r20 + 0 ], [ %rd47 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r22, %rd128;
	// begin inline asm
	cp.async.cg.shared.global [ %r22 + 0 ], [ %rd48 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r24, %rd130;
	// begin inline asm
	cp.async.cg.shared.global [ %r24 + 0 ], [ %rd49 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r26, %rd132;
	// begin inline asm
	cp.async.cg.shared.global [ %r26 + 0 ], [ %rd50 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r28, %rd134;
	// begin inline asm
	cp.async.cg.shared.global [ %r28 + 0 ], [ %rd51 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r30, %rd136;
	// begin inline asm
	cp.async.cg.shared.global [ %r30 + 0 ], [ %rd52 + 0 ], 0x10, %r17;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	mul.wide.u32 	%rd137, %r95, 2;
	shl.b64 	%rd138, %rd88, 12;
	add.s64 	%rd139, %rd138, %rd78;
	add.s64 	%rd140, %rd139, %rd137;
	add.s64 	%rd53, %rd140, 256;
	shl.b64 	%rd141, %rd89, 12;
	add.s64 	%rd142, %rd141, %rd78;
	add.s64 	%rd143, %rd142, %rd137;
	add.s64 	%rd54, %rd143, 256;
	shl.b64 	%rd144, %rd90, 12;
	add.s64 	%rd145, %rd144, %rd78;
	add.s64 	%rd146, %rd145, %rd137;
	add.s64 	%rd55, %rd146, 256;
	shl.b64 	%rd147, %rd91, 12;
	add.s64 	%rd148, %rd147, %rd78;
	add.s64 	%rd149, %rd148, %rd137;
	add.s64 	%rd56, %rd149, 256;
	shl.b64 	%rd150, %rd92, 12;
	add.s64 	%rd151, %rd150, %rd78;
	add.s64 	%rd152, %rd151, %rd137;
	add.s64 	%rd57, %rd152, 256;
	shl.b64 	%rd153, %rd93, 12;
	add.s64 	%rd154, %rd153, %rd78;
	add.s64 	%rd155, %rd154, %rd137;
	add.s64 	%rd58, %rd155, 256;
	shl.b64 	%rd156, %rd94, 12;
	add.s64 	%rd157, %rd156, %rd78;
	add.s64 	%rd158, %rd157, %rd137;
	add.s64 	%rd59, %rd158, 256;
	shl.b64 	%rd159, %rd95, 12;
	add.s64 	%rd160, %rd159, %rd78;
	add.s64 	%rd161, %rd160, %rd137;
	add.s64 	%rd60, %rd161, 256;
	bar.sync 	0;
	add.s64 	%rd162, %rd69, 16384;
	add.s64 	%rd163, %rd162, %rd121;
	add.s64 	%rd164, %rd162, %rd123;
	add.s64 	%rd165, %rd162, %rd125;
	add.s64 	%rd166, %rd162, %rd127;
	add.s64 	%rd167, %rd162, %rd129;
	add.s64 	%rd168, %rd162, %rd131;
	add.s64 	%rd169, %rd162, %rd133;
	add.s64 	%rd170, %rd162, %rd135;
	cvt.u32.u64 	%r32, %rd163;
	// begin inline asm
	cp.async.cg.shared.global [ %r32 + 0 ], [ %rd53 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r34, %rd164;
	// begin inline asm
	cp.async.cg.shared.global [ %r34 + 0 ], [ %rd54 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r36, %rd165;
	// begin inline asm
	cp.async.cg.shared.global [ %r36 + 0 ], [ %rd55 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r38, %rd166;
	// begin inline asm
	cp.async.cg.shared.global [ %r38 + 0 ], [ %rd56 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r40, %rd167;
	// begin inline asm
	cp.async.cg.shared.global [ %r40 + 0 ], [ %rd57 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r42, %rd168;
	// begin inline asm
	cp.async.cg.shared.global [ %r42 + 0 ], [ %rd58 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r44, %rd169;
	// begin inline asm
	cp.async.cg.shared.global [ %r44 + 0 ], [ %rd59 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r46, %rd170;
	// begin inline asm
	cp.async.cg.shared.global [ %r46 + 0 ], [ %rd60 + 0 ], 0x10, %r17;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s64 	%rd61, %rd140, 512;
	add.s64 	%rd62, %rd143, 512;
	add.s64 	%rd63, %rd146, 512;
	add.s64 	%rd64, %rd149, 512;
	add.s64 	%rd65, %rd152, 512;
	add.s64 	%rd66, %rd155, 512;
	add.s64 	%rd67, %rd158, 512;
	add.s64 	%rd68, %rd161, 512;
	bar.sync 	0;
	add.s64 	%rd171, %rd69, 32768;
	add.s64 	%rd172, %rd171, %rd121;
	add.s64 	%rd173, %rd171, %rd123;
	add.s64 	%rd174, %rd171, %rd125;
	add.s64 	%rd175, %rd171, %rd127;
	add.s64 	%rd176, %rd171, %rd129;
	add.s64 	%rd177, %rd171, %rd131;
	add.s64 	%rd178, %rd171, %rd133;
	add.s64 	%rd179, %rd171, %rd135;
	cvt.u32.u64 	%r48, %rd172;
	// begin inline asm
	cp.async.cg.shared.global [ %r48 + 0 ], [ %rd61 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r50, %rd173;
	// begin inline asm
	cp.async.cg.shared.global [ %r50 + 0 ], [ %rd62 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r52, %rd174;
	// begin inline asm
	cp.async.cg.shared.global [ %r52 + 0 ], [ %rd63 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r54, %rd175;
	// begin inline asm
	cp.async.cg.shared.global [ %r54 + 0 ], [ %rd64 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r56, %rd176;
	// begin inline asm
	cp.async.cg.shared.global [ %r56 + 0 ], [ %rd65 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r58, %rd177;
	// begin inline asm
	cp.async.cg.shared.global [ %r58 + 0 ], [ %rd66 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r60, %rd178;
	// begin inline asm
	cp.async.cg.shared.global [ %r60 + 0 ], [ %rd67 + 0 ], 0x10, %r17;
	// end inline asm
	cvt.u32.u64 	%r62, %rd179;
	// begin inline asm
	cp.async.cg.shared.global [ %r62 + 0 ], [ %rd68 + 0 ], 0x10, %r17;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r123, %r92, 136;
	and.b32  	%r124, %r93, 272;
	or.b32  	%r125, %r123, %r124;
	and.b32  	%r126, %r94, 544;
	shl.b32 	%r8, %r5, 7;
	and.b32  	%r127, %r8, 1024;
	or.b32  	%r128, %r126, %r127;
	or.b32  	%r129, %r128, %r125;
	shr.u32 	%r130, %r78, 1;
	xor.b32  	%r131, %r129, %r130;
	shl.b32 	%r132, %r6, 6;
	or.b32  	%r133, %r131, %r132;
	selp.b32 	%r134, 0, 4096, %p3;
	or.b32  	%r135, %r133, %r134;
	cvt.u64.u32 	%rd10, %r135;
	or.b32  	%r136, %r123, 16;
	xor.b32  	%r137, %r136, %r124;
	or.b32  	%r138, %r127, %r137;
	or.b32  	%r139, %r138, %r126;
	or.b32  	%r140, %r132, %r130;
	or.b32  	%r141, %r140, %r134;
	xor.b32  	%r142, %r141, %r139;
	cvt.u64.u32 	%rd11, %r142;
	or.b32  	%r143, %r125, 32;
	xor.b32  	%r144, %r143, %r126;
	or.b32  	%r145, %r144, %r127;
	xor.b32  	%r146, %r141, %r145;
	cvt.u64.u32 	%rd12, %r146;
	or.b32  	%r147, %r123, 48;
	or.b32  	%r148, %r126, %r124;
	xor.b32  	%r149, %r148, %r147;
	or.b32  	%r150, %r149, %r127;
	xor.b32  	%r151, %r141, %r150;
	cvt.u64.u32 	%rd13, %r151;
	or.b32  	%r152, %r129, 64;
	xor.b32  	%r153, %r141, %r152;
	cvt.u64.u32 	%rd14, %r153;
	or.b32  	%r154, %r123, 80;
	xor.b32  	%r155, %r154, %r124;
	or.b32  	%r156, %r127, %r155;
	or.b32  	%r157, %r156, %r126;
	xor.b32  	%r158, %r141, %r157;
	cvt.u64.u32 	%rd15, %r158;
	or.b32  	%r159, %r125, 96;
	xor.b32  	%r160, %r159, %r126;
	or.b32  	%r161, %r160, %r127;
	xor.b32  	%r162, %r141, %r161;
	cvt.u64.u32 	%rd16, %r162;
	or.b32  	%r163, %r123, 112;
	xor.b32  	%r164, %r148, %r163;
	or.b32  	%r165, %r164, %r127;
	xor.b32  	%r166, %r141, %r165;
	cvt.u64.u32 	%rd17, %r166;
	and.b32  	%r167, %r5, 15;
	mul.wide.u32 	%rd18, %r167, 16;
	add.s64 	%rd262, %rd160, 768;
	add.s64 	%rd261, %rd157, 768;
	add.s64 	%rd260, %rd154, 768;
	add.s64 	%rd259, %rd151, 768;
	add.s64 	%rd258, %rd148, 768;
	add.s64 	%rd257, %rd145, 768;
	add.s64 	%rd256, %rd142, 768;
	add.s64 	%rd255, %rd139, 768;
	mov.f32 	%f161, 0f00000000;
	mov.b32 	%r383, 2;
	mov.b32 	%r212, 0;
	mov.b32 	%r381, -128;
	shl.b64 	%rd188, %rd10, 1;
	shl.b64 	%rd190, %rd11, 1;
	shl.b64 	%rd192, %rd12, 1;
	shl.b64 	%rd194, %rd13, 1;
	shl.b64 	%rd196, %rd14, 1;
	shl.b64 	%rd198, %rd15, 1;
	shl.b64 	%rd200, %rd16, 1;
	shl.b64 	%rd202, %rd17, 1;
	shl.b64 	%rd207, %rd2, 1;
	shl.b64 	%rd209, %rd3, 1;
	shl.b64 	%rd211, %rd4, 1;
	shl.b64 	%rd213, %rd5, 1;
	shl.b64 	%rd215, %rd6, 1;
	shl.b64 	%rd217, %rd7, 1;
	shl.b64 	%rd219, %rd8, 1;
	shl.b64 	%rd221, %rd9, 1;
	mov.u64 	%rd263, %rd69;
	mov.u32 	%r382, %r212;
	mov.f32 	%f162, %f161;
	mov.f32 	%f163, %f161;
	mov.f32 	%f164, %f161;
	mov.f32 	%f165, %f161;
	mov.f32 	%f166, %f161;
	mov.f32 	%f167, %f161;
	mov.f32 	%f168, %f161;
$L__BB1_1:
	add.s32 	%r381, %r381, 128;
	setp.lt.u32 	%p4, %r381, 1664;
	add.s64 	%rd189, %rd263, %rd188;
	cvt.u32.u64 	%r172, %rd189;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r208, %r209, %r210, %r211}, [%r172];
	// end inline asm
	add.s64 	%rd191, %rd263, %rd190;
	cvt.u32.u64 	%r177, %rd191;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r220, %r221, %r222, %r223}, [%r177];
	// end inline asm
	add.s64 	%rd193, %rd263, %rd192;
	cvt.u32.u64 	%r182, %rd193;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r232, %r233, %r234, %r235}, [%r182];
	// end inline asm
	add.s64 	%rd195, %rd263, %rd194;
	cvt.u32.u64 	%r187, %rd195;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r244, %r245, %r246, %r247}, [%r187];
	// end inline asm
	add.s64 	%rd197, %rd263, %rd196;
	cvt.u32.u64 	%r192, %rd197;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r256, %r257, %r258, %r259}, [%r192];
	// end inline asm
	add.s64 	%rd199, %rd263, %rd198;
	cvt.u32.u64 	%r197, %rd199;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r268, %r269, %r270, %r271}, [%r197];
	// end inline asm
	add.s64 	%rd201, %rd263, %rd200;
	cvt.u32.u64 	%r202, %rd201;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r280, %r281, %r282, %r283}, [%r202];
	// end inline asm
	add.s64 	%rd203, %rd263, %rd202;
	cvt.u32.u64 	%r207, %rd203;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r292, %r293, %r294, %r295}, [%r207];
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f161, %f162, %f163, %f164 }, { %r208, %r209, %r210, %r211 }, { %r212, %r212 }, { %f161, %f162, %f163, %f164 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f165, %f166, %f167, %f168 }, { %r208, %r209, %r210, %r211 }, { %r212, %r212 }, { %f165, %f166, %f167, %f168 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f161, %f162, %f163, %f164 }, { %r220, %r221, %r222, %r223 }, { %r212, %r212 }, { %f161, %f162, %f163, %f164 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f165, %f166, %f167, %f168 }, { %r220, %r221, %r222, %r223 }, { %r212, %r212 }, { %f165, %f166, %f167, %f168 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f161, %f162, %f163, %f164 }, { %r232, %r233, %r234, %r235 }, { %r212, %r212 }, { %f161, %f162, %f163, %f164 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f165, %f166, %f167, %f168 }, { %r232, %r233, %r234, %r235 }, { %r212, %r212 }, { %f165, %f166, %f167, %f168 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f161, %f162, %f163, %f164 }, { %r244, %r245, %r246, %r247 }, { %r212, %r212 }, { %f161, %f162, %f163, %f164 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f165, %f166, %f167, %f168 }, { %r244, %r245, %r246, %r247 }, { %r212, %r212 }, { %f165, %f166, %f167, %f168 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f161, %f162, %f163, %f164 }, { %r256, %r257, %r258, %r259 }, { %r212, %r212 }, { %f161, %f162, %f163, %f164 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f165, %f166, %f167, %f168 }, { %r256, %r257, %r258, %r259 }, { %r212, %r212 }, { %f165, %f166, %f167, %f168 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f161, %f162, %f163, %f164 }, { %r268, %r269, %r270, %r271 }, { %r212, %r212 }, { %f161, %f162, %f163, %f164 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f165, %f166, %f167, %f168 }, { %r268, %r269, %r270, %r271 }, { %r212, %r212 }, { %f165, %f166, %f167, %f168 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f161, %f162, %f163, %f164 }, { %r280, %r281, %r282, %r283 }, { %r212, %r212 }, { %f161, %f162, %f163, %f164 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f165, %f166, %f167, %f168 }, { %r280, %r281, %r282, %r283 }, { %r212, %r212 }, { %f165, %f166, %f167, %f168 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f161, %f162, %f163, %f164 }, { %r292, %r293, %r294, %r295 }, { %r212, %r212 }, { %f161, %f162, %f163, %f164 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f165, %f166, %f167, %f168 }, { %r292, %r293, %r294, %r295 }, { %r212, %r212 }, { %f165, %f166, %f167, %f168 };
	// end inline asm
	add.s32 	%r320, %r383, 1;
	setp.lt.s32 	%p5, %r320, 3;
	selp.b32 	%r383, %r320, 0, %p5;
	add.s64 	%rd180, %rd255, %rd18;
	add.s64 	%rd181, %rd256, %rd18;
	add.s64 	%rd182, %rd257, %rd18;
	add.s64 	%rd183, %rd258, %rd18;
	add.s64 	%rd184, %rd259, %rd18;
	add.s64 	%rd185, %rd260, %rd18;
	add.s64 	%rd186, %rd261, %rd18;
	add.s64 	%rd187, %rd262, %rd18;
	shl.b32 	%r321, %r383, 13;
	mul.wide.s32 	%rd204, %r321, 2;
	add.s64 	%rd206, %rd69, %rd204;
	bar.sync 	0;
	add.s64 	%rd208, %rd206, %rd207;
	add.s64 	%rd210, %rd206, %rd209;
	add.s64 	%rd212, %rd206, %rd211;
	add.s64 	%rd214, %rd206, %rd213;
	add.s64 	%rd216, %rd206, %rd215;
	add.s64 	%rd218, %rd206, %rd217;
	add.s64 	%rd220, %rd206, %rd219;
	add.s64 	%rd222, %rd206, %rd221;
	selp.b32 	%r305, 16, 0, %p4;
	cvt.u32.u64 	%r304, %rd208;
	// begin inline asm
	cp.async.cg.shared.global [ %r304 + 0 ], [ %rd180 + 0 ], 0x10, %r305;
	// end inline asm
	cvt.u32.u64 	%r306, %rd210;
	// begin inline asm
	cp.async.cg.shared.global [ %r306 + 0 ], [ %rd181 + 0 ], 0x10, %r305;
	// end inline asm
	cvt.u32.u64 	%r308, %rd212;
	// begin inline asm
	cp.async.cg.shared.global [ %r308 + 0 ], [ %rd182 + 0 ], 0x10, %r305;
	// end inline asm
	cvt.u32.u64 	%r310, %rd214;
	// begin inline asm
	cp.async.cg.shared.global [ %r310 + 0 ], [ %rd183 + 0 ], 0x10, %r305;
	// end inline asm
	cvt.u32.u64 	%r312, %rd216;
	// begin inline asm
	cp.async.cg.shared.global [ %r312 + 0 ], [ %rd184 + 0 ], 0x10, %r305;
	// end inline asm
	cvt.u32.u64 	%r314, %rd218;
	// begin inline asm
	cp.async.cg.shared.global [ %r314 + 0 ], [ %rd185 + 0 ], 0x10, %r305;
	// end inline asm
	cvt.u32.u64 	%r316, %rd220;
	// begin inline asm
	cp.async.cg.shared.global [ %r316 + 0 ], [ %rd186 + 0 ], 0x10, %r305;
	// end inline asm
	cvt.u32.u64 	%r318, %rd222;
	// begin inline asm
	cp.async.cg.shared.global [ %r318 + 0 ], [ %rd187 + 0 ], 0x10, %r305;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s32 	%r322, %r382, 1;
	setp.lt.s32 	%p6, %r322, 3;
	selp.b32 	%r382, %r322, 0, %p6;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r323, %r382, 13;
	mul.wide.s32 	%rd223, %r323, 2;
	add.s64 	%rd263, %rd69, %rd223;
	add.s64 	%rd262, %rd262, 256;
	add.s64 	%rd261, %rd261, 256;
	add.s64 	%rd260, %rd260, 256;
	add.s64 	%rd259, %rd259, 256;
	add.s64 	%rd258, %rd258, 256;
	add.s64 	%rd257, %rd257, 256;
	add.s64 	%rd256, %rd256, 256;
	add.s64 	%rd255, %rd255, 256;
	setp.lt.u32 	%p7, %r381, 1920;
	@%p7 bra 	$L__BB1_1;
	and.b32  	%r344, %r7, 56;
	shl.b32 	%r345, %r2, 3;
	sub.s32 	%r346, %r15, %r345;
	div.s32 	%r347, %r346, %r3;
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	mov.b32 	%r324, %f161;
	// begin inline asm
	cvt.rn.bf16.f32 %rs9, %r324;
	// end inline asm
	mov.b32 	%r325, %f162;
	// begin inline asm
	cvt.rn.bf16.f32 %rs10, %r325;
	// end inline asm
	mov.b32 	%r326, %f163;
	// begin inline asm
	cvt.rn.bf16.f32 %rs11, %r326;
	// end inline asm
	mov.b32 	%r327, %f164;
	// begin inline asm
	cvt.rn.bf16.f32 %rs12, %r327;
	// end inline asm
	mov.b32 	%r328, %f165;
	// begin inline asm
	cvt.rn.bf16.f32 %rs13, %r328;
	// end inline asm
	mov.b32 	%r329, %f166;
	// begin inline asm
	cvt.rn.bf16.f32 %rs14, %r329;
	// end inline asm
	mov.b32 	%r330, %f167;
	// begin inline asm
	cvt.rn.bf16.f32 %rs15, %r330;
	// end inline asm
	mov.b32 	%r331, %f168;
	// begin inline asm
	cvt.rn.bf16.f32 %rs16, %r331;
	// end inline asm
	shl.b32 	%r348, %r347, 4;
	cvt.s64.s32 	%rd225, %r4;
	cvt.s64.s32 	%rd226, %r348;
	cvt.u64.u32 	%rd227, %r344;
	or.b64  	%rd228, %rd225, %rd227;
	bfe.u32 	%r349, %r5, 3, 3;
	selp.b32 	%r350, 0, 8, %p3;
	or.b32  	%r351, %r349, %r350;
	cvt.u64.u32 	%rd229, %r351;
	or.b64  	%rd230, %rd226, %rd229;
	shl.b64 	%rd231, %rd228, 1;
	add.s64 	%rd232, %rd1, %rd231;
	mad.lo.s64 	%rd224, %rd230, 6144, %rd232;
	and.b32  	%r352, %r8, 384;
	bfe.u32 	%r353, %r5, 2, 3;
	shr.u32 	%r354, %r6, 1;
	selp.b32 	%r355, 0, 32, %p3;
	or.b32  	%r356, %r354, %r355;
	or.b32  	%r357, %r356, %r353;
	or.b32  	%r358, %r357, %r352;
	and.b32  	%r359, %r7, 504;
	selp.b32 	%r360, 0, 512, %p3;
	or.b32  	%r361, %r359, %r360;
	shr.u32 	%r362, %r352, 3;
	add.s32 	%r363, %r358, %r362;
	shl.b32 	%r364, %r363, 1;
	cvt.u64.u32 	%rd233, %r364;
	mov.u64 	%rd234, global_smem;
	add.s64 	%rd235, %rd234, %rd233;
	cvt.u32.u64 	%r332, %rd235;
	mov.pred 	%p8, -1;
	// begin inline asm
	@%p8 st.shared.b16 [ %r332 + 0 ], %rs9;
	// end inline asm
	or.b32  	%r365, %r358, 64;
	shr.u32 	%r366, %r365, 3;
	and.b32  	%r367, %r366, 268435448;
	cvt.u64.u32 	%rd236, %r358;
	cvt.u64.u32 	%rd237, %r367;
	add.s64 	%rd238, %rd237, %rd236;
	shl.b64 	%rd239, %rd238, 1;
	add.s64 	%rd240, %rd234, %rd239;
	cvt.u32.u64 	%r368, %rd240;
	add.s32 	%r333, %r368, 128;
	// begin inline asm
	@%p8 st.shared.b16 [ %r333 + 0 ], %rs10;
	// end inline asm
	cvt.u64.u32 	%rd241, %r362;
	add.s64 	%rd242, %rd241, %rd236;
	shl.b64 	%rd243, %rd242, 1;
	add.s64 	%rd244, %rd234, %rd243;
	cvt.u32.u64 	%r369, %rd244;
	add.s32 	%r334, %r369, 16;
	// begin inline asm
	@%p8 st.shared.b16 [ %r334 + 0 ], %rs11;
	// end inline asm
	add.s32 	%r335, %r368, 144;
	// begin inline asm
	@%p8 st.shared.b16 [ %r335 + 0 ], %rs12;
	// end inline asm
	or.b32  	%r370, %r358, 512;
	shr.u32 	%r371, %r370, 3;
	and.b32  	%r372, %r371, 268435448;
	cvt.u64.u32 	%rd245, %r372;
	add.s64 	%rd246, %rd245, %rd236;
	shl.b64 	%rd247, %rd246, 1;
	add.s64 	%rd248, %rd234, %rd247;
	cvt.u32.u64 	%r373, %rd248;
	add.s32 	%r336, %r373, 1024;
	// begin inline asm
	@%p8 st.shared.b16 [ %r336 + 0 ], %rs13;
	// end inline asm
	or.b32  	%r374, %r358, 576;
	shr.u32 	%r375, %r374, 3;
	and.b32  	%r376, %r375, 268435448;
	cvt.u64.u32 	%rd249, %r376;
	add.s64 	%rd250, %rd249, %rd236;
	shl.b64 	%rd251, %rd250, 1;
	add.s64 	%rd252, %rd234, %rd251;
	cvt.u32.u64 	%r377, %rd252;
	add.s32 	%r337, %r377, 1152;
	// begin inline asm
	@%p8 st.shared.b16 [ %r337 + 0 ], %rs14;
	// end inline asm
	add.s32 	%r338, %r373, 1040;
	// begin inline asm
	@%p8 st.shared.b16 [ %r338 + 0 ], %rs15;
	// end inline asm
	add.s32 	%r339, %r377, 1168;
	// begin inline asm
	@%p8 st.shared.b16 [ %r339 + 0 ], %rs16;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r378, %r361, 3;
	and.b32  	%r379, %r378, 120;
	add.s32 	%r380, %r379, %r361;
	mul.wide.u32 	%rd253, %r380, 2;
	add.s64 	%rd254, %rd234, %rd253;
	ld.shared.v4.u32 	{%r340, %r341, %r342, %r343}, [%rd254];
	// begin inline asm
	st.global.v4.b32 [ %rd224 + 0 ], { %r340, %r341, %r342, %r343 };
	// end inline asm
	ret;

}
	// .globl	fusion_51
.visible .entry fusion_51(
	.param .u64 .ptr .align 16 fusion_51_param_0,
	.param .u64 .ptr .align 128 fusion_51_param_1,
	.param .u64 .ptr .align 128 fusion_51_param_2,
	.param .u64 .ptr .align 16 fusion_51_param_3,
	.param .u64 .ptr .align 128 fusion_51_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<49>;
	.reg .b32 	%r<104>;
	.reg .f32 	%f<122>;
	.reg .b64 	%rd<45>;

	ld.param.u64 	%rd10, [fusion_51_param_0];
	ld.param.u64 	%rd11, [fusion_51_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_51_param_1];
	ld.param.u64 	%rd14, [fusion_51_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_51_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd7, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	cvt.s64.s32 	%rd19, %r1;
	shr.u64 	%rd20, %rd19, 2;
	mul.wide.s32 	%rd21, %r1, 256;
	and.b64  	%rd22, %rd21, 768;
	mul.lo.s64 	%rd23, %rd20, 3072;
	or.b64  	%rd24, %rd22, %rd23;
	shl.b64 	%rd25, %rd24, 1;
	add.s64 	%rd26, %rd17, %rd25;
	mov.u32 	%r81, %tid.x;
	and.b32  	%r82, %r81, 31;
	shl.b32 	%r83, %r81, 2;
	and.b32  	%r84, %r83, 124;
	setp.lt.u32 	%p4, %r81, 32;
	selp.b32 	%r85, 0, 128, %p4;
	or.b32  	%r86, %r84, %r85;
	mul.wide.u32 	%rd27, %r86, 2;
	add.s64 	%rd28, %rd26, %rd27;
	add.s64 	%rd1, %rd28, 4096;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	shl.b64 	%rd29, %rd21, 1;
	add.s64 	%rd30, %rd18, %rd29;
	add.s64 	%rd2, %rd30, %rd27;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.rn.f32 	%f9, %f1, %f5;
	add.rn.f32 	%f10, %f2, %f6;
	add.rn.f32 	%f11, %f3, %f7;
	add.rn.f32 	%f12, %f4, %f8;
	shl.b64 	%rd31, %rd23, 1;
	add.s64 	%rd32, %rd17, %rd31;
	shl.b32 	%r87, %r81, 3;
	and.b32  	%r88, %r87, 248;
	selp.b32 	%r89, 0, 256, %p4;
	or.b32  	%r90, %r88, %r89;
	mul.wide.u32 	%rd33, %r90, 2;
	add.s64 	%rd34, %rd32, %rd33;
	add.s64 	%rd3, %rd34, 4096;
	add.s64 	%rd4, %rd34, 5120;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	ld.global.v4.b32 { %r14, %r15, %r16, %r17 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	mov.b32 	{%rs13, %rs14}, %r16;
	mov.b32 	{%rs15, %rs16}, %r17;
	// begin inline asm
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v4.b32 { %r18, %r19, %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r18;
	mov.b32 	{%rs19, %rs20}, %r19;
	mov.b32 	{%rs21, %rs22}, %r20;
	mov.b32 	{%rs23, %rs24}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs9;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs10;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs11;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs12;
	// end inline asm
	mov.b32 	%f16, %r25;
	// begin inline asm
	cvt.f32.bf16 %r26, %rs13;
	// end inline asm
	mov.b32 	%f17, %r26;
	// begin inline asm
	cvt.f32.bf16 %r27, %rs14;
	// end inline asm
	mov.b32 	%f18, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs15;
	// end inline asm
	mov.b32 	%f19, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs16;
	// end inline asm
	mov.b32 	%f20, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs17;
	// end inline asm
	mov.b32 	%f21, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs18;
	// end inline asm
	mov.b32 	%f22, %r31;
	// begin inline asm
	cvt.f32.bf16 %r32, %rs19;
	// end inline asm
	mov.b32 	%f23, %r32;
	// begin inline asm
	cvt.f32.bf16 %r33, %rs20;
	// end inline asm
	mov.b32 	%f24, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs21;
	// end inline asm
	mov.b32 	%f25, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs22;
	// end inline asm
	mov.b32 	%f26, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs23;
	// end inline asm
	mov.b32 	%f27, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs24;
	// end inline asm
	mov.b32 	%f28, %r37;
	shl.b64 	%rd35, %rd20, 11;
	add.s64 	%rd36, %rd18, %rd35;
	add.s64 	%rd5, %rd36, %rd33;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	mov.u32 %r41, 0x0;
	ld.global.v4.b32 { %r38, %r39, %r40, %r41 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r38;
	mov.b32 	{%rs27, %rs28}, %r39;
	mov.b32 	{%rs29, %rs30}, %r40;
	mov.b32 	{%rs31, %rs32}, %r41;
	// begin inline asm
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	mov.u32 %r45, 0x0;
	ld.global.v4.b32 { %r42, %r43, %r44, %r45 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r42;
	mov.b32 	{%rs35, %rs36}, %r43;
	mov.b32 	{%rs37, %rs38}, %r44;
	mov.b32 	{%rs39, %rs40}, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs25;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs26;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs27;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs28;
	// end inline asm
	mov.b32 	%f32, %r49;
	// begin inline asm
	cvt.f32.bf16 %r50, %rs29;
	// end inline asm
	mov.b32 	%f33, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs30;
	// end inline asm
	mov.b32 	%f34, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs31;
	// end inline asm
	mov.b32 	%f35, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs32;
	// end inline asm
	mov.b32 	%f36, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs33;
	// end inline asm
	mov.b32 	%f37, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs34;
	// end inline asm
	mov.b32 	%f38, %r55;
	// begin inline asm
	cvt.f32.bf16 %r56, %rs35;
	// end inline asm
	mov.b32 	%f39, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs36;
	// end inline asm
	mov.b32 	%f40, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs37;
	// end inline asm
	mov.b32 	%f41, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs38;
	// end inline asm
	mov.b32 	%f42, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs39;
	// end inline asm
	mov.b32 	%f43, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs40;
	// end inline asm
	mov.b32 	%f44, %r61;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	add.rn.f32 	%f49, %f17, %f33;
	add.rn.f32 	%f50, %f18, %f34;
	add.rn.f32 	%f51, %f19, %f35;
	add.rn.f32 	%f52, %f20, %f36;
	add.rn.f32 	%f53, %f21, %f37;
	add.rn.f32 	%f54, %f22, %f38;
	add.rn.f32 	%f55, %f23, %f39;
	add.rn.f32 	%f56, %f24, %f40;
	add.rn.f32 	%f57, %f25, %f41;
	add.rn.f32 	%f58, %f26, %f42;
	add.rn.f32 	%f59, %f27, %f43;
	add.rn.f32 	%f60, %f28, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	mul.rn.f32 	%f65, %f49, %f49;
	mul.rn.f32 	%f66, %f50, %f50;
	mul.rn.f32 	%f67, %f51, %f51;
	mul.rn.f32 	%f68, %f52, %f52;
	mul.rn.f32 	%f69, %f53, %f53;
	mul.rn.f32 	%f70, %f54, %f54;
	mul.rn.f32 	%f71, %f55, %f55;
	mul.rn.f32 	%f72, %f56, %f56;
	mul.rn.f32 	%f73, %f57, %f57;
	mul.rn.f32 	%f74, %f58, %f58;
	mul.rn.f32 	%f75, %f59, %f59;
	mul.rn.f32 	%f76, %f60, %f60;
	add.rn.f32 	%f77, %f61, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	add.rn.f32 	%f80, %f79, %f65;
	add.rn.f32 	%f81, %f80, %f66;
	add.rn.f32 	%f82, %f81, %f67;
	add.rn.f32 	%f83, %f82, %f68;
	add.rn.f32 	%f84, %f83, %f69;
	add.rn.f32 	%f85, %f84, %f70;
	add.rn.f32 	%f86, %f85, %f71;
	add.rn.f32 	%f87, %f86, %f72;
	add.rn.f32 	%f88, %f87, %f73;
	add.rn.f32 	%f89, %f88, %f74;
	add.rn.f32 	%f90, %f89, %f75;
	add.rn.f32 	%f91, %f90, %f76;
	mov.b32 	%r91, %f91;
	shfl.sync.bfly.b32	%r92, %r91, 16, 31, -1;
	mov.b32 	%f92, %r92;
	add.rn.f32 	%f93, %f91, %f92;
	mov.b32 	%r93, %f93;
	shfl.sync.bfly.b32	%r94, %r93, 8, 31, -1;
	mov.b32 	%f94, %r94;
	add.rn.f32 	%f95, %f93, %f94;
	mov.b32 	%r95, %f95;
	shfl.sync.bfly.b32	%r96, %r95, 4, 31, -1;
	mov.b32 	%f96, %r96;
	add.rn.f32 	%f97, %f95, %f96;
	mov.b32 	%r97, %f97;
	shfl.sync.bfly.b32	%r98, %r97, 2, 31, -1;
	mov.b32 	%f98, %r98;
	add.rn.f32 	%f99, %f97, %f98;
	mov.b32 	%r99, %f99;
	shfl.sync.bfly.b32	%r100, %r99, 1, 31, -1;
	mov.b32 	%f100, %r100;
	add.rn.f32 	%f101, %f99, %f100;
	setp.eq.s32 	%p1, %r82, 0;
	shr.u32 	%r101, %r81, 3;
	and.b32  	%r102, %r101, 4;
	cvt.u64.u32 	%rd37, %r102;
	mov.u64 	%rd38, global_smem;
	add.s64 	%rd39, %rd38, %rd37;
	mov.b32 	%r63, %f101;
	cvt.u32.u64 	%r62, %rd39;
	// begin inline asm
	@%p1 st.shared.b32 [ %r62 + 0 ], %r63;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r81, 2;
	cvt.u64.u32 	%rd40, %r83;
	add.s64 	%rd41, %rd38, %rd40;
	cvt.u32.u64 	%r65, %rd41;
	// begin inline asm
	@%p2 ld.shared.b32 %r64, [ %r65 + 0 ];
	// end inline asm
	mov.b32 	%f102, %r64;
	shfl.sync.bfly.b32	%r103, %r64, 1, 31, -1;
	mov.b32 	%f103, %r103;
	add.rn.f32 	%f104, %f102, %f103;
	setp.eq.s32 	%p3, %r81, 0;
	mov.b32 	%r67, %f104;
	// begin inline asm
	@%p3 st.shared.b32 [ %r65 + 0 ], %r67;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f105, [global_smem];
	mul.rn.f32 	%f106, %f105, 0f3A800000;
	// begin inline asm
	mov.u32 %r68, 0x0;
	ld.global.b32 { %r68 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f107, %r68;
	add.rn.f32 	%f108, %f106, %f107;
	rsqrt.approx.f32 	%f109, %f108;
	mul.rn.f32 	%f110, %f9, %f109;
	mul.rn.f32 	%f111, %f10, %f109;
	mul.rn.f32 	%f112, %f11, %f109;
	mul.rn.f32 	%f113, %f12, %f109;
	shl.b64 	%rd42, %rd22, 1;
	add.s64 	%rd43, %rd15, %rd42;
	add.s64 	%rd8, %rd43, %rd27;
	// begin inline asm
	mov.u32 %r69, 0x0;
	mov.u32 %r70, 0x0;
	ld.global.v2.b32 { %r69, %r70 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r69;
	mov.b32 	{%rs43, %rs44}, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs41;
	// end inline asm
	mov.b32 	%f114, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs42;
	// end inline asm
	mov.b32 	%f115, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs43;
	// end inline asm
	mov.b32 	%f116, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs44;
	// end inline asm
	mov.b32 	%f117, %r74;
	mul.rn.f32 	%f118, %f110, %f114;
	mul.rn.f32 	%f119, %f111, %f115;
	mul.rn.f32 	%f120, %f112, %f116;
	mul.rn.f32 	%f121, %f113, %f117;
	mov.b32 	%r75, %f118;
	// begin inline asm
	cvt.rn.bf16.f32 %rs45, %r75;
	// end inline asm
	mov.b32 	%r76, %f119;
	// begin inline asm
	cvt.rn.bf16.f32 %rs46, %r76;
	// end inline asm
	mov.b32 	%r77, %f120;
	// begin inline asm
	cvt.rn.bf16.f32 %rs47, %r77;
	// end inline asm
	mov.b32 	%r78, %f121;
	// begin inline asm
	cvt.rn.bf16.f32 %rs48, %r78;
	// end inline asm
	add.s64 	%rd44, %rd12, %rd29;
	add.s64 	%rd9, %rd44, %rd27;
	mov.b32 	%r79, {%rs45, %rs46};
	mov.b32 	%r80, {%rs47, %rs48};
	// begin inline asm
	st.global.v2.b32 [ %rd9 + 0 ], { %r79, %r80 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion_2
.visible .entry loop_convert_fusion_2(
	.param .u64 .ptr .align 128 loop_convert_fusion_2_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_2_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_2_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_2_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 4;
	mul.lo.s16 	%rs4, %rs3, 24;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 7;
	cvt.u32.u16 	%r3, %rs6;
	or.b32  	%r4, %r1, %r3;
	mul.wide.u16 	%r5, %rs3, 6144;
	add.s32 	%r6, %r4, %r5;
	mul.wide.u32 	%rd5, %r6, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs7, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	mul.rn.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.f32 	%f3, %f2;
	cvt.rn.bf16.f32 	%rs8, %f3;
	cvt.f32.bf16 	%f4, %rs8;
	add.rn.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.f32 	%f6, %f5;
	ld.global.nc.u16 	%rs9, [%rd6+6144];
	mul.rn.f32 	%f7, %f6, %f1;
	cvt.f32.bf16 	%f8, %rs9;
	mul.rn.f32 	%f9, %f7, %f8;
	cvt.rn.bf16.f32 	%rs10, %f9;
	shl.b32 	%r7, %r2, 7;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd7, %r8, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs10;
	ret;

}
	// .globl	fusion_49
.visible .entry fusion_49(
	.param .u64 .ptr .align 16 fusion_49_param_0,
	.param .u64 .ptr .align 16 fusion_49_param_1,
	.param .u64 .ptr .align 128 fusion_49_param_2,
	.param .u64 .ptr .align 128 fusion_49_param_3,
	.param .u64 .ptr .align 128 fusion_49_param_4,
	.param .u64 .ptr .align 128 fusion_49_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<89>;
	.reg .b32 	%r<164>;
	.reg .f32 	%f<202>;
	.reg .b64 	%rd<55>;

	ld.param.u64 	%rd16, [fusion_49_param_0];
	ld.param.u64 	%rd17, [fusion_49_param_5];
	cvta.to.global.u64 	%rd18, %rd17;
	ld.param.u64 	%rd19, [fusion_49_param_1];
	ld.param.u64 	%rd20, [fusion_49_param_4];
	cvta.to.global.u64 	%rd21, %rd20;
	ld.param.u64 	%rd22, [fusion_49_param_2];
	ld.param.u64 	%rd23, [fusion_49_param_3];
	cvta.to.global.u64 	%rd24, %rd23;
	cvta.to.global.u64 	%rd25, %rd22;
	cvta.to.global.u64 	%rd26, %rd19;
	cvta.to.global.u64 	%rd13, %rd16;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	cvt.s64.s32 	%rd27, %r1;
	shr.u64 	%rd28, %rd27, 2;
	mul.wide.s32 	%rd29, %r1, 256;
	and.b64  	%rd30, %rd29, 768;
	mul.lo.s64 	%rd31, %rd28, 3072;
	or.b64  	%rd32, %rd30, %rd31;
	shl.b64 	%rd33, %rd32, 1;
	add.s64 	%rd34, %rd24, %rd33;
	mov.u32 	%r141, %tid.x;
	and.b32  	%r142, %r141, 31;
	shl.b32 	%r143, %r141, 2;
	and.b32  	%r144, %r143, 124;
	setp.lt.u32 	%p4, %r141, 32;
	selp.b32 	%r145, 0, 128, %p4;
	or.b32  	%r146, %r144, %r145;
	mul.wide.u32 	%rd35, %r146, 2;
	add.s64 	%rd36, %rd34, %rd35;
	add.s64 	%rd1, %rd36, 2048;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	shl.b64 	%rd37, %rd29, 1;
	add.s64 	%rd38, %rd21, %rd37;
	add.s64 	%rd2, %rd38, %rd35;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.s64 	%rd3, %rd36, 4096;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	ld.global.v2.b32 { %r14, %r15 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs9;
	// end inline asm
	mov.b32 	%f9, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs10;
	// end inline asm
	mov.b32 	%f10, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs11;
	// end inline asm
	mov.b32 	%f11, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs12;
	// end inline asm
	mov.b32 	%f12, %r19;
	add.s64 	%rd39, %rd25, %rd37;
	add.s64 	%rd4, %rd39, %rd35;
	// begin inline asm
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v2.b32 { %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs13, %rs14}, %r20;
	mov.b32 	{%rs15, %rs16}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	add.rn.f32 	%f17, %f9, %f13;
	add.rn.f32 	%f18, %f10, %f14;
	add.rn.f32 	%f19, %f11, %f15;
	add.rn.f32 	%f20, %f12, %f16;
	add.rn.f32 	%f21, %f5, %f17;
	add.rn.f32 	%f22, %f6, %f18;
	add.rn.f32 	%f23, %f7, %f19;
	add.rn.f32 	%f24, %f8, %f20;
	add.rn.f32 	%f25, %f1, %f21;
	add.rn.f32 	%f26, %f2, %f22;
	add.rn.f32 	%f27, %f3, %f23;
	add.rn.f32 	%f28, %f4, %f24;
	shl.b64 	%rd40, %rd31, 1;
	add.s64 	%rd41, %rd24, %rd40;
	shl.b32 	%r147, %r141, 3;
	and.b32  	%r148, %r147, 248;
	selp.b32 	%r149, 0, 256, %p4;
	or.b32  	%r150, %r148, %r149;
	mul.wide.u32 	%rd42, %r150, 2;
	add.s64 	%rd43, %rd41, %rd42;
	add.s64 	%rd5, %rd43, 2048;
	add.s64 	%rd6, %rd43, 3072;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f29, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f30, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f31, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f32, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f33, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f34, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f35, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f36, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f37, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f38, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f39, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f40, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f41, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f42, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f43, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f44, %r49;
	shl.b64 	%rd44, %rd28, 11;
	add.s64 	%rd45, %rd21, %rd44;
	add.s64 	%rd7, %rd45, %rd42;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f45, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f46, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f47, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f48, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f49, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f50, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f51, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f52, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f53, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f54, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f55, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f56, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f57, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f58, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f59, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f60, %r73;
	add.s64 	%rd9, %rd43, 4096;
	add.s64 	%rd10, %rd43, 5120;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f61, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f62, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f63, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f64, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f65, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f66, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f67, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f68, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f69, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f70, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f71, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f72, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f73, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f74, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f75, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f76, %r97;
	add.s64 	%rd46, %rd25, %rd44;
	add.s64 	%rd11, %rd46, %rd42;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f77, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f78, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f79, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f80, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f81, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f82, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f83, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f84, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f85, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f86, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f87, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f88, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f89, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f90, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f91, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f92, %r121;
	add.rn.f32 	%f93, %f61, %f77;
	add.rn.f32 	%f94, %f62, %f78;
	add.rn.f32 	%f95, %f63, %f79;
	add.rn.f32 	%f96, %f64, %f80;
	add.rn.f32 	%f97, %f65, %f81;
	add.rn.f32 	%f98, %f66, %f82;
	add.rn.f32 	%f99, %f67, %f83;
	add.rn.f32 	%f100, %f68, %f84;
	add.rn.f32 	%f101, %f69, %f85;
	add.rn.f32 	%f102, %f70, %f86;
	add.rn.f32 	%f103, %f71, %f87;
	add.rn.f32 	%f104, %f72, %f88;
	add.rn.f32 	%f105, %f73, %f89;
	add.rn.f32 	%f106, %f74, %f90;
	add.rn.f32 	%f107, %f75, %f91;
	add.rn.f32 	%f108, %f76, %f92;
	add.rn.f32 	%f109, %f45, %f93;
	add.rn.f32 	%f110, %f46, %f94;
	add.rn.f32 	%f111, %f47, %f95;
	add.rn.f32 	%f112, %f48, %f96;
	add.rn.f32 	%f113, %f49, %f97;
	add.rn.f32 	%f114, %f50, %f98;
	add.rn.f32 	%f115, %f51, %f99;
	add.rn.f32 	%f116, %f52, %f100;
	add.rn.f32 	%f117, %f53, %f101;
	add.rn.f32 	%f118, %f54, %f102;
	add.rn.f32 	%f119, %f55, %f103;
	add.rn.f32 	%f120, %f56, %f104;
	add.rn.f32 	%f121, %f57, %f105;
	add.rn.f32 	%f122, %f58, %f106;
	add.rn.f32 	%f123, %f59, %f107;
	add.rn.f32 	%f124, %f60, %f108;
	add.rn.f32 	%f125, %f29, %f109;
	add.rn.f32 	%f126, %f30, %f110;
	add.rn.f32 	%f127, %f31, %f111;
	add.rn.f32 	%f128, %f32, %f112;
	add.rn.f32 	%f129, %f33, %f113;
	add.rn.f32 	%f130, %f34, %f114;
	add.rn.f32 	%f131, %f35, %f115;
	add.rn.f32 	%f132, %f36, %f116;
	add.rn.f32 	%f133, %f37, %f117;
	add.rn.f32 	%f134, %f38, %f118;
	add.rn.f32 	%f135, %f39, %f119;
	add.rn.f32 	%f136, %f40, %f120;
	add.rn.f32 	%f137, %f41, %f121;
	add.rn.f32 	%f138, %f42, %f122;
	add.rn.f32 	%f139, %f43, %f123;
	add.rn.f32 	%f140, %f44, %f124;
	mul.rn.f32 	%f141, %f125, %f125;
	mul.rn.f32 	%f142, %f126, %f126;
	mul.rn.f32 	%f143, %f127, %f127;
	mul.rn.f32 	%f144, %f128, %f128;
	mul.rn.f32 	%f145, %f129, %f129;
	mul.rn.f32 	%f146, %f130, %f130;
	mul.rn.f32 	%f147, %f131, %f131;
	mul.rn.f32 	%f148, %f132, %f132;
	mul.rn.f32 	%f149, %f133, %f133;
	mul.rn.f32 	%f150, %f134, %f134;
	mul.rn.f32 	%f151, %f135, %f135;
	mul.rn.f32 	%f152, %f136, %f136;
	mul.rn.f32 	%f153, %f137, %f137;
	mul.rn.f32 	%f154, %f138, %f138;
	mul.rn.f32 	%f155, %f139, %f139;
	mul.rn.f32 	%f156, %f140, %f140;
	add.rn.f32 	%f157, %f141, %f142;
	add.rn.f32 	%f158, %f157, %f143;
	add.rn.f32 	%f159, %f158, %f144;
	add.rn.f32 	%f160, %f159, %f145;
	add.rn.f32 	%f161, %f160, %f146;
	add.rn.f32 	%f162, %f161, %f147;
	add.rn.f32 	%f163, %f162, %f148;
	add.rn.f32 	%f164, %f163, %f149;
	add.rn.f32 	%f165, %f164, %f150;
	add.rn.f32 	%f166, %f165, %f151;
	add.rn.f32 	%f167, %f166, %f152;
	add.rn.f32 	%f168, %f167, %f153;
	add.rn.f32 	%f169, %f168, %f154;
	add.rn.f32 	%f170, %f169, %f155;
	add.rn.f32 	%f171, %f170, %f156;
	mov.b32 	%r151, %f171;
	shfl.sync.bfly.b32	%r152, %r151, 16, 31, -1;
	mov.b32 	%f172, %r152;
	add.rn.f32 	%f173, %f171, %f172;
	mov.b32 	%r153, %f173;
	shfl.sync.bfly.b32	%r154, %r153, 8, 31, -1;
	mov.b32 	%f174, %r154;
	add.rn.f32 	%f175, %f173, %f174;
	mov.b32 	%r155, %f175;
	shfl.sync.bfly.b32	%r156, %r155, 4, 31, -1;
	mov.b32 	%f176, %r156;
	add.rn.f32 	%f177, %f175, %f176;
	mov.b32 	%r157, %f177;
	shfl.sync.bfly.b32	%r158, %r157, 2, 31, -1;
	mov.b32 	%f178, %r158;
	add.rn.f32 	%f179, %f177, %f178;
	mov.b32 	%r159, %f179;
	shfl.sync.bfly.b32	%r160, %r159, 1, 31, -1;
	mov.b32 	%f180, %r160;
	add.rn.f32 	%f181, %f179, %f180;
	setp.eq.s32 	%p1, %r142, 0;
	shr.u32 	%r161, %r141, 3;
	and.b32  	%r162, %r161, 4;
	cvt.u64.u32 	%rd47, %r162;
	mov.u64 	%rd48, global_smem;
	add.s64 	%rd49, %rd48, %rd47;
	mov.b32 	%r123, %f181;
	cvt.u32.u64 	%r122, %rd49;
	// begin inline asm
	@%p1 st.shared.b32 [ %r122 + 0 ], %r123;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r141, 2;
	cvt.u64.u32 	%rd50, %r143;
	add.s64 	%rd51, %rd48, %rd50;
	cvt.u32.u64 	%r125, %rd51;
	// begin inline asm
	@%p2 ld.shared.b32 %r124, [ %r125 + 0 ];
	// end inline asm
	mov.b32 	%f182, %r124;
	shfl.sync.bfly.b32	%r163, %r124, 1, 31, -1;
	mov.b32 	%f183, %r163;
	add.rn.f32 	%f184, %f182, %f183;
	setp.eq.s32 	%p3, %r141, 0;
	mov.b32 	%r127, %f184;
	// begin inline asm
	@%p3 st.shared.b32 [ %r125 + 0 ], %r127;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f185, [global_smem];
	mul.rn.f32 	%f186, %f185, 0f3A800000;
	// begin inline asm
	mov.u32 %r128, 0x0;
	ld.global.b32 { %r128 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f187, %r128;
	add.rn.f32 	%f188, %f186, %f187;
	rsqrt.approx.f32 	%f189, %f188;
	mul.rn.f32 	%f190, %f25, %f189;
	mul.rn.f32 	%f191, %f26, %f189;
	mul.rn.f32 	%f192, %f27, %f189;
	mul.rn.f32 	%f193, %f28, %f189;
	shl.b64 	%rd52, %rd30, 1;
	add.s64 	%rd53, %rd26, %rd52;
	add.s64 	%rd14, %rd53, %rd35;
	// begin inline asm
	mov.u32 %r129, 0x0;
	mov.u32 %r130, 0x0;
	ld.global.v2.b32 { %r129, %r130 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r129;
	mov.b32 	{%rs83, %rs84}, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs81;
	// end inline asm
	mov.b32 	%f194, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs82;
	// end inline asm
	mov.b32 	%f195, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs83;
	// end inline asm
	mov.b32 	%f196, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs84;
	// end inline asm
	mov.b32 	%f197, %r134;
	mul.rn.f32 	%f198, %f190, %f194;
	mul.rn.f32 	%f199, %f191, %f195;
	mul.rn.f32 	%f200, %f192, %f196;
	mul.rn.f32 	%f201, %f193, %f197;
	mov.b32 	%r135, %f198;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r135;
	// end inline asm
	mov.b32 	%r136, %f199;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r136;
	// end inline asm
	mov.b32 	%r137, %f200;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r137;
	// end inline asm
	mov.b32 	%r138, %f201;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r138;
	// end inline asm
	add.s64 	%rd54, %rd18, %rd37;
	add.s64 	%rd15, %rd54, %rd35;
	mov.b32 	%r139, {%rs85, %rs86};
	mov.b32 	%r140, {%rs87, %rs88};
	// begin inline asm
	st.global.v2.b32 [ %rd15 + 0 ], { %r139, %r140 };
	// end inline asm
	ret;

}
	// .globl	fusion_47
.visible .entry fusion_47(
	.param .u64 .ptr .align 16 fusion_47_param_0,
	.param .u64 .ptr .align 16 fusion_47_param_1,
	.param .u64 .ptr .align 128 fusion_47_param_2,
	.param .u64 .ptr .align 128 fusion_47_param_3,
	.param .u64 .ptr .align 128 fusion_47_param_4,
	.param .u64 .ptr .align 128 fusion_47_param_5,
	.param .u64 .ptr .align 128 fusion_47_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<129>;
	.reg .b32 	%r<224>;
	.reg .f32 	%f<282>;
	.reg .b64 	%rd<63>;

	ld.param.u64 	%rd22, [fusion_47_param_0];
	ld.param.u64 	%rd23, [fusion_47_param_6];
	cvta.to.global.u64 	%rd24, %rd23;
	ld.param.u64 	%rd25, [fusion_47_param_1];
	ld.param.u64 	%rd26, [fusion_47_param_5];
	cvta.to.global.u64 	%rd27, %rd26;
	ld.param.u64 	%rd28, [fusion_47_param_2];
	ld.param.u64 	%rd29, [fusion_47_param_4];
	cvta.to.global.u64 	%rd30, %rd29;
	ld.param.u64 	%rd31, [fusion_47_param_3];
	cvta.to.global.u64 	%rd32, %rd31;
	cvta.to.global.u64 	%rd33, %rd28;
	cvta.to.global.u64 	%rd34, %rd25;
	cvta.to.global.u64 	%rd19, %rd22;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	cvt.s64.s32 	%rd35, %r1;
	shr.u64 	%rd36, %rd35, 2;
	mul.wide.s32 	%rd37, %r1, 256;
	and.b64  	%rd38, %rd37, 768;
	mul.lo.s64 	%rd39, %rd36, 3072;
	or.b64  	%rd40, %rd38, %rd39;
	shl.b64 	%rd41, %rd40, 1;
	add.s64 	%rd42, %rd32, %rd41;
	mov.u32 	%r201, %tid.x;
	and.b32  	%r202, %r201, 31;
	shl.b32 	%r203, %r201, 2;
	and.b32  	%r204, %r203, 124;
	setp.lt.u32 	%p4, %r201, 32;
	selp.b32 	%r205, 0, 128, %p4;
	or.b32  	%r206, %r204, %r205;
	mul.wide.u32 	%rd43, %r206, 2;
	add.s64 	%rd1, %rd42, %rd43;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	shl.b64 	%rd44, %rd37, 1;
	add.s64 	%rd45, %rd27, %rd44;
	add.s64 	%rd2, %rd45, %rd43;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.s64 	%rd3, %rd1, 2048;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	ld.global.v2.b32 { %r14, %r15 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs9;
	// end inline asm
	mov.b32 	%f9, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs10;
	// end inline asm
	mov.b32 	%f10, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs11;
	// end inline asm
	mov.b32 	%f11, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs12;
	// end inline asm
	mov.b32 	%f12, %r19;
	add.s64 	%rd46, %rd30, %rd44;
	add.s64 	%rd4, %rd46, %rd43;
	// begin inline asm
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v2.b32 { %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs13, %rs14}, %r20;
	mov.b32 	{%rs15, %rs16}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	add.s64 	%rd5, %rd1, 4096;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	ld.global.v2.b32 { %r26, %r27 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs17;
	// end inline asm
	mov.b32 	%f17, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs18;
	// end inline asm
	mov.b32 	%f18, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs19;
	// end inline asm
	mov.b32 	%f19, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs20;
	// end inline asm
	mov.b32 	%f20, %r31;
	add.s64 	%rd47, %rd33, %rd44;
	add.s64 	%rd6, %rd47, %rd43;
	// begin inline asm
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v2.b32 { %r32, %r33 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs21, %rs22}, %r32;
	mov.b32 	{%rs23, %rs24}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs21;
	// end inline asm
	mov.b32 	%f21, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs22;
	// end inline asm
	mov.b32 	%f22, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs23;
	// end inline asm
	mov.b32 	%f23, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs24;
	// end inline asm
	mov.b32 	%f24, %r37;
	add.rn.f32 	%f25, %f17, %f21;
	add.rn.f32 	%f26, %f18, %f22;
	add.rn.f32 	%f27, %f19, %f23;
	add.rn.f32 	%f28, %f20, %f24;
	add.rn.f32 	%f29, %f13, %f25;
	add.rn.f32 	%f30, %f14, %f26;
	add.rn.f32 	%f31, %f15, %f27;
	add.rn.f32 	%f32, %f16, %f28;
	add.rn.f32 	%f33, %f9, %f29;
	add.rn.f32 	%f34, %f10, %f30;
	add.rn.f32 	%f35, %f11, %f31;
	add.rn.f32 	%f36, %f12, %f32;
	add.rn.f32 	%f37, %f5, %f33;
	add.rn.f32 	%f38, %f6, %f34;
	add.rn.f32 	%f39, %f7, %f35;
	add.rn.f32 	%f40, %f8, %f36;
	add.rn.f32 	%f41, %f1, %f37;
	add.rn.f32 	%f42, %f2, %f38;
	add.rn.f32 	%f43, %f3, %f39;
	add.rn.f32 	%f44, %f4, %f40;
	shl.b64 	%rd48, %rd39, 1;
	add.s64 	%rd49, %rd32, %rd48;
	shl.b32 	%r207, %r201, 3;
	and.b32  	%r208, %r207, 248;
	selp.b32 	%r209, 0, 256, %p4;
	or.b32  	%r210, %r208, %r209;
	mul.wide.u32 	%rd50, %r210, 2;
	add.s64 	%rd7, %rd49, %rd50;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	mov.u32 %r41, 0x0;
	ld.global.v4.b32 { %r38, %r39, %r40, %r41 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r38;
	mov.b32 	{%rs27, %rs28}, %r39;
	mov.b32 	{%rs29, %rs30}, %r40;
	mov.b32 	{%rs31, %rs32}, %r41;
	// begin inline asm
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	mov.u32 %r45, 0x0;
	ld.global.v4.b32 { %r42, %r43, %r44, %r45 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r42;
	mov.b32 	{%rs35, %rs36}, %r43;
	mov.b32 	{%rs37, %rs38}, %r44;
	mov.b32 	{%rs39, %rs40}, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs25;
	// end inline asm
	mov.b32 	%f45, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs26;
	// end inline asm
	mov.b32 	%f46, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs27;
	// end inline asm
	mov.b32 	%f47, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs28;
	// end inline asm
	mov.b32 	%f48, %r49;
	// begin inline asm
	cvt.f32.bf16 %r50, %rs29;
	// end inline asm
	mov.b32 	%f49, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs30;
	// end inline asm
	mov.b32 	%f50, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs31;
	// end inline asm
	mov.b32 	%f51, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs32;
	// end inline asm
	mov.b32 	%f52, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs33;
	// end inline asm
	mov.b32 	%f53, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs34;
	// end inline asm
	mov.b32 	%f54, %r55;
	// begin inline asm
	cvt.f32.bf16 %r56, %rs35;
	// end inline asm
	mov.b32 	%f55, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs36;
	// end inline asm
	mov.b32 	%f56, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs37;
	// end inline asm
	mov.b32 	%f57, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs38;
	// end inline asm
	mov.b32 	%f58, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs39;
	// end inline asm
	mov.b32 	%f59, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs40;
	// end inline asm
	mov.b32 	%f60, %r61;
	shl.b64 	%rd51, %rd36, 11;
	add.s64 	%rd52, %rd27, %rd51;
	add.s64 	%rd9, %rd52, %rd50;
	add.s64 	%rd10, %rd9, 1024;
	// begin inline asm
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	mov.u32 %r65, 0x0;
	ld.global.v4.b32 { %r62, %r63, %r64, %r65 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r62;
	mov.b32 	{%rs43, %rs44}, %r63;
	mov.b32 	{%rs45, %rs46}, %r64;
	mov.b32 	{%rs47, %rs48}, %r65;
	// begin inline asm
	mov.u32 %r66, 0x0;
	mov.u32 %r67, 0x0;
	mov.u32 %r68, 0x0;
	mov.u32 %r69, 0x0;
	ld.global.v4.b32 { %r66, %r67, %r68, %r69 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r66;
	mov.b32 	{%rs51, %rs52}, %r67;
	mov.b32 	{%rs53, %rs54}, %r68;
	mov.b32 	{%rs55, %rs56}, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs41;
	// end inline asm
	mov.b32 	%f61, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs42;
	// end inline asm
	mov.b32 	%f62, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs43;
	// end inline asm
	mov.b32 	%f63, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs44;
	// end inline asm
	mov.b32 	%f64, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs45;
	// end inline asm
	mov.b32 	%f65, %r74;
	// begin inline asm
	cvt.f32.bf16 %r75, %rs46;
	// end inline asm
	mov.b32 	%f66, %r75;
	// begin inline asm
	cvt.f32.bf16 %r76, %rs47;
	// end inline asm
	mov.b32 	%f67, %r76;
	// begin inline asm
	cvt.f32.bf16 %r77, %rs48;
	// end inline asm
	mov.b32 	%f68, %r77;
	// begin inline asm
	cvt.f32.bf16 %r78, %rs49;
	// end inline asm
	mov.b32 	%f69, %r78;
	// begin inline asm
	cvt.f32.bf16 %r79, %rs50;
	// end inline asm
	mov.b32 	%f70, %r79;
	// begin inline asm
	cvt.f32.bf16 %r80, %rs51;
	// end inline asm
	mov.b32 	%f71, %r80;
	// begin inline asm
	cvt.f32.bf16 %r81, %rs52;
	// end inline asm
	mov.b32 	%f72, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs53;
	// end inline asm
	mov.b32 	%f73, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs54;
	// end inline asm
	mov.b32 	%f74, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs55;
	// end inline asm
	mov.b32 	%f75, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs56;
	// end inline asm
	mov.b32 	%f76, %r85;
	add.s64 	%rd11, %rd7, 2048;
	add.s64 	%rd12, %rd7, 3072;
	// begin inline asm
	mov.u32 %r86, 0x0;
	mov.u32 %r87, 0x0;
	mov.u32 %r88, 0x0;
	mov.u32 %r89, 0x0;
	ld.global.v4.b32 { %r86, %r87, %r88, %r89 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r86;
	mov.b32 	{%rs59, %rs60}, %r87;
	mov.b32 	{%rs61, %rs62}, %r88;
	mov.b32 	{%rs63, %rs64}, %r89;
	// begin inline asm
	mov.u32 %r90, 0x0;
	mov.u32 %r91, 0x0;
	mov.u32 %r92, 0x0;
	mov.u32 %r93, 0x0;
	ld.global.v4.b32 { %r90, %r91, %r92, %r93 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r90;
	mov.b32 	{%rs67, %rs68}, %r91;
	mov.b32 	{%rs69, %rs70}, %r92;
	mov.b32 	{%rs71, %rs72}, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs57;
	// end inline asm
	mov.b32 	%f77, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs58;
	// end inline asm
	mov.b32 	%f78, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs59;
	// end inline asm
	mov.b32 	%f79, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs60;
	// end inline asm
	mov.b32 	%f80, %r97;
	// begin inline asm
	cvt.f32.bf16 %r98, %rs61;
	// end inline asm
	mov.b32 	%f81, %r98;
	// begin inline asm
	cvt.f32.bf16 %r99, %rs62;
	// end inline asm
	mov.b32 	%f82, %r99;
	// begin inline asm
	cvt.f32.bf16 %r100, %rs63;
	// end inline asm
	mov.b32 	%f83, %r100;
	// begin inline asm
	cvt.f32.bf16 %r101, %rs64;
	// end inline asm
	mov.b32 	%f84, %r101;
	// begin inline asm
	cvt.f32.bf16 %r102, %rs65;
	// end inline asm
	mov.b32 	%f85, %r102;
	// begin inline asm
	cvt.f32.bf16 %r103, %rs66;
	// end inline asm
	mov.b32 	%f86, %r103;
	// begin inline asm
	cvt.f32.bf16 %r104, %rs67;
	// end inline asm
	mov.b32 	%f87, %r104;
	// begin inline asm
	cvt.f32.bf16 %r105, %rs68;
	// end inline asm
	mov.b32 	%f88, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs69;
	// end inline asm
	mov.b32 	%f89, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs70;
	// end inline asm
	mov.b32 	%f90, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs71;
	// end inline asm
	mov.b32 	%f91, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs72;
	// end inline asm
	mov.b32 	%f92, %r109;
	add.s64 	%rd53, %rd30, %rd51;
	add.s64 	%rd13, %rd53, %rd50;
	add.s64 	%rd14, %rd13, 1024;
	// begin inline asm
	mov.u32 %r110, 0x0;
	mov.u32 %r111, 0x0;
	mov.u32 %r112, 0x0;
	mov.u32 %r113, 0x0;
	ld.global.v4.b32 { %r110, %r111, %r112, %r113 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r110;
	mov.b32 	{%rs75, %rs76}, %r111;
	mov.b32 	{%rs77, %rs78}, %r112;
	mov.b32 	{%rs79, %rs80}, %r113;
	// begin inline asm
	mov.u32 %r114, 0x0;
	mov.u32 %r115, 0x0;
	mov.u32 %r116, 0x0;
	mov.u32 %r117, 0x0;
	ld.global.v4.b32 { %r114, %r115, %r116, %r117 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r114;
	mov.b32 	{%rs83, %rs84}, %r115;
	mov.b32 	{%rs85, %rs86}, %r116;
	mov.b32 	{%rs87, %rs88}, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs73;
	// end inline asm
	mov.b32 	%f93, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs74;
	// end inline asm
	mov.b32 	%f94, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs75;
	// end inline asm
	mov.b32 	%f95, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs76;
	// end inline asm
	mov.b32 	%f96, %r121;
	// begin inline asm
	cvt.f32.bf16 %r122, %rs77;
	// end inline asm
	mov.b32 	%f97, %r122;
	// begin inline asm
	cvt.f32.bf16 %r123, %rs78;
	// end inline asm
	mov.b32 	%f98, %r123;
	// begin inline asm
	cvt.f32.bf16 %r124, %rs79;
	// end inline asm
	mov.b32 	%f99, %r124;
	// begin inline asm
	cvt.f32.bf16 %r125, %rs80;
	// end inline asm
	mov.b32 	%f100, %r125;
	// begin inline asm
	cvt.f32.bf16 %r126, %rs81;
	// end inline asm
	mov.b32 	%f101, %r126;
	// begin inline asm
	cvt.f32.bf16 %r127, %rs82;
	// end inline asm
	mov.b32 	%f102, %r127;
	// begin inline asm
	cvt.f32.bf16 %r128, %rs83;
	// end inline asm
	mov.b32 	%f103, %r128;
	// begin inline asm
	cvt.f32.bf16 %r129, %rs84;
	// end inline asm
	mov.b32 	%f104, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs85;
	// end inline asm
	mov.b32 	%f105, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs86;
	// end inline asm
	mov.b32 	%f106, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs87;
	// end inline asm
	mov.b32 	%f107, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs88;
	// end inline asm
	mov.b32 	%f108, %r133;
	add.s64 	%rd15, %rd7, 4096;
	add.s64 	%rd16, %rd7, 5120;
	// begin inline asm
	mov.u32 %r134, 0x0;
	mov.u32 %r135, 0x0;
	mov.u32 %r136, 0x0;
	mov.u32 %r137, 0x0;
	ld.global.v4.b32 { %r134, %r135, %r136, %r137 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r134;
	mov.b32 	{%rs91, %rs92}, %r135;
	mov.b32 	{%rs93, %rs94}, %r136;
	mov.b32 	{%rs95, %rs96}, %r137;
	// begin inline asm
	mov.u32 %r138, 0x0;
	mov.u32 %r139, 0x0;
	mov.u32 %r140, 0x0;
	mov.u32 %r141, 0x0;
	ld.global.v4.b32 { %r138, %r139, %r140, %r141 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r138;
	mov.b32 	{%rs99, %rs100}, %r139;
	mov.b32 	{%rs101, %rs102}, %r140;
	mov.b32 	{%rs103, %rs104}, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs89;
	// end inline asm
	mov.b32 	%f109, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs90;
	// end inline asm
	mov.b32 	%f110, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs91;
	// end inline asm
	mov.b32 	%f111, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs92;
	// end inline asm
	mov.b32 	%f112, %r145;
	// begin inline asm
	cvt.f32.bf16 %r146, %rs93;
	// end inline asm
	mov.b32 	%f113, %r146;
	// begin inline asm
	cvt.f32.bf16 %r147, %rs94;
	// end inline asm
	mov.b32 	%f114, %r147;
	// begin inline asm
	cvt.f32.bf16 %r148, %rs95;
	// end inline asm
	mov.b32 	%f115, %r148;
	// begin inline asm
	cvt.f32.bf16 %r149, %rs96;
	// end inline asm
	mov.b32 	%f116, %r149;
	// begin inline asm
	cvt.f32.bf16 %r150, %rs97;
	// end inline asm
	mov.b32 	%f117, %r150;
	// begin inline asm
	cvt.f32.bf16 %r151, %rs98;
	// end inline asm
	mov.b32 	%f118, %r151;
	// begin inline asm
	cvt.f32.bf16 %r152, %rs99;
	// end inline asm
	mov.b32 	%f119, %r152;
	// begin inline asm
	cvt.f32.bf16 %r153, %rs100;
	// end inline asm
	mov.b32 	%f120, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs101;
	// end inline asm
	mov.b32 	%f121, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs102;
	// end inline asm
	mov.b32 	%f122, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs103;
	// end inline asm
	mov.b32 	%f123, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs104;
	// end inline asm
	mov.b32 	%f124, %r157;
	add.s64 	%rd54, %rd33, %rd51;
	add.s64 	%rd17, %rd54, %rd50;
	add.s64 	%rd18, %rd17, 1024;
	// begin inline asm
	mov.u32 %r158, 0x0;
	mov.u32 %r159, 0x0;
	mov.u32 %r160, 0x0;
	mov.u32 %r161, 0x0;
	ld.global.v4.b32 { %r158, %r159, %r160, %r161 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r158;
	mov.b32 	{%rs107, %rs108}, %r159;
	mov.b32 	{%rs109, %rs110}, %r160;
	mov.b32 	{%rs111, %rs112}, %r161;
	// begin inline asm
	mov.u32 %r162, 0x0;
	mov.u32 %r163, 0x0;
	mov.u32 %r164, 0x0;
	mov.u32 %r165, 0x0;
	ld.global.v4.b32 { %r162, %r163, %r164, %r165 }, [ %rd18 + 0 ];
	// end inline asm
	mov.b32 	{%rs113, %rs114}, %r162;
	mov.b32 	{%rs115, %rs116}, %r163;
	mov.b32 	{%rs117, %rs118}, %r164;
	mov.b32 	{%rs119, %rs120}, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs105;
	// end inline asm
	mov.b32 	%f125, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs106;
	// end inline asm
	mov.b32 	%f126, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs107;
	// end inline asm
	mov.b32 	%f127, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs108;
	// end inline asm
	mov.b32 	%f128, %r169;
	// begin inline asm
	cvt.f32.bf16 %r170, %rs109;
	// end inline asm
	mov.b32 	%f129, %r170;
	// begin inline asm
	cvt.f32.bf16 %r171, %rs110;
	// end inline asm
	mov.b32 	%f130, %r171;
	// begin inline asm
	cvt.f32.bf16 %r172, %rs111;
	// end inline asm
	mov.b32 	%f131, %r172;
	// begin inline asm
	cvt.f32.bf16 %r173, %rs112;
	// end inline asm
	mov.b32 	%f132, %r173;
	// begin inline asm
	cvt.f32.bf16 %r174, %rs113;
	// end inline asm
	mov.b32 	%f133, %r174;
	// begin inline asm
	cvt.f32.bf16 %r175, %rs114;
	// end inline asm
	mov.b32 	%f134, %r175;
	// begin inline asm
	cvt.f32.bf16 %r176, %rs115;
	// end inline asm
	mov.b32 	%f135, %r176;
	// begin inline asm
	cvt.f32.bf16 %r177, %rs116;
	// end inline asm
	mov.b32 	%f136, %r177;
	// begin inline asm
	cvt.f32.bf16 %r178, %rs117;
	// end inline asm
	mov.b32 	%f137, %r178;
	// begin inline asm
	cvt.f32.bf16 %r179, %rs118;
	// end inline asm
	mov.b32 	%f138, %r179;
	// begin inline asm
	cvt.f32.bf16 %r180, %rs119;
	// end inline asm
	mov.b32 	%f139, %r180;
	// begin inline asm
	cvt.f32.bf16 %r181, %rs120;
	// end inline asm
	mov.b32 	%f140, %r181;
	add.rn.f32 	%f141, %f109, %f125;
	add.rn.f32 	%f142, %f110, %f126;
	add.rn.f32 	%f143, %f111, %f127;
	add.rn.f32 	%f144, %f112, %f128;
	add.rn.f32 	%f145, %f113, %f129;
	add.rn.f32 	%f146, %f114, %f130;
	add.rn.f32 	%f147, %f115, %f131;
	add.rn.f32 	%f148, %f116, %f132;
	add.rn.f32 	%f149, %f117, %f133;
	add.rn.f32 	%f150, %f118, %f134;
	add.rn.f32 	%f151, %f119, %f135;
	add.rn.f32 	%f152, %f120, %f136;
	add.rn.f32 	%f153, %f121, %f137;
	add.rn.f32 	%f154, %f122, %f138;
	add.rn.f32 	%f155, %f123, %f139;
	add.rn.f32 	%f156, %f124, %f140;
	add.rn.f32 	%f157, %f93, %f141;
	add.rn.f32 	%f158, %f94, %f142;
	add.rn.f32 	%f159, %f95, %f143;
	add.rn.f32 	%f160, %f96, %f144;
	add.rn.f32 	%f161, %f97, %f145;
	add.rn.f32 	%f162, %f98, %f146;
	add.rn.f32 	%f163, %f99, %f147;
	add.rn.f32 	%f164, %f100, %f148;
	add.rn.f32 	%f165, %f101, %f149;
	add.rn.f32 	%f166, %f102, %f150;
	add.rn.f32 	%f167, %f103, %f151;
	add.rn.f32 	%f168, %f104, %f152;
	add.rn.f32 	%f169, %f105, %f153;
	add.rn.f32 	%f170, %f106, %f154;
	add.rn.f32 	%f171, %f107, %f155;
	add.rn.f32 	%f172, %f108, %f156;
	add.rn.f32 	%f173, %f77, %f157;
	add.rn.f32 	%f174, %f78, %f158;
	add.rn.f32 	%f175, %f79, %f159;
	add.rn.f32 	%f176, %f80, %f160;
	add.rn.f32 	%f177, %f81, %f161;
	add.rn.f32 	%f178, %f82, %f162;
	add.rn.f32 	%f179, %f83, %f163;
	add.rn.f32 	%f180, %f84, %f164;
	add.rn.f32 	%f181, %f85, %f165;
	add.rn.f32 	%f182, %f86, %f166;
	add.rn.f32 	%f183, %f87, %f167;
	add.rn.f32 	%f184, %f88, %f168;
	add.rn.f32 	%f185, %f89, %f169;
	add.rn.f32 	%f186, %f90, %f170;
	add.rn.f32 	%f187, %f91, %f171;
	add.rn.f32 	%f188, %f92, %f172;
	add.rn.f32 	%f189, %f61, %f173;
	add.rn.f32 	%f190, %f62, %f174;
	add.rn.f32 	%f191, %f63, %f175;
	add.rn.f32 	%f192, %f64, %f176;
	add.rn.f32 	%f193, %f65, %f177;
	add.rn.f32 	%f194, %f66, %f178;
	add.rn.f32 	%f195, %f67, %f179;
	add.rn.f32 	%f196, %f68, %f180;
	add.rn.f32 	%f197, %f69, %f181;
	add.rn.f32 	%f198, %f70, %f182;
	add.rn.f32 	%f199, %f71, %f183;
	add.rn.f32 	%f200, %f72, %f184;
	add.rn.f32 	%f201, %f73, %f185;
	add.rn.f32 	%f202, %f74, %f186;
	add.rn.f32 	%f203, %f75, %f187;
	add.rn.f32 	%f204, %f76, %f188;
	add.rn.f32 	%f205, %f45, %f189;
	add.rn.f32 	%f206, %f46, %f190;
	add.rn.f32 	%f207, %f47, %f191;
	add.rn.f32 	%f208, %f48, %f192;
	add.rn.f32 	%f209, %f49, %f193;
	add.rn.f32 	%f210, %f50, %f194;
	add.rn.f32 	%f211, %f51, %f195;
	add.rn.f32 	%f212, %f52, %f196;
	add.rn.f32 	%f213, %f53, %f197;
	add.rn.f32 	%f214, %f54, %f198;
	add.rn.f32 	%f215, %f55, %f199;
	add.rn.f32 	%f216, %f56, %f200;
	add.rn.f32 	%f217, %f57, %f201;
	add.rn.f32 	%f218, %f58, %f202;
	add.rn.f32 	%f219, %f59, %f203;
	add.rn.f32 	%f220, %f60, %f204;
	mul.rn.f32 	%f221, %f205, %f205;
	mul.rn.f32 	%f222, %f206, %f206;
	mul.rn.f32 	%f223, %f207, %f207;
	mul.rn.f32 	%f224, %f208, %f208;
	mul.rn.f32 	%f225, %f209, %f209;
	mul.rn.f32 	%f226, %f210, %f210;
	mul.rn.f32 	%f227, %f211, %f211;
	mul.rn.f32 	%f228, %f212, %f212;
	mul.rn.f32 	%f229, %f213, %f213;
	mul.rn.f32 	%f230, %f214, %f214;
	mul.rn.f32 	%f231, %f215, %f215;
	mul.rn.f32 	%f232, %f216, %f216;
	mul.rn.f32 	%f233, %f217, %f217;
	mul.rn.f32 	%f234, %f218, %f218;
	mul.rn.f32 	%f235, %f219, %f219;
	mul.rn.f32 	%f236, %f220, %f220;
	add.rn.f32 	%f237, %f221, %f222;
	add.rn.f32 	%f238, %f237, %f223;
	add.rn.f32 	%f239, %f238, %f224;
	add.rn.f32 	%f240, %f239, %f225;
	add.rn.f32 	%f241, %f240, %f226;
	add.rn.f32 	%f242, %f241, %f227;
	add.rn.f32 	%f243, %f242, %f228;
	add.rn.f32 	%f244, %f243, %f229;
	add.rn.f32 	%f245, %f244, %f230;
	add.rn.f32 	%f246, %f245, %f231;
	add.rn.f32 	%f247, %f246, %f232;
	add.rn.f32 	%f248, %f247, %f233;
	add.rn.f32 	%f249, %f248, %f234;
	add.rn.f32 	%f250, %f249, %f235;
	add.rn.f32 	%f251, %f250, %f236;
	mov.b32 	%r211, %f251;
	shfl.sync.bfly.b32	%r212, %r211, 16, 31, -1;
	mov.b32 	%f252, %r212;
	add.rn.f32 	%f253, %f251, %f252;
	mov.b32 	%r213, %f253;
	shfl.sync.bfly.b32	%r214, %r213, 8, 31, -1;
	mov.b32 	%f254, %r214;
	add.rn.f32 	%f255, %f253, %f254;
	mov.b32 	%r215, %f255;
	shfl.sync.bfly.b32	%r216, %r215, 4, 31, -1;
	mov.b32 	%f256, %r216;
	add.rn.f32 	%f257, %f255, %f256;
	mov.b32 	%r217, %f257;
	shfl.sync.bfly.b32	%r218, %r217, 2, 31, -1;
	mov.b32 	%f258, %r218;
	add.rn.f32 	%f259, %f257, %f258;
	mov.b32 	%r219, %f259;
	shfl.sync.bfly.b32	%r220, %r219, 1, 31, -1;
	mov.b32 	%f260, %r220;
	add.rn.f32 	%f261, %f259, %f260;
	setp.eq.s32 	%p1, %r202, 0;
	shr.u32 	%r221, %r201, 3;
	and.b32  	%r222, %r221, 4;
	cvt.u64.u32 	%rd55, %r222;
	mov.u64 	%rd56, global_smem;
	add.s64 	%rd57, %rd56, %rd55;
	mov.b32 	%r183, %f261;
	cvt.u32.u64 	%r182, %rd57;
	// begin inline asm
	@%p1 st.shared.b32 [ %r182 + 0 ], %r183;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r201, 2;
	cvt.u64.u32 	%rd58, %r203;
	add.s64 	%rd59, %rd56, %rd58;
	cvt.u32.u64 	%r185, %rd59;
	// begin inline asm
	@%p2 ld.shared.b32 %r184, [ %r185 + 0 ];
	// end inline asm
	mov.b32 	%f262, %r184;
	shfl.sync.bfly.b32	%r223, %r184, 1, 31, -1;
	mov.b32 	%f263, %r223;
	add.rn.f32 	%f264, %f262, %f263;
	setp.eq.s32 	%p3, %r201, 0;
	mov.b32 	%r187, %f264;
	// begin inline asm
	@%p3 st.shared.b32 [ %r185 + 0 ], %r187;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f265, [global_smem];
	mul.rn.f32 	%f266, %f265, 0f3A800000;
	// begin inline asm
	mov.u32 %r188, 0x0;
	ld.global.b32 { %r188 }, [ %rd19 + 0 ];
	// end inline asm
	mov.b32 	%f267, %r188;
	add.rn.f32 	%f268, %f266, %f267;
	rsqrt.approx.f32 	%f269, %f268;
	mul.rn.f32 	%f270, %f41, %f269;
	mul.rn.f32 	%f271, %f42, %f269;
	mul.rn.f32 	%f272, %f43, %f269;
	mul.rn.f32 	%f273, %f44, %f269;
	shl.b64 	%rd60, %rd38, 1;
	add.s64 	%rd61, %rd34, %rd60;
	add.s64 	%rd20, %rd61, %rd43;
	// begin inline asm
	mov.u32 %r189, 0x0;
	mov.u32 %r190, 0x0;
	ld.global.v2.b32 { %r189, %r190 }, [ %rd20 + 0 ];
	// end inline asm
	mov.b32 	{%rs121, %rs122}, %r189;
	mov.b32 	{%rs123, %rs124}, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs121;
	// end inline asm
	mov.b32 	%f274, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs122;
	// end inline asm
	mov.b32 	%f275, %r192;
	// begin inline asm
	cvt.f32.bf16 %r193, %rs123;
	// end inline asm
	mov.b32 	%f276, %r193;
	// begin inline asm
	cvt.f32.bf16 %r194, %rs124;
	// end inline asm
	mov.b32 	%f277, %r194;
	mul.rn.f32 	%f278, %f270, %f274;
	mul.rn.f32 	%f279, %f271, %f275;
	mul.rn.f32 	%f280, %f272, %f276;
	mul.rn.f32 	%f281, %f273, %f277;
	mov.b32 	%r195, %f278;
	// begin inline asm
	cvt.rn.bf16.f32 %rs125, %r195;
	// end inline asm
	mov.b32 	%r196, %f279;
	// begin inline asm
	cvt.rn.bf16.f32 %rs126, %r196;
	// end inline asm
	mov.b32 	%r197, %f280;
	// begin inline asm
	cvt.rn.bf16.f32 %rs127, %r197;
	// end inline asm
	mov.b32 	%r198, %f281;
	// begin inline asm
	cvt.rn.bf16.f32 %rs128, %r198;
	// end inline asm
	add.s64 	%rd62, %rd24, %rd44;
	add.s64 	%rd21, %rd62, %rd43;
	mov.b32 	%r199, {%rs125, %rs126};
	mov.b32 	%r200, {%rs127, %rs128};
	// begin inline asm
	st.global.v2.b32 [ %rd21 + 0 ], { %r199, %r200 };
	// end inline asm
	ret;

}
	// .globl	fusion_45
.visible .entry fusion_45(
	.param .u64 .ptr .align 16 fusion_45_param_0,
	.param .u64 .ptr .align 128 fusion_45_param_1,
	.param .u64 .ptr .align 16 fusion_45_param_2,
	.param .u64 .ptr .align 128 fusion_45_param_3,
	.param .u64 .ptr .align 128 fusion_45_param_4,
	.param .u64 .ptr .align 128 fusion_45_param_5,
	.param .u64 .ptr .align 128 fusion_45_param_6,
	.param .u64 .ptr .align 128 fusion_45_param_7
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<145>;
	.reg .b32 	%r<245>;
	.reg .f32 	%f<306>;
	.reg .b64 	%rd<50>;

	ld.param.u64 	%rd20, [fusion_45_param_0];
	ld.param.u64 	%rd21, [fusion_45_param_7];
	cvta.to.global.u64 	%rd22, %rd21;
	ld.param.u64 	%rd23, [fusion_45_param_1];
	ld.param.u64 	%rd24, [fusion_45_param_6];
	cvta.to.global.u64 	%rd25, %rd24;
	ld.param.u64 	%rd26, [fusion_45_param_2];
	ld.param.u64 	%rd27, [fusion_45_param_5];
	cvta.to.global.u64 	%rd28, %rd27;
	ld.param.u64 	%rd29, [fusion_45_param_3];
	ld.param.u64 	%rd30, [fusion_45_param_4];
	cvta.to.global.u64 	%rd31, %rd30;
	cvta.to.global.u64 	%rd32, %rd29;
	cvta.to.global.u64 	%rd33, %rd26;
	cvta.to.global.u64 	%rd34, %rd23;
	cvta.to.global.u64 	%rd15, %rd20;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd35, %r1, 1024;
	shl.b64 	%rd36, %rd35, 1;
	add.s64 	%rd37, %rd34, %rd36;
	mov.u32 	%r225, %tid.x;
	and.b32  	%r226, %r225, 31;
	shl.b32 	%r227, %r225, 3;
	and.b32  	%r228, %r227, 248;
	setp.lt.u32 	%p4, %r225, 32;
	selp.b32 	%r229, 0, 256, %p4;
	or.b32  	%r230, %r228, %r229;
	mul.wide.u32 	%rd38, %r230, 2;
	add.s64 	%rd1, %rd37, %rd38;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd39, %r1, 6144;
	add.s64 	%rd40, %rd31, %rd39;
	add.s64 	%rd3, %rd40, %rd38;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd41, %rd25, %rd36;
	add.s64 	%rd5, %rd41, %rd38;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd7, %rd3, 2048;
	add.s64 	%rd8, %rd3, 3072;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd42, %rd28, %rd36;
	add.s64 	%rd9, %rd42, %rd38;
	add.s64 	%rd10, %rd9, 1024;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd11, %rd3, 4096;
	add.s64 	%rd12, %rd3, 5120;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.s64 	%rd43, %rd32, %rd36;
	add.s64 	%rd13, %rd43, %rd38;
	add.s64 	%rd14, %rd13, 1024;
	// begin inline asm
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	ld.global.v4.b32 { %r146, %r147, %r148, %r149 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r146;
	mov.b32 	{%rs99, %rs100}, %r147;
	mov.b32 	{%rs101, %rs102}, %r148;
	mov.b32 	{%rs103, %rs104}, %r149;
	// begin inline asm
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	ld.global.v4.b32 { %r150, %r151, %r152, %r153 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r150;
	mov.b32 	{%rs107, %rs108}, %r151;
	mov.b32 	{%rs109, %rs110}, %r152;
	mov.b32 	{%rs111, %rs112}, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs97;
	// end inline asm
	mov.b32 	%f97, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs98;
	// end inline asm
	mov.b32 	%f98, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs99;
	// end inline asm
	mov.b32 	%f99, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs100;
	// end inline asm
	mov.b32 	%f100, %r157;
	// begin inline asm
	cvt.f32.bf16 %r158, %rs101;
	// end inline asm
	mov.b32 	%f101, %r158;
	// begin inline asm
	cvt.f32.bf16 %r159, %rs102;
	// end inline asm
	mov.b32 	%f102, %r159;
	// begin inline asm
	cvt.f32.bf16 %r160, %rs103;
	// end inline asm
	mov.b32 	%f103, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs104;
	// end inline asm
	mov.b32 	%f104, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs105;
	// end inline asm
	mov.b32 	%f105, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs106;
	// end inline asm
	mov.b32 	%f106, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs107;
	// end inline asm
	mov.b32 	%f107, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs108;
	// end inline asm
	mov.b32 	%f108, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs109;
	// end inline asm
	mov.b32 	%f109, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs110;
	// end inline asm
	mov.b32 	%f110, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs111;
	// end inline asm
	mov.b32 	%f111, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs112;
	// end inline asm
	mov.b32 	%f112, %r169;
	add.rn.f32 	%f113, %f81, %f97;
	add.rn.f32 	%f114, %f82, %f98;
	add.rn.f32 	%f115, %f83, %f99;
	add.rn.f32 	%f116, %f84, %f100;
	add.rn.f32 	%f117, %f85, %f101;
	add.rn.f32 	%f118, %f86, %f102;
	add.rn.f32 	%f119, %f87, %f103;
	add.rn.f32 	%f120, %f88, %f104;
	add.rn.f32 	%f121, %f89, %f105;
	add.rn.f32 	%f122, %f90, %f106;
	add.rn.f32 	%f123, %f91, %f107;
	add.rn.f32 	%f124, %f92, %f108;
	add.rn.f32 	%f125, %f93, %f109;
	add.rn.f32 	%f126, %f94, %f110;
	add.rn.f32 	%f127, %f95, %f111;
	add.rn.f32 	%f128, %f96, %f112;
	add.rn.f32 	%f129, %f65, %f113;
	add.rn.f32 	%f130, %f66, %f114;
	add.rn.f32 	%f131, %f67, %f115;
	add.rn.f32 	%f132, %f68, %f116;
	add.rn.f32 	%f133, %f69, %f117;
	add.rn.f32 	%f134, %f70, %f118;
	add.rn.f32 	%f135, %f71, %f119;
	add.rn.f32 	%f136, %f72, %f120;
	add.rn.f32 	%f137, %f73, %f121;
	add.rn.f32 	%f138, %f74, %f122;
	add.rn.f32 	%f139, %f75, %f123;
	add.rn.f32 	%f140, %f76, %f124;
	add.rn.f32 	%f141, %f77, %f125;
	add.rn.f32 	%f142, %f78, %f126;
	add.rn.f32 	%f143, %f79, %f127;
	add.rn.f32 	%f144, %f80, %f128;
	add.rn.f32 	%f145, %f49, %f129;
	add.rn.f32 	%f146, %f50, %f130;
	add.rn.f32 	%f147, %f51, %f131;
	add.rn.f32 	%f148, %f52, %f132;
	add.rn.f32 	%f149, %f53, %f133;
	add.rn.f32 	%f150, %f54, %f134;
	add.rn.f32 	%f151, %f55, %f135;
	add.rn.f32 	%f152, %f56, %f136;
	add.rn.f32 	%f153, %f57, %f137;
	add.rn.f32 	%f154, %f58, %f138;
	add.rn.f32 	%f155, %f59, %f139;
	add.rn.f32 	%f156, %f60, %f140;
	add.rn.f32 	%f157, %f61, %f141;
	add.rn.f32 	%f158, %f62, %f142;
	add.rn.f32 	%f159, %f63, %f143;
	add.rn.f32 	%f160, %f64, %f144;
	add.rn.f32 	%f161, %f33, %f145;
	add.rn.f32 	%f162, %f34, %f146;
	add.rn.f32 	%f163, %f35, %f147;
	add.rn.f32 	%f164, %f36, %f148;
	add.rn.f32 	%f165, %f37, %f149;
	add.rn.f32 	%f166, %f38, %f150;
	add.rn.f32 	%f167, %f39, %f151;
	add.rn.f32 	%f168, %f40, %f152;
	add.rn.f32 	%f169, %f41, %f153;
	add.rn.f32 	%f170, %f42, %f154;
	add.rn.f32 	%f171, %f43, %f155;
	add.rn.f32 	%f172, %f44, %f156;
	add.rn.f32 	%f173, %f45, %f157;
	add.rn.f32 	%f174, %f46, %f158;
	add.rn.f32 	%f175, %f47, %f159;
	add.rn.f32 	%f176, %f48, %f160;
	add.rn.f32 	%f177, %f17, %f161;
	add.rn.f32 	%f178, %f18, %f162;
	add.rn.f32 	%f179, %f19, %f163;
	add.rn.f32 	%f180, %f20, %f164;
	add.rn.f32 	%f181, %f21, %f165;
	add.rn.f32 	%f182, %f22, %f166;
	add.rn.f32 	%f183, %f23, %f167;
	add.rn.f32 	%f184, %f24, %f168;
	add.rn.f32 	%f185, %f25, %f169;
	add.rn.f32 	%f186, %f26, %f170;
	add.rn.f32 	%f187, %f27, %f171;
	add.rn.f32 	%f188, %f28, %f172;
	add.rn.f32 	%f189, %f29, %f173;
	add.rn.f32 	%f190, %f30, %f174;
	add.rn.f32 	%f191, %f31, %f175;
	add.rn.f32 	%f192, %f32, %f176;
	add.rn.f32 	%f193, %f1, %f177;
	add.rn.f32 	%f194, %f2, %f178;
	add.rn.f32 	%f195, %f3, %f179;
	add.rn.f32 	%f196, %f4, %f180;
	add.rn.f32 	%f197, %f5, %f181;
	add.rn.f32 	%f198, %f6, %f182;
	add.rn.f32 	%f199, %f7, %f183;
	add.rn.f32 	%f200, %f8, %f184;
	add.rn.f32 	%f201, %f9, %f185;
	add.rn.f32 	%f202, %f10, %f186;
	add.rn.f32 	%f203, %f11, %f187;
	add.rn.f32 	%f204, %f12, %f188;
	add.rn.f32 	%f205, %f13, %f189;
	add.rn.f32 	%f206, %f14, %f190;
	add.rn.f32 	%f207, %f15, %f191;
	add.rn.f32 	%f208, %f16, %f192;
	mul.rn.f32 	%f209, %f193, %f193;
	mul.rn.f32 	%f210, %f194, %f194;
	mul.rn.f32 	%f211, %f195, %f195;
	mul.rn.f32 	%f212, %f196, %f196;
	mul.rn.f32 	%f213, %f197, %f197;
	mul.rn.f32 	%f214, %f198, %f198;
	mul.rn.f32 	%f215, %f199, %f199;
	mul.rn.f32 	%f216, %f200, %f200;
	mul.rn.f32 	%f217, %f201, %f201;
	mul.rn.f32 	%f218, %f202, %f202;
	mul.rn.f32 	%f219, %f203, %f203;
	mul.rn.f32 	%f220, %f204, %f204;
	mul.rn.f32 	%f221, %f205, %f205;
	mul.rn.f32 	%f222, %f206, %f206;
	mul.rn.f32 	%f223, %f207, %f207;
	mul.rn.f32 	%f224, %f208, %f208;
	add.rn.f32 	%f225, %f209, %f210;
	add.rn.f32 	%f226, %f225, %f211;
	add.rn.f32 	%f227, %f226, %f212;
	add.rn.f32 	%f228, %f227, %f213;
	add.rn.f32 	%f229, %f228, %f214;
	add.rn.f32 	%f230, %f229, %f215;
	add.rn.f32 	%f231, %f230, %f216;
	add.rn.f32 	%f232, %f231, %f217;
	add.rn.f32 	%f233, %f232, %f218;
	add.rn.f32 	%f234, %f233, %f219;
	add.rn.f32 	%f235, %f234, %f220;
	add.rn.f32 	%f236, %f235, %f221;
	add.rn.f32 	%f237, %f236, %f222;
	add.rn.f32 	%f238, %f237, %f223;
	add.rn.f32 	%f239, %f238, %f224;
	mov.b32 	%r231, %f239;
	shfl.sync.bfly.b32	%r232, %r231, 16, 31, -1;
	mov.b32 	%f240, %r232;
	add.rn.f32 	%f241, %f239, %f240;
	mov.b32 	%r233, %f241;
	shfl.sync.bfly.b32	%r234, %r233, 8, 31, -1;
	mov.b32 	%f242, %r234;
	add.rn.f32 	%f243, %f241, %f242;
	mov.b32 	%r235, %f243;
	shfl.sync.bfly.b32	%r236, %r235, 4, 31, -1;
	mov.b32 	%f244, %r236;
	add.rn.f32 	%f245, %f243, %f244;
	mov.b32 	%r237, %f245;
	shfl.sync.bfly.b32	%r238, %r237, 2, 31, -1;
	mov.b32 	%f246, %r238;
	add.rn.f32 	%f247, %f245, %f246;
	mov.b32 	%r239, %f247;
	shfl.sync.bfly.b32	%r240, %r239, 1, 31, -1;
	mov.b32 	%f248, %r240;
	add.rn.f32 	%f249, %f247, %f248;
	setp.eq.s32 	%p1, %r226, 0;
	shr.u32 	%r241, %r225, 3;
	and.b32  	%r242, %r241, 4;
	cvt.u64.u32 	%rd44, %r242;
	mov.u64 	%rd45, global_smem;
	add.s64 	%rd46, %rd45, %rd44;
	mov.b32 	%r171, %f249;
	cvt.u32.u64 	%r170, %rd46;
	// begin inline asm
	@%p1 st.shared.b32 [ %r170 + 0 ], %r171;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r225, 2;
	shl.b32 	%r243, %r225, 2;
	cvt.u64.u32 	%rd47, %r243;
	add.s64 	%rd48, %rd45, %rd47;
	cvt.u32.u64 	%r173, %rd48;
	// begin inline asm
	@%p2 ld.shared.b32 %r172, [ %r173 + 0 ];
	// end inline asm
	mov.b32 	%f250, %r172;
	shfl.sync.bfly.b32	%r244, %r172, 1, 31, -1;
	mov.b32 	%f251, %r244;
	add.rn.f32 	%f252, %f250, %f251;
	setp.eq.s32 	%p3, %r225, 0;
	mov.b32 	%r175, %f252;
	// begin inline asm
	@%p3 st.shared.b32 [ %r173 + 0 ], %r175;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f253, [global_smem];
	mul.rn.f32 	%f254, %f253, 0f3A800000;
	// begin inline asm
	mov.u32 %r176, 0x0;
	ld.global.b32 { %r176 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	%f255, %r176;
	add.rn.f32 	%f256, %f254, %f255;
	rsqrt.approx.f32 	%f257, %f256;
	mul.rn.f32 	%f258, %f193, %f257;
	mul.rn.f32 	%f259, %f194, %f257;
	mul.rn.f32 	%f260, %f195, %f257;
	mul.rn.f32 	%f261, %f196, %f257;
	mul.rn.f32 	%f262, %f197, %f257;
	mul.rn.f32 	%f263, %f198, %f257;
	mul.rn.f32 	%f264, %f199, %f257;
	mul.rn.f32 	%f265, %f200, %f257;
	mul.rn.f32 	%f266, %f201, %f257;
	mul.rn.f32 	%f267, %f202, %f257;
	mul.rn.f32 	%f268, %f203, %f257;
	mul.rn.f32 	%f269, %f204, %f257;
	mul.rn.f32 	%f270, %f205, %f257;
	mul.rn.f32 	%f271, %f206, %f257;
	mul.rn.f32 	%f272, %f207, %f257;
	mul.rn.f32 	%f273, %f208, %f257;
	add.s64 	%rd16, %rd33, %rd38;
	add.s64 	%rd17, %rd16, 1024;
	// begin inline asm
	mov.u32 %r177, 0x0;
	mov.u32 %r178, 0x0;
	mov.u32 %r179, 0x0;
	mov.u32 %r180, 0x0;
	ld.global.v4.b32 { %r177, %r178, %r179, %r180 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs113, %rs114}, %r177;
	mov.b32 	{%rs115, %rs116}, %r178;
	mov.b32 	{%rs117, %rs118}, %r179;
	mov.b32 	{%rs119, %rs120}, %r180;
	// begin inline asm
	mov.u32 %r181, 0x0;
	mov.u32 %r182, 0x0;
	mov.u32 %r183, 0x0;
	mov.u32 %r184, 0x0;
	ld.global.v4.b32 { %r181, %r182, %r183, %r184 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	{%rs121, %rs122}, %r181;
	mov.b32 	{%rs123, %rs124}, %r182;
	mov.b32 	{%rs125, %rs126}, %r183;
	mov.b32 	{%rs127, %rs128}, %r184;
	// begin inline asm
	cvt.f32.bf16 %r185, %rs113;
	// end inline asm
	mov.b32 	%f274, %r185;
	// begin inline asm
	cvt.f32.bf16 %r186, %rs114;
	// end inline asm
	mov.b32 	%f275, %r186;
	// begin inline asm
	cvt.f32.bf16 %r187, %rs115;
	// end inline asm
	mov.b32 	%f276, %r187;
	// begin inline asm
	cvt.f32.bf16 %r188, %rs116;
	// end inline asm
	mov.b32 	%f277, %r188;
	// begin inline asm
	cvt.f32.bf16 %r189, %rs117;
	// end inline asm
	mov.b32 	%f278, %r189;
	// begin inline asm
	cvt.f32.bf16 %r190, %rs118;
	// end inline asm
	mov.b32 	%f279, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs119;
	// end inline asm
	mov.b32 	%f280, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs120;
	// end inline asm
	mov.b32 	%f281, %r192;
	// begin inline asm
	cvt.f32.bf16 %r193, %rs121;
	// end inline asm
	mov.b32 	%f282, %r193;
	// begin inline asm
	cvt.f32.bf16 %r194, %rs122;
	// end inline asm
	mov.b32 	%f283, %r194;
	// begin inline asm
	cvt.f32.bf16 %r195, %rs123;
	// end inline asm
	mov.b32 	%f284, %r195;
	// begin inline asm
	cvt.f32.bf16 %r196, %rs124;
	// end inline asm
	mov.b32 	%f285, %r196;
	// begin inline asm
	cvt.f32.bf16 %r197, %rs125;
	// end inline asm
	mov.b32 	%f286, %r197;
	// begin inline asm
	cvt.f32.bf16 %r198, %rs126;
	// end inline asm
	mov.b32 	%f287, %r198;
	// begin inline asm
	cvt.f32.bf16 %r199, %rs127;
	// end inline asm
	mov.b32 	%f288, %r199;
	// begin inline asm
	cvt.f32.bf16 %r200, %rs128;
	// end inline asm
	mov.b32 	%f289, %r200;
	mul.rn.f32 	%f290, %f258, %f274;
	mul.rn.f32 	%f291, %f259, %f275;
	mul.rn.f32 	%f292, %f260, %f276;
	mul.rn.f32 	%f293, %f261, %f277;
	mul.rn.f32 	%f294, %f262, %f278;
	mul.rn.f32 	%f295, %f263, %f279;
	mul.rn.f32 	%f296, %f264, %f280;
	mul.rn.f32 	%f297, %f265, %f281;
	mul.rn.f32 	%f298, %f266, %f282;
	mul.rn.f32 	%f299, %f267, %f283;
	mul.rn.f32 	%f300, %f268, %f284;
	mul.rn.f32 	%f301, %f269, %f285;
	mul.rn.f32 	%f302, %f270, %f286;
	mul.rn.f32 	%f303, %f271, %f287;
	mul.rn.f32 	%f304, %f272, %f288;
	mul.rn.f32 	%f305, %f273, %f289;
	mov.b32 	%r201, %f290;
	// begin inline asm
	cvt.rn.bf16.f32 %rs129, %r201;
	// end inline asm
	mov.b32 	%r202, %f291;
	// begin inline asm
	cvt.rn.bf16.f32 %rs130, %r202;
	// end inline asm
	mov.b32 	%r203, %f292;
	// begin inline asm
	cvt.rn.bf16.f32 %rs131, %r203;
	// end inline asm
	mov.b32 	%r204, %f293;
	// begin inline asm
	cvt.rn.bf16.f32 %rs132, %r204;
	// end inline asm
	mov.b32 	%r205, %f294;
	// begin inline asm
	cvt.rn.bf16.f32 %rs133, %r205;
	// end inline asm
	mov.b32 	%r206, %f295;
	// begin inline asm
	cvt.rn.bf16.f32 %rs134, %r206;
	// end inline asm
	mov.b32 	%r207, %f296;
	// begin inline asm
	cvt.rn.bf16.f32 %rs135, %r207;
	// end inline asm
	mov.b32 	%r208, %f297;
	// begin inline asm
	cvt.rn.bf16.f32 %rs136, %r208;
	// end inline asm
	mov.b32 	%r209, %f298;
	// begin inline asm
	cvt.rn.bf16.f32 %rs137, %r209;
	// end inline asm
	mov.b32 	%r210, %f299;
	// begin inline asm
	cvt.rn.bf16.f32 %rs138, %r210;
	// end inline asm
	mov.b32 	%r211, %f300;
	// begin inline asm
	cvt.rn.bf16.f32 %rs139, %r211;
	// end inline asm
	mov.b32 	%r212, %f301;
	// begin inline asm
	cvt.rn.bf16.f32 %rs140, %r212;
	// end inline asm
	mov.b32 	%r213, %f302;
	// begin inline asm
	cvt.rn.bf16.f32 %rs141, %r213;
	// end inline asm
	mov.b32 	%r214, %f303;
	// begin inline asm
	cvt.rn.bf16.f32 %rs142, %r214;
	// end inline asm
	mov.b32 	%r215, %f304;
	// begin inline asm
	cvt.rn.bf16.f32 %rs143, %r215;
	// end inline asm
	mov.b32 	%r216, %f305;
	// begin inline asm
	cvt.rn.bf16.f32 %rs144, %r216;
	// end inline asm
	add.s64 	%rd49, %rd22, %rd36;
	add.s64 	%rd18, %rd49, %rd38;
	add.s64 	%rd19, %rd18, 1024;
	mov.b32 	%r217, {%rs129, %rs130};
	mov.b32 	%r218, {%rs131, %rs132};
	mov.b32 	%r219, {%rs133, %rs134};
	mov.b32 	%r220, {%rs135, %rs136};
	// begin inline asm
	st.global.v4.b32 [ %rd18 + 0 ], { %r217, %r218, %r219, %r220 };
	// end inline asm
	mov.b32 	%r221, {%rs137, %rs138};
	mov.b32 	%r222, {%rs139, %rs140};
	mov.b32 	%r223, {%rs141, %rs142};
	mov.b32 	%r224, {%rs143, %rs144};
	// begin inline asm
	st.global.v4.b32 [ %rd19 + 0 ], { %r221, %r222, %r223, %r224 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 61440;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	triton_softmax_5_0
.visible .entry triton_softmax_5_0(
	.param .u64 .ptr .align 16 triton_softmax_5_0_param_0,
	.param .u64 .ptr .align 128 triton_softmax_5_0_param_1,
	.param .u64 .ptr .align 128 triton_softmax_5_0_param_2
)
.reqntid 32, 1, 1
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<29>;
	.reg .f32 	%f<30>;
	.reg .b64 	%rd<20>;

	ld.param.u64 	%rd4, [triton_softmax_5_0_param_0];
	ld.param.u64 	%rd5, [triton_softmax_5_0_param_2];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [triton_softmax_5_0_param_1];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd2, %rd4;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r13, %r1, 7;
	cvt.u64.u32 	%rd9, %r13;
	and.b64  	%rd10, %rd9, 896;
	mul.wide.s32 	%rd11, %r1, 512;
	and.b64  	%rd12, %rd11, 9223372036854771712;
	or.b64  	%rd13, %rd12, %rd10;
	shl.b64 	%rd14, %rd13, 1;
	add.s64 	%rd15, %rd8, %rd14;
	mov.u32 	%r14, %tid.x;
	shl.b32 	%r15, %r14, 2;
	and.b32  	%r16, %r15, 60;
	setp.lt.u32 	%p1, %r14, 16;
	selp.b32 	%r17, 0, 64, %p1;
	or.b32  	%r18, %r16, %r17;
	mul.wide.u32 	%rd16, %r18, 2;
	add.s64 	%rd17, %rd15, %rd16;
	add.s64 	%rd1, %rd17, 4096;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	mul.rn.f32 	%f5, %f1, %f1;
	mul.rn.f32 	%f6, %f2, %f2;
	mul.rn.f32 	%f7, %f3, %f3;
	mul.rn.f32 	%f8, %f4, %f4;
	add.rn.f32 	%f9, %f5, %f6;
	add.rn.f32 	%f10, %f9, %f7;
	add.rn.f32 	%f11, %f10, %f8;
	mov.b32 	%r19, %f11;
	shfl.sync.bfly.b32	%r20, %r19, 16, 31, -1;
	mov.b32 	%f12, %r20;
	add.rn.f32 	%f13, %f11, %f12;
	mov.b32 	%r21, %f13;
	shfl.sync.bfly.b32	%r22, %r21, 8, 31, -1;
	mov.b32 	%f14, %r22;
	add.rn.f32 	%f15, %f13, %f14;
	mov.b32 	%r23, %f15;
	shfl.sync.bfly.b32	%r24, %r23, 4, 31, -1;
	mov.b32 	%f16, %r24;
	add.rn.f32 	%f17, %f15, %f16;
	mov.b32 	%r25, %f17;
	shfl.sync.bfly.b32	%r26, %r25, 2, 31, -1;
	mov.b32 	%f18, %r26;
	add.rn.f32 	%f19, %f17, %f18;
	mov.b32 	%r27, %f19;
	shfl.sync.bfly.b32	%r28, %r27, 1, 31, -1;
	mov.b32 	%f20, %r28;
	add.rn.f32 	%f21, %f19, %f20;
	mul.rn.f32 	%f22, %f21, 0f3C000000;
	// begin inline asm
	mov.u32 %r8, 0x0;
	ld.global.b32 { %r8 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f23, %r8;
	add.rn.f32 	%f24, %f22, %f23;
	rsqrt.approx.f32 	%f25, %f24;
	mul.rn.f32 	%f26, %f1, %f25;
	mul.rn.f32 	%f27, %f2, %f25;
	mul.rn.f32 	%f28, %f3, %f25;
	mul.rn.f32 	%f29, %f4, %f25;
	add.s64 	%rd18, %rd6, %rd11;
	mul.wide.u32 	%rd19, %r18, 4;
	add.s64 	%rd3, %rd18, %rd19;
	mov.b32 	%r9, %f26;
	mov.b32 	%r10, %f27;
	mov.b32 	%r11, %f28;
	mov.b32 	%r12, %f29;
	// begin inline asm
	st.global.v4.b32 [ %rd3 + 0 ], { %r9, %r10, %r11, %r12 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_3,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_4
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<7>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<15>;
	.reg .b64 	%rd<25>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_4];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd9, %rd4;
	cvta.to.global.u64 	%rd10, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd11, %r8, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	mul.wide.u32 	%rd13, %r3, 2;
	add.s64 	%rd14, %rd9, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd15, %r9;
	add.s64 	%rd16, %rd6, %rd15;
	ld.global.nc.u32 	%r10, [%rd16];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd17, %r14, 2;
	add.s64 	%rd18, %rd8, %rd17;
	ld.global.nc.u16 	%rs2, [%rd18];
	cvt.f32.bf16 	%f4, %rs2;
	mul.rn.f32 	%f5, %f3, %f4;
	or.b32  	%r15, %r1, 64;
	ld.global.nc.f32 	%f6, [%rd12+256];
	mul.wide.u32 	%rd19, %r15, 2;
	add.s64 	%rd20, %rd9, %rd19;
	ld.global.nc.u16 	%rs3, [%rd20];
	cvt.f32.bf16 	%f7, %rs3;
	mul.rn.f32 	%f8, %f6, %f7;
	or.b32  	%r16, %r13, %r15;
	mul.wide.u32 	%rd21, %r16, 2;
	add.s64 	%rd22, %rd8, %rd21;
	ld.global.nc.u16 	%rs4, [%rd22];
	cvt.f32.bf16 	%f9, %rs4;
	mul.rn.f32 	%f10, %f8, %f9;
	sub.rn.f32 	%f11, %f5, %f10;
	cvt.rn.bf16.f32 	%rs5, %f11;
	mul.wide.u32 	%rd23, %r8, 2;
	add.s64 	%rd24, %rd3, %rd23;
	st.global.b16 	[%rd24], %rs5;
	mul.rn.f32 	%f12, %f8, %f4;
	mul.rn.f32 	%f13, %f3, %f9;
	add.rn.f32 	%f14, %f12, %f13;
	cvt.rn.bf16.f32 	%rs6, %f14;
	st.global.b16 	[%rd24+128], %rs6;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

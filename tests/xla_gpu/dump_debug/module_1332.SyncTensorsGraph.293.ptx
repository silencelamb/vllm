//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	gemm_fusion_dot_7_0
.visible .entry gemm_fusion_dot_7_0(
	.param .u64 .ptr .align 16 gemm_fusion_dot_7_0_param_0,
	.param .u64 .ptr .align 16 gemm_fusion_dot_7_0_param_1,
	.param .u64 .ptr .align 128 gemm_fusion_dot_7_0_param_2
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<13>;
	.reg .b16 	%rs<17>;
	.reg .b32 	%r<547>;
	.reg .f32 	%f<297>;
	.reg .b64 	%rd<155>;

	ld.param.u64 	%rd35, [gemm_fusion_dot_7_0_param_0];
	ld.param.u64 	%rd36, [gemm_fusion_dot_7_0_param_2];
	cvta.to.global.u64 	%rd1, %rd36;
	ld.param.u64 	%rd37, [gemm_fusion_dot_7_0_param_1];
	cvta.to.global.u64 	%rd38, %rd37;
	cvta.to.global.u64 	%rd39, %rd35;
	// begin inline asm
	mov.u32 %r28, %ctaid.x;
	// end inline asm
	shr.s32 	%r30, %r28, 31;
	shr.u32 	%r31, %r30, 29;
	add.s32 	%r32, %r28, %r31;
	shr.s32 	%r2, %r32, 3;
	and.b32  	%r33, %r32, -8;
	sub.s32 	%r34, 64, %r33;
	min.s32 	%r3, %r34, 8;
	rem.s32 	%r35, %r28, %r3;
	add.s32 	%r36, %r33, %r35;
	shl.b32 	%r4, %r36, 5;
	setp.lt.s32 	%p1, %r4, 1024;
	selp.b64 	%rd40, %rd39, %rd38, %p1;
	add.s32 	%r37, %r4, -1024;
	selp.b32 	%r38, %r4, %r37, %p1;
	cvt.s64.s32 	%rd41, %r38;
	mov.u32 	%r5, %tid.x;
	and.b32  	%r6, %r5, 32;
	bfe.s32 	%r39, %r5, 5, 1;
	bfe.u32 	%r40, %r5, 5, 1;
	setp.lt.u32 	%p2, %r5, 64;
	selp.b32 	%r41, 0, 2, %p2;
	and.b32  	%r42, %r5, 1;
	neg.s32 	%r43, %r42;
	bfe.s32 	%r44, %r5, 1, 1;
	shl.b32 	%r45, %r5, 3;
	and.b32  	%r7, %r45, 24;
	bfe.s32 	%r46, %r5, 2, 1;
	and.b32  	%r47, %r5, 4;
	shl.b32 	%r48, %r47, 3;
	or.b32  	%r49, %r7, %r48;
	and.b32  	%r50, %r5, 8;
	shl.b32 	%r51, %r50, 3;
	or.b32  	%r52, %r49, %r51;
	and.b32  	%r8, %r5, 16;
	shl.b32 	%r53, %r8, 3;
	or.b32  	%r9, %r52, %r53;
	and.b32  	%r54, %r39, 264;
	selp.b32 	%r55, 0, 528, %p2;
	or.b32  	%r56, %r54, %r55;
	xor.b32  	%r57, %r56, %r9;
	mul.wide.u32 	%rd42, %r57, 2;
	mov.u64 	%rd43, global_smem;
	add.s64 	%rd2, %rd43, %rd42;
	or.b32  	%r58, %r7, 1056;
	xor.b32  	%r59, %r58, %r48;
	or.b32  	%r60, %r51, %r59;
	or.b32  	%r61, %r60, %r53;
	xor.b32  	%r62, %r56, %r61;
	mul.wide.u32 	%rd44, %r62, 2;
	add.s64 	%rd3, %rd43, %rd44;
	or.b32  	%r63, %r9, 2048;
	xor.b32  	%r64, %r56, %r63;
	mul.wide.u32 	%rd45, %r64, 2;
	add.s64 	%rd4, %rd43, %rd45;
	or.b32  	%r65, %r7, 3104;
	xor.b32  	%r66, %r65, %r48;
	or.b32  	%r67, %r51, %r66;
	or.b32  	%r68, %r67, %r53;
	xor.b32  	%r69, %r56, %r68;
	mul.wide.u32 	%rd46, %r69, 2;
	add.s64 	%rd5, %rd43, %rd46;
	or.b32  	%r70, %r9, 4096;
	xor.b32  	%r71, %r56, %r70;
	mul.wide.u32 	%rd47, %r71, 2;
	add.s64 	%rd6, %rd43, %rd47;
	or.b32  	%r72, %r7, 5152;
	xor.b32  	%r73, %r72, %r48;
	or.b32  	%r74, %r51, %r73;
	or.b32  	%r75, %r74, %r53;
	xor.b32  	%r76, %r56, %r75;
	mul.wide.u32 	%rd48, %r76, 2;
	add.s64 	%rd7, %rd43, %rd48;
	or.b32  	%r77, %r9, 6144;
	xor.b32  	%r78, %r56, %r77;
	mul.wide.u32 	%rd49, %r78, 2;
	add.s64 	%rd8, %rd43, %rd49;
	or.b32  	%r79, %r7, 7200;
	xor.b32  	%r80, %r79, %r48;
	or.b32  	%r81, %r51, %r80;
	or.b32  	%r82, %r81, %r53;
	xor.b32  	%r83, %r56, %r82;
	mul.wide.u32 	%rd50, %r83, 2;
	add.s64 	%rd9, %rd43, %rd50;
	and.b32  	%r84, %r43, 264;
	and.b32  	%r85, %r44, 528;
	or.b32  	%r86, %r84, %r85;
	and.b32  	%r87, %r46, 1056;
	shl.b32 	%r88, %r50, 8;
	or.b32  	%r89, %r87, %r88;
	or.b32  	%r90, %r89, %r86;
	shr.u32 	%r91, %r8, 1;
	xor.b32  	%r92, %r90, %r91;
	selp.b32 	%r93, 0, 4096, %p2;
	or.b32  	%r94, %r92, %r93;
	shl.b32 	%r95, %r94, 1;
	cvt.u64.u32 	%rd51, %r95;
	add.s64 	%rd52, %rd43, %rd51;
	cvt.u32.u64 	%r218, %rd52;
	or.b32  	%r96, %r84, 16;
	xor.b32  	%r97, %r96, %r85;
	or.b32  	%r98, %r88, %r97;
	or.b32  	%r99, %r98, %r87;
	or.b32  	%r100, %r93, %r91;
	xor.b32  	%r101, %r100, %r99;
	shl.b32 	%r102, %r101, 1;
	cvt.u64.u32 	%rd53, %r102;
	add.s64 	%rd54, %rd43, %rd53;
	cvt.u32.u64 	%r223, %rd54;
	or.b32  	%r103, %r86, 32;
	xor.b32  	%r104, %r103, %r87;
	or.b32  	%r105, %r104, %r88;
	xor.b32  	%r106, %r100, %r105;
	shl.b32 	%r107, %r106, 1;
	cvt.u64.u32 	%rd55, %r107;
	add.s64 	%rd56, %rd43, %rd55;
	cvt.u32.u64 	%r228, %rd56;
	or.b32  	%r108, %r84, 48;
	or.b32  	%r109, %r87, %r85;
	xor.b32  	%r110, %r109, %r108;
	or.b32  	%r111, %r110, %r88;
	xor.b32  	%r112, %r100, %r111;
	shl.b32 	%r113, %r112, 1;
	cvt.u64.u32 	%rd57, %r113;
	add.s64 	%rd58, %rd43, %rd57;
	cvt.u32.u64 	%r233, %rd58;
	or.b32  	%r114, %r90, 64;
	xor.b32  	%r115, %r100, %r114;
	shl.b32 	%r116, %r115, 1;
	cvt.u64.u32 	%rd59, %r116;
	add.s64 	%rd60, %rd43, %rd59;
	cvt.u32.u64 	%r238, %rd60;
	or.b32  	%r117, %r84, 80;
	xor.b32  	%r118, %r117, %r85;
	or.b32  	%r119, %r88, %r118;
	or.b32  	%r120, %r119, %r87;
	xor.b32  	%r121, %r100, %r120;
	shl.b32 	%r122, %r121, 1;
	cvt.u64.u32 	%rd61, %r122;
	add.s64 	%rd62, %rd43, %rd61;
	cvt.u32.u64 	%r243, %rd62;
	or.b32  	%r123, %r86, 96;
	xor.b32  	%r124, %r123, %r87;
	or.b32  	%r125, %r124, %r88;
	xor.b32  	%r126, %r100, %r125;
	shl.b32 	%r127, %r126, 1;
	cvt.u64.u32 	%rd63, %r127;
	add.s64 	%rd64, %rd43, %rd63;
	cvt.u32.u64 	%r248, %rd64;
	or.b32  	%r128, %r84, 112;
	xor.b32  	%r129, %r109, %r128;
	or.b32  	%r130, %r129, %r88;
	xor.b32  	%r131, %r100, %r130;
	shl.b32 	%r132, %r131, 1;
	cvt.u64.u32 	%rd65, %r132;
	add.s64 	%rd66, %rd43, %rd65;
	cvt.u32.u64 	%r253, %rd66;
	or.b32  	%r133, %r90, 128;
	xor.b32  	%r134, %r100, %r133;
	shl.b32 	%r135, %r134, 1;
	cvt.u64.u32 	%rd67, %r135;
	add.s64 	%rd68, %rd43, %rd67;
	cvt.u32.u64 	%r258, %rd68;
	or.b32  	%r136, %r84, 144;
	xor.b32  	%r137, %r136, %r85;
	or.b32  	%r138, %r88, %r137;
	or.b32  	%r139, %r138, %r87;
	xor.b32  	%r140, %r100, %r139;
	shl.b32 	%r141, %r140, 1;
	cvt.u64.u32 	%rd69, %r141;
	add.s64 	%rd70, %rd43, %rd69;
	cvt.u32.u64 	%r263, %rd70;
	or.b32  	%r142, %r86, 160;
	xor.b32  	%r143, %r142, %r87;
	or.b32  	%r144, %r143, %r88;
	xor.b32  	%r145, %r100, %r144;
	shl.b32 	%r146, %r145, 1;
	cvt.u64.u32 	%rd71, %r146;
	add.s64 	%rd72, %rd43, %rd71;
	cvt.u32.u64 	%r268, %rd72;
	or.b32  	%r147, %r84, 176;
	xor.b32  	%r148, %r109, %r147;
	or.b32  	%r149, %r148, %r88;
	xor.b32  	%r150, %r100, %r149;
	shl.b32 	%r151, %r150, 1;
	cvt.u64.u32 	%rd73, %r151;
	add.s64 	%rd74, %rd43, %rd73;
	cvt.u32.u64 	%r273, %rd74;
	or.b32  	%r152, %r90, 192;
	xor.b32  	%r153, %r100, %r152;
	shl.b32 	%r154, %r153, 1;
	cvt.u64.u32 	%rd75, %r154;
	add.s64 	%rd76, %rd43, %rd75;
	cvt.u32.u64 	%r278, %rd76;
	or.b32  	%r155, %r84, 208;
	xor.b32  	%r156, %r155, %r85;
	or.b32  	%r157, %r88, %r156;
	or.b32  	%r158, %r157, %r87;
	xor.b32  	%r159, %r100, %r158;
	shl.b32 	%r160, %r159, 1;
	cvt.u64.u32 	%rd77, %r160;
	add.s64 	%rd78, %rd43, %rd77;
	cvt.u32.u64 	%r283, %rd78;
	or.b32  	%r161, %r86, 224;
	xor.b32  	%r162, %r161, %r87;
	or.b32  	%r163, %r162, %r88;
	xor.b32  	%r164, %r100, %r163;
	shl.b32 	%r165, %r164, 1;
	cvt.u64.u32 	%rd79, %r165;
	add.s64 	%rd80, %rd43, %rd79;
	cvt.u32.u64 	%r288, %rd80;
	or.b32  	%r166, %r84, 240;
	xor.b32  	%r167, %r109, %r166;
	or.b32  	%r168, %r167, %r88;
	xor.b32  	%r169, %r100, %r168;
	shl.b32 	%r170, %r169, 1;
	cvt.u64.u32 	%rd81, %r170;
	add.s64 	%rd82, %rd43, %rd81;
	cvt.u32.u64 	%r293, %rd82;
	or.b32  	%r171, %r53, %r51;
	or.b32  	%r172, %r171, %r48;
	or.b32  	%r173, %r172, %r7;
	mul.wide.u32 	%rd10, %r173, 2;
	or.b32  	%r174, %r41, %r40;
	cvt.u64.u32 	%rd83, %r174;
	or.b64  	%rd84, %rd41, %rd83;
	shl.b64 	%rd85, %rd84, 12;
	add.s64 	%rd154, %rd40, %rd85;
	or.b32  	%r175, %r174, 4;
	cvt.u64.u32 	%rd86, %r175;
	or.b64  	%rd87, %rd41, %rd86;
	shl.b64 	%rd88, %rd87, 12;
	add.s64 	%rd153, %rd40, %rd88;
	or.b32  	%r176, %r174, 8;
	cvt.u64.u32 	%rd89, %r176;
	or.b64  	%rd90, %rd41, %rd89;
	shl.b64 	%rd91, %rd90, 12;
	add.s64 	%rd152, %rd40, %rd91;
	or.b32  	%r177, %r174, 12;
	cvt.u64.u32 	%rd92, %r177;
	or.b64  	%rd93, %rd41, %rd92;
	shl.b64 	%rd94, %rd93, 12;
	add.s64 	%rd151, %rd40, %rd94;
	or.b32  	%r178, %r174, 16;
	cvt.u64.u32 	%rd95, %r178;
	or.b64  	%rd96, %rd41, %rd95;
	shl.b64 	%rd97, %rd96, 12;
	add.s64 	%rd150, %rd40, %rd97;
	or.b32  	%r179, %r174, 20;
	cvt.u64.u32 	%rd98, %r179;
	or.b64  	%rd99, %rd41, %rd98;
	shl.b64 	%rd100, %rd99, 12;
	add.s64 	%rd149, %rd40, %rd100;
	or.b32  	%r180, %r174, 24;
	cvt.u64.u32 	%rd101, %r180;
	or.b64  	%rd102, %rd41, %rd101;
	shl.b64 	%rd103, %rd102, 12;
	add.s64 	%rd148, %rd40, %rd103;
	or.b32  	%r181, %r174, 28;
	cvt.u64.u32 	%rd104, %r181;
	or.b64  	%rd105, %rd41, %rd104;
	shl.b64 	%rd106, %rd105, 12;
	add.s64 	%rd147, %rd40, %rd106;
	mov.f32 	%f289, 0f00000000;
	mov.b32 	%r546, -256;
	mov.f32 	%f290, %f289;
	mov.f32 	%f291, %f289;
	mov.f32 	%f292, %f289;
	mov.f32 	%f293, %f289;
	mov.f32 	%f294, %f289;
	mov.f32 	%f295, %f289;
	mov.f32 	%f296, %f289;
$L__BB1_1:
	add.s64 	%rd107, %rd154, %rd10;
	add.s64 	%rd108, %rd153, %rd10;
	add.s64 	%rd109, %rd152, %rd10;
	add.s64 	%rd110, %rd151, %rd10;
	add.s64 	%rd111, %rd150, %rd10;
	add.s64 	%rd112, %rd149, %rd10;
	add.s64 	%rd113, %rd148, %rd10;
	add.s64 	%rd114, %rd147, %rd10;
	// begin inline asm
	mov.u32 %r182, 0x0;
	mov.u32 %r183, 0x0;
	mov.u32 %r184, 0x0;
	mov.u32 %r185, 0x0;
	ld.global.v4.b32 { %r182, %r183, %r184, %r185 }, [ %rd107 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r186, 0x0;
	mov.u32 %r187, 0x0;
	mov.u32 %r188, 0x0;
	mov.u32 %r189, 0x0;
	ld.global.v4.b32 { %r186, %r187, %r188, %r189 }, [ %rd108 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r190, 0x0;
	mov.u32 %r191, 0x0;
	mov.u32 %r192, 0x0;
	mov.u32 %r193, 0x0;
	ld.global.v4.b32 { %r190, %r191, %r192, %r193 }, [ %rd109 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r194, 0x0;
	mov.u32 %r195, 0x0;
	mov.u32 %r196, 0x0;
	mov.u32 %r197, 0x0;
	ld.global.v4.b32 { %r194, %r195, %r196, %r197 }, [ %rd110 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r198, 0x0;
	mov.u32 %r199, 0x0;
	mov.u32 %r200, 0x0;
	mov.u32 %r201, 0x0;
	ld.global.v4.b32 { %r198, %r199, %r200, %r201 }, [ %rd111 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r202, 0x0;
	mov.u32 %r203, 0x0;
	mov.u32 %r204, 0x0;
	mov.u32 %r205, 0x0;
	ld.global.v4.b32 { %r202, %r203, %r204, %r205 }, [ %rd112 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r206, 0x0;
	mov.u32 %r207, 0x0;
	mov.u32 %r208, 0x0;
	mov.u32 %r209, 0x0;
	ld.global.v4.b32 { %r206, %r207, %r208, %r209 }, [ %rd113 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r210, 0x0;
	mov.u32 %r211, 0x0;
	mov.u32 %r212, 0x0;
	mov.u32 %r213, 0x0;
	ld.global.v4.b32 { %r210, %r211, %r212, %r213 }, [ %rd114 + 0 ];
	// end inline asm
	bar.sync 	0;
	st.shared.v4.b32 	[%rd2], {%r182, %r183, %r184, %r185};
	st.shared.v4.b32 	[%rd3], {%r186, %r187, %r188, %r189};
	st.shared.v4.b32 	[%rd4], {%r190, %r191, %r192, %r193};
	st.shared.v4.b32 	[%rd5], {%r194, %r195, %r196, %r197};
	st.shared.v4.b32 	[%rd6], {%r198, %r199, %r200, %r201};
	st.shared.v4.b32 	[%rd7], {%r202, %r203, %r204, %r205};
	st.shared.v4.b32 	[%rd8], {%r206, %r207, %r208, %r209};
	st.shared.v4.b32 	[%rd9], {%r210, %r211, %r212, %r213};
	bar.sync 	0;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r294, %r295, %r296, %r297}, [%r218];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r306, %r307, %r308, %r309}, [%r223];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r318, %r319, %r320, %r321}, [%r228];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r330, %r331, %r332, %r333}, [%r233];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r342, %r343, %r344, %r345}, [%r238];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r354, %r355, %r356, %r357}, [%r243];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r366, %r367, %r368, %r369}, [%r248];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r378, %r379, %r380, %r381}, [%r253];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r390, %r391, %r392, %r393}, [%r258];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r402, %r403, %r404, %r405}, [%r263];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r414, %r415, %r416, %r417}, [%r268];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r426, %r427, %r428, %r429}, [%r273];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r438, %r439, %r440, %r441}, [%r278];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r450, %r451, %r452, %r453}, [%r283];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r462, %r463, %r464, %r465}, [%r288];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r474, %r475, %r476, %r477}, [%r293];
	// end inline asm
	mov.b32 	%r298, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r294, %r295, %r296, %r297 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r294, %r295, %r296, %r297 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r306, %r307, %r308, %r309 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r306, %r307, %r308, %r309 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r318, %r319, %r320, %r321 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r318, %r319, %r320, %r321 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r330, %r331, %r332, %r333 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r330, %r331, %r332, %r333 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r342, %r343, %r344, %r345 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r342, %r343, %r344, %r345 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r354, %r355, %r356, %r357 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r354, %r355, %r356, %r357 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r366, %r367, %r368, %r369 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r366, %r367, %r368, %r369 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r378, %r379, %r380, %r381 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r378, %r379, %r380, %r381 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r390, %r391, %r392, %r393 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r390, %r391, %r392, %r393 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r402, %r403, %r404, %r405 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r402, %r403, %r404, %r405 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r414, %r415, %r416, %r417 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r414, %r415, %r416, %r417 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r426, %r427, %r428, %r429 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r426, %r427, %r428, %r429 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r438, %r439, %r440, %r441 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r438, %r439, %r440, %r441 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r450, %r451, %r452, %r453 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r450, %r451, %r452, %r453 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r462, %r463, %r464, %r465 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r462, %r463, %r464, %r465 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f289, %f290, %f291, %f292 }, { %r474, %r475, %r476, %r477 }, { %r298, %r298 }, { %f289, %f290, %f291, %f292 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f293, %f294, %f295, %f296 }, { %r474, %r475, %r476, %r477 }, { %r298, %r298 }, { %f293, %f294, %f295, %f296 };
	// end inline asm
	add.s32 	%r546, %r546, 256;
	add.s64 	%rd154, %rd154, 512;
	add.s64 	%rd153, %rd153, 512;
	add.s64 	%rd152, %rd152, 512;
	add.s64 	%rd151, %rd151, 512;
	add.s64 	%rd150, %rd150, 512;
	add.s64 	%rd149, %rd149, 512;
	add.s64 	%rd148, %rd148, 512;
	add.s64 	%rd147, %rd147, 512;
	setp.lt.u32 	%p3, %r546, 1792;
	@%p3 bra 	$L__BB1_1;
	shl.b32 	%r506, %r2, 3;
	sub.s32 	%r507, %r28, %r506;
	div.s32 	%r508, %r507, %r3;
	mov.b32 	%r486, %f289;
	// begin inline asm
	cvt.rn.bf16.f32 %rs9, %r486;
	// end inline asm
	mov.b32 	%r487, %f290;
	// begin inline asm
	cvt.rn.bf16.f32 %rs10, %r487;
	// end inline asm
	mov.b32 	%r488, %f291;
	// begin inline asm
	cvt.rn.bf16.f32 %rs11, %r488;
	// end inline asm
	mov.b32 	%r489, %f292;
	// begin inline asm
	cvt.rn.bf16.f32 %rs12, %r489;
	// end inline asm
	mov.b32 	%r490, %f293;
	// begin inline asm
	cvt.rn.bf16.f32 %rs13, %r490;
	// end inline asm
	mov.b32 	%r491, %f294;
	// begin inline asm
	cvt.rn.bf16.f32 %rs14, %r491;
	// end inline asm
	mov.b32 	%r492, %f295;
	// begin inline asm
	cvt.rn.bf16.f32 %rs15, %r492;
	// end inline asm
	mov.b32 	%r493, %f296;
	// begin inline asm
	cvt.rn.bf16.f32 %rs16, %r493;
	// end inline asm
	shl.b32 	%r509, %r508, 5;
	cvt.s64.s32 	%rd116, %r4;
	cvt.s64.s32 	%rd117, %r509;
	shr.u32 	%r510, %r8, 2;
	selp.b32 	%r511, 0, 16, %p2;
	shr.u32 	%r512, %r5, 2;
	and.b32  	%r513, %r512, 11;
	or.b32  	%r514, %r513, %r510;
	or.b32  	%r515, %r514, %r511;
	cvt.u64.u32 	%rd118, %r7;
	cvt.u64.u32 	%rd119, %r515;
	or.b64  	%rd120, %rd116, %rd118;
	or.b64  	%rd121, %rd117, %rd119;
	shl.b64 	%rd122, %rd120, 1;
	add.s64 	%rd123, %rd1, %rd122;
	shl.b64 	%rd124, %rd121, 12;
	add.s64 	%rd115, %rd123, %rd124;
	bar.sync 	0;
	shl.b32 	%r516, %r5, 6;
	shl.b32 	%r517, %r6, 3;
	or.b32  	%r518, %r512, %r516;
	and.b32  	%r519, %r518, 195;
	or.b32  	%r520, %r519, %r510;
	or.b32  	%r521, %r520, %r517;
	or.b32  	%r522, %r521, %r511;
	selp.b32 	%r523, 0, 512, %p2;
	or.b32  	%r524, %r517, %r523;
	or.b32  	%r525, %r524, %r9;
	shr.u32 	%r526, %r521, 2;
	and.b32  	%r527, %r526, 112;
	add.s32 	%r528, %r527, %r522;
	shl.b32 	%r529, %r528, 1;
	cvt.u64.u32 	%rd125, %r529;
	add.s64 	%rd127, %rd43, %rd125;
	cvt.u32.u64 	%r494, %rd127;
	mov.pred 	%p4, -1;
	// begin inline asm
	@%p4 st.shared.b16 [ %r494 + 0 ], %rs9;
	// end inline asm
	or.b32  	%r530, %r521, 32;
	shr.u32 	%r531, %r530, 2;
	and.b32  	%r532, %r531, 120;
	cvt.u64.u32 	%rd128, %r522;
	cvt.u64.u32 	%rd129, %r532;
	add.s64 	%rd130, %rd129, %rd128;
	shl.b64 	%rd131, %rd130, 1;
	add.s64 	%rd132, %rd43, %rd131;
	cvt.u32.u64 	%r533, %rd132;
	add.s32 	%r495, %r533, 64;
	// begin inline asm
	@%p4 st.shared.b16 [ %r495 + 0 ], %rs10;
	// end inline asm
	cvt.u64.u32 	%rd133, %r527;
	add.s64 	%rd134, %rd133, %rd128;
	shl.b64 	%rd135, %rd134, 1;
	add.s64 	%rd136, %rd43, %rd135;
	cvt.u32.u64 	%r534, %rd136;
	add.s32 	%r496, %r534, 16;
	// begin inline asm
	@%p4 st.shared.b16 [ %r496 + 0 ], %rs11;
	// end inline asm
	add.s32 	%r497, %r533, 80;
	// begin inline asm
	@%p4 st.shared.b16 [ %r497 + 0 ], %rs12;
	// end inline asm
	or.b32  	%r535, %r521, 512;
	shr.u32 	%r536, %r535, 2;
	and.b32  	%r537, %r536, 248;
	cvt.u64.u32 	%rd137, %r537;
	add.s64 	%rd138, %rd137, %rd128;
	shl.b64 	%rd139, %rd138, 1;
	add.s64 	%rd140, %rd43, %rd139;
	cvt.u32.u64 	%r538, %rd140;
	add.s32 	%r498, %r538, 1024;
	// begin inline asm
	@%p4 st.shared.b16 [ %r498 + 0 ], %rs13;
	// end inline asm
	or.b32  	%r539, %r521, 544;
	shr.u32 	%r540, %r539, 2;
	and.b32  	%r541, %r540, 248;
	cvt.u64.u32 	%rd141, %r541;
	add.s64 	%rd142, %rd141, %rd128;
	shl.b64 	%rd143, %rd142, 1;
	add.s64 	%rd144, %rd43, %rd143;
	cvt.u32.u64 	%r542, %rd144;
	add.s32 	%r499, %r542, 1088;
	// begin inline asm
	@%p4 st.shared.b16 [ %r499 + 0 ], %rs14;
	// end inline asm
	add.s32 	%r500, %r538, 1040;
	// begin inline asm
	@%p4 st.shared.b16 [ %r500 + 0 ], %rs15;
	// end inline asm
	add.s32 	%r501, %r542, 1104;
	// begin inline asm
	@%p4 st.shared.b16 [ %r501 + 0 ], %rs16;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r543, %r525, 2;
	and.b32  	%r544, %r543, 248;
	add.s32 	%r545, %r544, %r525;
	mul.wide.u32 	%rd145, %r545, 2;
	add.s64 	%rd146, %rd43, %rd145;
	ld.shared.v4.u32 	{%r502, %r503, %r504, %r505}, [%rd146];
	// begin inline asm
	st.global.v4.b32 [ %rd115 + 0 ], { %r502, %r503, %r504, %r505 };
	// end inline asm
	ret;

}
	// .globl	fusion_38
.visible .entry fusion_38(
	.param .u64 .ptr .align 16 fusion_38_param_0,
	.param .u64 .ptr .align 128 fusion_38_param_1,
	.param .u64 .ptr .align 128 fusion_38_param_2,
	.param .u64 .ptr .align 16 fusion_38_param_3,
	.param .u64 .ptr .align 128 fusion_38_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<125>;
	.reg .f32 	%f<146>;
	.reg .b64 	%rd<33>;

	ld.param.u64 	%rd10, [fusion_38_param_0];
	ld.param.u64 	%rd11, [fusion_38_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_38_param_1];
	ld.param.u64 	%rd14, [fusion_38_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_38_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd5, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd19, %r1, 2048;
	shl.b64 	%rd20, %rd19, 1;
	add.s64 	%rd21, %rd17, %rd20;
	mov.u32 	%r105, %tid.x;
	and.b32  	%r106, %r105, 31;
	shl.b32 	%r107, %r105, 3;
	and.b32  	%r108, %r107, 248;
	setp.lt.u32 	%p4, %r105, 32;
	selp.b32 	%r109, 0, 256, %p4;
	or.b32  	%r110, %r108, %r109;
	mul.wide.u32 	%rd22, %r110, 2;
	add.s64 	%rd23, %rd21, %rd22;
	add.s64 	%rd1, %rd23, 2048;
	add.s64 	%rd2, %rd23, 3072;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd24, %r1, 1024;
	shl.b64 	%rd25, %rd24, 1;
	add.s64 	%rd26, %rd18, %rd25;
	add.s64 	%rd3, %rd26, %rd22;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.rn.f32 	%f33, %f1, %f17;
	add.rn.f32 	%f34, %f2, %f18;
	add.rn.f32 	%f35, %f3, %f19;
	add.rn.f32 	%f36, %f4, %f20;
	add.rn.f32 	%f37, %f5, %f21;
	add.rn.f32 	%f38, %f6, %f22;
	add.rn.f32 	%f39, %f7, %f23;
	add.rn.f32 	%f40, %f8, %f24;
	add.rn.f32 	%f41, %f9, %f25;
	add.rn.f32 	%f42, %f10, %f26;
	add.rn.f32 	%f43, %f11, %f27;
	add.rn.f32 	%f44, %f12, %f28;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	mul.rn.f32 	%f49, %f33, %f33;
	mul.rn.f32 	%f50, %f34, %f34;
	mul.rn.f32 	%f51, %f35, %f35;
	mul.rn.f32 	%f52, %f36, %f36;
	mul.rn.f32 	%f53, %f37, %f37;
	mul.rn.f32 	%f54, %f38, %f38;
	mul.rn.f32 	%f55, %f39, %f39;
	mul.rn.f32 	%f56, %f40, %f40;
	mul.rn.f32 	%f57, %f41, %f41;
	mul.rn.f32 	%f58, %f42, %f42;
	mul.rn.f32 	%f59, %f43, %f43;
	mul.rn.f32 	%f60, %f44, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	add.rn.f32 	%f65, %f49, %f50;
	add.rn.f32 	%f66, %f65, %f51;
	add.rn.f32 	%f67, %f66, %f52;
	add.rn.f32 	%f68, %f67, %f53;
	add.rn.f32 	%f69, %f68, %f54;
	add.rn.f32 	%f70, %f69, %f55;
	add.rn.f32 	%f71, %f70, %f56;
	add.rn.f32 	%f72, %f71, %f57;
	add.rn.f32 	%f73, %f72, %f58;
	add.rn.f32 	%f74, %f73, %f59;
	add.rn.f32 	%f75, %f74, %f60;
	add.rn.f32 	%f76, %f75, %f61;
	add.rn.f32 	%f77, %f76, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	mov.b32 	%r111, %f79;
	shfl.sync.bfly.b32	%r112, %r111, 16, 31, -1;
	mov.b32 	%f80, %r112;
	add.rn.f32 	%f81, %f79, %f80;
	mov.b32 	%r113, %f81;
	shfl.sync.bfly.b32	%r114, %r113, 8, 31, -1;
	mov.b32 	%f82, %r114;
	add.rn.f32 	%f83, %f81, %f82;
	mov.b32 	%r115, %f83;
	shfl.sync.bfly.b32	%r116, %r115, 4, 31, -1;
	mov.b32 	%f84, %r116;
	add.rn.f32 	%f85, %f83, %f84;
	mov.b32 	%r117, %f85;
	shfl.sync.bfly.b32	%r118, %r117, 2, 31, -1;
	mov.b32 	%f86, %r118;
	add.rn.f32 	%f87, %f85, %f86;
	mov.b32 	%r119, %f87;
	shfl.sync.bfly.b32	%r120, %r119, 1, 31, -1;
	mov.b32 	%f88, %r120;
	add.rn.f32 	%f89, %f87, %f88;
	setp.eq.s32 	%p1, %r106, 0;
	shr.u32 	%r121, %r105, 3;
	and.b32  	%r122, %r121, 4;
	cvt.u64.u32 	%rd27, %r122;
	mov.u64 	%rd28, global_smem;
	add.s64 	%rd29, %rd28, %rd27;
	mov.b32 	%r51, %f89;
	cvt.u32.u64 	%r50, %rd29;
	// begin inline asm
	@%p1 st.shared.b32 [ %r50 + 0 ], %r51;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r105, 2;
	shl.b32 	%r123, %r105, 2;
	cvt.u64.u32 	%rd30, %r123;
	add.s64 	%rd31, %rd28, %rd30;
	cvt.u32.u64 	%r53, %rd31;
	// begin inline asm
	@%p2 ld.shared.b32 %r52, [ %r53 + 0 ];
	// end inline asm
	mov.b32 	%f90, %r52;
	shfl.sync.bfly.b32	%r124, %r52, 1, 31, -1;
	mov.b32 	%f91, %r124;
	add.rn.f32 	%f92, %f90, %f91;
	setp.eq.s32 	%p3, %r105, 0;
	mov.b32 	%r55, %f92;
	// begin inline asm
	@%p3 st.shared.b32 [ %r53 + 0 ], %r55;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f93, [global_smem];
	mul.rn.f32 	%f94, %f93, 0f3A800000;
	// begin inline asm
	mov.u32 %r56, 0x0;
	ld.global.b32 { %r56 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f95, %r56;
	add.rn.f32 	%f96, %f94, %f95;
	rsqrt.approx.f32 	%f97, %f96;
	mul.rn.f32 	%f98, %f33, %f97;
	mul.rn.f32 	%f99, %f34, %f97;
	mul.rn.f32 	%f100, %f35, %f97;
	mul.rn.f32 	%f101, %f36, %f97;
	mul.rn.f32 	%f102, %f37, %f97;
	mul.rn.f32 	%f103, %f38, %f97;
	mul.rn.f32 	%f104, %f39, %f97;
	mul.rn.f32 	%f105, %f40, %f97;
	mul.rn.f32 	%f106, %f41, %f97;
	mul.rn.f32 	%f107, %f42, %f97;
	mul.rn.f32 	%f108, %f43, %f97;
	mul.rn.f32 	%f109, %f44, %f97;
	mul.rn.f32 	%f110, %f45, %f97;
	mul.rn.f32 	%f111, %f46, %f97;
	mul.rn.f32 	%f112, %f47, %f97;
	mul.rn.f32 	%f113, %f48, %f97;
	add.s64 	%rd6, %rd15, %rd22;
	add.s64 	%rd7, %rd6, 1024;
	// begin inline asm
	mov.u32 %r57, 0x0;
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	mov.u32 %r60, 0x0;
	ld.global.v4.b32 { %r57, %r58, %r59, %r60 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r57;
	mov.b32 	{%rs35, %rs36}, %r58;
	mov.b32 	{%rs37, %rs38}, %r59;
	mov.b32 	{%rs39, %rs40}, %r60;
	// begin inline asm
	mov.u32 %r61, 0x0;
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	ld.global.v4.b32 { %r61, %r62, %r63, %r64 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r61;
	mov.b32 	{%rs43, %rs44}, %r62;
	mov.b32 	{%rs45, %rs46}, %r63;
	mov.b32 	{%rs47, %rs48}, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs33;
	// end inline asm
	mov.b32 	%f114, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs34;
	// end inline asm
	mov.b32 	%f115, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs35;
	// end inline asm
	mov.b32 	%f116, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs36;
	// end inline asm
	mov.b32 	%f117, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs37;
	// end inline asm
	mov.b32 	%f118, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs38;
	// end inline asm
	mov.b32 	%f119, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs39;
	// end inline asm
	mov.b32 	%f120, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs40;
	// end inline asm
	mov.b32 	%f121, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs41;
	// end inline asm
	mov.b32 	%f122, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs42;
	// end inline asm
	mov.b32 	%f123, %r74;
	// begin inline asm
	cvt.f32.bf16 %r75, %rs43;
	// end inline asm
	mov.b32 	%f124, %r75;
	// begin inline asm
	cvt.f32.bf16 %r76, %rs44;
	// end inline asm
	mov.b32 	%f125, %r76;
	// begin inline asm
	cvt.f32.bf16 %r77, %rs45;
	// end inline asm
	mov.b32 	%f126, %r77;
	// begin inline asm
	cvt.f32.bf16 %r78, %rs46;
	// end inline asm
	mov.b32 	%f127, %r78;
	// begin inline asm
	cvt.f32.bf16 %r79, %rs47;
	// end inline asm
	mov.b32 	%f128, %r79;
	// begin inline asm
	cvt.f32.bf16 %r80, %rs48;
	// end inline asm
	mov.b32 	%f129, %r80;
	mul.rn.f32 	%f130, %f98, %f114;
	mul.rn.f32 	%f131, %f99, %f115;
	mul.rn.f32 	%f132, %f100, %f116;
	mul.rn.f32 	%f133, %f101, %f117;
	mul.rn.f32 	%f134, %f102, %f118;
	mul.rn.f32 	%f135, %f103, %f119;
	mul.rn.f32 	%f136, %f104, %f120;
	mul.rn.f32 	%f137, %f105, %f121;
	mul.rn.f32 	%f138, %f106, %f122;
	mul.rn.f32 	%f139, %f107, %f123;
	mul.rn.f32 	%f140, %f108, %f124;
	mul.rn.f32 	%f141, %f109, %f125;
	mul.rn.f32 	%f142, %f110, %f126;
	mul.rn.f32 	%f143, %f111, %f127;
	mul.rn.f32 	%f144, %f112, %f128;
	mul.rn.f32 	%f145, %f113, %f129;
	mov.b32 	%r81, %f130;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r81;
	// end inline asm
	mov.b32 	%r82, %f131;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r82;
	// end inline asm
	mov.b32 	%r83, %f132;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r83;
	// end inline asm
	mov.b32 	%r84, %f133;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r84;
	// end inline asm
	mov.b32 	%r85, %f134;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r85;
	// end inline asm
	mov.b32 	%r86, %f135;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r86;
	// end inline asm
	mov.b32 	%r87, %f136;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r87;
	// end inline asm
	mov.b32 	%r88, %f137;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r88;
	// end inline asm
	mov.b32 	%r89, %f138;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r89;
	// end inline asm
	mov.b32 	%r90, %f139;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r90;
	// end inline asm
	mov.b32 	%r91, %f140;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r91;
	// end inline asm
	mov.b32 	%r92, %f141;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r92;
	// end inline asm
	mov.b32 	%r93, %f142;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r93;
	// end inline asm
	mov.b32 	%r94, %f143;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r94;
	// end inline asm
	mov.b32 	%r95, %f144;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r95;
	// end inline asm
	mov.b32 	%r96, %f145;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r96;
	// end inline asm
	add.s64 	%rd32, %rd12, %rd25;
	add.s64 	%rd8, %rd32, %rd22;
	add.s64 	%rd9, %rd8, 1024;
	mov.b32 	%r97, {%rs49, %rs50};
	mov.b32 	%r98, {%rs51, %rs52};
	mov.b32 	%r99, {%rs53, %rs54};
	mov.b32 	%r100, {%rs55, %rs56};
	// begin inline asm
	st.global.v4.b32 [ %rd8 + 0 ], { %r97, %r98, %r99, %r100 };
	// end inline asm
	mov.b32 	%r101, {%rs57, %rs58};
	mov.b32 	%r102, {%rs59, %rs60};
	mov.b32 	%r103, {%rs61, %rs62};
	mov.b32 	%r104, {%rs63, %rs64};
	// begin inline asm
	st.global.v4.b32 [ %rd9 + 0 ], { %r101, %r102, %r103, %r104 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion
.visible .entry loop_convert_fusion(
	.param .u64 .ptr .align 128 loop_convert_fusion_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 4;
	mul.lo.s16 	%rs4, %rs3, 24;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 7;
	cvt.u32.u16 	%r3, %rs6;
	or.b32  	%r4, %r1, %r3;
	mul.wide.u16 	%r5, %rs3, 6144;
	add.s32 	%r6, %r4, %r5;
	mul.wide.u32 	%rd5, %r6, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs7, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	mul.rn.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.f32 	%f3, %f2;
	cvt.rn.bf16.f32 	%rs8, %f3;
	cvt.f32.bf16 	%f4, %rs8;
	add.rn.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.f32 	%f6, %f5;
	ld.global.nc.u16 	%rs9, [%rd6+6144];
	mul.rn.f32 	%f7, %f6, %f1;
	cvt.f32.bf16 	%f8, %rs9;
	mul.rn.f32 	%f9, %f7, %f8;
	cvt.rn.bf16.f32 	%rs10, %f9;
	shl.b32 	%r7, %r2, 7;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd7, %r8, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs10;
	ret;

}
	// .globl	fusion_39
.visible .entry fusion_39(
	.param .u64 .ptr .align 16 fusion_39_param_0,
	.param .u64 .ptr .align 16 fusion_39_param_1,
	.param .u64 .ptr .align 128 fusion_39_param_2,
	.param .u64 .ptr .align 128 fusion_39_param_3,
	.param .u64 .ptr .align 128 fusion_39_param_4,
	.param .u64 .ptr .align 128 fusion_39_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<173>;
	.reg .f32 	%f<210>;
	.reg .b64 	%rd<39>;

	ld.param.u64 	%rd14, [fusion_39_param_0];
	ld.param.u64 	%rd15, [fusion_39_param_5];
	cvta.to.global.u64 	%rd16, %rd15;
	ld.param.u64 	%rd17, [fusion_39_param_1];
	ld.param.u64 	%rd18, [fusion_39_param_4];
	cvta.to.global.u64 	%rd19, %rd18;
	ld.param.u64 	%rd20, [fusion_39_param_2];
	ld.param.u64 	%rd21, [fusion_39_param_3];
	cvta.to.global.u64 	%rd22, %rd21;
	cvta.to.global.u64 	%rd23, %rd20;
	cvta.to.global.u64 	%rd24, %rd17;
	cvta.to.global.u64 	%rd9, %rd14;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd25, %r1, 2048;
	shl.b64 	%rd26, %rd25, 1;
	add.s64 	%rd27, %rd22, %rd26;
	mov.u32 	%r153, %tid.x;
	and.b32  	%r154, %r153, 31;
	shl.b32 	%r155, %r153, 3;
	and.b32  	%r156, %r155, 248;
	setp.lt.u32 	%p4, %r153, 32;
	selp.b32 	%r157, 0, 256, %p4;
	or.b32  	%r158, %r156, %r157;
	mul.wide.u32 	%rd28, %r158, 2;
	add.s64 	%rd1, %rd27, %rd28;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd29, %r1, 1024;
	shl.b64 	%rd30, %rd29, 1;
	add.s64 	%rd31, %rd19, %rd30;
	add.s64 	%rd3, %rd31, %rd28;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd1, 2048;
	add.s64 	%rd6, %rd1, 3072;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd32, %rd23, %rd30;
	add.s64 	%rd7, %rd32, %rd28;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.rn.f32 	%f65, %f33, %f49;
	add.rn.f32 	%f66, %f34, %f50;
	add.rn.f32 	%f67, %f35, %f51;
	add.rn.f32 	%f68, %f36, %f52;
	add.rn.f32 	%f69, %f37, %f53;
	add.rn.f32 	%f70, %f38, %f54;
	add.rn.f32 	%f71, %f39, %f55;
	add.rn.f32 	%f72, %f40, %f56;
	add.rn.f32 	%f73, %f41, %f57;
	add.rn.f32 	%f74, %f42, %f58;
	add.rn.f32 	%f75, %f43, %f59;
	add.rn.f32 	%f76, %f44, %f60;
	add.rn.f32 	%f77, %f45, %f61;
	add.rn.f32 	%f78, %f46, %f62;
	add.rn.f32 	%f79, %f47, %f63;
	add.rn.f32 	%f80, %f48, %f64;
	add.rn.f32 	%f81, %f17, %f65;
	add.rn.f32 	%f82, %f18, %f66;
	add.rn.f32 	%f83, %f19, %f67;
	add.rn.f32 	%f84, %f20, %f68;
	add.rn.f32 	%f85, %f21, %f69;
	add.rn.f32 	%f86, %f22, %f70;
	add.rn.f32 	%f87, %f23, %f71;
	add.rn.f32 	%f88, %f24, %f72;
	add.rn.f32 	%f89, %f25, %f73;
	add.rn.f32 	%f90, %f26, %f74;
	add.rn.f32 	%f91, %f27, %f75;
	add.rn.f32 	%f92, %f28, %f76;
	add.rn.f32 	%f93, %f29, %f77;
	add.rn.f32 	%f94, %f30, %f78;
	add.rn.f32 	%f95, %f31, %f79;
	add.rn.f32 	%f96, %f32, %f80;
	add.rn.f32 	%f97, %f1, %f81;
	add.rn.f32 	%f98, %f2, %f82;
	add.rn.f32 	%f99, %f3, %f83;
	add.rn.f32 	%f100, %f4, %f84;
	add.rn.f32 	%f101, %f5, %f85;
	add.rn.f32 	%f102, %f6, %f86;
	add.rn.f32 	%f103, %f7, %f87;
	add.rn.f32 	%f104, %f8, %f88;
	add.rn.f32 	%f105, %f9, %f89;
	add.rn.f32 	%f106, %f10, %f90;
	add.rn.f32 	%f107, %f11, %f91;
	add.rn.f32 	%f108, %f12, %f92;
	add.rn.f32 	%f109, %f13, %f93;
	add.rn.f32 	%f110, %f14, %f94;
	add.rn.f32 	%f111, %f15, %f95;
	add.rn.f32 	%f112, %f16, %f96;
	mul.rn.f32 	%f113, %f97, %f97;
	mul.rn.f32 	%f114, %f98, %f98;
	mul.rn.f32 	%f115, %f99, %f99;
	mul.rn.f32 	%f116, %f100, %f100;
	mul.rn.f32 	%f117, %f101, %f101;
	mul.rn.f32 	%f118, %f102, %f102;
	mul.rn.f32 	%f119, %f103, %f103;
	mul.rn.f32 	%f120, %f104, %f104;
	mul.rn.f32 	%f121, %f105, %f105;
	mul.rn.f32 	%f122, %f106, %f106;
	mul.rn.f32 	%f123, %f107, %f107;
	mul.rn.f32 	%f124, %f108, %f108;
	mul.rn.f32 	%f125, %f109, %f109;
	mul.rn.f32 	%f126, %f110, %f110;
	mul.rn.f32 	%f127, %f111, %f111;
	mul.rn.f32 	%f128, %f112, %f112;
	add.rn.f32 	%f129, %f113, %f114;
	add.rn.f32 	%f130, %f129, %f115;
	add.rn.f32 	%f131, %f130, %f116;
	add.rn.f32 	%f132, %f131, %f117;
	add.rn.f32 	%f133, %f132, %f118;
	add.rn.f32 	%f134, %f133, %f119;
	add.rn.f32 	%f135, %f134, %f120;
	add.rn.f32 	%f136, %f135, %f121;
	add.rn.f32 	%f137, %f136, %f122;
	add.rn.f32 	%f138, %f137, %f123;
	add.rn.f32 	%f139, %f138, %f124;
	add.rn.f32 	%f140, %f139, %f125;
	add.rn.f32 	%f141, %f140, %f126;
	add.rn.f32 	%f142, %f141, %f127;
	add.rn.f32 	%f143, %f142, %f128;
	mov.b32 	%r159, %f143;
	shfl.sync.bfly.b32	%r160, %r159, 16, 31, -1;
	mov.b32 	%f144, %r160;
	add.rn.f32 	%f145, %f143, %f144;
	mov.b32 	%r161, %f145;
	shfl.sync.bfly.b32	%r162, %r161, 8, 31, -1;
	mov.b32 	%f146, %r162;
	add.rn.f32 	%f147, %f145, %f146;
	mov.b32 	%r163, %f147;
	shfl.sync.bfly.b32	%r164, %r163, 4, 31, -1;
	mov.b32 	%f148, %r164;
	add.rn.f32 	%f149, %f147, %f148;
	mov.b32 	%r165, %f149;
	shfl.sync.bfly.b32	%r166, %r165, 2, 31, -1;
	mov.b32 	%f150, %r166;
	add.rn.f32 	%f151, %f149, %f150;
	mov.b32 	%r167, %f151;
	shfl.sync.bfly.b32	%r168, %r167, 1, 31, -1;
	mov.b32 	%f152, %r168;
	add.rn.f32 	%f153, %f151, %f152;
	setp.eq.s32 	%p1, %r154, 0;
	shr.u32 	%r169, %r153, 3;
	and.b32  	%r170, %r169, 4;
	cvt.u64.u32 	%rd33, %r170;
	mov.u64 	%rd34, global_smem;
	add.s64 	%rd35, %rd34, %rd33;
	mov.b32 	%r99, %f153;
	cvt.u32.u64 	%r98, %rd35;
	// begin inline asm
	@%p1 st.shared.b32 [ %r98 + 0 ], %r99;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r153, 2;
	shl.b32 	%r171, %r153, 2;
	cvt.u64.u32 	%rd36, %r171;
	add.s64 	%rd37, %rd34, %rd36;
	cvt.u32.u64 	%r101, %rd37;
	// begin inline asm
	@%p2 ld.shared.b32 %r100, [ %r101 + 0 ];
	// end inline asm
	mov.b32 	%f154, %r100;
	shfl.sync.bfly.b32	%r172, %r100, 1, 31, -1;
	mov.b32 	%f155, %r172;
	add.rn.f32 	%f156, %f154, %f155;
	setp.eq.s32 	%p3, %r153, 0;
	mov.b32 	%r103, %f156;
	// begin inline asm
	@%p3 st.shared.b32 [ %r101 + 0 ], %r103;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f157, [global_smem];
	mul.rn.f32 	%f158, %f157, 0f3A800000;
	// begin inline asm
	mov.u32 %r104, 0x0;
	ld.global.b32 { %r104 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f159, %r104;
	add.rn.f32 	%f160, %f158, %f159;
	rsqrt.approx.f32 	%f161, %f160;
	mul.rn.f32 	%f162, %f97, %f161;
	mul.rn.f32 	%f163, %f98, %f161;
	mul.rn.f32 	%f164, %f99, %f161;
	mul.rn.f32 	%f165, %f100, %f161;
	mul.rn.f32 	%f166, %f101, %f161;
	mul.rn.f32 	%f167, %f102, %f161;
	mul.rn.f32 	%f168, %f103, %f161;
	mul.rn.f32 	%f169, %f104, %f161;
	mul.rn.f32 	%f170, %f105, %f161;
	mul.rn.f32 	%f171, %f106, %f161;
	mul.rn.f32 	%f172, %f107, %f161;
	mul.rn.f32 	%f173, %f108, %f161;
	mul.rn.f32 	%f174, %f109, %f161;
	mul.rn.f32 	%f175, %f110, %f161;
	mul.rn.f32 	%f176, %f111, %f161;
	mul.rn.f32 	%f177, %f112, %f161;
	add.s64 	%rd10, %rd24, %rd28;
	add.s64 	%rd11, %rd10, 1024;
	// begin inline asm
	mov.u32 %r105, 0x0;
	mov.u32 %r106, 0x0;
	mov.u32 %r107, 0x0;
	mov.u32 %r108, 0x0;
	ld.global.v4.b32 { %r105, %r106, %r107, %r108 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r105;
	mov.b32 	{%rs67, %rs68}, %r106;
	mov.b32 	{%rs69, %rs70}, %r107;
	mov.b32 	{%rs71, %rs72}, %r108;
	// begin inline asm
	mov.u32 %r109, 0x0;
	mov.u32 %r110, 0x0;
	mov.u32 %r111, 0x0;
	mov.u32 %r112, 0x0;
	ld.global.v4.b32 { %r109, %r110, %r111, %r112 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r109;
	mov.b32 	{%rs75, %rs76}, %r110;
	mov.b32 	{%rs77, %rs78}, %r111;
	mov.b32 	{%rs79, %rs80}, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs65;
	// end inline asm
	mov.b32 	%f178, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs66;
	// end inline asm
	mov.b32 	%f179, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs67;
	// end inline asm
	mov.b32 	%f180, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs68;
	// end inline asm
	mov.b32 	%f181, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs69;
	// end inline asm
	mov.b32 	%f182, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs70;
	// end inline asm
	mov.b32 	%f183, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs71;
	// end inline asm
	mov.b32 	%f184, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs72;
	// end inline asm
	mov.b32 	%f185, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs73;
	// end inline asm
	mov.b32 	%f186, %r121;
	// begin inline asm
	cvt.f32.bf16 %r122, %rs74;
	// end inline asm
	mov.b32 	%f187, %r122;
	// begin inline asm
	cvt.f32.bf16 %r123, %rs75;
	// end inline asm
	mov.b32 	%f188, %r123;
	// begin inline asm
	cvt.f32.bf16 %r124, %rs76;
	// end inline asm
	mov.b32 	%f189, %r124;
	// begin inline asm
	cvt.f32.bf16 %r125, %rs77;
	// end inline asm
	mov.b32 	%f190, %r125;
	// begin inline asm
	cvt.f32.bf16 %r126, %rs78;
	// end inline asm
	mov.b32 	%f191, %r126;
	// begin inline asm
	cvt.f32.bf16 %r127, %rs79;
	// end inline asm
	mov.b32 	%f192, %r127;
	// begin inline asm
	cvt.f32.bf16 %r128, %rs80;
	// end inline asm
	mov.b32 	%f193, %r128;
	mul.rn.f32 	%f194, %f162, %f178;
	mul.rn.f32 	%f195, %f163, %f179;
	mul.rn.f32 	%f196, %f164, %f180;
	mul.rn.f32 	%f197, %f165, %f181;
	mul.rn.f32 	%f198, %f166, %f182;
	mul.rn.f32 	%f199, %f167, %f183;
	mul.rn.f32 	%f200, %f168, %f184;
	mul.rn.f32 	%f201, %f169, %f185;
	mul.rn.f32 	%f202, %f170, %f186;
	mul.rn.f32 	%f203, %f171, %f187;
	mul.rn.f32 	%f204, %f172, %f188;
	mul.rn.f32 	%f205, %f173, %f189;
	mul.rn.f32 	%f206, %f174, %f190;
	mul.rn.f32 	%f207, %f175, %f191;
	mul.rn.f32 	%f208, %f176, %f192;
	mul.rn.f32 	%f209, %f177, %f193;
	mov.b32 	%r129, %f194;
	// begin inline asm
	cvt.rn.bf16.f32 %rs81, %r129;
	// end inline asm
	mov.b32 	%r130, %f195;
	// begin inline asm
	cvt.rn.bf16.f32 %rs82, %r130;
	// end inline asm
	mov.b32 	%r131, %f196;
	// begin inline asm
	cvt.rn.bf16.f32 %rs83, %r131;
	// end inline asm
	mov.b32 	%r132, %f197;
	// begin inline asm
	cvt.rn.bf16.f32 %rs84, %r132;
	// end inline asm
	mov.b32 	%r133, %f198;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r133;
	// end inline asm
	mov.b32 	%r134, %f199;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r134;
	// end inline asm
	mov.b32 	%r135, %f200;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r135;
	// end inline asm
	mov.b32 	%r136, %f201;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r136;
	// end inline asm
	mov.b32 	%r137, %f202;
	// begin inline asm
	cvt.rn.bf16.f32 %rs89, %r137;
	// end inline asm
	mov.b32 	%r138, %f203;
	// begin inline asm
	cvt.rn.bf16.f32 %rs90, %r138;
	// end inline asm
	mov.b32 	%r139, %f204;
	// begin inline asm
	cvt.rn.bf16.f32 %rs91, %r139;
	// end inline asm
	mov.b32 	%r140, %f205;
	// begin inline asm
	cvt.rn.bf16.f32 %rs92, %r140;
	// end inline asm
	mov.b32 	%r141, %f206;
	// begin inline asm
	cvt.rn.bf16.f32 %rs93, %r141;
	// end inline asm
	mov.b32 	%r142, %f207;
	// begin inline asm
	cvt.rn.bf16.f32 %rs94, %r142;
	// end inline asm
	mov.b32 	%r143, %f208;
	// begin inline asm
	cvt.rn.bf16.f32 %rs95, %r143;
	// end inline asm
	mov.b32 	%r144, %f209;
	// begin inline asm
	cvt.rn.bf16.f32 %rs96, %r144;
	// end inline asm
	add.s64 	%rd38, %rd16, %rd30;
	add.s64 	%rd12, %rd38, %rd28;
	add.s64 	%rd13, %rd12, 1024;
	mov.b32 	%r145, {%rs81, %rs82};
	mov.b32 	%r146, {%rs83, %rs84};
	mov.b32 	%r147, {%rs85, %rs86};
	mov.b32 	%r148, {%rs87, %rs88};
	// begin inline asm
	st.global.v4.b32 [ %rd12 + 0 ], { %r145, %r146, %r147, %r148 };
	// end inline asm
	mov.b32 	%r149, {%rs89, %rs90};
	mov.b32 	%r150, {%rs91, %rs92};
	mov.b32 	%r151, {%rs93, %rs94};
	mov.b32 	%r152, {%rs95, %rs96};
	// begin inline asm
	st.global.v4.b32 [ %rd13 + 0 ], { %r149, %r150, %r151, %r152 };
	// end inline asm
	ret;

}
	// .globl	fusion_40
.visible .entry fusion_40(
	.param .u64 .ptr .align 16 fusion_40_param_0,
	.param .u64 .ptr .align 128 fusion_40_param_1,
	.param .u64 .ptr .align 16 fusion_40_param_2,
	.param .u64 .ptr .align 128 fusion_40_param_3,
	.param .u64 .ptr .align 128 fusion_40_param_4,
	.param .u64 .ptr .align 128 fusion_40_param_5,
	.param .u64 .ptr .align 128 fusion_40_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<113>;
	.reg .b32 	%r<197>;
	.reg .f32 	%f<242>;
	.reg .b64 	%rd<44>;

	ld.param.u64 	%rd16, [fusion_40_param_0];
	ld.param.u64 	%rd17, [fusion_40_param_6];
	cvta.to.global.u64 	%rd18, %rd17;
	ld.param.u64 	%rd19, [fusion_40_param_1];
	ld.param.u64 	%rd20, [fusion_40_param_5];
	cvta.to.global.u64 	%rd21, %rd20;
	ld.param.u64 	%rd22, [fusion_40_param_2];
	ld.param.u64 	%rd23, [fusion_40_param_4];
	cvta.to.global.u64 	%rd24, %rd23;
	ld.param.u64 	%rd25, [fusion_40_param_3];
	cvta.to.global.u64 	%rd26, %rd25;
	cvta.to.global.u64 	%rd27, %rd22;
	cvta.to.global.u64 	%rd28, %rd19;
	cvta.to.global.u64 	%rd11, %rd16;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd29, %r1, 1024;
	shl.b64 	%rd30, %rd29, 1;
	add.s64 	%rd31, %rd28, %rd30;
	mov.u32 	%r177, %tid.x;
	and.b32  	%r178, %r177, 31;
	shl.b32 	%r179, %r177, 3;
	and.b32  	%r180, %r179, 248;
	setp.lt.u32 	%p4, %r177, 32;
	selp.b32 	%r181, 0, 256, %p4;
	or.b32  	%r182, %r180, %r181;
	mul.wide.u32 	%rd32, %r182, 2;
	add.s64 	%rd1, %rd31, %rd32;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd33, %r1, 2048;
	shl.b64 	%rd34, %rd33, 1;
	add.s64 	%rd35, %rd24, %rd34;
	add.s64 	%rd3, %rd35, %rd32;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd36, %rd21, %rd30;
	add.s64 	%rd5, %rd36, %rd32;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd7, %rd3, 2048;
	add.s64 	%rd8, %rd3, 3072;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd37, %rd26, %rd30;
	add.s64 	%rd9, %rd37, %rd32;
	add.s64 	%rd10, %rd9, 1024;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.rn.f32 	%f81, %f49, %f65;
	add.rn.f32 	%f82, %f50, %f66;
	add.rn.f32 	%f83, %f51, %f67;
	add.rn.f32 	%f84, %f52, %f68;
	add.rn.f32 	%f85, %f53, %f69;
	add.rn.f32 	%f86, %f54, %f70;
	add.rn.f32 	%f87, %f55, %f71;
	add.rn.f32 	%f88, %f56, %f72;
	add.rn.f32 	%f89, %f57, %f73;
	add.rn.f32 	%f90, %f58, %f74;
	add.rn.f32 	%f91, %f59, %f75;
	add.rn.f32 	%f92, %f60, %f76;
	add.rn.f32 	%f93, %f61, %f77;
	add.rn.f32 	%f94, %f62, %f78;
	add.rn.f32 	%f95, %f63, %f79;
	add.rn.f32 	%f96, %f64, %f80;
	add.rn.f32 	%f97, %f33, %f81;
	add.rn.f32 	%f98, %f34, %f82;
	add.rn.f32 	%f99, %f35, %f83;
	add.rn.f32 	%f100, %f36, %f84;
	add.rn.f32 	%f101, %f37, %f85;
	add.rn.f32 	%f102, %f38, %f86;
	add.rn.f32 	%f103, %f39, %f87;
	add.rn.f32 	%f104, %f40, %f88;
	add.rn.f32 	%f105, %f41, %f89;
	add.rn.f32 	%f106, %f42, %f90;
	add.rn.f32 	%f107, %f43, %f91;
	add.rn.f32 	%f108, %f44, %f92;
	add.rn.f32 	%f109, %f45, %f93;
	add.rn.f32 	%f110, %f46, %f94;
	add.rn.f32 	%f111, %f47, %f95;
	add.rn.f32 	%f112, %f48, %f96;
	add.rn.f32 	%f113, %f17, %f97;
	add.rn.f32 	%f114, %f18, %f98;
	add.rn.f32 	%f115, %f19, %f99;
	add.rn.f32 	%f116, %f20, %f100;
	add.rn.f32 	%f117, %f21, %f101;
	add.rn.f32 	%f118, %f22, %f102;
	add.rn.f32 	%f119, %f23, %f103;
	add.rn.f32 	%f120, %f24, %f104;
	add.rn.f32 	%f121, %f25, %f105;
	add.rn.f32 	%f122, %f26, %f106;
	add.rn.f32 	%f123, %f27, %f107;
	add.rn.f32 	%f124, %f28, %f108;
	add.rn.f32 	%f125, %f29, %f109;
	add.rn.f32 	%f126, %f30, %f110;
	add.rn.f32 	%f127, %f31, %f111;
	add.rn.f32 	%f128, %f32, %f112;
	add.rn.f32 	%f129, %f1, %f113;
	add.rn.f32 	%f130, %f2, %f114;
	add.rn.f32 	%f131, %f3, %f115;
	add.rn.f32 	%f132, %f4, %f116;
	add.rn.f32 	%f133, %f5, %f117;
	add.rn.f32 	%f134, %f6, %f118;
	add.rn.f32 	%f135, %f7, %f119;
	add.rn.f32 	%f136, %f8, %f120;
	add.rn.f32 	%f137, %f9, %f121;
	add.rn.f32 	%f138, %f10, %f122;
	add.rn.f32 	%f139, %f11, %f123;
	add.rn.f32 	%f140, %f12, %f124;
	add.rn.f32 	%f141, %f13, %f125;
	add.rn.f32 	%f142, %f14, %f126;
	add.rn.f32 	%f143, %f15, %f127;
	add.rn.f32 	%f144, %f16, %f128;
	mul.rn.f32 	%f145, %f129, %f129;
	mul.rn.f32 	%f146, %f130, %f130;
	mul.rn.f32 	%f147, %f131, %f131;
	mul.rn.f32 	%f148, %f132, %f132;
	mul.rn.f32 	%f149, %f133, %f133;
	mul.rn.f32 	%f150, %f134, %f134;
	mul.rn.f32 	%f151, %f135, %f135;
	mul.rn.f32 	%f152, %f136, %f136;
	mul.rn.f32 	%f153, %f137, %f137;
	mul.rn.f32 	%f154, %f138, %f138;
	mul.rn.f32 	%f155, %f139, %f139;
	mul.rn.f32 	%f156, %f140, %f140;
	mul.rn.f32 	%f157, %f141, %f141;
	mul.rn.f32 	%f158, %f142, %f142;
	mul.rn.f32 	%f159, %f143, %f143;
	mul.rn.f32 	%f160, %f144, %f144;
	add.rn.f32 	%f161, %f145, %f146;
	add.rn.f32 	%f162, %f161, %f147;
	add.rn.f32 	%f163, %f162, %f148;
	add.rn.f32 	%f164, %f163, %f149;
	add.rn.f32 	%f165, %f164, %f150;
	add.rn.f32 	%f166, %f165, %f151;
	add.rn.f32 	%f167, %f166, %f152;
	add.rn.f32 	%f168, %f167, %f153;
	add.rn.f32 	%f169, %f168, %f154;
	add.rn.f32 	%f170, %f169, %f155;
	add.rn.f32 	%f171, %f170, %f156;
	add.rn.f32 	%f172, %f171, %f157;
	add.rn.f32 	%f173, %f172, %f158;
	add.rn.f32 	%f174, %f173, %f159;
	add.rn.f32 	%f175, %f174, %f160;
	mov.b32 	%r183, %f175;
	shfl.sync.bfly.b32	%r184, %r183, 16, 31, -1;
	mov.b32 	%f176, %r184;
	add.rn.f32 	%f177, %f175, %f176;
	mov.b32 	%r185, %f177;
	shfl.sync.bfly.b32	%r186, %r185, 8, 31, -1;
	mov.b32 	%f178, %r186;
	add.rn.f32 	%f179, %f177, %f178;
	mov.b32 	%r187, %f179;
	shfl.sync.bfly.b32	%r188, %r187, 4, 31, -1;
	mov.b32 	%f180, %r188;
	add.rn.f32 	%f181, %f179, %f180;
	mov.b32 	%r189, %f181;
	shfl.sync.bfly.b32	%r190, %r189, 2, 31, -1;
	mov.b32 	%f182, %r190;
	add.rn.f32 	%f183, %f181, %f182;
	mov.b32 	%r191, %f183;
	shfl.sync.bfly.b32	%r192, %r191, 1, 31, -1;
	mov.b32 	%f184, %r192;
	add.rn.f32 	%f185, %f183, %f184;
	setp.eq.s32 	%p1, %r178, 0;
	shr.u32 	%r193, %r177, 3;
	and.b32  	%r194, %r193, 4;
	cvt.u64.u32 	%rd38, %r194;
	mov.u64 	%rd39, global_smem;
	add.s64 	%rd40, %rd39, %rd38;
	mov.b32 	%r123, %f185;
	cvt.u32.u64 	%r122, %rd40;
	// begin inline asm
	@%p1 st.shared.b32 [ %r122 + 0 ], %r123;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r177, 2;
	shl.b32 	%r195, %r177, 2;
	cvt.u64.u32 	%rd41, %r195;
	add.s64 	%rd42, %rd39, %rd41;
	cvt.u32.u64 	%r125, %rd42;
	// begin inline asm
	@%p2 ld.shared.b32 %r124, [ %r125 + 0 ];
	// end inline asm
	mov.b32 	%f186, %r124;
	shfl.sync.bfly.b32	%r196, %r124, 1, 31, -1;
	mov.b32 	%f187, %r196;
	add.rn.f32 	%f188, %f186, %f187;
	setp.eq.s32 	%p3, %r177, 0;
	mov.b32 	%r127, %f188;
	// begin inline asm
	@%p3 st.shared.b32 [ %r125 + 0 ], %r127;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f189, [global_smem];
	mul.rn.f32 	%f190, %f189, 0f3A800000;
	// begin inline asm
	mov.u32 %r128, 0x0;
	ld.global.b32 { %r128 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	%f191, %r128;
	add.rn.f32 	%f192, %f190, %f191;
	rsqrt.approx.f32 	%f193, %f192;
	mul.rn.f32 	%f194, %f129, %f193;
	mul.rn.f32 	%f195, %f130, %f193;
	mul.rn.f32 	%f196, %f131, %f193;
	mul.rn.f32 	%f197, %f132, %f193;
	mul.rn.f32 	%f198, %f133, %f193;
	mul.rn.f32 	%f199, %f134, %f193;
	mul.rn.f32 	%f200, %f135, %f193;
	mul.rn.f32 	%f201, %f136, %f193;
	mul.rn.f32 	%f202, %f137, %f193;
	mul.rn.f32 	%f203, %f138, %f193;
	mul.rn.f32 	%f204, %f139, %f193;
	mul.rn.f32 	%f205, %f140, %f193;
	mul.rn.f32 	%f206, %f141, %f193;
	mul.rn.f32 	%f207, %f142, %f193;
	mul.rn.f32 	%f208, %f143, %f193;
	mul.rn.f32 	%f209, %f144, %f193;
	add.s64 	%rd12, %rd27, %rd32;
	add.s64 	%rd13, %rd12, 1024;
	// begin inline asm
	mov.u32 %r129, 0x0;
	mov.u32 %r130, 0x0;
	mov.u32 %r131, 0x0;
	mov.u32 %r132, 0x0;
	ld.global.v4.b32 { %r129, %r130, %r131, %r132 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r129;
	mov.b32 	{%rs83, %rs84}, %r130;
	mov.b32 	{%rs85, %rs86}, %r131;
	mov.b32 	{%rs87, %rs88}, %r132;
	// begin inline asm
	mov.u32 %r133, 0x0;
	mov.u32 %r134, 0x0;
	mov.u32 %r135, 0x0;
	mov.u32 %r136, 0x0;
	ld.global.v4.b32 { %r133, %r134, %r135, %r136 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r133;
	mov.b32 	{%rs91, %rs92}, %r134;
	mov.b32 	{%rs93, %rs94}, %r135;
	mov.b32 	{%rs95, %rs96}, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs81;
	// end inline asm
	mov.b32 	%f210, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs82;
	// end inline asm
	mov.b32 	%f211, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs83;
	// end inline asm
	mov.b32 	%f212, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs84;
	// end inline asm
	mov.b32 	%f213, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs85;
	// end inline asm
	mov.b32 	%f214, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs86;
	// end inline asm
	mov.b32 	%f215, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs87;
	// end inline asm
	mov.b32 	%f216, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs88;
	// end inline asm
	mov.b32 	%f217, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs89;
	// end inline asm
	mov.b32 	%f218, %r145;
	// begin inline asm
	cvt.f32.bf16 %r146, %rs90;
	// end inline asm
	mov.b32 	%f219, %r146;
	// begin inline asm
	cvt.f32.bf16 %r147, %rs91;
	// end inline asm
	mov.b32 	%f220, %r147;
	// begin inline asm
	cvt.f32.bf16 %r148, %rs92;
	// end inline asm
	mov.b32 	%f221, %r148;
	// begin inline asm
	cvt.f32.bf16 %r149, %rs93;
	// end inline asm
	mov.b32 	%f222, %r149;
	// begin inline asm
	cvt.f32.bf16 %r150, %rs94;
	// end inline asm
	mov.b32 	%f223, %r150;
	// begin inline asm
	cvt.f32.bf16 %r151, %rs95;
	// end inline asm
	mov.b32 	%f224, %r151;
	// begin inline asm
	cvt.f32.bf16 %r152, %rs96;
	// end inline asm
	mov.b32 	%f225, %r152;
	mul.rn.f32 	%f226, %f194, %f210;
	mul.rn.f32 	%f227, %f195, %f211;
	mul.rn.f32 	%f228, %f196, %f212;
	mul.rn.f32 	%f229, %f197, %f213;
	mul.rn.f32 	%f230, %f198, %f214;
	mul.rn.f32 	%f231, %f199, %f215;
	mul.rn.f32 	%f232, %f200, %f216;
	mul.rn.f32 	%f233, %f201, %f217;
	mul.rn.f32 	%f234, %f202, %f218;
	mul.rn.f32 	%f235, %f203, %f219;
	mul.rn.f32 	%f236, %f204, %f220;
	mul.rn.f32 	%f237, %f205, %f221;
	mul.rn.f32 	%f238, %f206, %f222;
	mul.rn.f32 	%f239, %f207, %f223;
	mul.rn.f32 	%f240, %f208, %f224;
	mul.rn.f32 	%f241, %f209, %f225;
	mov.b32 	%r153, %f226;
	// begin inline asm
	cvt.rn.bf16.f32 %rs97, %r153;
	// end inline asm
	mov.b32 	%r154, %f227;
	// begin inline asm
	cvt.rn.bf16.f32 %rs98, %r154;
	// end inline asm
	mov.b32 	%r155, %f228;
	// begin inline asm
	cvt.rn.bf16.f32 %rs99, %r155;
	// end inline asm
	mov.b32 	%r156, %f229;
	// begin inline asm
	cvt.rn.bf16.f32 %rs100, %r156;
	// end inline asm
	mov.b32 	%r157, %f230;
	// begin inline asm
	cvt.rn.bf16.f32 %rs101, %r157;
	// end inline asm
	mov.b32 	%r158, %f231;
	// begin inline asm
	cvt.rn.bf16.f32 %rs102, %r158;
	// end inline asm
	mov.b32 	%r159, %f232;
	// begin inline asm
	cvt.rn.bf16.f32 %rs103, %r159;
	// end inline asm
	mov.b32 	%r160, %f233;
	// begin inline asm
	cvt.rn.bf16.f32 %rs104, %r160;
	// end inline asm
	mov.b32 	%r161, %f234;
	// begin inline asm
	cvt.rn.bf16.f32 %rs105, %r161;
	// end inline asm
	mov.b32 	%r162, %f235;
	// begin inline asm
	cvt.rn.bf16.f32 %rs106, %r162;
	// end inline asm
	mov.b32 	%r163, %f236;
	// begin inline asm
	cvt.rn.bf16.f32 %rs107, %r163;
	// end inline asm
	mov.b32 	%r164, %f237;
	// begin inline asm
	cvt.rn.bf16.f32 %rs108, %r164;
	// end inline asm
	mov.b32 	%r165, %f238;
	// begin inline asm
	cvt.rn.bf16.f32 %rs109, %r165;
	// end inline asm
	mov.b32 	%r166, %f239;
	// begin inline asm
	cvt.rn.bf16.f32 %rs110, %r166;
	// end inline asm
	mov.b32 	%r167, %f240;
	// begin inline asm
	cvt.rn.bf16.f32 %rs111, %r167;
	// end inline asm
	mov.b32 	%r168, %f241;
	// begin inline asm
	cvt.rn.bf16.f32 %rs112, %r168;
	// end inline asm
	add.s64 	%rd43, %rd18, %rd30;
	add.s64 	%rd14, %rd43, %rd32;
	add.s64 	%rd15, %rd14, 1024;
	mov.b32 	%r169, {%rs97, %rs98};
	mov.b32 	%r170, {%rs99, %rs100};
	mov.b32 	%r171, {%rs101, %rs102};
	mov.b32 	%r172, {%rs103, %rs104};
	// begin inline asm
	st.global.v4.b32 [ %rd14 + 0 ], { %r169, %r170, %r171, %r172 };
	// end inline asm
	mov.b32 	%r173, {%rs105, %rs106};
	mov.b32 	%r174, {%rs107, %rs108};
	mov.b32 	%r175, {%rs109, %rs110};
	mov.b32 	%r176, {%rs111, %rs112};
	// begin inline asm
	st.global.v4.b32 [ %rd15 + 0 ], { %r173, %r174, %r175, %r176 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 126976;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	fusion_34
.visible .entry fusion_34(
	.param .u64 .ptr .align 16 fusion_34_param_0,
	.param .u64 .ptr .align 128 fusion_34_param_1,
	.param .u64 .ptr .align 16 fusion_34_param_2,
	.param .u64 .ptr .align 128 fusion_34_param_3
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<78>;
	.reg .f32 	%f<60>;
	.reg .b64 	%rd<43>;

	ld.param.u64 	%rd6, [fusion_34_param_0];
	ld.param.u64 	%rd7, [fusion_34_param_3];
	cvta.to.global.u64 	%rd8, %rd7;
	ld.param.u64 	%rd9, [fusion_34_param_1];
	ld.param.u64 	%rd10, [fusion_34_param_2];
	cvta.to.global.u64 	%rd11, %rd10;
	cvta.to.global.u64 	%rd12, %rd9;
	cvta.to.global.u64 	%rd2, %rd6;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r43, %r1, 9;
	cvt.u64.u32 	%rd13, %r43;
	and.b64  	%rd14, %rd13, 512;
	mul.wide.s32 	%rd15, %r1, 2048;
	or.b64  	%rd16, %rd15, %rd14;
	shl.b64 	%rd17, %rd16, 1;
	or.b64  	%rd18, %rd17, 4096;
	add.s64 	%rd19, %rd12, %rd18;
	mov.u32 	%r44, %tid.x;
	shl.b32 	%r45, %r44, 3;
	and.b32  	%r46, %r45, 120;
	and.b32  	%r47, %r45, 248;
	setp.gt.u32 	%p4, %r44, 31;
	selp.b32 	%r48, 256, 0, %p4;
	or.b32  	%r49, %r47, %r48;
	mul.wide.u32 	%rd20, %r49, 2;
	add.s64 	%rd1, %rd19, %rd20;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs1;
	// end inline asm
	mov.b32 	%f1, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs2;
	// end inline asm
	mov.b32 	%f2, %r7;
	// begin inline asm
	cvt.f32.bf16 %r8, %rs3;
	// end inline asm
	mov.b32 	%f3, %r8;
	// begin inline asm
	cvt.f32.bf16 %r9, %rs4;
	// end inline asm
	mov.b32 	%f4, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	mul.rn.f32 	%f9, %f1, %f1;
	mul.rn.f32 	%f10, %f2, %f2;
	mul.rn.f32 	%f11, %f3, %f3;
	mul.rn.f32 	%f12, %f4, %f4;
	mul.rn.f32 	%f13, %f5, %f5;
	mul.rn.f32 	%f14, %f6, %f6;
	mul.rn.f32 	%f15, %f7, %f7;
	mul.rn.f32 	%f16, %f8, %f8;
	add.rn.f32 	%f17, %f9, %f10;
	add.rn.f32 	%f18, %f17, %f11;
	add.rn.f32 	%f19, %f18, %f12;
	add.rn.f32 	%f20, %f19, %f13;
	add.rn.f32 	%f21, %f20, %f14;
	add.rn.f32 	%f22, %f21, %f15;
	add.rn.f32 	%f23, %f22, %f16;
	mov.b32 	%r50, %f23;
	shfl.sync.bfly.b32	%r51, %r50, 8, 31, -1;
	mov.b32 	%f24, %r51;
	add.rn.f32 	%f25, %f23, %f24;
	mov.b32 	%r52, %f25;
	shfl.sync.bfly.b32	%r53, %r52, 4, 31, -1;
	mov.b32 	%f26, %r53;
	add.rn.f32 	%f27, %f25, %f26;
	mov.b32 	%r54, %f27;
	shfl.sync.bfly.b32	%r55, %r54, 2, 31, -1;
	mov.b32 	%f28, %r55;
	add.rn.f32 	%f29, %f27, %f28;
	mov.b32 	%r56, %f29;
	shfl.sync.bfly.b32	%r57, %r56, 1, 31, -1;
	mov.b32 	%f30, %r57;
	add.rn.f32 	%f31, %f29, %f30;
	mul.rn.f32 	%f32, %f31, 0f3C000000;
	// begin inline asm
	mov.u32 %r14, 0x0;
	ld.global.b32 { %r14 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r14;
	add.rn.f32 	%f34, %f32, %f33;
	rsqrt.approx.f32 	%f35, %f34;
	mul.rn.f32 	%f36, %f1, %f35;
	mul.rn.f32 	%f37, %f2, %f35;
	mul.rn.f32 	%f38, %f3, %f35;
	mul.rn.f32 	%f39, %f4, %f35;
	mul.rn.f32 	%f40, %f5, %f35;
	mul.rn.f32 	%f41, %f6, %f35;
	mul.rn.f32 	%f42, %f7, %f35;
	mul.rn.f32 	%f43, %f8, %f35;
	shl.b32 	%r58, %r44, 1;
	and.b32  	%r59, %r58, 62;
	selp.b32 	%r60, 64, 0, %p4;
	or.b32  	%r61, %r59, %r60;
	shl.b32 	%r62, %r44, 2;
	and.b32  	%r63, %r62, 124;
	cvt.u64.u32 	%rd21, %r63;
	mul.wide.u32 	%rd22, %r61, 2;
	add.s64 	%rd3, %rd11, %rd22;
	// begin inline asm
	mov.u32 %r15, 0x0;
	ld.global.b32 { %r15 }, [ %rd3 + 0 ];
	// end inline asm
	{ .reg .b16 tmp; mov.b32 {tmp, %rs10}, %r15; }
	mov.u64 	%rd23, global_smem;
	add.s64 	%rd24, %rd23, %rd22;
	cvt.u16.u32 	%rs9, %r15;
	cvt.u32.u64 	%r16, %rd24;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r16 + 0 ], { %rs9, %rs10 };
	// end inline asm
	bar.sync 	0;
	mul.wide.u32 	%rd25, %r46, 2;
	add.s64 	%rd26, %rd23, %rd25;
	ld.shared.v4.b32 	{%r64, %r65, %r66, %r67}, [%rd26];
	mov.b32 	{%rs17, %rs18}, %r67;
	mov.b32 	{%rs15, %rs16}, %r66;
	mov.b32 	{%rs13, %rs14}, %r65;
	mov.b32 	{%rs11, %rs12}, %r64;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs11;
	// end inline asm
	mov.b32 	%f44, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs12;
	// end inline asm
	mov.b32 	%f45, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs13;
	// end inline asm
	mov.b32 	%f46, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs14;
	// end inline asm
	mov.b32 	%f47, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs15;
	// end inline asm
	mov.b32 	%f48, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs16;
	// end inline asm
	mov.b32 	%f49, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs17;
	// end inline asm
	mov.b32 	%f50, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs18;
	// end inline asm
	mov.b32 	%f51, %r24;
	mul.rn.f32 	%f52, %f36, %f44;
	mul.rn.f32 	%f53, %f37, %f45;
	mul.rn.f32 	%f54, %f38, %f46;
	mul.rn.f32 	%f55, %f39, %f47;
	mul.rn.f32 	%f56, %f40, %f48;
	mul.rn.f32 	%f57, %f41, %f49;
	mul.rn.f32 	%f58, %f42, %f50;
	mul.rn.f32 	%f59, %f43, %f51;
	add.s64 	%rd27, %rd8, %rd15;
	selp.b64 	%rd28, 128, 0, %p4;
	selp.b64 	%rd29, 384, 256, %p4;
	or.b64  	%rd30, %rd28, %rd21;
	or.b64  	%rd31, %rd29, %rd21;
	shl.b64 	%rd32, %rd30, 2;
	add.s64 	%rd4, %rd27, %rd32;
	shl.b64 	%rd33, %rd31, 2;
	add.s64 	%rd5, %rd27, %rd33;
	bar.sync 	0;
	selp.b32 	%r68, 128, 0, %p4;
	or.b32  	%r69, %r63, %r68;
	shr.u32 	%r70, %r49, 4;
	and.b32  	%r71, %r70, 24;
	add.s32 	%r72, %r71, %r49;
	shl.b32 	%r73, %r72, 2;
	cvt.u64.u32 	%rd34, %r73;
	add.s64 	%rd35, %rd23, %rd34;
	mov.b32 	%r26, %f52;
	mov.b32 	%r27, %f53;
	mov.b32 	%r28, %f54;
	mov.b32 	%r29, %f55;
	mov.b32 	%r31, %f56;
	mov.b32 	%r32, %f57;
	mov.b32 	%r33, %f58;
	mov.b32 	%r34, %f59;
	cvt.u32.u64 	%r25, %rd35;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r25 + 0 ], { %r26, %r27, %r28, %r29 };
	// end inline asm
	add.s32 	%r30, %r25, 16;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r30 + 0 ], { %r31, %r32, %r33, %r34 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r74, %r68, 4;
	add.s32 	%r75, %r74, %r69;
	mul.wide.u32 	%rd36, %r75, 4;
	add.s64 	%rd37, %rd23, %rd36;
	or.b32  	%r76, %r68, 256;
	shr.u32 	%r77, %r76, 4;
	cvt.u64.u32 	%rd38, %r77;
	cvt.u64.u32 	%rd39, %r69;
	add.s64 	%rd40, %rd38, %rd39;
	shl.b64 	%rd41, %rd40, 2;
	add.s64 	%rd42, %rd23, %rd41;
	ld.shared.v4.u32 	{%r39, %r40, %r41, %r42}, [%rd42+1024];
	ld.shared.v4.u32 	{%r35, %r36, %r37, %r38}, [%rd37];
	// begin inline asm
	st.global.v4.b32 [ %rd4 + 0 ], { %r35, %r36, %r37, %r38 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd5 + 0 ], { %r39, %r40, %r41, %r42 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_3
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<11>;
	.reg .b64 	%rd<19>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd6, %rd5;
	cvta.to.global.u64 	%rd7, %rd4;
	cvta.to.global.u64 	%rd8, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd9, %r8, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd11, %r9;
	add.s64 	%rd12, %rd6, %rd11;
	ld.global.nc.u32 	%r10, [%rd12];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd13, %r14, 2;
	add.s64 	%rd14, %rd7, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	ld.global.nc.f32 	%f4, [%rd10+256];
	or.b32  	%r15, %r1, %r13;
	or.b32  	%r16, %r15, 64;
	mul.wide.u32 	%rd15, %r16, 2;
	add.s64 	%rd16, %rd7, %rd15;
	ld.global.nc.u16 	%rs2, [%rd16];
	cvt.f32.bf16 	%f5, %rs2;
	mul.rn.f32 	%f6, %f4, %f5;
	sub.rn.f32 	%f7, %f3, %f6;
	cvt.rn.bf16.f32 	%rs3, %f7;
	mul.wide.u32 	%rd17, %r8, 2;
	add.s64 	%rd18, %rd3, %rd17;
	st.global.b16 	[%rd18], %rs3;
	mul.rn.f32 	%f8, %f4, %f2;
	mul.rn.f32 	%f9, %f1, %f5;
	add.rn.f32 	%f10, %f8, %f9;
	cvt.rn.bf16.f32 	%rs4, %f10;
	st.global.b16 	[%rd18+128], %rs4;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

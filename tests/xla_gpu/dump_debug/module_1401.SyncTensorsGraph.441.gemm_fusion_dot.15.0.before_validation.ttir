module {
  tt.func @gemm_fusion_dot_15_0_impl(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32>
    %0 = tt.get_program_id x : i32
    %c8_i32 = arith.constant 8 : i32
    %1 = arith.divsi %0, %c8_i32 : i32
    %c8_i32_0 = arith.constant 8 : i32
    %2 = arith.muli %1, %c8_i32_0 : i32
    %c64_i32 = arith.constant 64 : i32
    %3 = arith.subi %c64_i32, %2 : i32
    %4 = arith.cmpi slt, %3, %c8_i32_0 : i32
    %5 = arith.select %4, %3, %c8_i32_0 : i32
    %6 = arith.remsi %0, %5 : i32
    %7 = arith.addi %2, %6 : i32
    %c8_i32_1 = arith.constant 8 : i32
    %8 = arith.remsi %0, %c8_i32_1 : i32
    %9 = arith.divsi %8, %5 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c3072_i32 = arith.constant 3072 : i32
    %c64_i32_2 = arith.constant 64 : i32
    %10 = arith.muli %7, %c64_i32_2 : i32
    %11 = arith.cmpi slt, %10, %c1024_i32 : i32
    %12 = arith.select %11, %arg0, %arg1 : !tt.ptr<bf16>
    %13 = arith.cmpi slt, %10, %c2048_i32 : i32
    %14 = arith.select %13, %12, %arg2 : !tt.ptr<bf16>
    %15 = arith.cmpi slt, %10, %c3072_i32 : i32
    %16 = arith.select %15, %14, %arg3 : !tt.ptr<bf16>
    %c64_i32_3 = arith.constant 64 : i32
    %17 = arith.muli %7, %c64_i32_3 : i32
    %c2048_i64 = arith.constant 2048 : i64
    %c0_i32 = arith.constant 0 : i32
    %18 = arith.addi %17, %c0_i32 : i32
    %c1024_i64 = arith.constant 1024 : i64
    %c2048_i64_4 = arith.constant 2048 : i64
    %c-1024_i32 = arith.constant -1024 : i32
    %19 = arith.addi %17, %c-1024_i32 : i32
    %c1024_i64_5 = arith.constant 1024 : i64
    %c2048_i64_6 = arith.constant 2048 : i64
    %c-2048_i32 = arith.constant -2048 : i32
    %20 = arith.addi %17, %c-2048_i32 : i32
    %c1024_i64_7 = arith.constant 1024 : i64
    %c2048_i64_8 = arith.constant 2048 : i64
    %c-3072_i32 = arith.constant -3072 : i32
    %21 = arith.addi %17, %c-3072_i32 : i32
    %c1024_i64_9 = arith.constant 1024 : i64
    %22 = arith.cmpi slt, %10, %c1024_i32 : i32
    %23 = arith.select %22, %c2048_i64, %c2048_i64_4 : i64
    %24 = arith.cmpi slt, %10, %c2048_i32 : i32
    %25 = arith.select %24, %23, %c2048_i64_6 : i64
    %26 = arith.cmpi slt, %10, %c3072_i32 : i32
    %27 = arith.select %26, %25, %c2048_i64_8 : i64
    %28 = arith.cmpi slt, %17, %c1024_i32 : i32
    %29 = arith.select %28, %18, %19 : i32
    %30 = arith.cmpi slt, %17, %c2048_i32 : i32
    %31 = arith.select %30, %29, %20 : i32
    %32 = arith.cmpi slt, %17, %c3072_i32 : i32
    %33 = arith.select %32, %31, %21 : i32
    %34 = arith.cmpi slt, %17, %c1024_i32 : i32
    %35 = arith.select %34, %c1024_i64, %c1024_i64_5 : i64
    %36 = arith.cmpi slt, %17, %c2048_i32 : i32
    %37 = arith.select %36, %35, %c1024_i64_7 : i64
    %38 = arith.cmpi slt, %17, %c3072_i32 : i32
    %39 = arith.select %38, %37, %c1024_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %40 = arith.addi %c0_i32_11, %c0_i32_12 : i32
    %c2048_i64_13 = arith.constant 2048 : i64
    %c1_i64_14 = arith.constant 1 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %41 = arith.addi %c0_i32_11, %c0_i32_15 : i32
    %c2048_i64_16 = arith.constant 2048 : i64
    %c1_i64_17 = arith.constant 1 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %42 = arith.addi %c0_i32_11, %c0_i32_18 : i32
    %c2048_i64_19 = arith.constant 2048 : i64
    %c1_i64_20 = arith.constant 1 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %43 = arith.addi %c0_i32_11, %c0_i32_21 : i32
    %c2048_i64_22 = arith.constant 2048 : i64
    %44 = arith.cmpi slt, %10, %c1024_i32 : i32
    %45 = arith.select %44, %c1_i64, %c1_i64_14 : i64
    %46 = arith.cmpi slt, %10, %c2048_i32 : i32
    %47 = arith.select %46, %45, %c1_i64_17 : i64
    %48 = arith.cmpi slt, %10, %c3072_i32 : i32
    %49 = arith.select %48, %47, %c1_i64_20 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %c2048_i64_24 = arith.constant 2048 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %c0_i32_26 = arith.constant 0 : i32
    %c0_i32_27 = arith.constant 0 : i32
    %c0_i32_28 = arith.constant 0 : i32
    %50 = arith.cmpi slt, %10, %c1024_i32 : i32
    %51 = arith.select %50, %c0_i32_25, %c0_i32_26 : i32
    %52 = arith.cmpi slt, %10, %c2048_i32 : i32
    %53 = arith.select %52, %51, %c0_i32_27 : i32
    %54 = arith.cmpi slt, %10, %c3072_i32 : i32
    %55 = arith.select %54, %53, %c0_i32_28 : i32
    %56 = tt.make_tensor_ptr %16, [%39, %c2048_i64_24], [%27, %49], [%c0_i32_10, %c0_i32_23] {order = array<i32: 1, 0>} : <tensor<64x128xbf16>>
    %57 = tt.advance %56, [%33, %c0_i32_11] : <tensor<64x128xbf16>>
    %c128_i32 = arith.constant 128 : i32
    %c2048_i32_29 = arith.constant 2048 : i32
    %c0_i32_30 = arith.constant 0 : i32
    %58:2 = scf.for %arg5 = %c0_i32_30 to %c2048_i32_29 step %c128_i32 iter_args(%arg6 = %57, %arg7 = %cst) -> (!tt.ptr<tensor<64x128xbf16>>, tensor<64x32xf32>)  : i32 {
      %66 = tt.load %arg6 : !tt.ptr<tensor<64x128xbf16>>
      %c0_i32_41 = arith.constant 0 : i32
      %c128_i32_42 = arith.constant 128 : i32
      %67 = tt.advance %arg6, [%c0_i32_41, %c128_i32_42] : <tensor<64x128xbf16>>
      %cst_43 = arith.constant 0.000000e+00 : bf16
      %68 = tt.splat %cst_43 : bf16 -> tensor<bf16>
      %69 = tt.expand_dims %68 {axis = 0 : i32} : tensor<bf16> -> tensor<1xbf16>
      %70 = tt.expand_dims %69 {axis = 1 : i32} : tensor<1xbf16> -> tensor<1x1xbf16>
      %71 = tt.broadcast %70 : tensor<1x1xbf16> -> tensor<128x32xbf16>
      %72 = tt.dot %66, %71, %arg7, inputPrecision = tf32 : tensor<64x128xbf16> * tensor<128x32xbf16> -> tensor<64x32xf32>
      scf.yield %67, %72 : !tt.ptr<tensor<64x128xbf16>>, tensor<64x32xf32>
    }
    %59 = arith.truncf %58#1 : tensor<64x32xf32> to tensor<64x32xbf16>
    %c64_i32_31 = arith.constant 64 : i32
    %60 = arith.muli %7, %c64_i32_31 : i32
    %c1_i64_32 = arith.constant 1 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %61 = arith.addi %60, %c0_i32_33 : i32
    %c4096_i64 = arith.constant 4096 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %c4096_i64_35 = arith.constant 4096 : i64
    %c32_i32 = arith.constant 32 : i32
    %62 = arith.muli %9, %c32_i32 : i32
    %c4096_i64_36 = arith.constant 4096 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %63 = arith.addi %62, %c0_i32_37 : i32
    %c32_i64 = arith.constant 32 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %c32_i64_39 = arith.constant 32 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %64 = tt.make_tensor_ptr %arg4, [%c4096_i64_35, %c32_i64_39], [%c1_i64_32, %c4096_i64_36], [%c0_i32_34, %c0_i32_38] {order = array<i32: 1, 0>} : <tensor<64x32xbf16>>
    %65 = tt.advance %64, [%60, %62] : <tensor<64x32xbf16>>
    tt.store %65, %59 : !tt.ptr<tensor<64x32xbf16>>
    tt.return
  }
}

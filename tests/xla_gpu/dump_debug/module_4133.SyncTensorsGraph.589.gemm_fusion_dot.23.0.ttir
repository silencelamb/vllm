module {
  tt.func @gemm_fusion_dot_23_0_impl(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xbf16>
    %c128_i64 = arith.constant 128 : i64
    %c128_i32 = arith.constant 128 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c64_i32 = arith.constant 64 : i32
    %c6144_i64 = arith.constant 6144 : i64
    %c32_i32 = arith.constant 32 : i32
    %c2048_i64 = arith.constant 2048 : i64
    %c1_i64 = arith.constant 1 : i64
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c8_i32 = arith.constant 8 : i32
    %c1536_i32 = arith.constant 1536 : i32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x32xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.divsi %0, %c1536_i32 : i32
    %2 = arith.muli %1, %c8_i32 : i32
    %3 = arith.subi %c1_i32, %2 : i32
    %4 = arith.cmpi slt, %3, %c8_i32 : i32
    %5 = arith.select %4, %3, %c8_i32 : i32
    %6 = arith.remsi %0, %5 : i32
    %7 = arith.addi %2, %6 : i32
    %8 = arith.remsi %0, %c1536_i32 : i32
    %9 = arith.divsi %8, %5 : i32
    %10 = arith.muli %9, %c32_i32 : i32
    %11 = tt.make_tensor_ptr %arg0, [%c2048_i64, %c6144_i64], [%c1_i64, %c2048_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<64x32xbf16>>
    %12 = tt.advance %11, [%c0_i32, %10] : <tensor<64x32xbf16>>
    %13:2 = scf.for %arg2 = %c0_i32 to %c2048_i32 step %c64_i32 iter_args(%arg3 = %12, %arg4 = %cst_0) -> (!tt.ptr<tensor<64x32xbf16>>, tensor<128x32xf32>)  : i32 {
      %18 = tt.load %arg3 : !tt.ptr<tensor<64x32xbf16>>
      %19 = tt.advance %arg3, [%c64_i32, %c0_i32] : <tensor<64x32xbf16>>
      %20 = tt.dot %cst, %18, %arg4, inputPrecision = tf32 : tensor<128x64xbf16> * tensor<64x32xbf16> -> tensor<128x32xf32>
      scf.yield %19, %20 : !tt.ptr<tensor<64x32xbf16>>, tensor<128x32xf32>
    }
    %14 = arith.truncf %13#1 : tensor<128x32xf32> to tensor<128x32xbf16>
    %15 = arith.muli %7, %c128_i32 : i32
    %16 = tt.make_tensor_ptr %arg1, [%c128_i64, %c6144_i64], [%c6144_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<128x32xbf16>>
    %17 = tt.advance %16, [%15, %10] : <tensor<128x32xbf16>>
    tt.store %17, %14 : !tt.ptr<tensor<128x32xbf16>>
    tt.return
  }
}

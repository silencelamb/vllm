//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	gemm_fusion_dot_11_0
.visible .entry gemm_fusion_dot_11_0(
	.param .u64 .ptr .align 16 gemm_fusion_dot_11_0_param_0,
	.param .u64 .ptr .align 16 gemm_fusion_dot_11_0_param_1,
	.param .u64 .ptr .align 16 gemm_fusion_dot_11_0_param_2,
	.param .u64 .ptr .align 128 gemm_fusion_dot_11_0_param_3
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<25>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<562>;
	.reg .f32 	%f<337>;
	.reg .b64 	%rd<283>;

	ld.param.u64 	%rd78, [gemm_fusion_dot_11_0_param_0];
	ld.param.u64 	%rd79, [gemm_fusion_dot_11_0_param_3];
	cvta.to.global.u64 	%rd1, %rd79;
	ld.param.u64 	%rd80, [gemm_fusion_dot_11_0_param_1];
	ld.param.u64 	%rd81, [gemm_fusion_dot_11_0_param_2];
	cvta.to.global.u64 	%rd82, %rd81;
	cvta.to.global.u64 	%rd83, %rd80;
	cvta.to.global.u64 	%rd84, %rd78;
	// begin inline asm
	mov.u32 %r16, %ctaid.x;
	// end inline asm
	shr.s32 	%r68, %r16, 31;
	shr.u32 	%r69, %r68, 29;
	add.s32 	%r70, %r16, %r69;
	shr.s32 	%r2, %r70, 3;
	and.b32  	%r71, %r70, -8;
	sub.s32 	%r72, 48, %r71;
	min.s32 	%r3, %r72, 8;
	rem.s32 	%r73, %r16, %r3;
	add.s32 	%r74, %r71, %r73;
	shl.b32 	%r4, %r74, 6;
	setp.lt.s32 	%p1, %r4, 1024;
	selp.b64 	%rd85, %rd84, %rd83, %p1;
	setp.lt.s32 	%p2, %r4, 2048;
	selp.b64 	%rd86, %rd85, %rd82, %p2;
	add.s32 	%r75, %r4, -1024;
	add.s32 	%r76, %r4, -2048;
	selp.b32 	%r77, %r4, %r75, %p1;
	selp.b32 	%r78, %r77, %r76, %p2;
	cvt.s64.s32 	%rd87, %r78;
	mov.u32 	%r5, %tid.x;
	and.b32  	%r6, %r5, 16;
	bfe.s32 	%r79, %r5, 4, 1;
	and.b32  	%r7, %r5, 32;
	bfe.s32 	%r80, %r5, 5, 1;
	bfe.u32 	%r81, %r5, 4, 2;
	setp.lt.u32 	%p3, %r5, 64;
	selp.b32 	%r82, 0, 4, %p3;
	or.b32  	%r83, %r81, %r82;
	or.b32  	%r84, %r83, 8;
	or.b32  	%r85, %r83, 16;
	or.b32  	%r86, %r83, 24;
	or.b32  	%r87, %r83, 32;
	or.b32  	%r88, %r83, 40;
	or.b32  	%r89, %r83, 48;
	or.b32  	%r90, %r83, 56;
	cvt.u64.u32 	%rd88, %r83;
	cvt.u64.u32 	%rd89, %r84;
	cvt.u64.u32 	%rd90, %r85;
	cvt.u64.u32 	%rd91, %r86;
	cvt.u64.u32 	%rd92, %r87;
	cvt.u64.u32 	%rd93, %r88;
	cvt.u64.u32 	%rd94, %r89;
	cvt.u64.u32 	%rd95, %r90;
	or.b64  	%rd96, %rd87, %rd88;
	or.b64  	%rd97, %rd87, %rd89;
	or.b64  	%rd98, %rd87, %rd90;
	or.b64  	%rd99, %rd87, %rd91;
	or.b64  	%rd100, %rd87, %rd92;
	or.b64  	%rd101, %rd87, %rd93;
	or.b64  	%rd102, %rd87, %rd94;
	or.b64  	%rd103, %rd87, %rd95;
	shl.b64 	%rd104, %rd96, 11;
	shl.b64 	%rd105, %rd97, 11;
	shl.b64 	%rd106, %rd98, 11;
	shl.b64 	%rd107, %rd99, 11;
	shl.b64 	%rd108, %rd100, 11;
	shl.b64 	%rd109, %rd101, 11;
	shl.b64 	%rd110, %rd102, 11;
	shl.b64 	%rd111, %rd103, 11;
	and.b32  	%r91, %r5, 1;
	neg.s32 	%r92, %r91;
	bfe.s32 	%r93, %r5, 1, 1;
	bfe.s32 	%r94, %r5, 2, 1;
	shl.b32 	%r8, %r5, 3;
	and.b32  	%r95, %r8, 120;
	cvt.u64.u32 	%rd112, %r95;
	or.b64  	%rd113, %rd104, %rd112;
	or.b64  	%rd114, %rd105, %rd112;
	or.b64  	%rd115, %rd106, %rd112;
	or.b64  	%rd116, %rd107, %rd112;
	or.b64  	%rd117, %rd108, %rd112;
	or.b64  	%rd118, %rd109, %rd112;
	or.b64  	%rd119, %rd110, %rd112;
	or.b64  	%rd120, %rd111, %rd112;
	shl.b64 	%rd121, %rd113, 1;
	add.s64 	%rd53, %rd86, %rd121;
	shl.b64 	%rd122, %rd114, 1;
	add.s64 	%rd54, %rd86, %rd122;
	shl.b64 	%rd123, %rd115, 1;
	add.s64 	%rd55, %rd86, %rd123;
	shl.b64 	%rd124, %rd116, 1;
	add.s64 	%rd56, %rd86, %rd124;
	shl.b64 	%rd125, %rd117, 1;
	add.s64 	%rd57, %rd86, %rd125;
	shl.b64 	%rd126, %rd118, 1;
	add.s64 	%rd58, %rd86, %rd126;
	shl.b64 	%rd127, %rd119, 1;
	add.s64 	%rd59, %rd86, %rd127;
	shl.b64 	%rd128, %rd120, 1;
	add.s64 	%rd60, %rd86, %rd128;
	and.b32  	%r96, %r79, 136;
	and.b32  	%r97, %r80, 272;
	selp.b32 	%r98, 0, 544, %p3;
	or.b32  	%r99, %r96, %r98;
	xor.b32  	%r100, %r99, %r95;
	xor.b32  	%r101, %r100, %r97;
	cvt.u64.u32 	%rd2, %r101;
	mul.wide.u32 	%rd129, %r101, 2;
	mov.u64 	%rd77, global_smem;
	add.s64 	%rd130, %rd77, %rd129;
	or.b32  	%r102, %r95, 1024;
	xor.b32  	%r103, %r99, %r102;
	xor.b32  	%r104, %r103, %r97;
	cvt.u64.u32 	%rd3, %r104;
	mul.wide.u32 	%rd131, %r104, 2;
	add.s64 	%rd132, %rd77, %rd131;
	or.b32  	%r105, %r95, 2048;
	xor.b32  	%r106, %r99, %r105;
	xor.b32  	%r107, %r106, %r97;
	cvt.u64.u32 	%rd4, %r107;
	mul.wide.u32 	%rd133, %r107, 2;
	add.s64 	%rd134, %rd77, %rd133;
	or.b32  	%r108, %r95, 3072;
	xor.b32  	%r109, %r99, %r108;
	xor.b32  	%r110, %r109, %r97;
	cvt.u64.u32 	%rd5, %r110;
	mul.wide.u32 	%rd135, %r110, 2;
	add.s64 	%rd136, %rd77, %rd135;
	or.b32  	%r111, %r95, 4096;
	xor.b32  	%r112, %r99, %r111;
	xor.b32  	%r113, %r112, %r97;
	cvt.u64.u32 	%rd6, %r113;
	mul.wide.u32 	%rd137, %r113, 2;
	add.s64 	%rd138, %rd77, %rd137;
	or.b32  	%r114, %r95, 5120;
	xor.b32  	%r115, %r99, %r114;
	xor.b32  	%r116, %r115, %r97;
	cvt.u64.u32 	%rd7, %r116;
	mul.wide.u32 	%rd139, %r116, 2;
	add.s64 	%rd140, %rd77, %rd139;
	or.b32  	%r117, %r95, 6144;
	xor.b32  	%r118, %r99, %r117;
	xor.b32  	%r119, %r118, %r97;
	cvt.u64.u32 	%rd8, %r119;
	mul.wide.u32 	%rd141, %r119, 2;
	add.s64 	%rd142, %rd77, %rd141;
	or.b32  	%r120, %r95, 7168;
	xor.b32  	%r121, %r99, %r120;
	xor.b32  	%r122, %r121, %r97;
	cvt.u64.u32 	%rd9, %r122;
	mul.wide.u32 	%rd143, %r122, 2;
	add.s64 	%rd144, %rd77, %rd143;
	cvt.u32.u64 	%r17, %rd130;
	mov.b32 	%r18, 16;
	// begin inline asm
	cp.async.cg.shared.global [ %r17 + 0 ], [ %rd53 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r19, %rd132;
	// begin inline asm
	cp.async.cg.shared.global [ %r19 + 0 ], [ %rd54 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r21, %rd134;
	// begin inline asm
	cp.async.cg.shared.global [ %r21 + 0 ], [ %rd55 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r23, %rd136;
	// begin inline asm
	cp.async.cg.shared.global [ %r23 + 0 ], [ %rd56 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r25, %rd138;
	// begin inline asm
	cp.async.cg.shared.global [ %r25 + 0 ], [ %rd57 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r27, %rd140;
	// begin inline asm
	cp.async.cg.shared.global [ %r27 + 0 ], [ %rd58 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r29, %rd142;
	// begin inline asm
	cp.async.cg.shared.global [ %r29 + 0 ], [ %rd59 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r31, %rd144;
	// begin inline asm
	cp.async.cg.shared.global [ %r31 + 0 ], [ %rd60 + 0 ], 0x10, %r18;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	mul.wide.u32 	%rd145, %r95, 2;
	shl.b64 	%rd146, %rd96, 12;
	add.s64 	%rd147, %rd146, %rd86;
	add.s64 	%rd148, %rd147, %rd145;
	add.s64 	%rd61, %rd148, 256;
	shl.b64 	%rd149, %rd97, 12;
	add.s64 	%rd150, %rd149, %rd86;
	add.s64 	%rd151, %rd150, %rd145;
	add.s64 	%rd62, %rd151, 256;
	shl.b64 	%rd152, %rd98, 12;
	add.s64 	%rd153, %rd152, %rd86;
	add.s64 	%rd154, %rd153, %rd145;
	add.s64 	%rd63, %rd154, 256;
	shl.b64 	%rd155, %rd99, 12;
	add.s64 	%rd156, %rd155, %rd86;
	add.s64 	%rd157, %rd156, %rd145;
	add.s64 	%rd64, %rd157, 256;
	shl.b64 	%rd158, %rd100, 12;
	add.s64 	%rd159, %rd158, %rd86;
	add.s64 	%rd160, %rd159, %rd145;
	add.s64 	%rd65, %rd160, 256;
	shl.b64 	%rd161, %rd101, 12;
	add.s64 	%rd162, %rd161, %rd86;
	add.s64 	%rd163, %rd162, %rd145;
	add.s64 	%rd66, %rd163, 256;
	shl.b64 	%rd164, %rd102, 12;
	add.s64 	%rd165, %rd164, %rd86;
	add.s64 	%rd166, %rd165, %rd145;
	add.s64 	%rd67, %rd166, 256;
	shl.b64 	%rd167, %rd103, 12;
	add.s64 	%rd168, %rd167, %rd86;
	add.s64 	%rd169, %rd168, %rd145;
	add.s64 	%rd68, %rd169, 256;
	bar.sync 	0;
	add.s64 	%rd170, %rd77, 16384;
	add.s64 	%rd171, %rd170, %rd129;
	add.s64 	%rd172, %rd170, %rd131;
	add.s64 	%rd173, %rd170, %rd133;
	add.s64 	%rd174, %rd170, %rd135;
	add.s64 	%rd175, %rd170, %rd137;
	add.s64 	%rd176, %rd170, %rd139;
	add.s64 	%rd177, %rd170, %rd141;
	add.s64 	%rd178, %rd170, %rd143;
	cvt.u32.u64 	%r33, %rd171;
	// begin inline asm
	cp.async.cg.shared.global [ %r33 + 0 ], [ %rd61 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r35, %rd172;
	// begin inline asm
	cp.async.cg.shared.global [ %r35 + 0 ], [ %rd62 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r37, %rd173;
	// begin inline asm
	cp.async.cg.shared.global [ %r37 + 0 ], [ %rd63 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r39, %rd174;
	// begin inline asm
	cp.async.cg.shared.global [ %r39 + 0 ], [ %rd64 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r41, %rd175;
	// begin inline asm
	cp.async.cg.shared.global [ %r41 + 0 ], [ %rd65 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r43, %rd176;
	// begin inline asm
	cp.async.cg.shared.global [ %r43 + 0 ], [ %rd66 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r45, %rd177;
	// begin inline asm
	cp.async.cg.shared.global [ %r45 + 0 ], [ %rd67 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r47, %rd178;
	// begin inline asm
	cp.async.cg.shared.global [ %r47 + 0 ], [ %rd68 + 0 ], 0x10, %r18;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s64 	%rd69, %rd148, 512;
	add.s64 	%rd70, %rd151, 512;
	add.s64 	%rd71, %rd154, 512;
	add.s64 	%rd72, %rd157, 512;
	add.s64 	%rd73, %rd160, 512;
	add.s64 	%rd74, %rd163, 512;
	add.s64 	%rd75, %rd166, 512;
	add.s64 	%rd76, %rd169, 512;
	bar.sync 	0;
	add.s64 	%rd179, %rd77, 32768;
	add.s64 	%rd180, %rd179, %rd129;
	add.s64 	%rd181, %rd179, %rd131;
	add.s64 	%rd182, %rd179, %rd133;
	add.s64 	%rd183, %rd179, %rd135;
	add.s64 	%rd184, %rd179, %rd137;
	add.s64 	%rd185, %rd179, %rd139;
	add.s64 	%rd186, %rd179, %rd141;
	add.s64 	%rd187, %rd179, %rd143;
	cvt.u32.u64 	%r49, %rd180;
	// begin inline asm
	cp.async.cg.shared.global [ %r49 + 0 ], [ %rd69 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r51, %rd181;
	// begin inline asm
	cp.async.cg.shared.global [ %r51 + 0 ], [ %rd70 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r53, %rd182;
	// begin inline asm
	cp.async.cg.shared.global [ %r53 + 0 ], [ %rd71 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r55, %rd183;
	// begin inline asm
	cp.async.cg.shared.global [ %r55 + 0 ], [ %rd72 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r57, %rd184;
	// begin inline asm
	cp.async.cg.shared.global [ %r57 + 0 ], [ %rd73 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r59, %rd185;
	// begin inline asm
	cp.async.cg.shared.global [ %r59 + 0 ], [ %rd74 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r61, %rd186;
	// begin inline asm
	cp.async.cg.shared.global [ %r61 + 0 ], [ %rd75 + 0 ], 0x10, %r18;
	// end inline asm
	cvt.u32.u64 	%r63, %rd187;
	// begin inline asm
	cp.async.cg.shared.global [ %r63 + 0 ], [ %rd76 + 0 ], 0x10, %r18;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r123, %r92, 136;
	and.b32  	%r124, %r93, 272;
	or.b32  	%r125, %r123, %r124;
	and.b32  	%r126, %r94, 544;
	shl.b32 	%r9, %r5, 7;
	and.b32  	%r127, %r9, 1024;
	or.b32  	%r128, %r126, %r127;
	or.b32  	%r129, %r128, %r125;
	shr.u32 	%r130, %r6, 1;
	xor.b32  	%r131, %r129, %r130;
	selp.b32 	%r132, 0, 2048, %p3;
	or.b32  	%r133, %r131, %r132;
	cvt.u64.u32 	%rd10, %r133;
	or.b32  	%r134, %r123, 16;
	xor.b32  	%r135, %r134, %r124;
	or.b32  	%r136, %r127, %r135;
	or.b32  	%r137, %r136, %r126;
	or.b32  	%r138, %r132, %r130;
	xor.b32  	%r139, %r138, %r137;
	cvt.u64.u32 	%rd11, %r139;
	or.b32  	%r140, %r125, 32;
	xor.b32  	%r141, %r140, %r126;
	or.b32  	%r142, %r141, %r127;
	xor.b32  	%r143, %r138, %r142;
	cvt.u64.u32 	%rd12, %r143;
	or.b32  	%r144, %r123, 48;
	or.b32  	%r145, %r126, %r124;
	xor.b32  	%r146, %r145, %r144;
	or.b32  	%r147, %r146, %r127;
	xor.b32  	%r148, %r138, %r147;
	cvt.u64.u32 	%rd13, %r148;
	or.b32  	%r149, %r129, 64;
	xor.b32  	%r150, %r138, %r149;
	cvt.u64.u32 	%rd14, %r150;
	or.b32  	%r151, %r123, 80;
	xor.b32  	%r152, %r151, %r124;
	or.b32  	%r153, %r127, %r152;
	or.b32  	%r154, %r153, %r126;
	xor.b32  	%r155, %r138, %r154;
	cvt.u64.u32 	%rd15, %r155;
	or.b32  	%r156, %r125, 96;
	xor.b32  	%r157, %r156, %r126;
	or.b32  	%r158, %r157, %r127;
	xor.b32  	%r159, %r138, %r158;
	cvt.u64.u32 	%rd16, %r159;
	or.b32  	%r160, %r123, 112;
	xor.b32  	%r161, %r145, %r160;
	or.b32  	%r162, %r161, %r127;
	xor.b32  	%r163, %r138, %r162;
	cvt.u64.u32 	%rd17, %r163;
	or.b32  	%r164, %r129, 4096;
	xor.b32  	%r165, %r138, %r164;
	cvt.u64.u32 	%rd18, %r165;
	or.b32  	%r166, %r123, 4112;
	xor.b32  	%r167, %r166, %r124;
	or.b32  	%r168, %r127, %r167;
	or.b32  	%r169, %r168, %r126;
	xor.b32  	%r170, %r138, %r169;
	cvt.u64.u32 	%rd19, %r170;
	or.b32  	%r171, %r125, 4128;
	xor.b32  	%r172, %r171, %r126;
	or.b32  	%r173, %r172, %r127;
	xor.b32  	%r174, %r138, %r173;
	cvt.u64.u32 	%rd20, %r174;
	or.b32  	%r175, %r123, 4144;
	xor.b32  	%r176, %r145, %r175;
	or.b32  	%r177, %r176, %r127;
	xor.b32  	%r178, %r138, %r177;
	cvt.u64.u32 	%rd21, %r178;
	or.b32  	%r179, %r129, 4160;
	xor.b32  	%r180, %r138, %r179;
	cvt.u64.u32 	%rd22, %r180;
	or.b32  	%r181, %r123, 4176;
	xor.b32  	%r182, %r181, %r124;
	or.b32  	%r183, %r127, %r182;
	or.b32  	%r184, %r183, %r126;
	xor.b32  	%r185, %r138, %r184;
	cvt.u64.u32 	%rd23, %r185;
	or.b32  	%r186, %r125, 4192;
	xor.b32  	%r187, %r186, %r126;
	or.b32  	%r188, %r187, %r127;
	xor.b32  	%r189, %r138, %r188;
	cvt.u64.u32 	%rd24, %r189;
	or.b32  	%r190, %r123, 4208;
	xor.b32  	%r191, %r145, %r190;
	or.b32  	%r192, %r191, %r127;
	xor.b32  	%r193, %r138, %r192;
	cvt.u64.u32 	%rd25, %r193;
	and.b32  	%r194, %r5, 15;
	mul.wide.u32 	%rd26, %r194, 16;
	add.s64 	%rd281, %rd168, 768;
	add.s64 	%rd280, %rd165, 768;
	add.s64 	%rd279, %rd162, 768;
	add.s64 	%rd278, %rd159, 768;
	add.s64 	%rd277, %rd156, 768;
	add.s64 	%rd276, %rd153, 768;
	add.s64 	%rd275, %rd150, 768;
	add.s64 	%rd274, %rd147, 768;
	mov.f32 	%f321, 0f00000000;
	mov.b32 	%r561, 2;
	mov.b32 	%r279, 0;
	mov.b32 	%r559, -128;
	shl.b64 	%rd196, %rd10, 1;
	shl.b64 	%rd198, %rd11, 1;
	shl.b64 	%rd200, %rd12, 1;
	shl.b64 	%rd202, %rd13, 1;
	shl.b64 	%rd204, %rd14, 1;
	shl.b64 	%rd206, %rd15, 1;
	shl.b64 	%rd208, %rd16, 1;
	shl.b64 	%rd210, %rd17, 1;
	shl.b64 	%rd212, %rd18, 1;
	shl.b64 	%rd214, %rd19, 1;
	shl.b64 	%rd216, %rd20, 1;
	shl.b64 	%rd218, %rd21, 1;
	shl.b64 	%rd220, %rd22, 1;
	shl.b64 	%rd222, %rd23, 1;
	shl.b64 	%rd224, %rd24, 1;
	shl.b64 	%rd226, %rd25, 1;
	shl.b64 	%rd231, %rd2, 1;
	shl.b64 	%rd233, %rd3, 1;
	shl.b64 	%rd235, %rd4, 1;
	shl.b64 	%rd237, %rd5, 1;
	shl.b64 	%rd239, %rd6, 1;
	shl.b64 	%rd241, %rd7, 1;
	shl.b64 	%rd243, %rd8, 1;
	shl.b64 	%rd245, %rd9, 1;
	mov.u64 	%rd282, %rd77;
	mov.u32 	%r560, %r279;
	mov.f32 	%f322, %f321;
	mov.f32 	%f323, %f321;
	mov.f32 	%f324, %f321;
	mov.f32 	%f325, %f321;
	mov.f32 	%f326, %f321;
	mov.f32 	%f327, %f321;
	mov.f32 	%f328, %f321;
	mov.f32 	%f329, %f321;
	mov.f32 	%f330, %f321;
	mov.f32 	%f331, %f321;
	mov.f32 	%f332, %f321;
	mov.f32 	%f333, %f321;
	mov.f32 	%f334, %f321;
	mov.f32 	%f335, %f321;
	mov.f32 	%f336, %f321;
$L__BB1_1:
	add.s32 	%r559, %r559, 128;
	setp.lt.u32 	%p4, %r559, 1664;
	add.s64 	%rd197, %rd282, %rd196;
	cvt.u32.u64 	%r199, %rd197;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r275, %r276, %r277, %r278}, [%r199];
	// end inline asm
	add.s64 	%rd199, %rd282, %rd198;
	cvt.u32.u64 	%r204, %rd199;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r299, %r300, %r301, %r302}, [%r204];
	// end inline asm
	add.s64 	%rd201, %rd282, %rd200;
	cvt.u32.u64 	%r209, %rd201;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r323, %r324, %r325, %r326}, [%r209];
	// end inline asm
	add.s64 	%rd203, %rd282, %rd202;
	cvt.u32.u64 	%r214, %rd203;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r347, %r348, %r349, %r350}, [%r214];
	// end inline asm
	add.s64 	%rd205, %rd282, %rd204;
	cvt.u32.u64 	%r219, %rd205;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r371, %r372, %r373, %r374}, [%r219];
	// end inline asm
	add.s64 	%rd207, %rd282, %rd206;
	cvt.u32.u64 	%r224, %rd207;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r395, %r396, %r397, %r398}, [%r224];
	// end inline asm
	add.s64 	%rd209, %rd282, %rd208;
	cvt.u32.u64 	%r229, %rd209;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r419, %r420, %r421, %r422}, [%r229];
	// end inline asm
	add.s64 	%rd211, %rd282, %rd210;
	cvt.u32.u64 	%r234, %rd211;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r443, %r444, %r445, %r446}, [%r234];
	// end inline asm
	add.s64 	%rd213, %rd282, %rd212;
	cvt.u32.u64 	%r239, %rd213;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r287, %r288, %r289, %r290}, [%r239];
	// end inline asm
	add.s64 	%rd215, %rd282, %rd214;
	cvt.u32.u64 	%r244, %rd215;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r311, %r312, %r313, %r314}, [%r244];
	// end inline asm
	add.s64 	%rd217, %rd282, %rd216;
	cvt.u32.u64 	%r249, %rd217;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r335, %r336, %r337, %r338}, [%r249];
	// end inline asm
	add.s64 	%rd219, %rd282, %rd218;
	cvt.u32.u64 	%r254, %rd219;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r359, %r360, %r361, %r362}, [%r254];
	// end inline asm
	add.s64 	%rd221, %rd282, %rd220;
	cvt.u32.u64 	%r259, %rd221;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r383, %r384, %r385, %r386}, [%r259];
	// end inline asm
	add.s64 	%rd223, %rd282, %rd222;
	cvt.u32.u64 	%r264, %rd223;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r407, %r408, %r409, %r410}, [%r264];
	// end inline asm
	add.s64 	%rd225, %rd282, %rd224;
	cvt.u32.u64 	%r269, %rd225;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r431, %r432, %r433, %r434}, [%r269];
	// end inline asm
	add.s64 	%rd227, %rd282, %rd226;
	cvt.u32.u64 	%r274, %rd227;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r455, %r456, %r457, %r458}, [%r274];
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r275, %r276, %r277, %r278 }, { %r279, %r279 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r275, %r276, %r277, %r278 }, { %r279, %r279 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r287, %r288, %r289, %r290 }, { %r279, %r279 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r287, %r288, %r289, %r290 }, { %r279, %r279 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r299, %r300, %r301, %r302 }, { %r279, %r279 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r299, %r300, %r301, %r302 }, { %r279, %r279 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r311, %r312, %r313, %r314 }, { %r279, %r279 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r311, %r312, %r313, %r314 }, { %r279, %r279 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r323, %r324, %r325, %r326 }, { %r279, %r279 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r323, %r324, %r325, %r326 }, { %r279, %r279 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r335, %r336, %r337, %r338 }, { %r279, %r279 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r335, %r336, %r337, %r338 }, { %r279, %r279 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r347, %r348, %r349, %r350 }, { %r279, %r279 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r347, %r348, %r349, %r350 }, { %r279, %r279 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r359, %r360, %r361, %r362 }, { %r279, %r279 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r359, %r360, %r361, %r362 }, { %r279, %r279 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r371, %r372, %r373, %r374 }, { %r279, %r279 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r371, %r372, %r373, %r374 }, { %r279, %r279 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r383, %r384, %r385, %r386 }, { %r279, %r279 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r383, %r384, %r385, %r386 }, { %r279, %r279 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r395, %r396, %r397, %r398 }, { %r279, %r279 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r395, %r396, %r397, %r398 }, { %r279, %r279 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r407, %r408, %r409, %r410 }, { %r279, %r279 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r407, %r408, %r409, %r410 }, { %r279, %r279 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r419, %r420, %r421, %r422 }, { %r279, %r279 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r419, %r420, %r421, %r422 }, { %r279, %r279 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r431, %r432, %r433, %r434 }, { %r279, %r279 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r431, %r432, %r433, %r434 }, { %r279, %r279 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f321, %f322, %f323, %f324 }, { %r443, %r444, %r445, %r446 }, { %r279, %r279 }, { %f321, %f322, %f323, %f324 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f325, %f326, %f327, %f328 }, { %r443, %r444, %r445, %r446 }, { %r279, %r279 }, { %f325, %f326, %f327, %f328 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f329, %f330, %f331, %f332 }, { %r455, %r456, %r457, %r458 }, { %r279, %r279 }, { %f329, %f330, %f331, %f332 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f333, %f334, %f335, %f336 }, { %r455, %r456, %r457, %r458 }, { %r279, %r279 }, { %f333, %f334, %f335, %f336 };
	// end inline asm
	add.s32 	%r483, %r561, 1;
	setp.lt.s32 	%p5, %r483, 3;
	selp.b32 	%r561, %r483, 0, %p5;
	add.s64 	%rd188, %rd274, %rd26;
	add.s64 	%rd189, %rd275, %rd26;
	add.s64 	%rd190, %rd276, %rd26;
	add.s64 	%rd191, %rd277, %rd26;
	add.s64 	%rd192, %rd278, %rd26;
	add.s64 	%rd193, %rd279, %rd26;
	add.s64 	%rd194, %rd280, %rd26;
	add.s64 	%rd195, %rd281, %rd26;
	shl.b32 	%r484, %r561, 13;
	mul.wide.s32 	%rd228, %r484, 2;
	add.s64 	%rd230, %rd77, %rd228;
	bar.sync 	0;
	add.s64 	%rd232, %rd230, %rd231;
	add.s64 	%rd234, %rd230, %rd233;
	add.s64 	%rd236, %rd230, %rd235;
	add.s64 	%rd238, %rd230, %rd237;
	add.s64 	%rd240, %rd230, %rd239;
	add.s64 	%rd242, %rd230, %rd241;
	add.s64 	%rd244, %rd230, %rd243;
	add.s64 	%rd246, %rd230, %rd245;
	selp.b32 	%r468, 16, 0, %p4;
	cvt.u32.u64 	%r467, %rd232;
	// begin inline asm
	cp.async.cg.shared.global [ %r467 + 0 ], [ %rd188 + 0 ], 0x10, %r468;
	// end inline asm
	cvt.u32.u64 	%r469, %rd234;
	// begin inline asm
	cp.async.cg.shared.global [ %r469 + 0 ], [ %rd189 + 0 ], 0x10, %r468;
	// end inline asm
	cvt.u32.u64 	%r471, %rd236;
	// begin inline asm
	cp.async.cg.shared.global [ %r471 + 0 ], [ %rd190 + 0 ], 0x10, %r468;
	// end inline asm
	cvt.u32.u64 	%r473, %rd238;
	// begin inline asm
	cp.async.cg.shared.global [ %r473 + 0 ], [ %rd191 + 0 ], 0x10, %r468;
	// end inline asm
	cvt.u32.u64 	%r475, %rd240;
	// begin inline asm
	cp.async.cg.shared.global [ %r475 + 0 ], [ %rd192 + 0 ], 0x10, %r468;
	// end inline asm
	cvt.u32.u64 	%r477, %rd242;
	// begin inline asm
	cp.async.cg.shared.global [ %r477 + 0 ], [ %rd193 + 0 ], 0x10, %r468;
	// end inline asm
	cvt.u32.u64 	%r479, %rd244;
	// begin inline asm
	cp.async.cg.shared.global [ %r479 + 0 ], [ %rd194 + 0 ], 0x10, %r468;
	// end inline asm
	cvt.u32.u64 	%r481, %rd246;
	// begin inline asm
	cp.async.cg.shared.global [ %r481 + 0 ], [ %rd195 + 0 ], 0x10, %r468;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s32 	%r485, %r560, 1;
	setp.lt.s32 	%p6, %r485, 3;
	selp.b32 	%r560, %r485, 0, %p6;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r486, %r560, 13;
	mul.wide.s32 	%rd247, %r486, 2;
	add.s64 	%rd282, %rd77, %rd247;
	add.s64 	%rd281, %rd281, 256;
	add.s64 	%rd280, %rd280, 256;
	add.s64 	%rd279, %rd279, 256;
	add.s64 	%rd278, %rd278, 256;
	add.s64 	%rd277, %rd277, 256;
	add.s64 	%rd276, %rd276, 256;
	add.s64 	%rd275, %rd275, 256;
	add.s64 	%rd274, %rd274, 256;
	setp.lt.u32 	%p7, %r559, 1920;
	@%p7 bra 	$L__BB1_1;
	and.b32  	%r527, %r8, 56;
	shl.b32 	%r528, %r2, 3;
	sub.s32 	%r529, %r16, %r528;
	div.s32 	%r530, %r529, %r3;
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	mov.b32 	%r487, %f321;
	// begin inline asm
	cvt.rn.bf16.f32 %rs17, %r487;
	// end inline asm
	mov.b32 	%r488, %f322;
	// begin inline asm
	cvt.rn.bf16.f32 %rs18, %r488;
	// end inline asm
	mov.b32 	%r489, %f323;
	// begin inline asm
	cvt.rn.bf16.f32 %rs19, %r489;
	// end inline asm
	mov.b32 	%r490, %f324;
	// begin inline asm
	cvt.rn.bf16.f32 %rs20, %r490;
	// end inline asm
	mov.b32 	%r491, %f325;
	// begin inline asm
	cvt.rn.bf16.f32 %rs25, %r491;
	// end inline asm
	mov.b32 	%r492, %f326;
	// begin inline asm
	cvt.rn.bf16.f32 %rs26, %r492;
	// end inline asm
	mov.b32 	%r493, %f327;
	// begin inline asm
	cvt.rn.bf16.f32 %rs27, %r493;
	// end inline asm
	mov.b32 	%r494, %f328;
	// begin inline asm
	cvt.rn.bf16.f32 %rs28, %r494;
	// end inline asm
	mov.b32 	%r495, %f329;
	// begin inline asm
	cvt.rn.bf16.f32 %rs21, %r495;
	// end inline asm
	mov.b32 	%r496, %f330;
	// begin inline asm
	cvt.rn.bf16.f32 %rs22, %r496;
	// end inline asm
	mov.b32 	%r497, %f331;
	// begin inline asm
	cvt.rn.bf16.f32 %rs23, %r497;
	// end inline asm
	mov.b32 	%r498, %f332;
	// begin inline asm
	cvt.rn.bf16.f32 %rs24, %r498;
	// end inline asm
	mov.b32 	%r499, %f333;
	// begin inline asm
	cvt.rn.bf16.f32 %rs29, %r499;
	// end inline asm
	mov.b32 	%r500, %f334;
	// begin inline asm
	cvt.rn.bf16.f32 %rs30, %r500;
	// end inline asm
	mov.b32 	%r501, %f335;
	// begin inline asm
	cvt.rn.bf16.f32 %rs31, %r501;
	// end inline asm
	mov.b32 	%r502, %f336;
	// begin inline asm
	cvt.rn.bf16.f32 %rs32, %r502;
	// end inline asm
	shl.b32 	%r531, %r530, 5;
	cvt.s64.s32 	%rd250, %r4;
	cvt.s64.s32 	%rd251, %r531;
	cvt.u64.u32 	%rd252, %r527;
	or.b64  	%rd253, %rd250, %rd252;
	bfe.u32 	%r532, %r5, 3, 3;
	selp.b32 	%r533, 0, 8, %p3;
	or.b32  	%r534, %r532, %r533;
	or.b32  	%r535, %r534, 16;
	cvt.u64.u32 	%rd254, %r534;
	cvt.u64.u32 	%rd255, %r535;
	or.b64  	%rd256, %rd251, %rd254;
	or.b64  	%rd257, %rd251, %rd255;
	shl.b64 	%rd258, %rd253, 1;
	add.s64 	%rd259, %rd1, %rd258;
	mad.lo.s64 	%rd248, %rd256, 6144, %rd259;
	mad.lo.s64 	%rd249, %rd257, 6144, %rd259;
	and.b32  	%r536, %r9, 384;
	bfe.u32 	%r537, %r5, 2, 2;
	or.b32  	%r538, %r537, %r536;
	shr.u32 	%r539, %r6, 2;
	or.b32  	%r540, %r538, %r539;
	shl.b32 	%r541, %r7, 4;
	or.b32  	%r542, %r540, %r541;
	selp.b32 	%r543, 0, 16, %p3;
	or.b32  	%r544, %r542, %r543;
	and.b32  	%r545, %r8, 504;
	selp.b32 	%r546, 0, 512, %p3;
	or.b32  	%r547, %r545, %r546;
	shr.u32 	%r548, %r542, 3;
	add.s32 	%r549, %r548, %r544;
	shl.b32 	%r550, %r549, 1;
	cvt.u64.u32 	%rd260, %r550;
	mov.u64 	%rd261, global_smem;
	add.s64 	%rd262, %rd261, %rd260;
	cvt.u32.u64 	%r503, %rd262;
	mov.pred 	%p8, -1;
	// begin inline asm
	@%p8 st.shared.b16 [ %r503 + 0 ], %rs17;
	// end inline asm
	or.b32  	%r551, %r542, 64;
	shr.u32 	%r552, %r551, 3;
	and.b32  	%r553, %r552, 120;
	cvt.u64.u32 	%rd263, %r544;
	cvt.u64.u32 	%rd264, %r553;
	add.s64 	%rd265, %rd264, %rd263;
	shl.b64 	%rd266, %rd265, 1;
	add.s64 	%rd267, %rd261, %rd266;
	cvt.u32.u64 	%r554, %rd267;
	add.s32 	%r512, %r554, 128;
	// begin inline asm
	@%p8 st.shared.b16 [ %r512 + 0 ], %rs18;
	// end inline asm
	cvt.u64.u32 	%rd268, %r548;
	add.s64 	%rd269, %rd263, %rd268;
	shl.b64 	%rd270, %rd269, 1;
	add.s64 	%rd271, %rd261, %rd270;
	cvt.u32.u64 	%r555, %rd271;
	add.s32 	%r513, %r555, 16;
	// begin inline asm
	@%p8 st.shared.b16 [ %r513 + 0 ], %rs19;
	// end inline asm
	add.s32 	%r514, %r554, 144;
	// begin inline asm
	@%p8 st.shared.b16 [ %r514 + 0 ], %rs20;
	// end inline asm
	add.s32 	%r515, %r555, 64;
	// begin inline asm
	@%p8 st.shared.b16 [ %r515 + 0 ], %rs21;
	// end inline asm
	add.s32 	%r516, %r554, 192;
	// begin inline asm
	@%p8 st.shared.b16 [ %r516 + 0 ], %rs22;
	// end inline asm
	add.s32 	%r517, %r555, 80;
	// begin inline asm
	@%p8 st.shared.b16 [ %r517 + 0 ], %rs23;
	// end inline asm
	add.s32 	%r518, %r554, 208;
	// begin inline asm
	@%p8 st.shared.b16 [ %r518 + 0 ], %rs24;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r556, %r547, 3;
	and.b32  	%r557, %r556, 120;
	add.s32 	%r558, %r557, %r547;
	mul.wide.u32 	%rd272, %r558, 2;
	add.s64 	%rd273, %rd261, %rd272;
	ld.shared.v4.u32 	{%r519, %r520, %r521, %r522}, [%rd273];
	bar.sync 	0;
	// begin inline asm
	@%p8 st.shared.b16 [ %r503 + 0 ], %rs25;
	// end inline asm
	// begin inline asm
	@%p8 st.shared.b16 [ %r512 + 0 ], %rs26;
	// end inline asm
	// begin inline asm
	@%p8 st.shared.b16 [ %r513 + 0 ], %rs27;
	// end inline asm
	// begin inline asm
	@%p8 st.shared.b16 [ %r514 + 0 ], %rs28;
	// end inline asm
	// begin inline asm
	@%p8 st.shared.b16 [ %r515 + 0 ], %rs29;
	// end inline asm
	// begin inline asm
	@%p8 st.shared.b16 [ %r516 + 0 ], %rs30;
	// end inline asm
	// begin inline asm
	@%p8 st.shared.b16 [ %r517 + 0 ], %rs31;
	// end inline asm
	// begin inline asm
	@%p8 st.shared.b16 [ %r518 + 0 ], %rs32;
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r523, %r524, %r525, %r526}, [%rd273];
	// begin inline asm
	st.global.v4.b32 [ %rd248 + 0 ], { %r519, %r520, %r521, %r522 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd249 + 0 ], { %r523, %r524, %r525, %r526 };
	// end inline asm
	ret;

}
	// .globl	fusion_50
.visible .entry fusion_50(
	.param .u64 .ptr .align 16 fusion_50_param_0,
	.param .u64 .ptr .align 128 fusion_50_param_1,
	.param .u64 .ptr .align 128 fusion_50_param_2,
	.param .u64 .ptr .align 16 fusion_50_param_3,
	.param .u64 .ptr .align 128 fusion_50_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<125>;
	.reg .f32 	%f<146>;
	.reg .b64 	%rd<32>;

	ld.param.u64 	%rd10, [fusion_50_param_0];
	ld.param.u64 	%rd11, [fusion_50_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_50_param_1];
	ld.param.u64 	%rd14, [fusion_50_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_50_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd5, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd19, %r1, 6144;
	add.s64 	%rd20, %rd17, %rd19;
	mov.u32 	%r105, %tid.x;
	and.b32  	%r106, %r105, 31;
	shl.b32 	%r107, %r105, 3;
	and.b32  	%r108, %r107, 248;
	setp.lt.u32 	%p4, %r105, 32;
	selp.b32 	%r109, 0, 256, %p4;
	or.b32  	%r110, %r108, %r109;
	mul.wide.u32 	%rd21, %r110, 2;
	add.s64 	%rd22, %rd20, %rd21;
	add.s64 	%rd1, %rd22, 4096;
	add.s64 	%rd2, %rd22, 5120;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd23, %r1, 1024;
	shl.b64 	%rd24, %rd23, 1;
	add.s64 	%rd25, %rd18, %rd24;
	add.s64 	%rd3, %rd25, %rd21;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.rn.f32 	%f33, %f1, %f17;
	add.rn.f32 	%f34, %f2, %f18;
	add.rn.f32 	%f35, %f3, %f19;
	add.rn.f32 	%f36, %f4, %f20;
	add.rn.f32 	%f37, %f5, %f21;
	add.rn.f32 	%f38, %f6, %f22;
	add.rn.f32 	%f39, %f7, %f23;
	add.rn.f32 	%f40, %f8, %f24;
	add.rn.f32 	%f41, %f9, %f25;
	add.rn.f32 	%f42, %f10, %f26;
	add.rn.f32 	%f43, %f11, %f27;
	add.rn.f32 	%f44, %f12, %f28;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	mul.rn.f32 	%f49, %f33, %f33;
	mul.rn.f32 	%f50, %f34, %f34;
	mul.rn.f32 	%f51, %f35, %f35;
	mul.rn.f32 	%f52, %f36, %f36;
	mul.rn.f32 	%f53, %f37, %f37;
	mul.rn.f32 	%f54, %f38, %f38;
	mul.rn.f32 	%f55, %f39, %f39;
	mul.rn.f32 	%f56, %f40, %f40;
	mul.rn.f32 	%f57, %f41, %f41;
	mul.rn.f32 	%f58, %f42, %f42;
	mul.rn.f32 	%f59, %f43, %f43;
	mul.rn.f32 	%f60, %f44, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	add.rn.f32 	%f65, %f49, %f50;
	add.rn.f32 	%f66, %f65, %f51;
	add.rn.f32 	%f67, %f66, %f52;
	add.rn.f32 	%f68, %f67, %f53;
	add.rn.f32 	%f69, %f68, %f54;
	add.rn.f32 	%f70, %f69, %f55;
	add.rn.f32 	%f71, %f70, %f56;
	add.rn.f32 	%f72, %f71, %f57;
	add.rn.f32 	%f73, %f72, %f58;
	add.rn.f32 	%f74, %f73, %f59;
	add.rn.f32 	%f75, %f74, %f60;
	add.rn.f32 	%f76, %f75, %f61;
	add.rn.f32 	%f77, %f76, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	mov.b32 	%r111, %f79;
	shfl.sync.bfly.b32	%r112, %r111, 16, 31, -1;
	mov.b32 	%f80, %r112;
	add.rn.f32 	%f81, %f79, %f80;
	mov.b32 	%r113, %f81;
	shfl.sync.bfly.b32	%r114, %r113, 8, 31, -1;
	mov.b32 	%f82, %r114;
	add.rn.f32 	%f83, %f81, %f82;
	mov.b32 	%r115, %f83;
	shfl.sync.bfly.b32	%r116, %r115, 4, 31, -1;
	mov.b32 	%f84, %r116;
	add.rn.f32 	%f85, %f83, %f84;
	mov.b32 	%r117, %f85;
	shfl.sync.bfly.b32	%r118, %r117, 2, 31, -1;
	mov.b32 	%f86, %r118;
	add.rn.f32 	%f87, %f85, %f86;
	mov.b32 	%r119, %f87;
	shfl.sync.bfly.b32	%r120, %r119, 1, 31, -1;
	mov.b32 	%f88, %r120;
	add.rn.f32 	%f89, %f87, %f88;
	setp.eq.s32 	%p1, %r106, 0;
	shr.u32 	%r121, %r105, 3;
	and.b32  	%r122, %r121, 4;
	cvt.u64.u32 	%rd26, %r122;
	mov.u64 	%rd27, global_smem;
	add.s64 	%rd28, %rd27, %rd26;
	mov.b32 	%r51, %f89;
	cvt.u32.u64 	%r50, %rd28;
	// begin inline asm
	@%p1 st.shared.b32 [ %r50 + 0 ], %r51;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r105, 2;
	shl.b32 	%r123, %r105, 2;
	cvt.u64.u32 	%rd29, %r123;
	add.s64 	%rd30, %rd27, %rd29;
	cvt.u32.u64 	%r53, %rd30;
	// begin inline asm
	@%p2 ld.shared.b32 %r52, [ %r53 + 0 ];
	// end inline asm
	mov.b32 	%f90, %r52;
	shfl.sync.bfly.b32	%r124, %r52, 1, 31, -1;
	mov.b32 	%f91, %r124;
	add.rn.f32 	%f92, %f90, %f91;
	setp.eq.s32 	%p3, %r105, 0;
	mov.b32 	%r55, %f92;
	// begin inline asm
	@%p3 st.shared.b32 [ %r53 + 0 ], %r55;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f93, [global_smem];
	mul.rn.f32 	%f94, %f93, 0f3A800000;
	// begin inline asm
	mov.u32 %r56, 0x0;
	ld.global.b32 { %r56 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f95, %r56;
	add.rn.f32 	%f96, %f94, %f95;
	rsqrt.approx.f32 	%f97, %f96;
	mul.rn.f32 	%f98, %f33, %f97;
	mul.rn.f32 	%f99, %f34, %f97;
	mul.rn.f32 	%f100, %f35, %f97;
	mul.rn.f32 	%f101, %f36, %f97;
	mul.rn.f32 	%f102, %f37, %f97;
	mul.rn.f32 	%f103, %f38, %f97;
	mul.rn.f32 	%f104, %f39, %f97;
	mul.rn.f32 	%f105, %f40, %f97;
	mul.rn.f32 	%f106, %f41, %f97;
	mul.rn.f32 	%f107, %f42, %f97;
	mul.rn.f32 	%f108, %f43, %f97;
	mul.rn.f32 	%f109, %f44, %f97;
	mul.rn.f32 	%f110, %f45, %f97;
	mul.rn.f32 	%f111, %f46, %f97;
	mul.rn.f32 	%f112, %f47, %f97;
	mul.rn.f32 	%f113, %f48, %f97;
	add.s64 	%rd6, %rd15, %rd21;
	add.s64 	%rd7, %rd6, 1024;
	// begin inline asm
	mov.u32 %r57, 0x0;
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	mov.u32 %r60, 0x0;
	ld.global.v4.b32 { %r57, %r58, %r59, %r60 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r57;
	mov.b32 	{%rs35, %rs36}, %r58;
	mov.b32 	{%rs37, %rs38}, %r59;
	mov.b32 	{%rs39, %rs40}, %r60;
	// begin inline asm
	mov.u32 %r61, 0x0;
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	ld.global.v4.b32 { %r61, %r62, %r63, %r64 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r61;
	mov.b32 	{%rs43, %rs44}, %r62;
	mov.b32 	{%rs45, %rs46}, %r63;
	mov.b32 	{%rs47, %rs48}, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs33;
	// end inline asm
	mov.b32 	%f114, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs34;
	// end inline asm
	mov.b32 	%f115, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs35;
	// end inline asm
	mov.b32 	%f116, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs36;
	// end inline asm
	mov.b32 	%f117, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs37;
	// end inline asm
	mov.b32 	%f118, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs38;
	// end inline asm
	mov.b32 	%f119, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs39;
	// end inline asm
	mov.b32 	%f120, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs40;
	// end inline asm
	mov.b32 	%f121, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs41;
	// end inline asm
	mov.b32 	%f122, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs42;
	// end inline asm
	mov.b32 	%f123, %r74;
	// begin inline asm
	cvt.f32.bf16 %r75, %rs43;
	// end inline asm
	mov.b32 	%f124, %r75;
	// begin inline asm
	cvt.f32.bf16 %r76, %rs44;
	// end inline asm
	mov.b32 	%f125, %r76;
	// begin inline asm
	cvt.f32.bf16 %r77, %rs45;
	// end inline asm
	mov.b32 	%f126, %r77;
	// begin inline asm
	cvt.f32.bf16 %r78, %rs46;
	// end inline asm
	mov.b32 	%f127, %r78;
	// begin inline asm
	cvt.f32.bf16 %r79, %rs47;
	// end inline asm
	mov.b32 	%f128, %r79;
	// begin inline asm
	cvt.f32.bf16 %r80, %rs48;
	// end inline asm
	mov.b32 	%f129, %r80;
	mul.rn.f32 	%f130, %f98, %f114;
	mul.rn.f32 	%f131, %f99, %f115;
	mul.rn.f32 	%f132, %f100, %f116;
	mul.rn.f32 	%f133, %f101, %f117;
	mul.rn.f32 	%f134, %f102, %f118;
	mul.rn.f32 	%f135, %f103, %f119;
	mul.rn.f32 	%f136, %f104, %f120;
	mul.rn.f32 	%f137, %f105, %f121;
	mul.rn.f32 	%f138, %f106, %f122;
	mul.rn.f32 	%f139, %f107, %f123;
	mul.rn.f32 	%f140, %f108, %f124;
	mul.rn.f32 	%f141, %f109, %f125;
	mul.rn.f32 	%f142, %f110, %f126;
	mul.rn.f32 	%f143, %f111, %f127;
	mul.rn.f32 	%f144, %f112, %f128;
	mul.rn.f32 	%f145, %f113, %f129;
	mov.b32 	%r81, %f130;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r81;
	// end inline asm
	mov.b32 	%r82, %f131;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r82;
	// end inline asm
	mov.b32 	%r83, %f132;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r83;
	// end inline asm
	mov.b32 	%r84, %f133;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r84;
	// end inline asm
	mov.b32 	%r85, %f134;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r85;
	// end inline asm
	mov.b32 	%r86, %f135;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r86;
	// end inline asm
	mov.b32 	%r87, %f136;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r87;
	// end inline asm
	mov.b32 	%r88, %f137;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r88;
	// end inline asm
	mov.b32 	%r89, %f138;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r89;
	// end inline asm
	mov.b32 	%r90, %f139;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r90;
	// end inline asm
	mov.b32 	%r91, %f140;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r91;
	// end inline asm
	mov.b32 	%r92, %f141;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r92;
	// end inline asm
	mov.b32 	%r93, %f142;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r93;
	// end inline asm
	mov.b32 	%r94, %f143;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r94;
	// end inline asm
	mov.b32 	%r95, %f144;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r95;
	// end inline asm
	mov.b32 	%r96, %f145;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r96;
	// end inline asm
	add.s64 	%rd31, %rd12, %rd24;
	add.s64 	%rd8, %rd31, %rd21;
	add.s64 	%rd9, %rd8, 1024;
	mov.b32 	%r97, {%rs49, %rs50};
	mov.b32 	%r98, {%rs51, %rs52};
	mov.b32 	%r99, {%rs53, %rs54};
	mov.b32 	%r100, {%rs55, %rs56};
	// begin inline asm
	st.global.v4.b32 [ %rd8 + 0 ], { %r97, %r98, %r99, %r100 };
	// end inline asm
	mov.b32 	%r101, {%rs57, %rs58};
	mov.b32 	%r102, {%rs59, %rs60};
	mov.b32 	%r103, {%rs61, %rs62};
	mov.b32 	%r104, {%rs63, %rs64};
	// begin inline asm
	st.global.v4.b32 [ %rd9 + 0 ], { %r101, %r102, %r103, %r104 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion
.visible .entry loop_convert_fusion(
	.param .u64 .ptr .align 128 loop_convert_fusion_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 4;
	mul.lo.s16 	%rs4, %rs3, 24;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 7;
	cvt.u32.u16 	%r3, %rs6;
	or.b32  	%r4, %r1, %r3;
	mul.wide.u16 	%r5, %rs3, 6144;
	add.s32 	%r6, %r4, %r5;
	mul.wide.u32 	%rd5, %r6, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs7, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	mul.rn.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.f32 	%f3, %f2;
	cvt.rn.bf16.f32 	%rs8, %f3;
	cvt.f32.bf16 	%f4, %rs8;
	add.rn.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.f32 	%f6, %f5;
	ld.global.nc.u16 	%rs9, [%rd6+6144];
	mul.rn.f32 	%f7, %f6, %f1;
	cvt.f32.bf16 	%f8, %rs9;
	mul.rn.f32 	%f9, %f7, %f8;
	cvt.rn.bf16.f32 	%rs10, %f9;
	shl.b32 	%r7, %r2, 7;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd7, %r8, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs10;
	ret;

}
	// .globl	fusion_51
.visible .entry fusion_51(
	.param .u64 .ptr .align 16 fusion_51_param_0,
	.param .u64 .ptr .align 16 fusion_51_param_1,
	.param .u64 .ptr .align 128 fusion_51_param_2,
	.param .u64 .ptr .align 128 fusion_51_param_3,
	.param .u64 .ptr .align 128 fusion_51_param_4,
	.param .u64 .ptr .align 128 fusion_51_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<173>;
	.reg .f32 	%f<210>;
	.reg .b64 	%rd<39>;

	ld.param.u64 	%rd14, [fusion_51_param_0];
	ld.param.u64 	%rd15, [fusion_51_param_5];
	cvta.to.global.u64 	%rd16, %rd15;
	ld.param.u64 	%rd17, [fusion_51_param_1];
	ld.param.u64 	%rd18, [fusion_51_param_4];
	cvta.to.global.u64 	%rd19, %rd18;
	ld.param.u64 	%rd20, [fusion_51_param_2];
	ld.param.u64 	%rd21, [fusion_51_param_3];
	cvta.to.global.u64 	%rd22, %rd21;
	cvta.to.global.u64 	%rd23, %rd20;
	cvta.to.global.u64 	%rd24, %rd17;
	cvta.to.global.u64 	%rd9, %rd14;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd25, %r1, 6144;
	add.s64 	%rd26, %rd22, %rd25;
	mov.u32 	%r153, %tid.x;
	and.b32  	%r154, %r153, 31;
	shl.b32 	%r155, %r153, 3;
	and.b32  	%r156, %r155, 248;
	setp.lt.u32 	%p4, %r153, 32;
	selp.b32 	%r157, 0, 256, %p4;
	or.b32  	%r158, %r156, %r157;
	mul.wide.u32 	%rd27, %r158, 2;
	add.s64 	%rd28, %rd26, %rd27;
	add.s64 	%rd1, %rd28, 2048;
	add.s64 	%rd2, %rd28, 3072;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd29, %r1, 1024;
	shl.b64 	%rd30, %rd29, 1;
	add.s64 	%rd31, %rd19, %rd30;
	add.s64 	%rd3, %rd31, %rd27;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd28, 4096;
	add.s64 	%rd6, %rd28, 5120;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd32, %rd23, %rd30;
	add.s64 	%rd7, %rd32, %rd27;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.rn.f32 	%f65, %f33, %f49;
	add.rn.f32 	%f66, %f34, %f50;
	add.rn.f32 	%f67, %f35, %f51;
	add.rn.f32 	%f68, %f36, %f52;
	add.rn.f32 	%f69, %f37, %f53;
	add.rn.f32 	%f70, %f38, %f54;
	add.rn.f32 	%f71, %f39, %f55;
	add.rn.f32 	%f72, %f40, %f56;
	add.rn.f32 	%f73, %f41, %f57;
	add.rn.f32 	%f74, %f42, %f58;
	add.rn.f32 	%f75, %f43, %f59;
	add.rn.f32 	%f76, %f44, %f60;
	add.rn.f32 	%f77, %f45, %f61;
	add.rn.f32 	%f78, %f46, %f62;
	add.rn.f32 	%f79, %f47, %f63;
	add.rn.f32 	%f80, %f48, %f64;
	add.rn.f32 	%f81, %f17, %f65;
	add.rn.f32 	%f82, %f18, %f66;
	add.rn.f32 	%f83, %f19, %f67;
	add.rn.f32 	%f84, %f20, %f68;
	add.rn.f32 	%f85, %f21, %f69;
	add.rn.f32 	%f86, %f22, %f70;
	add.rn.f32 	%f87, %f23, %f71;
	add.rn.f32 	%f88, %f24, %f72;
	add.rn.f32 	%f89, %f25, %f73;
	add.rn.f32 	%f90, %f26, %f74;
	add.rn.f32 	%f91, %f27, %f75;
	add.rn.f32 	%f92, %f28, %f76;
	add.rn.f32 	%f93, %f29, %f77;
	add.rn.f32 	%f94, %f30, %f78;
	add.rn.f32 	%f95, %f31, %f79;
	add.rn.f32 	%f96, %f32, %f80;
	add.rn.f32 	%f97, %f1, %f81;
	add.rn.f32 	%f98, %f2, %f82;
	add.rn.f32 	%f99, %f3, %f83;
	add.rn.f32 	%f100, %f4, %f84;
	add.rn.f32 	%f101, %f5, %f85;
	add.rn.f32 	%f102, %f6, %f86;
	add.rn.f32 	%f103, %f7, %f87;
	add.rn.f32 	%f104, %f8, %f88;
	add.rn.f32 	%f105, %f9, %f89;
	add.rn.f32 	%f106, %f10, %f90;
	add.rn.f32 	%f107, %f11, %f91;
	add.rn.f32 	%f108, %f12, %f92;
	add.rn.f32 	%f109, %f13, %f93;
	add.rn.f32 	%f110, %f14, %f94;
	add.rn.f32 	%f111, %f15, %f95;
	add.rn.f32 	%f112, %f16, %f96;
	mul.rn.f32 	%f113, %f97, %f97;
	mul.rn.f32 	%f114, %f98, %f98;
	mul.rn.f32 	%f115, %f99, %f99;
	mul.rn.f32 	%f116, %f100, %f100;
	mul.rn.f32 	%f117, %f101, %f101;
	mul.rn.f32 	%f118, %f102, %f102;
	mul.rn.f32 	%f119, %f103, %f103;
	mul.rn.f32 	%f120, %f104, %f104;
	mul.rn.f32 	%f121, %f105, %f105;
	mul.rn.f32 	%f122, %f106, %f106;
	mul.rn.f32 	%f123, %f107, %f107;
	mul.rn.f32 	%f124, %f108, %f108;
	mul.rn.f32 	%f125, %f109, %f109;
	mul.rn.f32 	%f126, %f110, %f110;
	mul.rn.f32 	%f127, %f111, %f111;
	mul.rn.f32 	%f128, %f112, %f112;
	add.rn.f32 	%f129, %f113, %f114;
	add.rn.f32 	%f130, %f129, %f115;
	add.rn.f32 	%f131, %f130, %f116;
	add.rn.f32 	%f132, %f131, %f117;
	add.rn.f32 	%f133, %f132, %f118;
	add.rn.f32 	%f134, %f133, %f119;
	add.rn.f32 	%f135, %f134, %f120;
	add.rn.f32 	%f136, %f135, %f121;
	add.rn.f32 	%f137, %f136, %f122;
	add.rn.f32 	%f138, %f137, %f123;
	add.rn.f32 	%f139, %f138, %f124;
	add.rn.f32 	%f140, %f139, %f125;
	add.rn.f32 	%f141, %f140, %f126;
	add.rn.f32 	%f142, %f141, %f127;
	add.rn.f32 	%f143, %f142, %f128;
	mov.b32 	%r159, %f143;
	shfl.sync.bfly.b32	%r160, %r159, 16, 31, -1;
	mov.b32 	%f144, %r160;
	add.rn.f32 	%f145, %f143, %f144;
	mov.b32 	%r161, %f145;
	shfl.sync.bfly.b32	%r162, %r161, 8, 31, -1;
	mov.b32 	%f146, %r162;
	add.rn.f32 	%f147, %f145, %f146;
	mov.b32 	%r163, %f147;
	shfl.sync.bfly.b32	%r164, %r163, 4, 31, -1;
	mov.b32 	%f148, %r164;
	add.rn.f32 	%f149, %f147, %f148;
	mov.b32 	%r165, %f149;
	shfl.sync.bfly.b32	%r166, %r165, 2, 31, -1;
	mov.b32 	%f150, %r166;
	add.rn.f32 	%f151, %f149, %f150;
	mov.b32 	%r167, %f151;
	shfl.sync.bfly.b32	%r168, %r167, 1, 31, -1;
	mov.b32 	%f152, %r168;
	add.rn.f32 	%f153, %f151, %f152;
	setp.eq.s32 	%p1, %r154, 0;
	shr.u32 	%r169, %r153, 3;
	and.b32  	%r170, %r169, 4;
	cvt.u64.u32 	%rd33, %r170;
	mov.u64 	%rd34, global_smem;
	add.s64 	%rd35, %rd34, %rd33;
	mov.b32 	%r99, %f153;
	cvt.u32.u64 	%r98, %rd35;
	// begin inline asm
	@%p1 st.shared.b32 [ %r98 + 0 ], %r99;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r153, 2;
	shl.b32 	%r171, %r153, 2;
	cvt.u64.u32 	%rd36, %r171;
	add.s64 	%rd37, %rd34, %rd36;
	cvt.u32.u64 	%r101, %rd37;
	// begin inline asm
	@%p2 ld.shared.b32 %r100, [ %r101 + 0 ];
	// end inline asm
	mov.b32 	%f154, %r100;
	shfl.sync.bfly.b32	%r172, %r100, 1, 31, -1;
	mov.b32 	%f155, %r172;
	add.rn.f32 	%f156, %f154, %f155;
	setp.eq.s32 	%p3, %r153, 0;
	mov.b32 	%r103, %f156;
	// begin inline asm
	@%p3 st.shared.b32 [ %r101 + 0 ], %r103;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f157, [global_smem];
	mul.rn.f32 	%f158, %f157, 0f3A800000;
	// begin inline asm
	mov.u32 %r104, 0x0;
	ld.global.b32 { %r104 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f159, %r104;
	add.rn.f32 	%f160, %f158, %f159;
	rsqrt.approx.f32 	%f161, %f160;
	mul.rn.f32 	%f162, %f97, %f161;
	mul.rn.f32 	%f163, %f98, %f161;
	mul.rn.f32 	%f164, %f99, %f161;
	mul.rn.f32 	%f165, %f100, %f161;
	mul.rn.f32 	%f166, %f101, %f161;
	mul.rn.f32 	%f167, %f102, %f161;
	mul.rn.f32 	%f168, %f103, %f161;
	mul.rn.f32 	%f169, %f104, %f161;
	mul.rn.f32 	%f170, %f105, %f161;
	mul.rn.f32 	%f171, %f106, %f161;
	mul.rn.f32 	%f172, %f107, %f161;
	mul.rn.f32 	%f173, %f108, %f161;
	mul.rn.f32 	%f174, %f109, %f161;
	mul.rn.f32 	%f175, %f110, %f161;
	mul.rn.f32 	%f176, %f111, %f161;
	mul.rn.f32 	%f177, %f112, %f161;
	add.s64 	%rd10, %rd24, %rd27;
	add.s64 	%rd11, %rd10, 1024;
	// begin inline asm
	mov.u32 %r105, 0x0;
	mov.u32 %r106, 0x0;
	mov.u32 %r107, 0x0;
	mov.u32 %r108, 0x0;
	ld.global.v4.b32 { %r105, %r106, %r107, %r108 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r105;
	mov.b32 	{%rs67, %rs68}, %r106;
	mov.b32 	{%rs69, %rs70}, %r107;
	mov.b32 	{%rs71, %rs72}, %r108;
	// begin inline asm
	mov.u32 %r109, 0x0;
	mov.u32 %r110, 0x0;
	mov.u32 %r111, 0x0;
	mov.u32 %r112, 0x0;
	ld.global.v4.b32 { %r109, %r110, %r111, %r112 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r109;
	mov.b32 	{%rs75, %rs76}, %r110;
	mov.b32 	{%rs77, %rs78}, %r111;
	mov.b32 	{%rs79, %rs80}, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs65;
	// end inline asm
	mov.b32 	%f178, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs66;
	// end inline asm
	mov.b32 	%f179, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs67;
	// end inline asm
	mov.b32 	%f180, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs68;
	// end inline asm
	mov.b32 	%f181, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs69;
	// end inline asm
	mov.b32 	%f182, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs70;
	// end inline asm
	mov.b32 	%f183, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs71;
	// end inline asm
	mov.b32 	%f184, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs72;
	// end inline asm
	mov.b32 	%f185, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs73;
	// end inline asm
	mov.b32 	%f186, %r121;
	// begin inline asm
	cvt.f32.bf16 %r122, %rs74;
	// end inline asm
	mov.b32 	%f187, %r122;
	// begin inline asm
	cvt.f32.bf16 %r123, %rs75;
	// end inline asm
	mov.b32 	%f188, %r123;
	// begin inline asm
	cvt.f32.bf16 %r124, %rs76;
	// end inline asm
	mov.b32 	%f189, %r124;
	// begin inline asm
	cvt.f32.bf16 %r125, %rs77;
	// end inline asm
	mov.b32 	%f190, %r125;
	// begin inline asm
	cvt.f32.bf16 %r126, %rs78;
	// end inline asm
	mov.b32 	%f191, %r126;
	// begin inline asm
	cvt.f32.bf16 %r127, %rs79;
	// end inline asm
	mov.b32 	%f192, %r127;
	// begin inline asm
	cvt.f32.bf16 %r128, %rs80;
	// end inline asm
	mov.b32 	%f193, %r128;
	mul.rn.f32 	%f194, %f162, %f178;
	mul.rn.f32 	%f195, %f163, %f179;
	mul.rn.f32 	%f196, %f164, %f180;
	mul.rn.f32 	%f197, %f165, %f181;
	mul.rn.f32 	%f198, %f166, %f182;
	mul.rn.f32 	%f199, %f167, %f183;
	mul.rn.f32 	%f200, %f168, %f184;
	mul.rn.f32 	%f201, %f169, %f185;
	mul.rn.f32 	%f202, %f170, %f186;
	mul.rn.f32 	%f203, %f171, %f187;
	mul.rn.f32 	%f204, %f172, %f188;
	mul.rn.f32 	%f205, %f173, %f189;
	mul.rn.f32 	%f206, %f174, %f190;
	mul.rn.f32 	%f207, %f175, %f191;
	mul.rn.f32 	%f208, %f176, %f192;
	mul.rn.f32 	%f209, %f177, %f193;
	mov.b32 	%r129, %f194;
	// begin inline asm
	cvt.rn.bf16.f32 %rs81, %r129;
	// end inline asm
	mov.b32 	%r130, %f195;
	// begin inline asm
	cvt.rn.bf16.f32 %rs82, %r130;
	// end inline asm
	mov.b32 	%r131, %f196;
	// begin inline asm
	cvt.rn.bf16.f32 %rs83, %r131;
	// end inline asm
	mov.b32 	%r132, %f197;
	// begin inline asm
	cvt.rn.bf16.f32 %rs84, %r132;
	// end inline asm
	mov.b32 	%r133, %f198;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r133;
	// end inline asm
	mov.b32 	%r134, %f199;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r134;
	// end inline asm
	mov.b32 	%r135, %f200;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r135;
	// end inline asm
	mov.b32 	%r136, %f201;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r136;
	// end inline asm
	mov.b32 	%r137, %f202;
	// begin inline asm
	cvt.rn.bf16.f32 %rs89, %r137;
	// end inline asm
	mov.b32 	%r138, %f203;
	// begin inline asm
	cvt.rn.bf16.f32 %rs90, %r138;
	// end inline asm
	mov.b32 	%r139, %f204;
	// begin inline asm
	cvt.rn.bf16.f32 %rs91, %r139;
	// end inline asm
	mov.b32 	%r140, %f205;
	// begin inline asm
	cvt.rn.bf16.f32 %rs92, %r140;
	// end inline asm
	mov.b32 	%r141, %f206;
	// begin inline asm
	cvt.rn.bf16.f32 %rs93, %r141;
	// end inline asm
	mov.b32 	%r142, %f207;
	// begin inline asm
	cvt.rn.bf16.f32 %rs94, %r142;
	// end inline asm
	mov.b32 	%r143, %f208;
	// begin inline asm
	cvt.rn.bf16.f32 %rs95, %r143;
	// end inline asm
	mov.b32 	%r144, %f209;
	// begin inline asm
	cvt.rn.bf16.f32 %rs96, %r144;
	// end inline asm
	add.s64 	%rd38, %rd16, %rd30;
	add.s64 	%rd12, %rd38, %rd27;
	add.s64 	%rd13, %rd12, 1024;
	mov.b32 	%r145, {%rs81, %rs82};
	mov.b32 	%r146, {%rs83, %rs84};
	mov.b32 	%r147, {%rs85, %rs86};
	mov.b32 	%r148, {%rs87, %rs88};
	// begin inline asm
	st.global.v4.b32 [ %rd12 + 0 ], { %r145, %r146, %r147, %r148 };
	// end inline asm
	mov.b32 	%r149, {%rs89, %rs90};
	mov.b32 	%r150, {%rs91, %rs92};
	mov.b32 	%r151, {%rs93, %rs94};
	mov.b32 	%r152, {%rs95, %rs96};
	// begin inline asm
	st.global.v4.b32 [ %rd13 + 0 ], { %r149, %r150, %r151, %r152 };
	// end inline asm
	ret;

}
	// .globl	fusion_52
.visible .entry fusion_52(
	.param .u64 .ptr .align 16 fusion_52_param_0,
	.param .u64 .ptr .align 16 fusion_52_param_1,
	.param .u64 .ptr .align 128 fusion_52_param_2,
	.param .u64 .ptr .align 128 fusion_52_param_3,
	.param .u64 .ptr .align 128 fusion_52_param_4,
	.param .u64 .ptr .align 128 fusion_52_param_5,
	.param .u64 .ptr .align 128 fusion_52_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<129>;
	.reg .b32 	%r<221>;
	.reg .f32 	%f<274>;
	.reg .b64 	%rd<45>;

	ld.param.u64 	%rd18, [fusion_52_param_0];
	ld.param.u64 	%rd19, [fusion_52_param_6];
	cvta.to.global.u64 	%rd20, %rd19;
	ld.param.u64 	%rd21, [fusion_52_param_1];
	ld.param.u64 	%rd22, [fusion_52_param_5];
	cvta.to.global.u64 	%rd23, %rd22;
	ld.param.u64 	%rd24, [fusion_52_param_2];
	ld.param.u64 	%rd25, [fusion_52_param_4];
	cvta.to.global.u64 	%rd26, %rd25;
	ld.param.u64 	%rd27, [fusion_52_param_3];
	cvta.to.global.u64 	%rd28, %rd27;
	cvta.to.global.u64 	%rd29, %rd24;
	cvta.to.global.u64 	%rd30, %rd21;
	cvta.to.global.u64 	%rd13, %rd18;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd31, %r1, 6144;
	add.s64 	%rd32, %rd28, %rd31;
	mov.u32 	%r201, %tid.x;
	and.b32  	%r202, %r201, 31;
	shl.b32 	%r203, %r201, 3;
	and.b32  	%r204, %r203, 248;
	setp.lt.u32 	%p4, %r201, 32;
	selp.b32 	%r205, 0, 256, %p4;
	or.b32  	%r206, %r204, %r205;
	mul.wide.u32 	%rd33, %r206, 2;
	add.s64 	%rd1, %rd32, %rd33;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd34, %r1, 1024;
	shl.b64 	%rd35, %rd34, 1;
	add.s64 	%rd36, %rd29, %rd35;
	add.s64 	%rd3, %rd36, %rd33;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd1, 2048;
	add.s64 	%rd6, %rd1, 3072;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd37, %rd23, %rd35;
	add.s64 	%rd7, %rd37, %rd33;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd9, %rd1, 4096;
	add.s64 	%rd10, %rd1, 5120;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd38, %rd26, %rd35;
	add.s64 	%rd11, %rd38, %rd33;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.rn.f32 	%f97, %f65, %f81;
	add.rn.f32 	%f98, %f66, %f82;
	add.rn.f32 	%f99, %f67, %f83;
	add.rn.f32 	%f100, %f68, %f84;
	add.rn.f32 	%f101, %f69, %f85;
	add.rn.f32 	%f102, %f70, %f86;
	add.rn.f32 	%f103, %f71, %f87;
	add.rn.f32 	%f104, %f72, %f88;
	add.rn.f32 	%f105, %f73, %f89;
	add.rn.f32 	%f106, %f74, %f90;
	add.rn.f32 	%f107, %f75, %f91;
	add.rn.f32 	%f108, %f76, %f92;
	add.rn.f32 	%f109, %f77, %f93;
	add.rn.f32 	%f110, %f78, %f94;
	add.rn.f32 	%f111, %f79, %f95;
	add.rn.f32 	%f112, %f80, %f96;
	add.rn.f32 	%f113, %f49, %f97;
	add.rn.f32 	%f114, %f50, %f98;
	add.rn.f32 	%f115, %f51, %f99;
	add.rn.f32 	%f116, %f52, %f100;
	add.rn.f32 	%f117, %f53, %f101;
	add.rn.f32 	%f118, %f54, %f102;
	add.rn.f32 	%f119, %f55, %f103;
	add.rn.f32 	%f120, %f56, %f104;
	add.rn.f32 	%f121, %f57, %f105;
	add.rn.f32 	%f122, %f58, %f106;
	add.rn.f32 	%f123, %f59, %f107;
	add.rn.f32 	%f124, %f60, %f108;
	add.rn.f32 	%f125, %f61, %f109;
	add.rn.f32 	%f126, %f62, %f110;
	add.rn.f32 	%f127, %f63, %f111;
	add.rn.f32 	%f128, %f64, %f112;
	add.rn.f32 	%f129, %f33, %f113;
	add.rn.f32 	%f130, %f34, %f114;
	add.rn.f32 	%f131, %f35, %f115;
	add.rn.f32 	%f132, %f36, %f116;
	add.rn.f32 	%f133, %f37, %f117;
	add.rn.f32 	%f134, %f38, %f118;
	add.rn.f32 	%f135, %f39, %f119;
	add.rn.f32 	%f136, %f40, %f120;
	add.rn.f32 	%f137, %f41, %f121;
	add.rn.f32 	%f138, %f42, %f122;
	add.rn.f32 	%f139, %f43, %f123;
	add.rn.f32 	%f140, %f44, %f124;
	add.rn.f32 	%f141, %f45, %f125;
	add.rn.f32 	%f142, %f46, %f126;
	add.rn.f32 	%f143, %f47, %f127;
	add.rn.f32 	%f144, %f48, %f128;
	add.rn.f32 	%f145, %f17, %f129;
	add.rn.f32 	%f146, %f18, %f130;
	add.rn.f32 	%f147, %f19, %f131;
	add.rn.f32 	%f148, %f20, %f132;
	add.rn.f32 	%f149, %f21, %f133;
	add.rn.f32 	%f150, %f22, %f134;
	add.rn.f32 	%f151, %f23, %f135;
	add.rn.f32 	%f152, %f24, %f136;
	add.rn.f32 	%f153, %f25, %f137;
	add.rn.f32 	%f154, %f26, %f138;
	add.rn.f32 	%f155, %f27, %f139;
	add.rn.f32 	%f156, %f28, %f140;
	add.rn.f32 	%f157, %f29, %f141;
	add.rn.f32 	%f158, %f30, %f142;
	add.rn.f32 	%f159, %f31, %f143;
	add.rn.f32 	%f160, %f32, %f144;
	add.rn.f32 	%f161, %f1, %f145;
	add.rn.f32 	%f162, %f2, %f146;
	add.rn.f32 	%f163, %f3, %f147;
	add.rn.f32 	%f164, %f4, %f148;
	add.rn.f32 	%f165, %f5, %f149;
	add.rn.f32 	%f166, %f6, %f150;
	add.rn.f32 	%f167, %f7, %f151;
	add.rn.f32 	%f168, %f8, %f152;
	add.rn.f32 	%f169, %f9, %f153;
	add.rn.f32 	%f170, %f10, %f154;
	add.rn.f32 	%f171, %f11, %f155;
	add.rn.f32 	%f172, %f12, %f156;
	add.rn.f32 	%f173, %f13, %f157;
	add.rn.f32 	%f174, %f14, %f158;
	add.rn.f32 	%f175, %f15, %f159;
	add.rn.f32 	%f176, %f16, %f160;
	mul.rn.f32 	%f177, %f161, %f161;
	mul.rn.f32 	%f178, %f162, %f162;
	mul.rn.f32 	%f179, %f163, %f163;
	mul.rn.f32 	%f180, %f164, %f164;
	mul.rn.f32 	%f181, %f165, %f165;
	mul.rn.f32 	%f182, %f166, %f166;
	mul.rn.f32 	%f183, %f167, %f167;
	mul.rn.f32 	%f184, %f168, %f168;
	mul.rn.f32 	%f185, %f169, %f169;
	mul.rn.f32 	%f186, %f170, %f170;
	mul.rn.f32 	%f187, %f171, %f171;
	mul.rn.f32 	%f188, %f172, %f172;
	mul.rn.f32 	%f189, %f173, %f173;
	mul.rn.f32 	%f190, %f174, %f174;
	mul.rn.f32 	%f191, %f175, %f175;
	mul.rn.f32 	%f192, %f176, %f176;
	add.rn.f32 	%f193, %f177, %f178;
	add.rn.f32 	%f194, %f193, %f179;
	add.rn.f32 	%f195, %f194, %f180;
	add.rn.f32 	%f196, %f195, %f181;
	add.rn.f32 	%f197, %f196, %f182;
	add.rn.f32 	%f198, %f197, %f183;
	add.rn.f32 	%f199, %f198, %f184;
	add.rn.f32 	%f200, %f199, %f185;
	add.rn.f32 	%f201, %f200, %f186;
	add.rn.f32 	%f202, %f201, %f187;
	add.rn.f32 	%f203, %f202, %f188;
	add.rn.f32 	%f204, %f203, %f189;
	add.rn.f32 	%f205, %f204, %f190;
	add.rn.f32 	%f206, %f205, %f191;
	add.rn.f32 	%f207, %f206, %f192;
	mov.b32 	%r207, %f207;
	shfl.sync.bfly.b32	%r208, %r207, 16, 31, -1;
	mov.b32 	%f208, %r208;
	add.rn.f32 	%f209, %f207, %f208;
	mov.b32 	%r209, %f209;
	shfl.sync.bfly.b32	%r210, %r209, 8, 31, -1;
	mov.b32 	%f210, %r210;
	add.rn.f32 	%f211, %f209, %f210;
	mov.b32 	%r211, %f211;
	shfl.sync.bfly.b32	%r212, %r211, 4, 31, -1;
	mov.b32 	%f212, %r212;
	add.rn.f32 	%f213, %f211, %f212;
	mov.b32 	%r213, %f213;
	shfl.sync.bfly.b32	%r214, %r213, 2, 31, -1;
	mov.b32 	%f214, %r214;
	add.rn.f32 	%f215, %f213, %f214;
	mov.b32 	%r215, %f215;
	shfl.sync.bfly.b32	%r216, %r215, 1, 31, -1;
	mov.b32 	%f216, %r216;
	add.rn.f32 	%f217, %f215, %f216;
	setp.eq.s32 	%p1, %r202, 0;
	shr.u32 	%r217, %r201, 3;
	and.b32  	%r218, %r217, 4;
	cvt.u64.u32 	%rd39, %r218;
	mov.u64 	%rd40, global_smem;
	add.s64 	%rd41, %rd40, %rd39;
	mov.b32 	%r147, %f217;
	cvt.u32.u64 	%r146, %rd41;
	// begin inline asm
	@%p1 st.shared.b32 [ %r146 + 0 ], %r147;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r201, 2;
	shl.b32 	%r219, %r201, 2;
	cvt.u64.u32 	%rd42, %r219;
	add.s64 	%rd43, %rd40, %rd42;
	cvt.u32.u64 	%r149, %rd43;
	// begin inline asm
	@%p2 ld.shared.b32 %r148, [ %r149 + 0 ];
	// end inline asm
	mov.b32 	%f218, %r148;
	shfl.sync.bfly.b32	%r220, %r148, 1, 31, -1;
	mov.b32 	%f219, %r220;
	add.rn.f32 	%f220, %f218, %f219;
	setp.eq.s32 	%p3, %r201, 0;
	mov.b32 	%r151, %f220;
	// begin inline asm
	@%p3 st.shared.b32 [ %r149 + 0 ], %r151;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f221, [global_smem];
	mul.rn.f32 	%f222, %f221, 0f3A800000;
	// begin inline asm
	mov.u32 %r152, 0x0;
	ld.global.b32 { %r152 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f223, %r152;
	add.rn.f32 	%f224, %f222, %f223;
	rsqrt.approx.f32 	%f225, %f224;
	mul.rn.f32 	%f226, %f161, %f225;
	mul.rn.f32 	%f227, %f162, %f225;
	mul.rn.f32 	%f228, %f163, %f225;
	mul.rn.f32 	%f229, %f164, %f225;
	mul.rn.f32 	%f230, %f165, %f225;
	mul.rn.f32 	%f231, %f166, %f225;
	mul.rn.f32 	%f232, %f167, %f225;
	mul.rn.f32 	%f233, %f168, %f225;
	mul.rn.f32 	%f234, %f169, %f225;
	mul.rn.f32 	%f235, %f170, %f225;
	mul.rn.f32 	%f236, %f171, %f225;
	mul.rn.f32 	%f237, %f172, %f225;
	mul.rn.f32 	%f238, %f173, %f225;
	mul.rn.f32 	%f239, %f174, %f225;
	mul.rn.f32 	%f240, %f175, %f225;
	mul.rn.f32 	%f241, %f176, %f225;
	add.s64 	%rd14, %rd30, %rd33;
	add.s64 	%rd15, %rd14, 1024;
	// begin inline asm
	mov.u32 %r153, 0x0;
	mov.u32 %r154, 0x0;
	mov.u32 %r155, 0x0;
	mov.u32 %r156, 0x0;
	ld.global.v4.b32 { %r153, %r154, %r155, %r156 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r153;
	mov.b32 	{%rs99, %rs100}, %r154;
	mov.b32 	{%rs101, %rs102}, %r155;
	mov.b32 	{%rs103, %rs104}, %r156;
	// begin inline asm
	mov.u32 %r157, 0x0;
	mov.u32 %r158, 0x0;
	mov.u32 %r159, 0x0;
	mov.u32 %r160, 0x0;
	ld.global.v4.b32 { %r157, %r158, %r159, %r160 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r157;
	mov.b32 	{%rs107, %rs108}, %r158;
	mov.b32 	{%rs109, %rs110}, %r159;
	mov.b32 	{%rs111, %rs112}, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs97;
	// end inline asm
	mov.b32 	%f242, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs98;
	// end inline asm
	mov.b32 	%f243, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs99;
	// end inline asm
	mov.b32 	%f244, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs100;
	// end inline asm
	mov.b32 	%f245, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs101;
	// end inline asm
	mov.b32 	%f246, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs102;
	// end inline asm
	mov.b32 	%f247, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs103;
	// end inline asm
	mov.b32 	%f248, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs104;
	// end inline asm
	mov.b32 	%f249, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs105;
	// end inline asm
	mov.b32 	%f250, %r169;
	// begin inline asm
	cvt.f32.bf16 %r170, %rs106;
	// end inline asm
	mov.b32 	%f251, %r170;
	// begin inline asm
	cvt.f32.bf16 %r171, %rs107;
	// end inline asm
	mov.b32 	%f252, %r171;
	// begin inline asm
	cvt.f32.bf16 %r172, %rs108;
	// end inline asm
	mov.b32 	%f253, %r172;
	// begin inline asm
	cvt.f32.bf16 %r173, %rs109;
	// end inline asm
	mov.b32 	%f254, %r173;
	// begin inline asm
	cvt.f32.bf16 %r174, %rs110;
	// end inline asm
	mov.b32 	%f255, %r174;
	// begin inline asm
	cvt.f32.bf16 %r175, %rs111;
	// end inline asm
	mov.b32 	%f256, %r175;
	// begin inline asm
	cvt.f32.bf16 %r176, %rs112;
	// end inline asm
	mov.b32 	%f257, %r176;
	mul.rn.f32 	%f258, %f226, %f242;
	mul.rn.f32 	%f259, %f227, %f243;
	mul.rn.f32 	%f260, %f228, %f244;
	mul.rn.f32 	%f261, %f229, %f245;
	mul.rn.f32 	%f262, %f230, %f246;
	mul.rn.f32 	%f263, %f231, %f247;
	mul.rn.f32 	%f264, %f232, %f248;
	mul.rn.f32 	%f265, %f233, %f249;
	mul.rn.f32 	%f266, %f234, %f250;
	mul.rn.f32 	%f267, %f235, %f251;
	mul.rn.f32 	%f268, %f236, %f252;
	mul.rn.f32 	%f269, %f237, %f253;
	mul.rn.f32 	%f270, %f238, %f254;
	mul.rn.f32 	%f271, %f239, %f255;
	mul.rn.f32 	%f272, %f240, %f256;
	mul.rn.f32 	%f273, %f241, %f257;
	mov.b32 	%r177, %f258;
	// begin inline asm
	cvt.rn.bf16.f32 %rs113, %r177;
	// end inline asm
	mov.b32 	%r178, %f259;
	// begin inline asm
	cvt.rn.bf16.f32 %rs114, %r178;
	// end inline asm
	mov.b32 	%r179, %f260;
	// begin inline asm
	cvt.rn.bf16.f32 %rs115, %r179;
	// end inline asm
	mov.b32 	%r180, %f261;
	// begin inline asm
	cvt.rn.bf16.f32 %rs116, %r180;
	// end inline asm
	mov.b32 	%r181, %f262;
	// begin inline asm
	cvt.rn.bf16.f32 %rs117, %r181;
	// end inline asm
	mov.b32 	%r182, %f263;
	// begin inline asm
	cvt.rn.bf16.f32 %rs118, %r182;
	// end inline asm
	mov.b32 	%r183, %f264;
	// begin inline asm
	cvt.rn.bf16.f32 %rs119, %r183;
	// end inline asm
	mov.b32 	%r184, %f265;
	// begin inline asm
	cvt.rn.bf16.f32 %rs120, %r184;
	// end inline asm
	mov.b32 	%r185, %f266;
	// begin inline asm
	cvt.rn.bf16.f32 %rs121, %r185;
	// end inline asm
	mov.b32 	%r186, %f267;
	// begin inline asm
	cvt.rn.bf16.f32 %rs122, %r186;
	// end inline asm
	mov.b32 	%r187, %f268;
	// begin inline asm
	cvt.rn.bf16.f32 %rs123, %r187;
	// end inline asm
	mov.b32 	%r188, %f269;
	// begin inline asm
	cvt.rn.bf16.f32 %rs124, %r188;
	// end inline asm
	mov.b32 	%r189, %f270;
	// begin inline asm
	cvt.rn.bf16.f32 %rs125, %r189;
	// end inline asm
	mov.b32 	%r190, %f271;
	// begin inline asm
	cvt.rn.bf16.f32 %rs126, %r190;
	// end inline asm
	mov.b32 	%r191, %f272;
	// begin inline asm
	cvt.rn.bf16.f32 %rs127, %r191;
	// end inline asm
	mov.b32 	%r192, %f273;
	// begin inline asm
	cvt.rn.bf16.f32 %rs128, %r192;
	// end inline asm
	add.s64 	%rd44, %rd20, %rd35;
	add.s64 	%rd16, %rd44, %rd33;
	add.s64 	%rd17, %rd16, 1024;
	mov.b32 	%r193, {%rs113, %rs114};
	mov.b32 	%r194, {%rs115, %rs116};
	mov.b32 	%r195, {%rs117, %rs118};
	mov.b32 	%r196, {%rs119, %rs120};
	// begin inline asm
	st.global.v4.b32 [ %rd16 + 0 ], { %r193, %r194, %r195, %r196 };
	// end inline asm
	mov.b32 	%r197, {%rs121, %rs122};
	mov.b32 	%r198, {%rs123, %rs124};
	mov.b32 	%r199, {%rs125, %rs126};
	mov.b32 	%r200, {%rs127, %rs128};
	// begin inline asm
	st.global.v4.b32 [ %rd17 + 0 ], { %r197, %r198, %r199, %r200 };
	// end inline asm
	ret;

}
	// .globl	fusion_53
.visible .entry fusion_53(
	.param .u64 .ptr .align 16 fusion_53_param_0,
	.param .u64 .ptr .align 128 fusion_53_param_1,
	.param .u64 .ptr .align 16 fusion_53_param_2,
	.param .u64 .ptr .align 128 fusion_53_param_3,
	.param .u64 .ptr .align 128 fusion_53_param_4,
	.param .u64 .ptr .align 128 fusion_53_param_5,
	.param .u64 .ptr .align 128 fusion_53_param_6,
	.param .u64 .ptr .align 128 fusion_53_param_7
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<145>;
	.reg .b32 	%r<245>;
	.reg .f32 	%f<306>;
	.reg .b64 	%rd<50>;

	ld.param.u64 	%rd20, [fusion_53_param_0];
	ld.param.u64 	%rd21, [fusion_53_param_7];
	cvta.to.global.u64 	%rd22, %rd21;
	ld.param.u64 	%rd23, [fusion_53_param_1];
	ld.param.u64 	%rd24, [fusion_53_param_6];
	cvta.to.global.u64 	%rd25, %rd24;
	ld.param.u64 	%rd26, [fusion_53_param_2];
	ld.param.u64 	%rd27, [fusion_53_param_5];
	cvta.to.global.u64 	%rd28, %rd27;
	ld.param.u64 	%rd29, [fusion_53_param_3];
	ld.param.u64 	%rd30, [fusion_53_param_4];
	cvta.to.global.u64 	%rd31, %rd30;
	cvta.to.global.u64 	%rd32, %rd29;
	cvta.to.global.u64 	%rd33, %rd26;
	cvta.to.global.u64 	%rd34, %rd23;
	cvta.to.global.u64 	%rd15, %rd20;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd35, %r1, 1024;
	shl.b64 	%rd36, %rd35, 1;
	add.s64 	%rd37, %rd34, %rd36;
	mov.u32 	%r225, %tid.x;
	and.b32  	%r226, %r225, 31;
	shl.b32 	%r227, %r225, 3;
	and.b32  	%r228, %r227, 248;
	setp.lt.u32 	%p4, %r225, 32;
	selp.b32 	%r229, 0, 256, %p4;
	or.b32  	%r230, %r228, %r229;
	mul.wide.u32 	%rd38, %r230, 2;
	add.s64 	%rd1, %rd37, %rd38;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd39, %r1, 6144;
	add.s64 	%rd40, %rd31, %rd39;
	add.s64 	%rd3, %rd40, %rd38;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd41, %rd32, %rd36;
	add.s64 	%rd5, %rd41, %rd38;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd7, %rd3, 2048;
	add.s64 	%rd8, %rd3, 3072;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd42, %rd25, %rd36;
	add.s64 	%rd9, %rd42, %rd38;
	add.s64 	%rd10, %rd9, 1024;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd11, %rd3, 4096;
	add.s64 	%rd12, %rd3, 5120;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.s64 	%rd43, %rd28, %rd36;
	add.s64 	%rd13, %rd43, %rd38;
	add.s64 	%rd14, %rd13, 1024;
	// begin inline asm
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	ld.global.v4.b32 { %r146, %r147, %r148, %r149 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r146;
	mov.b32 	{%rs99, %rs100}, %r147;
	mov.b32 	{%rs101, %rs102}, %r148;
	mov.b32 	{%rs103, %rs104}, %r149;
	// begin inline asm
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	ld.global.v4.b32 { %r150, %r151, %r152, %r153 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r150;
	mov.b32 	{%rs107, %rs108}, %r151;
	mov.b32 	{%rs109, %rs110}, %r152;
	mov.b32 	{%rs111, %rs112}, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs97;
	// end inline asm
	mov.b32 	%f97, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs98;
	// end inline asm
	mov.b32 	%f98, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs99;
	// end inline asm
	mov.b32 	%f99, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs100;
	// end inline asm
	mov.b32 	%f100, %r157;
	// begin inline asm
	cvt.f32.bf16 %r158, %rs101;
	// end inline asm
	mov.b32 	%f101, %r158;
	// begin inline asm
	cvt.f32.bf16 %r159, %rs102;
	// end inline asm
	mov.b32 	%f102, %r159;
	// begin inline asm
	cvt.f32.bf16 %r160, %rs103;
	// end inline asm
	mov.b32 	%f103, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs104;
	// end inline asm
	mov.b32 	%f104, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs105;
	// end inline asm
	mov.b32 	%f105, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs106;
	// end inline asm
	mov.b32 	%f106, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs107;
	// end inline asm
	mov.b32 	%f107, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs108;
	// end inline asm
	mov.b32 	%f108, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs109;
	// end inline asm
	mov.b32 	%f109, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs110;
	// end inline asm
	mov.b32 	%f110, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs111;
	// end inline asm
	mov.b32 	%f111, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs112;
	// end inline asm
	mov.b32 	%f112, %r169;
	add.rn.f32 	%f113, %f81, %f97;
	add.rn.f32 	%f114, %f82, %f98;
	add.rn.f32 	%f115, %f83, %f99;
	add.rn.f32 	%f116, %f84, %f100;
	add.rn.f32 	%f117, %f85, %f101;
	add.rn.f32 	%f118, %f86, %f102;
	add.rn.f32 	%f119, %f87, %f103;
	add.rn.f32 	%f120, %f88, %f104;
	add.rn.f32 	%f121, %f89, %f105;
	add.rn.f32 	%f122, %f90, %f106;
	add.rn.f32 	%f123, %f91, %f107;
	add.rn.f32 	%f124, %f92, %f108;
	add.rn.f32 	%f125, %f93, %f109;
	add.rn.f32 	%f126, %f94, %f110;
	add.rn.f32 	%f127, %f95, %f111;
	add.rn.f32 	%f128, %f96, %f112;
	add.rn.f32 	%f129, %f65, %f113;
	add.rn.f32 	%f130, %f66, %f114;
	add.rn.f32 	%f131, %f67, %f115;
	add.rn.f32 	%f132, %f68, %f116;
	add.rn.f32 	%f133, %f69, %f117;
	add.rn.f32 	%f134, %f70, %f118;
	add.rn.f32 	%f135, %f71, %f119;
	add.rn.f32 	%f136, %f72, %f120;
	add.rn.f32 	%f137, %f73, %f121;
	add.rn.f32 	%f138, %f74, %f122;
	add.rn.f32 	%f139, %f75, %f123;
	add.rn.f32 	%f140, %f76, %f124;
	add.rn.f32 	%f141, %f77, %f125;
	add.rn.f32 	%f142, %f78, %f126;
	add.rn.f32 	%f143, %f79, %f127;
	add.rn.f32 	%f144, %f80, %f128;
	add.rn.f32 	%f145, %f49, %f129;
	add.rn.f32 	%f146, %f50, %f130;
	add.rn.f32 	%f147, %f51, %f131;
	add.rn.f32 	%f148, %f52, %f132;
	add.rn.f32 	%f149, %f53, %f133;
	add.rn.f32 	%f150, %f54, %f134;
	add.rn.f32 	%f151, %f55, %f135;
	add.rn.f32 	%f152, %f56, %f136;
	add.rn.f32 	%f153, %f57, %f137;
	add.rn.f32 	%f154, %f58, %f138;
	add.rn.f32 	%f155, %f59, %f139;
	add.rn.f32 	%f156, %f60, %f140;
	add.rn.f32 	%f157, %f61, %f141;
	add.rn.f32 	%f158, %f62, %f142;
	add.rn.f32 	%f159, %f63, %f143;
	add.rn.f32 	%f160, %f64, %f144;
	add.rn.f32 	%f161, %f33, %f145;
	add.rn.f32 	%f162, %f34, %f146;
	add.rn.f32 	%f163, %f35, %f147;
	add.rn.f32 	%f164, %f36, %f148;
	add.rn.f32 	%f165, %f37, %f149;
	add.rn.f32 	%f166, %f38, %f150;
	add.rn.f32 	%f167, %f39, %f151;
	add.rn.f32 	%f168, %f40, %f152;
	add.rn.f32 	%f169, %f41, %f153;
	add.rn.f32 	%f170, %f42, %f154;
	add.rn.f32 	%f171, %f43, %f155;
	add.rn.f32 	%f172, %f44, %f156;
	add.rn.f32 	%f173, %f45, %f157;
	add.rn.f32 	%f174, %f46, %f158;
	add.rn.f32 	%f175, %f47, %f159;
	add.rn.f32 	%f176, %f48, %f160;
	add.rn.f32 	%f177, %f17, %f161;
	add.rn.f32 	%f178, %f18, %f162;
	add.rn.f32 	%f179, %f19, %f163;
	add.rn.f32 	%f180, %f20, %f164;
	add.rn.f32 	%f181, %f21, %f165;
	add.rn.f32 	%f182, %f22, %f166;
	add.rn.f32 	%f183, %f23, %f167;
	add.rn.f32 	%f184, %f24, %f168;
	add.rn.f32 	%f185, %f25, %f169;
	add.rn.f32 	%f186, %f26, %f170;
	add.rn.f32 	%f187, %f27, %f171;
	add.rn.f32 	%f188, %f28, %f172;
	add.rn.f32 	%f189, %f29, %f173;
	add.rn.f32 	%f190, %f30, %f174;
	add.rn.f32 	%f191, %f31, %f175;
	add.rn.f32 	%f192, %f32, %f176;
	add.rn.f32 	%f193, %f1, %f177;
	add.rn.f32 	%f194, %f2, %f178;
	add.rn.f32 	%f195, %f3, %f179;
	add.rn.f32 	%f196, %f4, %f180;
	add.rn.f32 	%f197, %f5, %f181;
	add.rn.f32 	%f198, %f6, %f182;
	add.rn.f32 	%f199, %f7, %f183;
	add.rn.f32 	%f200, %f8, %f184;
	add.rn.f32 	%f201, %f9, %f185;
	add.rn.f32 	%f202, %f10, %f186;
	add.rn.f32 	%f203, %f11, %f187;
	add.rn.f32 	%f204, %f12, %f188;
	add.rn.f32 	%f205, %f13, %f189;
	add.rn.f32 	%f206, %f14, %f190;
	add.rn.f32 	%f207, %f15, %f191;
	add.rn.f32 	%f208, %f16, %f192;
	mul.rn.f32 	%f209, %f193, %f193;
	mul.rn.f32 	%f210, %f194, %f194;
	mul.rn.f32 	%f211, %f195, %f195;
	mul.rn.f32 	%f212, %f196, %f196;
	mul.rn.f32 	%f213, %f197, %f197;
	mul.rn.f32 	%f214, %f198, %f198;
	mul.rn.f32 	%f215, %f199, %f199;
	mul.rn.f32 	%f216, %f200, %f200;
	mul.rn.f32 	%f217, %f201, %f201;
	mul.rn.f32 	%f218, %f202, %f202;
	mul.rn.f32 	%f219, %f203, %f203;
	mul.rn.f32 	%f220, %f204, %f204;
	mul.rn.f32 	%f221, %f205, %f205;
	mul.rn.f32 	%f222, %f206, %f206;
	mul.rn.f32 	%f223, %f207, %f207;
	mul.rn.f32 	%f224, %f208, %f208;
	add.rn.f32 	%f225, %f209, %f210;
	add.rn.f32 	%f226, %f225, %f211;
	add.rn.f32 	%f227, %f226, %f212;
	add.rn.f32 	%f228, %f227, %f213;
	add.rn.f32 	%f229, %f228, %f214;
	add.rn.f32 	%f230, %f229, %f215;
	add.rn.f32 	%f231, %f230, %f216;
	add.rn.f32 	%f232, %f231, %f217;
	add.rn.f32 	%f233, %f232, %f218;
	add.rn.f32 	%f234, %f233, %f219;
	add.rn.f32 	%f235, %f234, %f220;
	add.rn.f32 	%f236, %f235, %f221;
	add.rn.f32 	%f237, %f236, %f222;
	add.rn.f32 	%f238, %f237, %f223;
	add.rn.f32 	%f239, %f238, %f224;
	mov.b32 	%r231, %f239;
	shfl.sync.bfly.b32	%r232, %r231, 16, 31, -1;
	mov.b32 	%f240, %r232;
	add.rn.f32 	%f241, %f239, %f240;
	mov.b32 	%r233, %f241;
	shfl.sync.bfly.b32	%r234, %r233, 8, 31, -1;
	mov.b32 	%f242, %r234;
	add.rn.f32 	%f243, %f241, %f242;
	mov.b32 	%r235, %f243;
	shfl.sync.bfly.b32	%r236, %r235, 4, 31, -1;
	mov.b32 	%f244, %r236;
	add.rn.f32 	%f245, %f243, %f244;
	mov.b32 	%r237, %f245;
	shfl.sync.bfly.b32	%r238, %r237, 2, 31, -1;
	mov.b32 	%f246, %r238;
	add.rn.f32 	%f247, %f245, %f246;
	mov.b32 	%r239, %f247;
	shfl.sync.bfly.b32	%r240, %r239, 1, 31, -1;
	mov.b32 	%f248, %r240;
	add.rn.f32 	%f249, %f247, %f248;
	setp.eq.s32 	%p1, %r226, 0;
	shr.u32 	%r241, %r225, 3;
	and.b32  	%r242, %r241, 4;
	cvt.u64.u32 	%rd44, %r242;
	mov.u64 	%rd45, global_smem;
	add.s64 	%rd46, %rd45, %rd44;
	mov.b32 	%r171, %f249;
	cvt.u32.u64 	%r170, %rd46;
	// begin inline asm
	@%p1 st.shared.b32 [ %r170 + 0 ], %r171;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r225, 2;
	shl.b32 	%r243, %r225, 2;
	cvt.u64.u32 	%rd47, %r243;
	add.s64 	%rd48, %rd45, %rd47;
	cvt.u32.u64 	%r173, %rd48;
	// begin inline asm
	@%p2 ld.shared.b32 %r172, [ %r173 + 0 ];
	// end inline asm
	mov.b32 	%f250, %r172;
	shfl.sync.bfly.b32	%r244, %r172, 1, 31, -1;
	mov.b32 	%f251, %r244;
	add.rn.f32 	%f252, %f250, %f251;
	setp.eq.s32 	%p3, %r225, 0;
	mov.b32 	%r175, %f252;
	// begin inline asm
	@%p3 st.shared.b32 [ %r173 + 0 ], %r175;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f253, [global_smem];
	mul.rn.f32 	%f254, %f253, 0f3A800000;
	// begin inline asm
	mov.u32 %r176, 0x0;
	ld.global.b32 { %r176 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	%f255, %r176;
	add.rn.f32 	%f256, %f254, %f255;
	rsqrt.approx.f32 	%f257, %f256;
	mul.rn.f32 	%f258, %f193, %f257;
	mul.rn.f32 	%f259, %f194, %f257;
	mul.rn.f32 	%f260, %f195, %f257;
	mul.rn.f32 	%f261, %f196, %f257;
	mul.rn.f32 	%f262, %f197, %f257;
	mul.rn.f32 	%f263, %f198, %f257;
	mul.rn.f32 	%f264, %f199, %f257;
	mul.rn.f32 	%f265, %f200, %f257;
	mul.rn.f32 	%f266, %f201, %f257;
	mul.rn.f32 	%f267, %f202, %f257;
	mul.rn.f32 	%f268, %f203, %f257;
	mul.rn.f32 	%f269, %f204, %f257;
	mul.rn.f32 	%f270, %f205, %f257;
	mul.rn.f32 	%f271, %f206, %f257;
	mul.rn.f32 	%f272, %f207, %f257;
	mul.rn.f32 	%f273, %f208, %f257;
	add.s64 	%rd16, %rd33, %rd38;
	add.s64 	%rd17, %rd16, 1024;
	// begin inline asm
	mov.u32 %r177, 0x0;
	mov.u32 %r178, 0x0;
	mov.u32 %r179, 0x0;
	mov.u32 %r180, 0x0;
	ld.global.v4.b32 { %r177, %r178, %r179, %r180 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs113, %rs114}, %r177;
	mov.b32 	{%rs115, %rs116}, %r178;
	mov.b32 	{%rs117, %rs118}, %r179;
	mov.b32 	{%rs119, %rs120}, %r180;
	// begin inline asm
	mov.u32 %r181, 0x0;
	mov.u32 %r182, 0x0;
	mov.u32 %r183, 0x0;
	mov.u32 %r184, 0x0;
	ld.global.v4.b32 { %r181, %r182, %r183, %r184 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	{%rs121, %rs122}, %r181;
	mov.b32 	{%rs123, %rs124}, %r182;
	mov.b32 	{%rs125, %rs126}, %r183;
	mov.b32 	{%rs127, %rs128}, %r184;
	// begin inline asm
	cvt.f32.bf16 %r185, %rs113;
	// end inline asm
	mov.b32 	%f274, %r185;
	// begin inline asm
	cvt.f32.bf16 %r186, %rs114;
	// end inline asm
	mov.b32 	%f275, %r186;
	// begin inline asm
	cvt.f32.bf16 %r187, %rs115;
	// end inline asm
	mov.b32 	%f276, %r187;
	// begin inline asm
	cvt.f32.bf16 %r188, %rs116;
	// end inline asm
	mov.b32 	%f277, %r188;
	// begin inline asm
	cvt.f32.bf16 %r189, %rs117;
	// end inline asm
	mov.b32 	%f278, %r189;
	// begin inline asm
	cvt.f32.bf16 %r190, %rs118;
	// end inline asm
	mov.b32 	%f279, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs119;
	// end inline asm
	mov.b32 	%f280, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs120;
	// end inline asm
	mov.b32 	%f281, %r192;
	// begin inline asm
	cvt.f32.bf16 %r193, %rs121;
	// end inline asm
	mov.b32 	%f282, %r193;
	// begin inline asm
	cvt.f32.bf16 %r194, %rs122;
	// end inline asm
	mov.b32 	%f283, %r194;
	// begin inline asm
	cvt.f32.bf16 %r195, %rs123;
	// end inline asm
	mov.b32 	%f284, %r195;
	// begin inline asm
	cvt.f32.bf16 %r196, %rs124;
	// end inline asm
	mov.b32 	%f285, %r196;
	// begin inline asm
	cvt.f32.bf16 %r197, %rs125;
	// end inline asm
	mov.b32 	%f286, %r197;
	// begin inline asm
	cvt.f32.bf16 %r198, %rs126;
	// end inline asm
	mov.b32 	%f287, %r198;
	// begin inline asm
	cvt.f32.bf16 %r199, %rs127;
	// end inline asm
	mov.b32 	%f288, %r199;
	// begin inline asm
	cvt.f32.bf16 %r200, %rs128;
	// end inline asm
	mov.b32 	%f289, %r200;
	mul.rn.f32 	%f290, %f258, %f274;
	mul.rn.f32 	%f291, %f259, %f275;
	mul.rn.f32 	%f292, %f260, %f276;
	mul.rn.f32 	%f293, %f261, %f277;
	mul.rn.f32 	%f294, %f262, %f278;
	mul.rn.f32 	%f295, %f263, %f279;
	mul.rn.f32 	%f296, %f264, %f280;
	mul.rn.f32 	%f297, %f265, %f281;
	mul.rn.f32 	%f298, %f266, %f282;
	mul.rn.f32 	%f299, %f267, %f283;
	mul.rn.f32 	%f300, %f268, %f284;
	mul.rn.f32 	%f301, %f269, %f285;
	mul.rn.f32 	%f302, %f270, %f286;
	mul.rn.f32 	%f303, %f271, %f287;
	mul.rn.f32 	%f304, %f272, %f288;
	mul.rn.f32 	%f305, %f273, %f289;
	mov.b32 	%r201, %f290;
	// begin inline asm
	cvt.rn.bf16.f32 %rs129, %r201;
	// end inline asm
	mov.b32 	%r202, %f291;
	// begin inline asm
	cvt.rn.bf16.f32 %rs130, %r202;
	// end inline asm
	mov.b32 	%r203, %f292;
	// begin inline asm
	cvt.rn.bf16.f32 %rs131, %r203;
	// end inline asm
	mov.b32 	%r204, %f293;
	// begin inline asm
	cvt.rn.bf16.f32 %rs132, %r204;
	// end inline asm
	mov.b32 	%r205, %f294;
	// begin inline asm
	cvt.rn.bf16.f32 %rs133, %r205;
	// end inline asm
	mov.b32 	%r206, %f295;
	// begin inline asm
	cvt.rn.bf16.f32 %rs134, %r206;
	// end inline asm
	mov.b32 	%r207, %f296;
	// begin inline asm
	cvt.rn.bf16.f32 %rs135, %r207;
	// end inline asm
	mov.b32 	%r208, %f297;
	// begin inline asm
	cvt.rn.bf16.f32 %rs136, %r208;
	// end inline asm
	mov.b32 	%r209, %f298;
	// begin inline asm
	cvt.rn.bf16.f32 %rs137, %r209;
	// end inline asm
	mov.b32 	%r210, %f299;
	// begin inline asm
	cvt.rn.bf16.f32 %rs138, %r210;
	// end inline asm
	mov.b32 	%r211, %f300;
	// begin inline asm
	cvt.rn.bf16.f32 %rs139, %r211;
	// end inline asm
	mov.b32 	%r212, %f301;
	// begin inline asm
	cvt.rn.bf16.f32 %rs140, %r212;
	// end inline asm
	mov.b32 	%r213, %f302;
	// begin inline asm
	cvt.rn.bf16.f32 %rs141, %r213;
	// end inline asm
	mov.b32 	%r214, %f303;
	// begin inline asm
	cvt.rn.bf16.f32 %rs142, %r214;
	// end inline asm
	mov.b32 	%r215, %f304;
	// begin inline asm
	cvt.rn.bf16.f32 %rs143, %r215;
	// end inline asm
	mov.b32 	%r216, %f305;
	// begin inline asm
	cvt.rn.bf16.f32 %rs144, %r216;
	// end inline asm
	add.s64 	%rd49, %rd22, %rd36;
	add.s64 	%rd18, %rd49, %rd38;
	add.s64 	%rd19, %rd18, 1024;
	mov.b32 	%r217, {%rs129, %rs130};
	mov.b32 	%r218, {%rs131, %rs132};
	mov.b32 	%r219, {%rs133, %rs134};
	mov.b32 	%r220, {%rs135, %rs136};
	// begin inline asm
	st.global.v4.b32 [ %rd18 + 0 ], { %r217, %r218, %r219, %r220 };
	// end inline asm
	mov.b32 	%r221, {%rs137, %rs138};
	mov.b32 	%r222, {%rs139, %rs140};
	mov.b32 	%r223, {%rs141, %rs142};
	mov.b32 	%r224, {%rs143, %rs144};
	// begin inline asm
	st.global.v4.b32 [ %rd19 + 0 ], { %r221, %r222, %r223, %r224 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 126976;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	fusion_45
.visible .entry fusion_45(
	.param .u64 .ptr .align 16 fusion_45_param_0,
	.param .u64 .ptr .align 128 fusion_45_param_1,
	.param .u64 .ptr .align 16 fusion_45_param_2,
	.param .u64 .ptr .align 128 fusion_45_param_3
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<78>;
	.reg .f32 	%f<60>;
	.reg .b64 	%rd<43>;

	ld.param.u64 	%rd6, [fusion_45_param_0];
	ld.param.u64 	%rd7, [fusion_45_param_3];
	cvta.to.global.u64 	%rd8, %rd7;
	ld.param.u64 	%rd9, [fusion_45_param_1];
	ld.param.u64 	%rd10, [fusion_45_param_2];
	cvta.to.global.u64 	%rd11, %rd10;
	cvta.to.global.u64 	%rd12, %rd9;
	cvta.to.global.u64 	%rd2, %rd6;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r43, %r1, 9;
	cvt.u64.u32 	%rd13, %r43;
	and.b64  	%rd14, %rd13, 512;
	mul.wide.s32 	%rd15, %r1, 2048;
	or.b64  	%rd16, %rd15, %rd14;
	shl.b64 	%rd17, %rd16, 1;
	or.b64  	%rd18, %rd17, 4096;
	add.s64 	%rd19, %rd12, %rd18;
	mov.u32 	%r44, %tid.x;
	shl.b32 	%r45, %r44, 3;
	and.b32  	%r46, %r45, 120;
	and.b32  	%r47, %r45, 248;
	setp.gt.u32 	%p4, %r44, 31;
	selp.b32 	%r48, 256, 0, %p4;
	or.b32  	%r49, %r47, %r48;
	mul.wide.u32 	%rd20, %r49, 2;
	add.s64 	%rd1, %rd19, %rd20;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs1;
	// end inline asm
	mov.b32 	%f1, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs2;
	// end inline asm
	mov.b32 	%f2, %r7;
	// begin inline asm
	cvt.f32.bf16 %r8, %rs3;
	// end inline asm
	mov.b32 	%f3, %r8;
	// begin inline asm
	cvt.f32.bf16 %r9, %rs4;
	// end inline asm
	mov.b32 	%f4, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	mul.rn.f32 	%f9, %f1, %f1;
	mul.rn.f32 	%f10, %f2, %f2;
	mul.rn.f32 	%f11, %f3, %f3;
	mul.rn.f32 	%f12, %f4, %f4;
	mul.rn.f32 	%f13, %f5, %f5;
	mul.rn.f32 	%f14, %f6, %f6;
	mul.rn.f32 	%f15, %f7, %f7;
	mul.rn.f32 	%f16, %f8, %f8;
	add.rn.f32 	%f17, %f9, %f10;
	add.rn.f32 	%f18, %f17, %f11;
	add.rn.f32 	%f19, %f18, %f12;
	add.rn.f32 	%f20, %f19, %f13;
	add.rn.f32 	%f21, %f20, %f14;
	add.rn.f32 	%f22, %f21, %f15;
	add.rn.f32 	%f23, %f22, %f16;
	mov.b32 	%r50, %f23;
	shfl.sync.bfly.b32	%r51, %r50, 8, 31, -1;
	mov.b32 	%f24, %r51;
	add.rn.f32 	%f25, %f23, %f24;
	mov.b32 	%r52, %f25;
	shfl.sync.bfly.b32	%r53, %r52, 4, 31, -1;
	mov.b32 	%f26, %r53;
	add.rn.f32 	%f27, %f25, %f26;
	mov.b32 	%r54, %f27;
	shfl.sync.bfly.b32	%r55, %r54, 2, 31, -1;
	mov.b32 	%f28, %r55;
	add.rn.f32 	%f29, %f27, %f28;
	mov.b32 	%r56, %f29;
	shfl.sync.bfly.b32	%r57, %r56, 1, 31, -1;
	mov.b32 	%f30, %r57;
	add.rn.f32 	%f31, %f29, %f30;
	mul.rn.f32 	%f32, %f31, 0f3C000000;
	// begin inline asm
	mov.u32 %r14, 0x0;
	ld.global.b32 { %r14 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r14;
	add.rn.f32 	%f34, %f32, %f33;
	rsqrt.approx.f32 	%f35, %f34;
	mul.rn.f32 	%f36, %f1, %f35;
	mul.rn.f32 	%f37, %f2, %f35;
	mul.rn.f32 	%f38, %f3, %f35;
	mul.rn.f32 	%f39, %f4, %f35;
	mul.rn.f32 	%f40, %f5, %f35;
	mul.rn.f32 	%f41, %f6, %f35;
	mul.rn.f32 	%f42, %f7, %f35;
	mul.rn.f32 	%f43, %f8, %f35;
	shl.b32 	%r58, %r44, 1;
	and.b32  	%r59, %r58, 62;
	selp.b32 	%r60, 64, 0, %p4;
	or.b32  	%r61, %r59, %r60;
	shl.b32 	%r62, %r44, 2;
	and.b32  	%r63, %r62, 124;
	cvt.u64.u32 	%rd21, %r63;
	mul.wide.u32 	%rd22, %r61, 2;
	add.s64 	%rd3, %rd11, %rd22;
	// begin inline asm
	mov.u32 %r15, 0x0;
	ld.global.b32 { %r15 }, [ %rd3 + 0 ];
	// end inline asm
	{ .reg .b16 tmp; mov.b32 {tmp, %rs10}, %r15; }
	mov.u64 	%rd23, global_smem;
	add.s64 	%rd24, %rd23, %rd22;
	cvt.u16.u32 	%rs9, %r15;
	cvt.u32.u64 	%r16, %rd24;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r16 + 0 ], { %rs9, %rs10 };
	// end inline asm
	bar.sync 	0;
	mul.wide.u32 	%rd25, %r46, 2;
	add.s64 	%rd26, %rd23, %rd25;
	ld.shared.v4.b32 	{%r64, %r65, %r66, %r67}, [%rd26];
	mov.b32 	{%rs17, %rs18}, %r67;
	mov.b32 	{%rs15, %rs16}, %r66;
	mov.b32 	{%rs13, %rs14}, %r65;
	mov.b32 	{%rs11, %rs12}, %r64;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs11;
	// end inline asm
	mov.b32 	%f44, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs12;
	// end inline asm
	mov.b32 	%f45, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs13;
	// end inline asm
	mov.b32 	%f46, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs14;
	// end inline asm
	mov.b32 	%f47, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs15;
	// end inline asm
	mov.b32 	%f48, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs16;
	// end inline asm
	mov.b32 	%f49, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs17;
	// end inline asm
	mov.b32 	%f50, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs18;
	// end inline asm
	mov.b32 	%f51, %r24;
	mul.rn.f32 	%f52, %f36, %f44;
	mul.rn.f32 	%f53, %f37, %f45;
	mul.rn.f32 	%f54, %f38, %f46;
	mul.rn.f32 	%f55, %f39, %f47;
	mul.rn.f32 	%f56, %f40, %f48;
	mul.rn.f32 	%f57, %f41, %f49;
	mul.rn.f32 	%f58, %f42, %f50;
	mul.rn.f32 	%f59, %f43, %f51;
	add.s64 	%rd27, %rd8, %rd15;
	selp.b64 	%rd28, 128, 0, %p4;
	selp.b64 	%rd29, 384, 256, %p4;
	or.b64  	%rd30, %rd28, %rd21;
	or.b64  	%rd31, %rd29, %rd21;
	shl.b64 	%rd32, %rd30, 2;
	add.s64 	%rd4, %rd27, %rd32;
	shl.b64 	%rd33, %rd31, 2;
	add.s64 	%rd5, %rd27, %rd33;
	bar.sync 	0;
	selp.b32 	%r68, 128, 0, %p4;
	or.b32  	%r69, %r63, %r68;
	shr.u32 	%r70, %r49, 4;
	and.b32  	%r71, %r70, 24;
	add.s32 	%r72, %r71, %r49;
	shl.b32 	%r73, %r72, 2;
	cvt.u64.u32 	%rd34, %r73;
	add.s64 	%rd35, %rd23, %rd34;
	mov.b32 	%r26, %f52;
	mov.b32 	%r27, %f53;
	mov.b32 	%r28, %f54;
	mov.b32 	%r29, %f55;
	mov.b32 	%r31, %f56;
	mov.b32 	%r32, %f57;
	mov.b32 	%r33, %f58;
	mov.b32 	%r34, %f59;
	cvt.u32.u64 	%r25, %rd35;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r25 + 0 ], { %r26, %r27, %r28, %r29 };
	// end inline asm
	add.s32 	%r30, %r25, 16;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r30 + 0 ], { %r31, %r32, %r33, %r34 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r74, %r68, 4;
	add.s32 	%r75, %r74, %r69;
	mul.wide.u32 	%rd36, %r75, 4;
	add.s64 	%rd37, %rd23, %rd36;
	or.b32  	%r76, %r68, 256;
	shr.u32 	%r77, %r76, 4;
	cvt.u64.u32 	%rd38, %r77;
	cvt.u64.u32 	%rd39, %r69;
	add.s64 	%rd40, %rd38, %rd39;
	shl.b64 	%rd41, %rd40, 2;
	add.s64 	%rd42, %rd23, %rd41;
	ld.shared.v4.u32 	{%r39, %r40, %r41, %r42}, [%rd42+1024];
	ld.shared.v4.u32 	{%r35, %r36, %r37, %r38}, [%rd37];
	// begin inline asm
	st.global.v4.b32 [ %rd4 + 0 ], { %r35, %r36, %r37, %r38 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd5 + 0 ], { %r39, %r40, %r41, %r42 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_3
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<11>;
	.reg .b64 	%rd<19>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd6, %rd5;
	cvta.to.global.u64 	%rd7, %rd4;
	cvta.to.global.u64 	%rd8, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd9, %r8, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd11, %r9;
	add.s64 	%rd12, %rd6, %rd11;
	ld.global.nc.u32 	%r10, [%rd12];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd13, %r14, 2;
	add.s64 	%rd14, %rd7, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	ld.global.nc.f32 	%f4, [%rd10+256];
	or.b32  	%r15, %r1, %r13;
	or.b32  	%r16, %r15, 64;
	mul.wide.u32 	%rd15, %r16, 2;
	add.s64 	%rd16, %rd7, %rd15;
	ld.global.nc.u16 	%rs2, [%rd16];
	cvt.f32.bf16 	%f5, %rs2;
	mul.rn.f32 	%f6, %f4, %f5;
	sub.rn.f32 	%f7, %f3, %f6;
	cvt.rn.bf16.f32 	%rs3, %f7;
	mul.wide.u32 	%rd17, %r8, 2;
	add.s64 	%rd18, %rd3, %rd17;
	st.global.b16 	[%rd18], %rs3;
	mul.rn.f32 	%f8, %f4, %f2;
	mul.rn.f32 	%f9, %f1, %f5;
	add.rn.f32 	%f10, %f8, %f9;
	cvt.rn.bf16.f32 	%rs4, %f10;
	st.global.b16 	[%rd18+128], %rs4;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

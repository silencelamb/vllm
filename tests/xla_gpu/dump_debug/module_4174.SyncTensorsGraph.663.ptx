//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	wrapped_concatenate
.visible .entry wrapped_concatenate(
	.param .u64 .ptr .align 16 wrapped_concatenate_param_0,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_1,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_2,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_3,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_4,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_5,
	.param .u64 .ptr .align 16 wrapped_concatenate_param_6,
	.param .u64 .ptr .align 128 wrapped_concatenate_param_7
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<29>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<239>;

	ld.param.u64 	%rd41, [wrapped_concatenate_param_0];
	ld.param.u64 	%rd42, [wrapped_concatenate_param_7];
	cvta.to.global.u64 	%rd1, %rd42;
	ld.param.u64 	%rd43, [wrapped_concatenate_param_1];
	ld.param.u64 	%rd44, [wrapped_concatenate_param_6];
	cvta.to.global.u64 	%rd2, %rd44;
	ld.param.u64 	%rd45, [wrapped_concatenate_param_2];
	ld.param.u64 	%rd46, [wrapped_concatenate_param_5];
	cvta.to.global.u64 	%rd3, %rd46;
	ld.param.u64 	%rd47, [wrapped_concatenate_param_3];
	ld.param.u64 	%rd48, [wrapped_concatenate_param_4];
	cvta.to.global.u64 	%rd4, %rd48;
	cvta.to.global.u64 	%rd5, %rd47;
	cvta.to.global.u64 	%rd6, %rd45;
	cvta.to.global.u64 	%rd7, %rd43;
	cvta.to.global.u64 	%rd8, %rd41;
	mov.u32 	%r22, %tid.x;
	mov.u32 	%r1, %ctaid.x;
	shr.u32 	%r2, %r1, 2;
	setp.gt.u32 	%p1, %r1, 12287;
	shl.b32 	%r3, %r22, 2;
	shl.b32 	%r4, %r1, 9;
	or.b32  	%r5, %r3, %r4;
	setp.gt.u32 	%p25, %r1, 20479;
	and.b32  	%r23, %r4, 1536;
	shl.b32 	%r24, %r2, 11;
	setp.gt.u32 	%p28, %r1, 4095;
	mul.wide.u32 	%rd234, %r5, 2;
	@%p1 bra 	$L__BB1_6;
	@%p28 bra 	$L__BB1_3;
	add.s64 	%rd235, %rd8, %rd234;
	bra.uni 	$L__BB1_13;
$L__BB1_6:
	@%p25 bra 	$L__BB1_10;
	setp.gt.u32 	%p4, %r1, 16383;
	@%p4 bra 	$L__BB1_9;
	cvt.u64.u32 	%rd70, %r3;
	cvt.u64.u32 	%rd71, %r23;
	cvt.u64.u32 	%rd72, %r24;
	add.s64 	%rd73, %rd72, %rd71;
	add.s64 	%rd74, %rd73, %rd70;
	shl.b64 	%rd75, %rd74, 1;
	add.s64 	%rd76, %rd5, %rd75;
	add.s64 	%rd235, %rd76, -12582912;
	bra.uni 	$L__BB1_13;
$L__BB1_3:
	setp.gt.u32 	%p6, %r1, 8191;
	cvt.u64.u32 	%rd232, %r23;
	cvt.u64.u32 	%rd233, %r24;
	@%p6 bra 	$L__BB1_5;
	cvt.u64.u32 	%rd84, %r3;
	add.s64 	%rd87, %rd233, %rd232;
	add.s64 	%rd88, %rd87, %rd84;
	shl.b64 	%rd89, %rd88, 1;
	add.s64 	%rd90, %rd7, %rd89;
	add.s64 	%rd235, %rd90, -4194304;
	bra.uni 	$L__BB1_13;
$L__BB1_10:
	setp.gt.u32 	%p3, %r1, 24575;
	cvt.u64.u32 	%rd226, %r3;
	cvt.u64.u32 	%rd227, %r23;
	cvt.u64.u32 	%rd228, %r24;
	@%p3 bra 	$L__BB1_12;
	add.s64 	%rd59, %rd228, %rd227;
	add.s64 	%rd60, %rd59, %rd226;
	shl.b64 	%rd61, %rd60, 1;
	add.s64 	%rd62, %rd3, %rd61;
	add.s64 	%rd235, %rd62, -20971520;
	bra.uni 	$L__BB1_13;
$L__BB1_9:
	cvt.u64.u32 	%rd63, %r3;
	cvt.u64.u32 	%rd64, %r23;
	cvt.u64.u32 	%rd65, %r24;
	add.s64 	%rd66, %rd65, %rd64;
	add.s64 	%rd67, %rd66, %rd63;
	shl.b64 	%rd68, %rd67, 1;
	add.s64 	%rd69, %rd4, %rd68;
	add.s64 	%rd235, %rd69, -16777216;
	bra.uni 	$L__BB1_13;
$L__BB1_5:
	cvt.u64.u32 	%rd77, %r3;
	add.s64 	%rd80, %rd233, %rd232;
	add.s64 	%rd81, %rd80, %rd77;
	shl.b64 	%rd82, %rd81, 1;
	add.s64 	%rd83, %rd6, %rd82;
	add.s64 	%rd235, %rd83, -8388608;
	bra.uni 	$L__BB1_13;
$L__BB1_12:
	add.s64 	%rd52, %rd228, %rd227;
	add.s64 	%rd53, %rd52, %rd226;
	shl.b64 	%rd54, %rd53, 1;
	add.s64 	%rd55, %rd2, %rd54;
	add.s64 	%rd235, %rd55, -25165824;
$L__BB1_13:
	@%p1 bra 	$L__BB1_19;
	@%p28 bra 	$L__BB1_16;
	add.s64 	%rd135, %rd8, %rd234;
	add.s64 	%rd236, %rd135, 2;
	bra.uni 	$L__BB1_26;
$L__BB1_19:
	@%p25 bra 	$L__BB1_23;
	setp.gt.u32 	%p10, %r1, 16383;
	@%p10 bra 	$L__BB1_22;
	cvt.u64.u32 	%rd113, %r3;
	cvt.u64.u32 	%rd114, %r23;
	cvt.u64.u32 	%rd115, %r24;
	add.s64 	%rd116, %rd115, %rd114;
	add.s64 	%rd117, %rd116, %rd113;
	shl.b64 	%rd118, %rd117, 1;
	add.s64 	%rd119, %rd118, %rd5;
	add.s64 	%rd236, %rd119, -12582910;
	bra.uni 	$L__BB1_26;
$L__BB1_16:
	setp.gt.u32 	%p12, %r1, 8191;
	@%p12 bra 	$L__BB1_18;
	cvt.u64.u32 	%rd127, %r3;
	cvt.u64.u32 	%rd128, %r23;
	cvt.u64.u32 	%rd129, %r24;
	add.s64 	%rd130, %rd129, %rd128;
	add.s64 	%rd131, %rd130, %rd127;
	shl.b64 	%rd132, %rd131, 1;
	add.s64 	%rd133, %rd132, %rd7;
	add.s64 	%rd236, %rd133, -4194302;
	bra.uni 	$L__BB1_26;
$L__BB1_23:
	setp.gt.u32 	%p9, %r1, 24575;
	@%p9 bra 	$L__BB1_25;
	cvt.u64.u32 	%rd99, %r3;
	cvt.u64.u32 	%rd100, %r23;
	cvt.u64.u32 	%rd101, %r24;
	add.s64 	%rd102, %rd101, %rd100;
	add.s64 	%rd103, %rd102, %rd99;
	shl.b64 	%rd104, %rd103, 1;
	add.s64 	%rd105, %rd104, %rd3;
	add.s64 	%rd236, %rd105, -20971518;
	bra.uni 	$L__BB1_26;
$L__BB1_22:
	cvt.u64.u32 	%rd106, %r3;
	cvt.u64.u32 	%rd107, %r23;
	cvt.u64.u32 	%rd108, %r24;
	add.s64 	%rd109, %rd108, %rd107;
	add.s64 	%rd110, %rd109, %rd106;
	shl.b64 	%rd111, %rd110, 1;
	add.s64 	%rd112, %rd111, %rd4;
	add.s64 	%rd236, %rd112, -16777214;
	bra.uni 	$L__BB1_26;
$L__BB1_18:
	cvt.u64.u32 	%rd120, %r3;
	cvt.u64.u32 	%rd121, %r23;
	cvt.u64.u32 	%rd122, %r24;
	add.s64 	%rd123, %rd122, %rd121;
	add.s64 	%rd124, %rd123, %rd120;
	shl.b64 	%rd125, %rd124, 1;
	add.s64 	%rd126, %rd125, %rd6;
	add.s64 	%rd236, %rd126, -8388606;
	bra.uni 	$L__BB1_26;
$L__BB1_25:
	cvt.u64.u32 	%rd92, %r3;
	cvt.u64.u32 	%rd93, %r23;
	cvt.u64.u32 	%rd94, %r24;
	add.s64 	%rd95, %rd94, %rd93;
	add.s64 	%rd96, %rd95, %rd92;
	shl.b64 	%rd97, %rd96, 1;
	add.s64 	%rd98, %rd97, %rd2;
	add.s64 	%rd236, %rd98, -25165822;
$L__BB1_26:
	@%p1 bra 	$L__BB1_32;
	@%p28 bra 	$L__BB1_29;
	add.s64 	%rd179, %rd8, %rd234;
	add.s64 	%rd237, %rd179, 4;
	bra.uni 	$L__BB1_39;
$L__BB1_32:
	@%p25 bra 	$L__BB1_36;
	setp.gt.u32 	%p16, %r1, 16383;
	@%p16 bra 	$L__BB1_35;
	cvt.u64.u32 	%rd157, %r3;
	cvt.u64.u32 	%rd158, %r23;
	cvt.u64.u32 	%rd159, %r24;
	add.s64 	%rd160, %rd159, %rd158;
	add.s64 	%rd161, %rd160, %rd157;
	shl.b64 	%rd162, %rd161, 1;
	add.s64 	%rd163, %rd162, %rd5;
	add.s64 	%rd237, %rd163, -12582908;
	bra.uni 	$L__BB1_39;
$L__BB1_29:
	setp.gt.u32 	%p18, %r1, 8191;
	@%p18 bra 	$L__BB1_31;
	cvt.u64.u32 	%rd171, %r3;
	cvt.u64.u32 	%rd172, %r23;
	cvt.u64.u32 	%rd173, %r24;
	add.s64 	%rd174, %rd173, %rd172;
	add.s64 	%rd175, %rd174, %rd171;
	shl.b64 	%rd176, %rd175, 1;
	add.s64 	%rd177, %rd176, %rd7;
	add.s64 	%rd237, %rd177, -4194300;
	bra.uni 	$L__BB1_39;
$L__BB1_36:
	setp.gt.u32 	%p15, %r1, 24575;
	@%p15 bra 	$L__BB1_38;
	cvt.u64.u32 	%rd143, %r3;
	cvt.u64.u32 	%rd144, %r23;
	cvt.u64.u32 	%rd145, %r24;
	add.s64 	%rd146, %rd145, %rd144;
	add.s64 	%rd147, %rd146, %rd143;
	shl.b64 	%rd148, %rd147, 1;
	add.s64 	%rd149, %rd148, %rd3;
	add.s64 	%rd237, %rd149, -20971516;
	bra.uni 	$L__BB1_39;
$L__BB1_35:
	cvt.u64.u32 	%rd150, %r3;
	cvt.u64.u32 	%rd151, %r23;
	cvt.u64.u32 	%rd152, %r24;
	add.s64 	%rd153, %rd152, %rd151;
	add.s64 	%rd154, %rd153, %rd150;
	shl.b64 	%rd155, %rd154, 1;
	add.s64 	%rd156, %rd155, %rd4;
	add.s64 	%rd237, %rd156, -16777212;
	bra.uni 	$L__BB1_39;
$L__BB1_31:
	cvt.u64.u32 	%rd164, %r3;
	cvt.u64.u32 	%rd165, %r23;
	cvt.u64.u32 	%rd166, %r24;
	add.s64 	%rd167, %rd166, %rd165;
	add.s64 	%rd168, %rd167, %rd164;
	shl.b64 	%rd169, %rd168, 1;
	add.s64 	%rd170, %rd169, %rd6;
	add.s64 	%rd237, %rd170, -8388604;
	bra.uni 	$L__BB1_39;
$L__BB1_38:
	cvt.u64.u32 	%rd136, %r3;
	cvt.u64.u32 	%rd137, %r23;
	cvt.u64.u32 	%rd138, %r24;
	add.s64 	%rd139, %rd138, %rd137;
	add.s64 	%rd140, %rd139, %rd136;
	shl.b64 	%rd141, %rd140, 1;
	add.s64 	%rd142, %rd141, %rd2;
	add.s64 	%rd237, %rd142, -25165820;
$L__BB1_39:
	@%p1 bra 	$L__BB1_45;
	@%p28 bra 	$L__BB1_42;
	add.s64 	%rd223, %rd8, %rd234;
	add.s64 	%rd238, %rd223, 6;
	bra.uni 	$L__BB1_52;
$L__BB1_45:
	@%p25 bra 	$L__BB1_49;
	setp.gt.u32 	%p22, %r1, 16383;
	@%p22 bra 	$L__BB1_48;
	cvt.u64.u32 	%rd201, %r3;
	cvt.u64.u32 	%rd202, %r23;
	cvt.u64.u32 	%rd203, %r24;
	add.s64 	%rd204, %rd203, %rd202;
	add.s64 	%rd205, %rd204, %rd201;
	shl.b64 	%rd206, %rd205, 1;
	add.s64 	%rd207, %rd206, %rd5;
	add.s64 	%rd238, %rd207, -12582906;
	bra.uni 	$L__BB1_52;
$L__BB1_42:
	setp.gt.u32 	%p24, %r1, 8191;
	@%p24 bra 	$L__BB1_44;
	cvt.u64.u32 	%rd215, %r3;
	cvt.u64.u32 	%rd216, %r23;
	cvt.u64.u32 	%rd217, %r24;
	add.s64 	%rd218, %rd217, %rd216;
	add.s64 	%rd219, %rd218, %rd215;
	shl.b64 	%rd220, %rd219, 1;
	add.s64 	%rd221, %rd220, %rd7;
	add.s64 	%rd238, %rd221, -4194298;
	bra.uni 	$L__BB1_52;
$L__BB1_49:
	setp.gt.u32 	%p21, %r1, 24575;
	@%p21 bra 	$L__BB1_51;
	cvt.u64.u32 	%rd187, %r3;
	cvt.u64.u32 	%rd188, %r23;
	cvt.u64.u32 	%rd189, %r24;
	add.s64 	%rd190, %rd189, %rd188;
	add.s64 	%rd191, %rd190, %rd187;
	shl.b64 	%rd192, %rd191, 1;
	add.s64 	%rd193, %rd192, %rd3;
	add.s64 	%rd238, %rd193, -20971514;
	bra.uni 	$L__BB1_52;
$L__BB1_48:
	cvt.u64.u32 	%rd194, %r3;
	cvt.u64.u32 	%rd195, %r23;
	cvt.u64.u32 	%rd196, %r24;
	add.s64 	%rd197, %rd196, %rd195;
	add.s64 	%rd198, %rd197, %rd194;
	shl.b64 	%rd199, %rd198, 1;
	add.s64 	%rd200, %rd199, %rd4;
	add.s64 	%rd238, %rd200, -16777210;
	bra.uni 	$L__BB1_52;
$L__BB1_44:
	cvt.u64.u32 	%rd208, %r3;
	cvt.u64.u32 	%rd209, %r23;
	cvt.u64.u32 	%rd210, %r24;
	add.s64 	%rd211, %rd210, %rd209;
	add.s64 	%rd212, %rd211, %rd208;
	shl.b64 	%rd213, %rd212, 1;
	add.s64 	%rd214, %rd213, %rd6;
	add.s64 	%rd238, %rd214, -8388602;
	bra.uni 	$L__BB1_52;
$L__BB1_51:
	cvt.u64.u32 	%rd180, %r3;
	cvt.u64.u32 	%rd181, %r23;
	cvt.u64.u32 	%rd182, %r24;
	add.s64 	%rd183, %rd182, %rd181;
	add.s64 	%rd184, %rd183, %rd180;
	shl.b64 	%rd185, %rd184, 1;
	add.s64 	%rd186, %rd185, %rd2;
	add.s64 	%rd238, %rd186, -25165818;
$L__BB1_52:
	ld.global.nc.u16 	%rs1, [%rd238];
	ld.global.nc.u16 	%rs2, [%rd235];
	ld.global.nc.u16 	%rs3, [%rd236];
	ld.global.nc.u16 	%rs4, [%rd237];
	add.s64 	%rd225, %rd1, %rd234;
	st.global.v4.b16 	[%rd225], {%rs2, %rs3, %rs4, %rs1};
	ret;

}
	// .globl	gemm_fusion_dot_27_0
.visible .entry gemm_fusion_dot_27_0(
	.param .u64 .ptr .align 128 gemm_fusion_dot_27_0_param_0,
	.param .u64 .ptr .align 128 gemm_fusion_dot_27_0_param_1
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<23>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<460>;
	.reg .f32 	%f<417>;
	.reg .b64 	%rd<123>;

	ld.param.u64 	%rd28, [gemm_fusion_dot_27_0_param_0];
	ld.param.u64 	%rd29, [gemm_fusion_dot_27_0_param_1];
	cvta.to.global.u64 	%rd1, %rd29;
	cvta.to.global.u64 	%rd30, %rd28;
	// begin inline asm
	mov.u32 %r19, %ctaid.x;
	// end inline asm
	mul.hi.s32 	%r35, %r19, -1840700269;
	add.s32 	%r36, %r35, %r19;
	shr.u32 	%r37, %r36, 31;
	shr.s32 	%r38, %r36, 10;
	add.s32 	%r39, %r38, %r37;
	shl.b32 	%r2, %r39, 3;
	sub.s32 	%r40, 1, %r2;
	min.s32 	%r3, %r40, 8;
	mul.lo.s32 	%r41, %r39, 1792;
	sub.s32 	%r42, %r19, %r41;
	div.s32 	%r43, %r42, %r3;
	shl.b32 	%r44, %r43, 5;
	cvt.s64.s32 	%rd2, %r44;
	mov.u32 	%r4, %tid.x;
	and.b32  	%r45, %r4, 1;
	neg.s32 	%r46, %r45;
	bfe.s32 	%r47, %r4, 1, 1;
	shl.b32 	%r5, %r4, 3;
	and.b32  	%r6, %r5, 24;
	bfe.s32 	%r48, %r4, 2, 1;
	and.b32  	%r49, %r4, 4;
	shl.b32 	%r7, %r49, 3;
	or.b32  	%r8, %r6, %r7;
	and.b32  	%r9, %r4, 8;
	bfe.s32 	%r50, %r4, 3, 1;
	and.b32  	%r10, %r4, 16;
	bfe.s32 	%r51, %r4, 4, 1;
	and.b32  	%r11, %r4, 32;
	bfe.s32 	%r52, %r4, 5, 1;
	bfe.u32 	%r53, %r4, 3, 3;
	setp.lt.u32 	%p1, %r4, 64;
	selp.b32 	%r54, 0, 8, %p1;
	or.b32  	%r55, %r53, %r54;
	or.b32  	%r56, %r55, 16;
	cvt.u64.u32 	%rd31, %r55;
	cvt.u64.u32 	%rd32, %r56;
	or.b64  	%rd33, %rd2, %rd31;
	or.b64  	%rd34, %rd2, %rd32;
	and.b32  	%r57, %r50, 72;
	and.b32  	%r58, %r51, 144;
	and.b32  	%r59, %r52, 288;
	selp.b32 	%r12, 0, 512, %p1;
	or.b32  	%r60, %r57, %r12;
	xor.b32  	%r61, %r60, %r8;
	xor.b32  	%r62, %r61, %r58;
	xor.b32  	%r63, %r62, %r59;
	cvt.u64.u32 	%rd3, %r63;
	mul.wide.u32 	%rd35, %r63, 2;
	mov.u64 	%rd27, global_smem;
	add.s64 	%rd36, %rd27, %rd35;
	or.b32  	%r64, %r8, 1024;
	or.b32  	%r65, %r60, %r58;
	or.b32  	%r66, %r65, %r59;
	xor.b32  	%r67, %r66, %r64;
	cvt.u64.u32 	%rd4, %r67;
	mul.wide.u32 	%rd37, %r67, 2;
	add.s64 	%rd38, %rd27, %rd37;
	cvt.u32.u64 	%r20, %rd36;
	mul.wide.u32 	%rd39, %r8, 2;
	shl.b64 	%rd40, %rd33, 12;
	or.b64  	%rd41, %rd40, %rd39;
	add.s64 	%rd21, %rd41, %rd30;
	mov.b32 	%r21, 16;
	// begin inline asm
	cp.async.cg.shared.global [ %r20 + 0 ], [ %rd21 + 0 ], 0x10, %r21;
	// end inline asm
	cvt.u32.u64 	%r22, %rd38;
	shl.b64 	%rd42, %rd34, 12;
	or.b64  	%rd43, %rd42, %rd39;
	add.s64 	%rd22, %rd43, %rd30;
	// begin inline asm
	cp.async.cg.shared.global [ %r22 + 0 ], [ %rd22 + 0 ], 0x10, %r21;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s64 	%rd23, %rd21, 128;
	add.s64 	%rd24, %rd22, 128;
	bar.sync 	0;
	add.s64 	%rd44, %rd27, 4096;
	add.s64 	%rd45, %rd44, %rd35;
	add.s64 	%rd46, %rd44, %rd37;
	cvt.u32.u64 	%r24, %rd45;
	// begin inline asm
	cp.async.cg.shared.global [ %r24 + 0 ], [ %rd23 + 0 ], 0x10, %r21;
	// end inline asm
	cvt.u32.u64 	%r26, %rd46;
	// begin inline asm
	cp.async.cg.shared.global [ %r26 + 0 ], [ %rd24 + 0 ], 0x10, %r21;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s64 	%rd25, %rd21, 256;
	add.s64 	%rd26, %rd22, 256;
	bar.sync 	0;
	add.s64 	%rd47, %rd27, 8192;
	add.s64 	%rd48, %rd47, %rd35;
	add.s64 	%rd49, %rd47, %rd37;
	cvt.u32.u64 	%r28, %rd48;
	// begin inline asm
	cp.async.cg.shared.global [ %r28 + 0 ], [ %rd25 + 0 ], 0x10, %r21;
	// end inline asm
	cvt.u32.u64 	%r30, %rd49;
	// begin inline asm
	cp.async.cg.shared.global [ %r30 + 0 ], [ %rd26 + 0 ], 0x10, %r21;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r68, %r46, 72;
	and.b32  	%r69, %r47, 144;
	or.b32  	%r70, %r68, %r69;
	and.b32  	%r71, %r48, 288;
	or.b32  	%r72, %r70, %r71;
	and.b32  	%r73, %r4, 24;
	xor.b32  	%r74, %r72, %r73;
	cvt.u64.u32 	%rd5, %r74;
	or.b32  	%r75, %r70, 32;
	or.b32  	%r76, %r71, %r73;
	xor.b32  	%r77, %r76, %r75;
	cvt.u64.u32 	%rd6, %r77;
	or.b32  	%r78, %r72, 512;
	xor.b32  	%r79, %r78, %r73;
	cvt.u64.u32 	%rd7, %r79;
	or.b32  	%r80, %r70, 544;
	xor.b32  	%r81, %r76, %r80;
	cvt.u64.u32 	%rd8, %r81;
	or.b32  	%r82, %r72, 1024;
	xor.b32  	%r83, %r82, %r73;
	cvt.u64.u32 	%rd9, %r83;
	or.b32  	%r84, %r70, 1056;
	xor.b32  	%r85, %r76, %r84;
	cvt.u64.u32 	%rd10, %r85;
	or.b32  	%r86, %r72, 1536;
	xor.b32  	%r87, %r86, %r73;
	cvt.u64.u32 	%rd11, %r87;
	or.b32  	%r88, %r70, 1568;
	xor.b32  	%r89, %r76, %r88;
	cvt.u64.u32 	%rd12, %r89;
	add.s64 	%rd121, %rd22, 384;
	add.s64 	%rd120, %rd21, 384;
	mov.f32 	%f385, 0f00000000;
	mov.b32 	%r459, 2;
	mov.b32 	%r130, 0;
	mov.b32 	%r457, -64;
	shl.b64 	%rd52, %rd5, 1;
	shl.b64 	%rd54, %rd6, 1;
	shl.b64 	%rd56, %rd7, 1;
	shl.b64 	%rd58, %rd8, 1;
	shl.b64 	%rd60, %rd9, 1;
	shl.b64 	%rd62, %rd10, 1;
	shl.b64 	%rd64, %rd11, 1;
	shl.b64 	%rd66, %rd12, 1;
	shl.b64 	%rd71, %rd3, 1;
	shl.b64 	%rd73, %rd4, 1;
	mov.u64 	%rd122, %rd27;
	mov.u32 	%r458, %r130;
	mov.f32 	%f386, %f385;
	mov.f32 	%f387, %f385;
	mov.f32 	%f388, %f385;
	mov.f32 	%f389, %f385;
	mov.f32 	%f390, %f385;
	mov.f32 	%f391, %f385;
	mov.f32 	%f392, %f385;
	mov.f32 	%f393, %f385;
	mov.f32 	%f394, %f385;
	mov.f32 	%f395, %f385;
	mov.f32 	%f396, %f385;
	mov.f32 	%f397, %f385;
	mov.f32 	%f398, %f385;
	mov.f32 	%f399, %f385;
	mov.f32 	%f400, %f385;
	mov.f32 	%f401, %f385;
	mov.f32 	%f402, %f385;
	mov.f32 	%f403, %f385;
	mov.f32 	%f404, %f385;
	mov.f32 	%f405, %f385;
	mov.f32 	%f406, %f385;
	mov.f32 	%f407, %f385;
	mov.f32 	%f408, %f385;
	mov.f32 	%f409, %f385;
	mov.f32 	%f410, %f385;
	mov.f32 	%f411, %f385;
	mov.f32 	%f412, %f385;
	mov.f32 	%f413, %f385;
	mov.f32 	%f414, %f385;
	mov.f32 	%f415, %f385;
	mov.f32 	%f416, %f385;
$L__BB2_1:
	add.s32 	%r457, %r457, 64;
	setp.lt.u32 	%p2, %r457, 1856;
	add.s64 	%rd53, %rd122, %rd52;
	cvt.u32.u64 	%r94, %rd53;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r134, %r135, %r182, %r183}, [%r94];
	// end inline asm
	add.s64 	%rd55, %rd122, %rd54;
	cvt.u32.u64 	%r99, %rd55;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r230, %r231, %r278, %r279}, [%r99];
	// end inline asm
	add.s64 	%rd57, %rd122, %rd56;
	cvt.u32.u64 	%r104, %rd57;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r140, %r141, %r188, %r189}, [%r104];
	// end inline asm
	add.s64 	%rd59, %rd122, %rd58;
	cvt.u32.u64 	%r109, %rd59;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r236, %r237, %r284, %r285}, [%r109];
	// end inline asm
	add.s64 	%rd61, %rd122, %rd60;
	cvt.u32.u64 	%r114, %rd61;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r146, %r147, %r194, %r195}, [%r114];
	// end inline asm
	add.s64 	%rd63, %rd122, %rd62;
	cvt.u32.u64 	%r119, %rd63;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r242, %r243, %r290, %r291}, [%r119];
	// end inline asm
	add.s64 	%rd65, %rd122, %rd64;
	cvt.u32.u64 	%r124, %rd65;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r152, %r153, %r200, %r201}, [%r124];
	// end inline asm
	add.s64 	%rd67, %rd122, %rd66;
	cvt.u32.u64 	%r129, %rd67;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r248, %r249, %r296, %r297}, [%r129];
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f385, %f386, %f387, %f388 }, { %r130, %r130, %r130, %r130 }, { %r134, %r135 }, { %f385, %f386, %f387, %f388 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f389, %f390, %f391, %f392 }, { %r130, %r130, %r130, %r130 }, { %r140, %r141 }, { %f389, %f390, %f391, %f392 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f393, %f394, %f395, %f396 }, { %r130, %r130, %r130, %r130 }, { %r146, %r147 }, { %f393, %f394, %f395, %f396 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f397, %f398, %f399, %f400 }, { %r130, %r130, %r130, %r130 }, { %r152, %r153 }, { %f397, %f398, %f399, %f400 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f401, %f402, %f403, %f404 }, { %r130, %r130, %r130, %r130 }, { %r134, %r135 }, { %f401, %f402, %f403, %f404 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f405, %f406, %f407, %f408 }, { %r130, %r130, %r130, %r130 }, { %r140, %r141 }, { %f405, %f406, %f407, %f408 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f409, %f410, %f411, %f412 }, { %r130, %r130, %r130, %r130 }, { %r146, %r147 }, { %f409, %f410, %f411, %f412 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f413, %f414, %f415, %f416 }, { %r130, %r130, %r130, %r130 }, { %r152, %r153 }, { %f413, %f414, %f415, %f416 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f385, %f386, %f387, %f388 }, { %r130, %r130, %r130, %r130 }, { %r182, %r183 }, { %f385, %f386, %f387, %f388 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f389, %f390, %f391, %f392 }, { %r130, %r130, %r130, %r130 }, { %r188, %r189 }, { %f389, %f390, %f391, %f392 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f393, %f394, %f395, %f396 }, { %r130, %r130, %r130, %r130 }, { %r194, %r195 }, { %f393, %f394, %f395, %f396 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f397, %f398, %f399, %f400 }, { %r130, %r130, %r130, %r130 }, { %r200, %r201 }, { %f397, %f398, %f399, %f400 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f401, %f402, %f403, %f404 }, { %r130, %r130, %r130, %r130 }, { %r182, %r183 }, { %f401, %f402, %f403, %f404 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f405, %f406, %f407, %f408 }, { %r130, %r130, %r130, %r130 }, { %r188, %r189 }, { %f405, %f406, %f407, %f408 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f409, %f410, %f411, %f412 }, { %r130, %r130, %r130, %r130 }, { %r194, %r195 }, { %f409, %f410, %f411, %f412 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f413, %f414, %f415, %f416 }, { %r130, %r130, %r130, %r130 }, { %r200, %r201 }, { %f413, %f414, %f415, %f416 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f385, %f386, %f387, %f388 }, { %r130, %r130, %r130, %r130 }, { %r230, %r231 }, { %f385, %f386, %f387, %f388 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f389, %f390, %f391, %f392 }, { %r130, %r130, %r130, %r130 }, { %r236, %r237 }, { %f389, %f390, %f391, %f392 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f393, %f394, %f395, %f396 }, { %r130, %r130, %r130, %r130 }, { %r242, %r243 }, { %f393, %f394, %f395, %f396 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f397, %f398, %f399, %f400 }, { %r130, %r130, %r130, %r130 }, { %r248, %r249 }, { %f397, %f398, %f399, %f400 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f401, %f402, %f403, %f404 }, { %r130, %r130, %r130, %r130 }, { %r230, %r231 }, { %f401, %f402, %f403, %f404 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f405, %f406, %f407, %f408 }, { %r130, %r130, %r130, %r130 }, { %r236, %r237 }, { %f405, %f406, %f407, %f408 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f409, %f410, %f411, %f412 }, { %r130, %r130, %r130, %r130 }, { %r242, %r243 }, { %f409, %f410, %f411, %f412 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f413, %f414, %f415, %f416 }, { %r130, %r130, %r130, %r130 }, { %r248, %r249 }, { %f413, %f414, %f415, %f416 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f385, %f386, %f387, %f388 }, { %r130, %r130, %r130, %r130 }, { %r278, %r279 }, { %f385, %f386, %f387, %f388 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f389, %f390, %f391, %f392 }, { %r130, %r130, %r130, %r130 }, { %r284, %r285 }, { %f389, %f390, %f391, %f392 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f393, %f394, %f395, %f396 }, { %r130, %r130, %r130, %r130 }, { %r290, %r291 }, { %f393, %f394, %f395, %f396 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f397, %f398, %f399, %f400 }, { %r130, %r130, %r130, %r130 }, { %r296, %r297 }, { %f397, %f398, %f399, %f400 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f401, %f402, %f403, %f404 }, { %r130, %r130, %r130, %r130 }, { %r278, %r279 }, { %f401, %f402, %f403, %f404 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f405, %f406, %f407, %f408 }, { %r130, %r130, %r130, %r130 }, { %r284, %r285 }, { %f405, %f406, %f407, %f408 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f409, %f410, %f411, %f412 }, { %r130, %r130, %r130, %r130 }, { %r290, %r291 }, { %f409, %f410, %f411, %f412 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f413, %f414, %f415, %f416 }, { %r130, %r130, %r130, %r130 }, { %r296, %r297 }, { %f413, %f414, %f415, %f416 };
	// end inline asm
	add.s32 	%r326, %r459, 1;
	setp.lt.s32 	%p3, %r326, 3;
	selp.b32 	%r459, %r326, 0, %p3;
	shl.b32 	%r327, %r459, 11;
	mul.wide.s32 	%rd68, %r327, 2;
	add.s64 	%rd70, %rd27, %rd68;
	bar.sync 	0;
	add.s64 	%rd72, %rd70, %rd71;
	add.s64 	%rd74, %rd70, %rd73;
	selp.b32 	%r323, 16, 0, %p2;
	cvt.u32.u64 	%r322, %rd72;
	// begin inline asm
	cp.async.cg.shared.global [ %r322 + 0 ], [ %rd120 + 0 ], 0x10, %r323;
	// end inline asm
	cvt.u32.u64 	%r324, %rd74;
	// begin inline asm
	cp.async.cg.shared.global [ %r324 + 0 ], [ %rd121 + 0 ], 0x10, %r323;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s32 	%r328, %r458, 1;
	setp.lt.s32 	%p4, %r328, 3;
	selp.b32 	%r458, %r328, 0, %p4;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r329, %r458, 11;
	mul.wide.s32 	%rd75, %r329, 2;
	add.s64 	%rd122, %rd27, %rd75;
	add.s64 	%rd121, %rd121, 128;
	add.s64 	%rd120, %rd120, 128;
	setp.lt.u32 	%p5, %r457, 1984;
	@%p5 bra 	$L__BB2_1;
	rem.s32 	%r394, %r19, %r3;
	add.s32 	%r395, %r394, %r2;
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	mov.b32 	%r330, %f385;
	// begin inline asm
	cvt.rn.bf16.f32 %rs33, %r330;
	// end inline asm
	mov.b32 	%r331, %f386;
	// begin inline asm
	cvt.rn.bf16.f32 %rs34, %r331;
	// end inline asm
	mov.b32 	%r332, %f387;
	// begin inline asm
	cvt.rn.bf16.f32 %rs35, %r332;
	// end inline asm
	mov.b32 	%r333, %f388;
	// begin inline asm
	cvt.rn.bf16.f32 %rs36, %r333;
	// end inline asm
	mov.b32 	%r334, %f389;
	// begin inline asm
	cvt.rn.bf16.f32 %rs37, %r334;
	// end inline asm
	mov.b32 	%r335, %f390;
	// begin inline asm
	cvt.rn.bf16.f32 %rs38, %r335;
	// end inline asm
	mov.b32 	%r336, %f391;
	// begin inline asm
	cvt.rn.bf16.f32 %rs39, %r336;
	// end inline asm
	mov.b32 	%r337, %f392;
	// begin inline asm
	cvt.rn.bf16.f32 %rs40, %r337;
	// end inline asm
	mov.b32 	%r338, %f393;
	// begin inline asm
	cvt.rn.bf16.f32 %rs41, %r338;
	// end inline asm
	mov.b32 	%r339, %f394;
	// begin inline asm
	cvt.rn.bf16.f32 %rs42, %r339;
	// end inline asm
	mov.b32 	%r340, %f395;
	// begin inline asm
	cvt.rn.bf16.f32 %rs43, %r340;
	// end inline asm
	mov.b32 	%r341, %f396;
	// begin inline asm
	cvt.rn.bf16.f32 %rs44, %r341;
	// end inline asm
	mov.b32 	%r342, %f397;
	// begin inline asm
	cvt.rn.bf16.f32 %rs45, %r342;
	// end inline asm
	mov.b32 	%r343, %f398;
	// begin inline asm
	cvt.rn.bf16.f32 %rs46, %r343;
	// end inline asm
	mov.b32 	%r344, %f399;
	// begin inline asm
	cvt.rn.bf16.f32 %rs47, %r344;
	// end inline asm
	mov.b32 	%r345, %f400;
	// begin inline asm
	cvt.rn.bf16.f32 %rs48, %r345;
	// end inline asm
	mov.b32 	%r346, %f401;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r346;
	// end inline asm
	mov.b32 	%r347, %f402;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r347;
	// end inline asm
	mov.b32 	%r348, %f403;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r348;
	// end inline asm
	mov.b32 	%r349, %f404;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r349;
	// end inline asm
	mov.b32 	%r350, %f405;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r350;
	// end inline asm
	mov.b32 	%r351, %f406;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r351;
	// end inline asm
	mov.b32 	%r352, %f407;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r352;
	// end inline asm
	mov.b32 	%r353, %f408;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r353;
	// end inline asm
	mov.b32 	%r354, %f409;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r354;
	// end inline asm
	mov.b32 	%r355, %f410;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r355;
	// end inline asm
	mov.b32 	%r356, %f411;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r356;
	// end inline asm
	mov.b32 	%r357, %f412;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r357;
	// end inline asm
	mov.b32 	%r358, %f413;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r358;
	// end inline asm
	mov.b32 	%r359, %f414;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r359;
	// end inline asm
	mov.b32 	%r360, %f415;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r360;
	// end inline asm
	mov.b32 	%r361, %f416;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r361;
	// end inline asm
	shl.b32 	%r396, %r395, 7;
	cvt.s64.s32 	%rd80, %r396;
	bfe.u32 	%r397, %r4, 2, 4;
	selp.b32 	%r398, 0, 16, %p1;
	or.b32  	%r399, %r397, %r398;
	or.b32  	%r400, %r399, 32;
	or.b32  	%r401, %r399, 64;
	or.b32  	%r402, %r399, 96;
	cvt.u64.u32 	%rd81, %r399;
	cvt.u64.u32 	%rd82, %r400;
	cvt.u64.u32 	%rd83, %r401;
	cvt.u64.u32 	%rd84, %r402;
	or.b64  	%rd85, %rd80, %rd81;
	or.b64  	%rd86, %rd80, %rd82;
	or.b64  	%rd87, %rd80, %rd83;
	or.b64  	%rd88, %rd80, %rd84;
	cvt.u64.u32 	%rd89, %r6;
	or.b64  	%rd90, %rd2, %rd89;
	mad.lo.s64 	%rd91, %rd85, 14336, %rd1;
	shl.b64 	%rd92, %rd90, 1;
	add.s64 	%rd76, %rd91, %rd92;
	mad.lo.s64 	%rd93, %rd86, 14336, %rd1;
	add.s64 	%rd77, %rd93, %rd92;
	mad.lo.s64 	%rd94, %rd87, 14336, %rd1;
	add.s64 	%rd78, %rd94, %rd92;
	mad.lo.s64 	%rd95, %rd88, 14336, %rd1;
	add.s64 	%rd79, %rd95, %rd92;
	shl.b32 	%r403, %r4, 1;
	and.b32  	%r404, %r403, 6;
	shl.b32 	%r405, %r9, 3;
	shl.b32 	%r406, %r10, 3;
	shl.b32 	%r407, %r11, 4;
	or.b32  	%r408, %r404, %r407;
	or.b32  	%r409, %r408, %r405;
	or.b32  	%r410, %r409, %r7;
	or.b32  	%r411, %r410, %r406;
	selp.b32 	%r412, 0, 1024, %p1;
	or.b32  	%r413, %r411, %r412;
	and.b32  	%r414, %r5, 320;
	or.b32  	%r415, %r406, %r414;
	or.b32  	%r416, %r415, %r12;
	or.b32  	%r417, %r416, %r8;
	shr.u32 	%r418, %r413, 2;
	and.b32  	%r419, %r418, 1073741816;
	add.s32 	%r420, %r419, %r413;
	shl.b32 	%r421, %r420, 1;
	cvt.u64.u32 	%rd96, %r421;
	mov.u64 	%rd97, global_smem;
	add.s64 	%rd98, %rd97, %rd96;
	cvt.u32.u64 	%r362, %rd98;
	mov.pred 	%p6, -1;
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r362 + 0 ], { %rs33, %rs34 };
	// end inline asm
	xor.b32  	%r422, %r413, 256;
	shr.u32 	%r423, %r422, 2;
	and.b32  	%r424, %r423, 1073741816;
	add.s32 	%r425, %r424, %r422;
	shl.b32 	%r426, %r425, 1;
	cvt.u64.u32 	%rd99, %r426;
	add.s64 	%rd100, %rd97, %rd99;
	cvt.u32.u64 	%r363, %rd100;
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r363 + 0 ], { %rs35, %rs36 };
	// end inline asm
	xor.b32  	%r427, %r413, 8;
	add.s32 	%r428, %r419, %r427;
	shl.b32 	%r429, %r428, 1;
	cvt.u64.u32 	%rd101, %r429;
	add.s64 	%rd102, %rd97, %rd101;
	cvt.u32.u64 	%r364, %rd102;
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r364 + 0 ], { %rs37, %rs38 };
	// end inline asm
	xor.b32  	%r430, %r413, 264;
	shr.u32 	%r431, %r430, 2;
	and.b32  	%r432, %r431, 1073741816;
	add.s32 	%r433, %r432, %r430;
	shl.b32 	%r434, %r433, 1;
	cvt.u64.u32 	%rd103, %r434;
	add.s64 	%rd104, %rd97, %rd103;
	cvt.u32.u64 	%r365, %rd104;
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r365 + 0 ], { %rs39, %rs40 };
	// end inline asm
	xor.b32  	%r435, %r413, 16;
	add.s32 	%r436, %r419, %r435;
	shl.b32 	%r437, %r436, 1;
	cvt.u64.u32 	%rd105, %r437;
	add.s64 	%rd106, %rd97, %rd105;
	cvt.u32.u64 	%r366, %rd106;
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r366 + 0 ], { %rs41, %rs42 };
	// end inline asm
	xor.b32  	%r438, %r413, 272;
	shr.u32 	%r439, %r438, 2;
	and.b32  	%r440, %r439, 1073741816;
	add.s32 	%r441, %r440, %r438;
	shl.b32 	%r442, %r441, 1;
	cvt.u64.u32 	%rd107, %r442;
	add.s64 	%rd108, %rd97, %rd107;
	cvt.u32.u64 	%r367, %rd108;
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r367 + 0 ], { %rs43, %rs44 };
	// end inline asm
	xor.b32  	%r443, %r413, 24;
	add.s32 	%r444, %r419, %r443;
	shl.b32 	%r445, %r444, 1;
	cvt.u64.u32 	%rd109, %r445;
	add.s64 	%rd110, %rd97, %rd109;
	cvt.u32.u64 	%r368, %rd110;
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r368 + 0 ], { %rs45, %rs46 };
	// end inline asm
	xor.b32  	%r446, %r413, 280;
	shr.u32 	%r447, %r446, 2;
	and.b32  	%r448, %r447, 1073741816;
	add.s32 	%r449, %r448, %r446;
	shl.b32 	%r450, %r449, 1;
	cvt.u64.u32 	%rd111, %r450;
	add.s64 	%rd112, %rd97, %rd111;
	cvt.u32.u64 	%r369, %rd112;
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r369 + 0 ], { %rs47, %rs48 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r451, %r417, 2;
	and.b32  	%r452, %r451, 248;
	add.s32 	%r453, %r452, %r417;
	mul.wide.u32 	%rd113, %r453, 2;
	add.s64 	%rd114, %rd97, %rd113;
	ld.shared.v4.u32 	{%r378, %r379, %r380, %r381}, [%rd114];
	or.b32  	%r454, %r417, 1024;
	shr.u32 	%r455, %r454, 2;
	and.b32  	%r456, %r455, 536870904;
	cvt.u64.u32 	%rd115, %r456;
	cvt.u64.u32 	%rd116, %r417;
	add.s64 	%rd117, %rd115, %rd116;
	shl.b64 	%rd118, %rd117, 1;
	add.s64 	%rd119, %rd97, %rd118;
	ld.shared.v4.u32 	{%r382, %r383, %r384, %r385}, [%rd119+2048];
	bar.sync 	0;
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r362 + 0 ], { %rs49, %rs50 };
	// end inline asm
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r363 + 0 ], { %rs51, %rs52 };
	// end inline asm
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r364 + 0 ], { %rs53, %rs54 };
	// end inline asm
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r365 + 0 ], { %rs55, %rs56 };
	// end inline asm
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r366 + 0 ], { %rs57, %rs58 };
	// end inline asm
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r367 + 0 ], { %rs59, %rs60 };
	// end inline asm
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r368 + 0 ], { %rs61, %rs62 };
	// end inline asm
	// begin inline asm
	@%p6 st.shared.v2.b16 [ %r369 + 0 ], { %rs63, %rs64 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r386, %r387, %r388, %r389}, [%rd114];
	ld.shared.v4.u32 	{%r390, %r391, %r392, %r393}, [%rd119+2048];
	// begin inline asm
	st.global.v4.b32 [ %rd76 + 0 ], { %r378, %r379, %r380, %r381 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd77 + 0 ], { %r382, %r383, %r384, %r385 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd78 + 0 ], { %r386, %r387, %r388, %r389 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd79 + 0 ], { %r390, %r391, %r392, %r393 };
	// end inline asm
	ret;

}
	// .globl	fusion_110
.visible .entry fusion_110(
	.param .u64 .ptr .align 16 fusion_110_param_0,
	.param .u64 .ptr .align 128 fusion_110_param_1,
	.param .u64 .ptr .align 128 fusion_110_param_2,
	.param .u64 .ptr .align 16 fusion_110_param_3,
	.param .u64 .ptr .align 128 fusion_110_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<125>;
	.reg .f32 	%f<146>;
	.reg .b64 	%rd<32>;

	ld.param.u64 	%rd10, [fusion_110_param_0];
	ld.param.u64 	%rd11, [fusion_110_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_110_param_1];
	ld.param.u64 	%rd14, [fusion_110_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_110_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd5, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd19, %r1, 14336;
	add.s64 	%rd20, %rd17, %rd19;
	mov.u32 	%r105, %tid.x;
	and.b32  	%r106, %r105, 31;
	shl.b32 	%r107, %r105, 3;
	and.b32  	%r108, %r107, 248;
	setp.lt.u32 	%p4, %r105, 32;
	selp.b32 	%r109, 0, 256, %p4;
	or.b32  	%r110, %r108, %r109;
	mul.wide.u32 	%rd21, %r110, 2;
	add.s64 	%rd22, %rd20, %rd21;
	add.s64 	%rd1, %rd22, 12288;
	add.s64 	%rd2, %rd22, 13312;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd23, %r1, 1024;
	shl.b64 	%rd24, %rd23, 1;
	add.s64 	%rd25, %rd18, %rd24;
	add.s64 	%rd3, %rd25, %rd21;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.rn.f32 	%f33, %f1, %f17;
	add.rn.f32 	%f34, %f2, %f18;
	add.rn.f32 	%f35, %f3, %f19;
	add.rn.f32 	%f36, %f4, %f20;
	add.rn.f32 	%f37, %f5, %f21;
	add.rn.f32 	%f38, %f6, %f22;
	add.rn.f32 	%f39, %f7, %f23;
	add.rn.f32 	%f40, %f8, %f24;
	add.rn.f32 	%f41, %f9, %f25;
	add.rn.f32 	%f42, %f10, %f26;
	add.rn.f32 	%f43, %f11, %f27;
	add.rn.f32 	%f44, %f12, %f28;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	mul.rn.f32 	%f49, %f33, %f33;
	mul.rn.f32 	%f50, %f34, %f34;
	mul.rn.f32 	%f51, %f35, %f35;
	mul.rn.f32 	%f52, %f36, %f36;
	mul.rn.f32 	%f53, %f37, %f37;
	mul.rn.f32 	%f54, %f38, %f38;
	mul.rn.f32 	%f55, %f39, %f39;
	mul.rn.f32 	%f56, %f40, %f40;
	mul.rn.f32 	%f57, %f41, %f41;
	mul.rn.f32 	%f58, %f42, %f42;
	mul.rn.f32 	%f59, %f43, %f43;
	mul.rn.f32 	%f60, %f44, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	add.rn.f32 	%f65, %f49, %f50;
	add.rn.f32 	%f66, %f65, %f51;
	add.rn.f32 	%f67, %f66, %f52;
	add.rn.f32 	%f68, %f67, %f53;
	add.rn.f32 	%f69, %f68, %f54;
	add.rn.f32 	%f70, %f69, %f55;
	add.rn.f32 	%f71, %f70, %f56;
	add.rn.f32 	%f72, %f71, %f57;
	add.rn.f32 	%f73, %f72, %f58;
	add.rn.f32 	%f74, %f73, %f59;
	add.rn.f32 	%f75, %f74, %f60;
	add.rn.f32 	%f76, %f75, %f61;
	add.rn.f32 	%f77, %f76, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	mov.b32 	%r111, %f79;
	shfl.sync.bfly.b32	%r112, %r111, 16, 31, -1;
	mov.b32 	%f80, %r112;
	add.rn.f32 	%f81, %f79, %f80;
	mov.b32 	%r113, %f81;
	shfl.sync.bfly.b32	%r114, %r113, 8, 31, -1;
	mov.b32 	%f82, %r114;
	add.rn.f32 	%f83, %f81, %f82;
	mov.b32 	%r115, %f83;
	shfl.sync.bfly.b32	%r116, %r115, 4, 31, -1;
	mov.b32 	%f84, %r116;
	add.rn.f32 	%f85, %f83, %f84;
	mov.b32 	%r117, %f85;
	shfl.sync.bfly.b32	%r118, %r117, 2, 31, -1;
	mov.b32 	%f86, %r118;
	add.rn.f32 	%f87, %f85, %f86;
	mov.b32 	%r119, %f87;
	shfl.sync.bfly.b32	%r120, %r119, 1, 31, -1;
	mov.b32 	%f88, %r120;
	add.rn.f32 	%f89, %f87, %f88;
	setp.eq.s32 	%p1, %r106, 0;
	shr.u32 	%r121, %r105, 3;
	and.b32  	%r122, %r121, 4;
	cvt.u64.u32 	%rd26, %r122;
	mov.u64 	%rd27, global_smem;
	add.s64 	%rd28, %rd27, %rd26;
	mov.b32 	%r51, %f89;
	cvt.u32.u64 	%r50, %rd28;
	// begin inline asm
	@%p1 st.shared.b32 [ %r50 + 0 ], %r51;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r105, 2;
	shl.b32 	%r123, %r105, 2;
	cvt.u64.u32 	%rd29, %r123;
	add.s64 	%rd30, %rd27, %rd29;
	cvt.u32.u64 	%r53, %rd30;
	// begin inline asm
	@%p2 ld.shared.b32 %r52, [ %r53 + 0 ];
	// end inline asm
	mov.b32 	%f90, %r52;
	shfl.sync.bfly.b32	%r124, %r52, 1, 31, -1;
	mov.b32 	%f91, %r124;
	add.rn.f32 	%f92, %f90, %f91;
	setp.eq.s32 	%p3, %r105, 0;
	mov.b32 	%r55, %f92;
	// begin inline asm
	@%p3 st.shared.b32 [ %r53 + 0 ], %r55;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f93, [global_smem];
	mul.rn.f32 	%f94, %f93, 0f3A800000;
	// begin inline asm
	mov.u32 %r56, 0x0;
	ld.global.b32 { %r56 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f95, %r56;
	add.rn.f32 	%f96, %f94, %f95;
	rsqrt.approx.f32 	%f97, %f96;
	mul.rn.f32 	%f98, %f33, %f97;
	mul.rn.f32 	%f99, %f34, %f97;
	mul.rn.f32 	%f100, %f35, %f97;
	mul.rn.f32 	%f101, %f36, %f97;
	mul.rn.f32 	%f102, %f37, %f97;
	mul.rn.f32 	%f103, %f38, %f97;
	mul.rn.f32 	%f104, %f39, %f97;
	mul.rn.f32 	%f105, %f40, %f97;
	mul.rn.f32 	%f106, %f41, %f97;
	mul.rn.f32 	%f107, %f42, %f97;
	mul.rn.f32 	%f108, %f43, %f97;
	mul.rn.f32 	%f109, %f44, %f97;
	mul.rn.f32 	%f110, %f45, %f97;
	mul.rn.f32 	%f111, %f46, %f97;
	mul.rn.f32 	%f112, %f47, %f97;
	mul.rn.f32 	%f113, %f48, %f97;
	add.s64 	%rd6, %rd15, %rd21;
	add.s64 	%rd7, %rd6, 1024;
	// begin inline asm
	mov.u32 %r57, 0x0;
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	mov.u32 %r60, 0x0;
	ld.global.v4.b32 { %r57, %r58, %r59, %r60 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r57;
	mov.b32 	{%rs35, %rs36}, %r58;
	mov.b32 	{%rs37, %rs38}, %r59;
	mov.b32 	{%rs39, %rs40}, %r60;
	// begin inline asm
	mov.u32 %r61, 0x0;
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	ld.global.v4.b32 { %r61, %r62, %r63, %r64 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r61;
	mov.b32 	{%rs43, %rs44}, %r62;
	mov.b32 	{%rs45, %rs46}, %r63;
	mov.b32 	{%rs47, %rs48}, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs33;
	// end inline asm
	mov.b32 	%f114, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs34;
	// end inline asm
	mov.b32 	%f115, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs35;
	// end inline asm
	mov.b32 	%f116, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs36;
	// end inline asm
	mov.b32 	%f117, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs37;
	// end inline asm
	mov.b32 	%f118, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs38;
	// end inline asm
	mov.b32 	%f119, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs39;
	// end inline asm
	mov.b32 	%f120, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs40;
	// end inline asm
	mov.b32 	%f121, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs41;
	// end inline asm
	mov.b32 	%f122, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs42;
	// end inline asm
	mov.b32 	%f123, %r74;
	// begin inline asm
	cvt.f32.bf16 %r75, %rs43;
	// end inline asm
	mov.b32 	%f124, %r75;
	// begin inline asm
	cvt.f32.bf16 %r76, %rs44;
	// end inline asm
	mov.b32 	%f125, %r76;
	// begin inline asm
	cvt.f32.bf16 %r77, %rs45;
	// end inline asm
	mov.b32 	%f126, %r77;
	// begin inline asm
	cvt.f32.bf16 %r78, %rs46;
	// end inline asm
	mov.b32 	%f127, %r78;
	// begin inline asm
	cvt.f32.bf16 %r79, %rs47;
	// end inline asm
	mov.b32 	%f128, %r79;
	// begin inline asm
	cvt.f32.bf16 %r80, %rs48;
	// end inline asm
	mov.b32 	%f129, %r80;
	mul.rn.f32 	%f130, %f98, %f114;
	mul.rn.f32 	%f131, %f99, %f115;
	mul.rn.f32 	%f132, %f100, %f116;
	mul.rn.f32 	%f133, %f101, %f117;
	mul.rn.f32 	%f134, %f102, %f118;
	mul.rn.f32 	%f135, %f103, %f119;
	mul.rn.f32 	%f136, %f104, %f120;
	mul.rn.f32 	%f137, %f105, %f121;
	mul.rn.f32 	%f138, %f106, %f122;
	mul.rn.f32 	%f139, %f107, %f123;
	mul.rn.f32 	%f140, %f108, %f124;
	mul.rn.f32 	%f141, %f109, %f125;
	mul.rn.f32 	%f142, %f110, %f126;
	mul.rn.f32 	%f143, %f111, %f127;
	mul.rn.f32 	%f144, %f112, %f128;
	mul.rn.f32 	%f145, %f113, %f129;
	mov.b32 	%r81, %f130;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r81;
	// end inline asm
	mov.b32 	%r82, %f131;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r82;
	// end inline asm
	mov.b32 	%r83, %f132;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r83;
	// end inline asm
	mov.b32 	%r84, %f133;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r84;
	// end inline asm
	mov.b32 	%r85, %f134;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r85;
	// end inline asm
	mov.b32 	%r86, %f135;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r86;
	// end inline asm
	mov.b32 	%r87, %f136;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r87;
	// end inline asm
	mov.b32 	%r88, %f137;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r88;
	// end inline asm
	mov.b32 	%r89, %f138;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r89;
	// end inline asm
	mov.b32 	%r90, %f139;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r90;
	// end inline asm
	mov.b32 	%r91, %f140;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r91;
	// end inline asm
	mov.b32 	%r92, %f141;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r92;
	// end inline asm
	mov.b32 	%r93, %f142;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r93;
	// end inline asm
	mov.b32 	%r94, %f143;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r94;
	// end inline asm
	mov.b32 	%r95, %f144;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r95;
	// end inline asm
	mov.b32 	%r96, %f145;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r96;
	// end inline asm
	add.s64 	%rd31, %rd12, %rd24;
	add.s64 	%rd8, %rd31, %rd21;
	add.s64 	%rd9, %rd8, 1024;
	mov.b32 	%r97, {%rs49, %rs50};
	mov.b32 	%r98, {%rs51, %rs52};
	mov.b32 	%r99, {%rs53, %rs54};
	mov.b32 	%r100, {%rs55, %rs56};
	// begin inline asm
	st.global.v4.b32 [ %rd8 + 0 ], { %r97, %r98, %r99, %r100 };
	// end inline asm
	mov.b32 	%r101, {%rs57, %rs58};
	mov.b32 	%r102, {%rs59, %rs60};
	mov.b32 	%r103, {%rs61, %rs62};
	mov.b32 	%r104, {%rs63, %rs64};
	// begin inline asm
	st.global.v4.b32 [ %rd9 + 0 ], { %r101, %r102, %r103, %r104 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion
.visible .entry loop_convert_fusion(
	.param .u64 .ptr .align 128 loop_convert_fusion_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<27>;
	.reg .b32 	%r<10>;
	.reg .f32 	%f<41>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 2;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.lo.s16 	%rs4, %rs3, 6;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 9;
	cvt.u32.u16 	%r6, %rs6;
	or.b32  	%r7, %r3, %r6;
	mul.wide.u16 	%r8, %rs3, 6144;
	add.s32 	%r9, %r7, %r8;
	mul.wide.u32 	%rd5, %r9, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs7, %rs8, %rs9, %rs10}, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	neg.bf16 	%rs11, %rs7;
	cvt.f32.bf16 	%f2, %rs11;
	mul.rn.f32 	%f3, %f2, 0f3FB8AA3B;
	ex2.approx.f32 	%f4, %f3;
	cvt.rn.bf16.f32 	%rs12, %f4;
	cvt.f32.bf16 	%f5, %rs12;
	add.rn.f32 	%f6, %f5, 0f3F800000;
	rcp.approx.f32 	%f7, %f6;
	ld.global.nc.u16 	%rs13, [%rd6+6144];
	mul.rn.f32 	%f8, %f7, %f1;
	cvt.f32.bf16 	%f9, %rs13;
	mul.rn.f32 	%f10, %f8, %f9;
	cvt.rn.bf16.f32 	%rs14, %f10;
	cvt.f32.bf16 	%f11, %rs8;
	neg.bf16 	%rs15, %rs8;
	cvt.f32.bf16 	%f12, %rs15;
	mul.rn.f32 	%f13, %f12, 0f3FB8AA3B;
	ex2.approx.f32 	%f14, %f13;
	cvt.rn.bf16.f32 	%rs16, %f14;
	cvt.f32.bf16 	%f15, %rs16;
	add.rn.f32 	%f16, %f15, 0f3F800000;
	rcp.approx.f32 	%f17, %f16;
	ld.global.nc.u16 	%rs17, [%rd6+6146];
	mul.rn.f32 	%f18, %f17, %f11;
	cvt.f32.bf16 	%f19, %rs17;
	mul.rn.f32 	%f20, %f18, %f19;
	cvt.rn.bf16.f32 	%rs18, %f20;
	cvt.f32.bf16 	%f21, %rs9;
	neg.bf16 	%rs19, %rs9;
	cvt.f32.bf16 	%f22, %rs19;
	mul.rn.f32 	%f23, %f22, 0f3FB8AA3B;
	ex2.approx.f32 	%f24, %f23;
	cvt.rn.bf16.f32 	%rs20, %f24;
	cvt.f32.bf16 	%f25, %rs20;
	add.rn.f32 	%f26, %f25, 0f3F800000;
	rcp.approx.f32 	%f27, %f26;
	ld.global.nc.u16 	%rs21, [%rd6+6148];
	mul.rn.f32 	%f28, %f27, %f21;
	cvt.f32.bf16 	%f29, %rs21;
	mul.rn.f32 	%f30, %f28, %f29;
	cvt.rn.bf16.f32 	%rs22, %f30;
	cvt.f32.bf16 	%f31, %rs10;
	neg.bf16 	%rs23, %rs10;
	cvt.f32.bf16 	%f32, %rs23;
	mul.rn.f32 	%f33, %f32, 0f3FB8AA3B;
	ex2.approx.f32 	%f34, %f33;
	cvt.rn.bf16.f32 	%rs24, %f34;
	cvt.f32.bf16 	%f35, %rs24;
	add.rn.f32 	%f36, %f35, 0f3F800000;
	rcp.approx.f32 	%f37, %f36;
	ld.global.nc.u16 	%rs25, [%rd6+6150];
	mul.rn.f32 	%f38, %f37, %f31;
	cvt.f32.bf16 	%f39, %rs25;
	mul.rn.f32 	%f40, %f38, %f39;
	cvt.rn.bf16.f32 	%rs26, %f40;
	mul.wide.u32 	%rd7, %r5, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.v4.b16 	[%rd8], {%rs14, %rs18, %rs22, %rs26};
	ret;

}
	// .globl	fusion_108
.visible .entry fusion_108(
	.param .u64 .ptr .align 16 fusion_108_param_0,
	.param .u64 .ptr .align 128 fusion_108_param_1,
	.param .u64 .ptr .align 128 fusion_108_param_2,
	.param .u64 .ptr .align 128 fusion_108_param_3,
	.param .u64 .ptr .align 16 fusion_108_param_4,
	.param .u64 .ptr .align 128 fusion_108_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<173>;
	.reg .f32 	%f<210>;
	.reg .b64 	%rd<39>;

	ld.param.u64 	%rd14, [fusion_108_param_0];
	ld.param.u64 	%rd15, [fusion_108_param_5];
	cvta.to.global.u64 	%rd16, %rd15;
	ld.param.u64 	%rd17, [fusion_108_param_1];
	ld.param.u64 	%rd18, [fusion_108_param_4];
	cvta.to.global.u64 	%rd19, %rd18;
	ld.param.u64 	%rd20, [fusion_108_param_2];
	ld.param.u64 	%rd21, [fusion_108_param_3];
	cvta.to.global.u64 	%rd22, %rd21;
	cvta.to.global.u64 	%rd23, %rd20;
	cvta.to.global.u64 	%rd24, %rd17;
	cvta.to.global.u64 	%rd9, %rd14;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd25, %r1, 14336;
	add.s64 	%rd26, %rd23, %rd25;
	mov.u32 	%r153, %tid.x;
	and.b32  	%r154, %r153, 31;
	shl.b32 	%r155, %r153, 3;
	and.b32  	%r156, %r155, 248;
	setp.lt.u32 	%p4, %r153, 32;
	selp.b32 	%r157, 0, 256, %p4;
	or.b32  	%r158, %r156, %r157;
	mul.wide.u32 	%rd27, %r158, 2;
	add.s64 	%rd28, %rd26, %rd27;
	add.s64 	%rd1, %rd28, 10240;
	add.s64 	%rd2, %rd28, 11264;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd29, %r1, 1024;
	shl.b64 	%rd30, %rd29, 1;
	add.s64 	%rd31, %rd22, %rd30;
	add.s64 	%rd3, %rd31, %rd27;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd28, 12288;
	add.s64 	%rd6, %rd28, 13312;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd32, %rd24, %rd30;
	add.s64 	%rd7, %rd32, %rd27;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.rn.f32 	%f65, %f33, %f49;
	add.rn.f32 	%f66, %f34, %f50;
	add.rn.f32 	%f67, %f35, %f51;
	add.rn.f32 	%f68, %f36, %f52;
	add.rn.f32 	%f69, %f37, %f53;
	add.rn.f32 	%f70, %f38, %f54;
	add.rn.f32 	%f71, %f39, %f55;
	add.rn.f32 	%f72, %f40, %f56;
	add.rn.f32 	%f73, %f41, %f57;
	add.rn.f32 	%f74, %f42, %f58;
	add.rn.f32 	%f75, %f43, %f59;
	add.rn.f32 	%f76, %f44, %f60;
	add.rn.f32 	%f77, %f45, %f61;
	add.rn.f32 	%f78, %f46, %f62;
	add.rn.f32 	%f79, %f47, %f63;
	add.rn.f32 	%f80, %f48, %f64;
	add.rn.f32 	%f81, %f17, %f65;
	add.rn.f32 	%f82, %f18, %f66;
	add.rn.f32 	%f83, %f19, %f67;
	add.rn.f32 	%f84, %f20, %f68;
	add.rn.f32 	%f85, %f21, %f69;
	add.rn.f32 	%f86, %f22, %f70;
	add.rn.f32 	%f87, %f23, %f71;
	add.rn.f32 	%f88, %f24, %f72;
	add.rn.f32 	%f89, %f25, %f73;
	add.rn.f32 	%f90, %f26, %f74;
	add.rn.f32 	%f91, %f27, %f75;
	add.rn.f32 	%f92, %f28, %f76;
	add.rn.f32 	%f93, %f29, %f77;
	add.rn.f32 	%f94, %f30, %f78;
	add.rn.f32 	%f95, %f31, %f79;
	add.rn.f32 	%f96, %f32, %f80;
	add.rn.f32 	%f97, %f1, %f81;
	add.rn.f32 	%f98, %f2, %f82;
	add.rn.f32 	%f99, %f3, %f83;
	add.rn.f32 	%f100, %f4, %f84;
	add.rn.f32 	%f101, %f5, %f85;
	add.rn.f32 	%f102, %f6, %f86;
	add.rn.f32 	%f103, %f7, %f87;
	add.rn.f32 	%f104, %f8, %f88;
	add.rn.f32 	%f105, %f9, %f89;
	add.rn.f32 	%f106, %f10, %f90;
	add.rn.f32 	%f107, %f11, %f91;
	add.rn.f32 	%f108, %f12, %f92;
	add.rn.f32 	%f109, %f13, %f93;
	add.rn.f32 	%f110, %f14, %f94;
	add.rn.f32 	%f111, %f15, %f95;
	add.rn.f32 	%f112, %f16, %f96;
	mul.rn.f32 	%f113, %f97, %f97;
	mul.rn.f32 	%f114, %f98, %f98;
	mul.rn.f32 	%f115, %f99, %f99;
	mul.rn.f32 	%f116, %f100, %f100;
	mul.rn.f32 	%f117, %f101, %f101;
	mul.rn.f32 	%f118, %f102, %f102;
	mul.rn.f32 	%f119, %f103, %f103;
	mul.rn.f32 	%f120, %f104, %f104;
	mul.rn.f32 	%f121, %f105, %f105;
	mul.rn.f32 	%f122, %f106, %f106;
	mul.rn.f32 	%f123, %f107, %f107;
	mul.rn.f32 	%f124, %f108, %f108;
	mul.rn.f32 	%f125, %f109, %f109;
	mul.rn.f32 	%f126, %f110, %f110;
	mul.rn.f32 	%f127, %f111, %f111;
	mul.rn.f32 	%f128, %f112, %f112;
	add.rn.f32 	%f129, %f113, %f114;
	add.rn.f32 	%f130, %f129, %f115;
	add.rn.f32 	%f131, %f130, %f116;
	add.rn.f32 	%f132, %f131, %f117;
	add.rn.f32 	%f133, %f132, %f118;
	add.rn.f32 	%f134, %f133, %f119;
	add.rn.f32 	%f135, %f134, %f120;
	add.rn.f32 	%f136, %f135, %f121;
	add.rn.f32 	%f137, %f136, %f122;
	add.rn.f32 	%f138, %f137, %f123;
	add.rn.f32 	%f139, %f138, %f124;
	add.rn.f32 	%f140, %f139, %f125;
	add.rn.f32 	%f141, %f140, %f126;
	add.rn.f32 	%f142, %f141, %f127;
	add.rn.f32 	%f143, %f142, %f128;
	mov.b32 	%r159, %f143;
	shfl.sync.bfly.b32	%r160, %r159, 16, 31, -1;
	mov.b32 	%f144, %r160;
	add.rn.f32 	%f145, %f143, %f144;
	mov.b32 	%r161, %f145;
	shfl.sync.bfly.b32	%r162, %r161, 8, 31, -1;
	mov.b32 	%f146, %r162;
	add.rn.f32 	%f147, %f145, %f146;
	mov.b32 	%r163, %f147;
	shfl.sync.bfly.b32	%r164, %r163, 4, 31, -1;
	mov.b32 	%f148, %r164;
	add.rn.f32 	%f149, %f147, %f148;
	mov.b32 	%r165, %f149;
	shfl.sync.bfly.b32	%r166, %r165, 2, 31, -1;
	mov.b32 	%f150, %r166;
	add.rn.f32 	%f151, %f149, %f150;
	mov.b32 	%r167, %f151;
	shfl.sync.bfly.b32	%r168, %r167, 1, 31, -1;
	mov.b32 	%f152, %r168;
	add.rn.f32 	%f153, %f151, %f152;
	setp.eq.s32 	%p1, %r154, 0;
	shr.u32 	%r169, %r153, 3;
	and.b32  	%r170, %r169, 4;
	cvt.u64.u32 	%rd33, %r170;
	mov.u64 	%rd34, global_smem;
	add.s64 	%rd35, %rd34, %rd33;
	mov.b32 	%r99, %f153;
	cvt.u32.u64 	%r98, %rd35;
	// begin inline asm
	@%p1 st.shared.b32 [ %r98 + 0 ], %r99;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r153, 2;
	shl.b32 	%r171, %r153, 2;
	cvt.u64.u32 	%rd36, %r171;
	add.s64 	%rd37, %rd34, %rd36;
	cvt.u32.u64 	%r101, %rd37;
	// begin inline asm
	@%p2 ld.shared.b32 %r100, [ %r101 + 0 ];
	// end inline asm
	mov.b32 	%f154, %r100;
	shfl.sync.bfly.b32	%r172, %r100, 1, 31, -1;
	mov.b32 	%f155, %r172;
	add.rn.f32 	%f156, %f154, %f155;
	setp.eq.s32 	%p3, %r153, 0;
	mov.b32 	%r103, %f156;
	// begin inline asm
	@%p3 st.shared.b32 [ %r101 + 0 ], %r103;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f157, [global_smem];
	mul.rn.f32 	%f158, %f157, 0f3A800000;
	// begin inline asm
	mov.u32 %r104, 0x0;
	ld.global.b32 { %r104 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f159, %r104;
	add.rn.f32 	%f160, %f158, %f159;
	rsqrt.approx.f32 	%f161, %f160;
	mul.rn.f32 	%f162, %f97, %f161;
	mul.rn.f32 	%f163, %f98, %f161;
	mul.rn.f32 	%f164, %f99, %f161;
	mul.rn.f32 	%f165, %f100, %f161;
	mul.rn.f32 	%f166, %f101, %f161;
	mul.rn.f32 	%f167, %f102, %f161;
	mul.rn.f32 	%f168, %f103, %f161;
	mul.rn.f32 	%f169, %f104, %f161;
	mul.rn.f32 	%f170, %f105, %f161;
	mul.rn.f32 	%f171, %f106, %f161;
	mul.rn.f32 	%f172, %f107, %f161;
	mul.rn.f32 	%f173, %f108, %f161;
	mul.rn.f32 	%f174, %f109, %f161;
	mul.rn.f32 	%f175, %f110, %f161;
	mul.rn.f32 	%f176, %f111, %f161;
	mul.rn.f32 	%f177, %f112, %f161;
	add.s64 	%rd10, %rd19, %rd27;
	add.s64 	%rd11, %rd10, 1024;
	// begin inline asm
	mov.u32 %r105, 0x0;
	mov.u32 %r106, 0x0;
	mov.u32 %r107, 0x0;
	mov.u32 %r108, 0x0;
	ld.global.v4.b32 { %r105, %r106, %r107, %r108 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r105;
	mov.b32 	{%rs67, %rs68}, %r106;
	mov.b32 	{%rs69, %rs70}, %r107;
	mov.b32 	{%rs71, %rs72}, %r108;
	// begin inline asm
	mov.u32 %r109, 0x0;
	mov.u32 %r110, 0x0;
	mov.u32 %r111, 0x0;
	mov.u32 %r112, 0x0;
	ld.global.v4.b32 { %r109, %r110, %r111, %r112 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r109;
	mov.b32 	{%rs75, %rs76}, %r110;
	mov.b32 	{%rs77, %rs78}, %r111;
	mov.b32 	{%rs79, %rs80}, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs65;
	// end inline asm
	mov.b32 	%f178, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs66;
	// end inline asm
	mov.b32 	%f179, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs67;
	// end inline asm
	mov.b32 	%f180, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs68;
	// end inline asm
	mov.b32 	%f181, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs69;
	// end inline asm
	mov.b32 	%f182, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs70;
	// end inline asm
	mov.b32 	%f183, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs71;
	// end inline asm
	mov.b32 	%f184, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs72;
	// end inline asm
	mov.b32 	%f185, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs73;
	// end inline asm
	mov.b32 	%f186, %r121;
	// begin inline asm
	cvt.f32.bf16 %r122, %rs74;
	// end inline asm
	mov.b32 	%f187, %r122;
	// begin inline asm
	cvt.f32.bf16 %r123, %rs75;
	// end inline asm
	mov.b32 	%f188, %r123;
	// begin inline asm
	cvt.f32.bf16 %r124, %rs76;
	// end inline asm
	mov.b32 	%f189, %r124;
	// begin inline asm
	cvt.f32.bf16 %r125, %rs77;
	// end inline asm
	mov.b32 	%f190, %r125;
	// begin inline asm
	cvt.f32.bf16 %r126, %rs78;
	// end inline asm
	mov.b32 	%f191, %r126;
	// begin inline asm
	cvt.f32.bf16 %r127, %rs79;
	// end inline asm
	mov.b32 	%f192, %r127;
	// begin inline asm
	cvt.f32.bf16 %r128, %rs80;
	// end inline asm
	mov.b32 	%f193, %r128;
	mul.rn.f32 	%f194, %f162, %f178;
	mul.rn.f32 	%f195, %f163, %f179;
	mul.rn.f32 	%f196, %f164, %f180;
	mul.rn.f32 	%f197, %f165, %f181;
	mul.rn.f32 	%f198, %f166, %f182;
	mul.rn.f32 	%f199, %f167, %f183;
	mul.rn.f32 	%f200, %f168, %f184;
	mul.rn.f32 	%f201, %f169, %f185;
	mul.rn.f32 	%f202, %f170, %f186;
	mul.rn.f32 	%f203, %f171, %f187;
	mul.rn.f32 	%f204, %f172, %f188;
	mul.rn.f32 	%f205, %f173, %f189;
	mul.rn.f32 	%f206, %f174, %f190;
	mul.rn.f32 	%f207, %f175, %f191;
	mul.rn.f32 	%f208, %f176, %f192;
	mul.rn.f32 	%f209, %f177, %f193;
	mov.b32 	%r129, %f194;
	// begin inline asm
	cvt.rn.bf16.f32 %rs81, %r129;
	// end inline asm
	mov.b32 	%r130, %f195;
	// begin inline asm
	cvt.rn.bf16.f32 %rs82, %r130;
	// end inline asm
	mov.b32 	%r131, %f196;
	// begin inline asm
	cvt.rn.bf16.f32 %rs83, %r131;
	// end inline asm
	mov.b32 	%r132, %f197;
	// begin inline asm
	cvt.rn.bf16.f32 %rs84, %r132;
	// end inline asm
	mov.b32 	%r133, %f198;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r133;
	// end inline asm
	mov.b32 	%r134, %f199;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r134;
	// end inline asm
	mov.b32 	%r135, %f200;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r135;
	// end inline asm
	mov.b32 	%r136, %f201;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r136;
	// end inline asm
	mov.b32 	%r137, %f202;
	// begin inline asm
	cvt.rn.bf16.f32 %rs89, %r137;
	// end inline asm
	mov.b32 	%r138, %f203;
	// begin inline asm
	cvt.rn.bf16.f32 %rs90, %r138;
	// end inline asm
	mov.b32 	%r139, %f204;
	// begin inline asm
	cvt.rn.bf16.f32 %rs91, %r139;
	// end inline asm
	mov.b32 	%r140, %f205;
	// begin inline asm
	cvt.rn.bf16.f32 %rs92, %r140;
	// end inline asm
	mov.b32 	%r141, %f206;
	// begin inline asm
	cvt.rn.bf16.f32 %rs93, %r141;
	// end inline asm
	mov.b32 	%r142, %f207;
	// begin inline asm
	cvt.rn.bf16.f32 %rs94, %r142;
	// end inline asm
	mov.b32 	%r143, %f208;
	// begin inline asm
	cvt.rn.bf16.f32 %rs95, %r143;
	// end inline asm
	mov.b32 	%r144, %f209;
	// begin inline asm
	cvt.rn.bf16.f32 %rs96, %r144;
	// end inline asm
	add.s64 	%rd38, %rd16, %rd30;
	add.s64 	%rd12, %rd38, %rd27;
	add.s64 	%rd13, %rd12, 1024;
	mov.b32 	%r145, {%rs81, %rs82};
	mov.b32 	%r146, {%rs83, %rs84};
	mov.b32 	%r147, {%rs85, %rs86};
	mov.b32 	%r148, {%rs87, %rs88};
	// begin inline asm
	st.global.v4.b32 [ %rd12 + 0 ], { %r145, %r146, %r147, %r148 };
	// end inline asm
	mov.b32 	%r149, {%rs89, %rs90};
	mov.b32 	%r150, {%rs91, %rs92};
	mov.b32 	%r151, {%rs93, %rs94};
	mov.b32 	%r152, {%rs95, %rs96};
	// begin inline asm
	st.global.v4.b32 [ %rd13 + 0 ], { %r149, %r150, %r151, %r152 };
	// end inline asm
	ret;

}
	// .globl	fusion_106
.visible .entry fusion_106(
	.param .u64 .ptr .align 16 fusion_106_param_0,
	.param .u64 .ptr .align 16 fusion_106_param_1,
	.param .u64 .ptr .align 128 fusion_106_param_2,
	.param .u64 .ptr .align 128 fusion_106_param_3,
	.param .u64 .ptr .align 128 fusion_106_param_4,
	.param .u64 .ptr .align 128 fusion_106_param_5,
	.param .u64 .ptr .align 128 fusion_106_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<129>;
	.reg .b32 	%r<221>;
	.reg .f32 	%f<274>;
	.reg .b64 	%rd<46>;

	ld.param.u64 	%rd18, [fusion_106_param_0];
	ld.param.u64 	%rd19, [fusion_106_param_6];
	cvta.to.global.u64 	%rd20, %rd19;
	ld.param.u64 	%rd21, [fusion_106_param_1];
	ld.param.u64 	%rd22, [fusion_106_param_5];
	cvta.to.global.u64 	%rd23, %rd22;
	ld.param.u64 	%rd24, [fusion_106_param_2];
	ld.param.u64 	%rd25, [fusion_106_param_4];
	cvta.to.global.u64 	%rd26, %rd25;
	ld.param.u64 	%rd27, [fusion_106_param_3];
	cvta.to.global.u64 	%rd28, %rd27;
	cvta.to.global.u64 	%rd29, %rd24;
	cvta.to.global.u64 	%rd30, %rd21;
	cvta.to.global.u64 	%rd13, %rd18;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd31, %r1, 14336;
	add.s64 	%rd32, %rd28, %rd31;
	mov.u32 	%r201, %tid.x;
	and.b32  	%r202, %r201, 31;
	shl.b32 	%r203, %r201, 3;
	and.b32  	%r204, %r203, 248;
	setp.lt.u32 	%p4, %r201, 32;
	selp.b32 	%r205, 0, 256, %p4;
	or.b32  	%r206, %r204, %r205;
	mul.wide.u32 	%rd33, %r206, 2;
	add.s64 	%rd34, %rd32, %rd33;
	add.s64 	%rd1, %rd34, 8192;
	add.s64 	%rd2, %rd34, 9216;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd35, %r1, 1024;
	shl.b64 	%rd36, %rd35, 1;
	add.s64 	%rd37, %rd23, %rd36;
	add.s64 	%rd3, %rd37, %rd33;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd34, 10240;
	add.s64 	%rd6, %rd34, 11264;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd38, %rd26, %rd36;
	add.s64 	%rd7, %rd38, %rd33;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd9, %rd34, 12288;
	add.s64 	%rd10, %rd34, 13312;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd39, %rd29, %rd36;
	add.s64 	%rd11, %rd39, %rd33;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.rn.f32 	%f97, %f65, %f81;
	add.rn.f32 	%f98, %f66, %f82;
	add.rn.f32 	%f99, %f67, %f83;
	add.rn.f32 	%f100, %f68, %f84;
	add.rn.f32 	%f101, %f69, %f85;
	add.rn.f32 	%f102, %f70, %f86;
	add.rn.f32 	%f103, %f71, %f87;
	add.rn.f32 	%f104, %f72, %f88;
	add.rn.f32 	%f105, %f73, %f89;
	add.rn.f32 	%f106, %f74, %f90;
	add.rn.f32 	%f107, %f75, %f91;
	add.rn.f32 	%f108, %f76, %f92;
	add.rn.f32 	%f109, %f77, %f93;
	add.rn.f32 	%f110, %f78, %f94;
	add.rn.f32 	%f111, %f79, %f95;
	add.rn.f32 	%f112, %f80, %f96;
	add.rn.f32 	%f113, %f49, %f97;
	add.rn.f32 	%f114, %f50, %f98;
	add.rn.f32 	%f115, %f51, %f99;
	add.rn.f32 	%f116, %f52, %f100;
	add.rn.f32 	%f117, %f53, %f101;
	add.rn.f32 	%f118, %f54, %f102;
	add.rn.f32 	%f119, %f55, %f103;
	add.rn.f32 	%f120, %f56, %f104;
	add.rn.f32 	%f121, %f57, %f105;
	add.rn.f32 	%f122, %f58, %f106;
	add.rn.f32 	%f123, %f59, %f107;
	add.rn.f32 	%f124, %f60, %f108;
	add.rn.f32 	%f125, %f61, %f109;
	add.rn.f32 	%f126, %f62, %f110;
	add.rn.f32 	%f127, %f63, %f111;
	add.rn.f32 	%f128, %f64, %f112;
	add.rn.f32 	%f129, %f33, %f113;
	add.rn.f32 	%f130, %f34, %f114;
	add.rn.f32 	%f131, %f35, %f115;
	add.rn.f32 	%f132, %f36, %f116;
	add.rn.f32 	%f133, %f37, %f117;
	add.rn.f32 	%f134, %f38, %f118;
	add.rn.f32 	%f135, %f39, %f119;
	add.rn.f32 	%f136, %f40, %f120;
	add.rn.f32 	%f137, %f41, %f121;
	add.rn.f32 	%f138, %f42, %f122;
	add.rn.f32 	%f139, %f43, %f123;
	add.rn.f32 	%f140, %f44, %f124;
	add.rn.f32 	%f141, %f45, %f125;
	add.rn.f32 	%f142, %f46, %f126;
	add.rn.f32 	%f143, %f47, %f127;
	add.rn.f32 	%f144, %f48, %f128;
	add.rn.f32 	%f145, %f17, %f129;
	add.rn.f32 	%f146, %f18, %f130;
	add.rn.f32 	%f147, %f19, %f131;
	add.rn.f32 	%f148, %f20, %f132;
	add.rn.f32 	%f149, %f21, %f133;
	add.rn.f32 	%f150, %f22, %f134;
	add.rn.f32 	%f151, %f23, %f135;
	add.rn.f32 	%f152, %f24, %f136;
	add.rn.f32 	%f153, %f25, %f137;
	add.rn.f32 	%f154, %f26, %f138;
	add.rn.f32 	%f155, %f27, %f139;
	add.rn.f32 	%f156, %f28, %f140;
	add.rn.f32 	%f157, %f29, %f141;
	add.rn.f32 	%f158, %f30, %f142;
	add.rn.f32 	%f159, %f31, %f143;
	add.rn.f32 	%f160, %f32, %f144;
	add.rn.f32 	%f161, %f1, %f145;
	add.rn.f32 	%f162, %f2, %f146;
	add.rn.f32 	%f163, %f3, %f147;
	add.rn.f32 	%f164, %f4, %f148;
	add.rn.f32 	%f165, %f5, %f149;
	add.rn.f32 	%f166, %f6, %f150;
	add.rn.f32 	%f167, %f7, %f151;
	add.rn.f32 	%f168, %f8, %f152;
	add.rn.f32 	%f169, %f9, %f153;
	add.rn.f32 	%f170, %f10, %f154;
	add.rn.f32 	%f171, %f11, %f155;
	add.rn.f32 	%f172, %f12, %f156;
	add.rn.f32 	%f173, %f13, %f157;
	add.rn.f32 	%f174, %f14, %f158;
	add.rn.f32 	%f175, %f15, %f159;
	add.rn.f32 	%f176, %f16, %f160;
	mul.rn.f32 	%f177, %f161, %f161;
	mul.rn.f32 	%f178, %f162, %f162;
	mul.rn.f32 	%f179, %f163, %f163;
	mul.rn.f32 	%f180, %f164, %f164;
	mul.rn.f32 	%f181, %f165, %f165;
	mul.rn.f32 	%f182, %f166, %f166;
	mul.rn.f32 	%f183, %f167, %f167;
	mul.rn.f32 	%f184, %f168, %f168;
	mul.rn.f32 	%f185, %f169, %f169;
	mul.rn.f32 	%f186, %f170, %f170;
	mul.rn.f32 	%f187, %f171, %f171;
	mul.rn.f32 	%f188, %f172, %f172;
	mul.rn.f32 	%f189, %f173, %f173;
	mul.rn.f32 	%f190, %f174, %f174;
	mul.rn.f32 	%f191, %f175, %f175;
	mul.rn.f32 	%f192, %f176, %f176;
	add.rn.f32 	%f193, %f177, %f178;
	add.rn.f32 	%f194, %f193, %f179;
	add.rn.f32 	%f195, %f194, %f180;
	add.rn.f32 	%f196, %f195, %f181;
	add.rn.f32 	%f197, %f196, %f182;
	add.rn.f32 	%f198, %f197, %f183;
	add.rn.f32 	%f199, %f198, %f184;
	add.rn.f32 	%f200, %f199, %f185;
	add.rn.f32 	%f201, %f200, %f186;
	add.rn.f32 	%f202, %f201, %f187;
	add.rn.f32 	%f203, %f202, %f188;
	add.rn.f32 	%f204, %f203, %f189;
	add.rn.f32 	%f205, %f204, %f190;
	add.rn.f32 	%f206, %f205, %f191;
	add.rn.f32 	%f207, %f206, %f192;
	mov.b32 	%r207, %f207;
	shfl.sync.bfly.b32	%r208, %r207, 16, 31, -1;
	mov.b32 	%f208, %r208;
	add.rn.f32 	%f209, %f207, %f208;
	mov.b32 	%r209, %f209;
	shfl.sync.bfly.b32	%r210, %r209, 8, 31, -1;
	mov.b32 	%f210, %r210;
	add.rn.f32 	%f211, %f209, %f210;
	mov.b32 	%r211, %f211;
	shfl.sync.bfly.b32	%r212, %r211, 4, 31, -1;
	mov.b32 	%f212, %r212;
	add.rn.f32 	%f213, %f211, %f212;
	mov.b32 	%r213, %f213;
	shfl.sync.bfly.b32	%r214, %r213, 2, 31, -1;
	mov.b32 	%f214, %r214;
	add.rn.f32 	%f215, %f213, %f214;
	mov.b32 	%r215, %f215;
	shfl.sync.bfly.b32	%r216, %r215, 1, 31, -1;
	mov.b32 	%f216, %r216;
	add.rn.f32 	%f217, %f215, %f216;
	setp.eq.s32 	%p1, %r202, 0;
	shr.u32 	%r217, %r201, 3;
	and.b32  	%r218, %r217, 4;
	cvt.u64.u32 	%rd40, %r218;
	mov.u64 	%rd41, global_smem;
	add.s64 	%rd42, %rd41, %rd40;
	mov.b32 	%r147, %f217;
	cvt.u32.u64 	%r146, %rd42;
	// begin inline asm
	@%p1 st.shared.b32 [ %r146 + 0 ], %r147;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r201, 2;
	shl.b32 	%r219, %r201, 2;
	cvt.u64.u32 	%rd43, %r219;
	add.s64 	%rd44, %rd41, %rd43;
	cvt.u32.u64 	%r149, %rd44;
	// begin inline asm
	@%p2 ld.shared.b32 %r148, [ %r149 + 0 ];
	// end inline asm
	mov.b32 	%f218, %r148;
	shfl.sync.bfly.b32	%r220, %r148, 1, 31, -1;
	mov.b32 	%f219, %r220;
	add.rn.f32 	%f220, %f218, %f219;
	setp.eq.s32 	%p3, %r201, 0;
	mov.b32 	%r151, %f220;
	// begin inline asm
	@%p3 st.shared.b32 [ %r149 + 0 ], %r151;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f221, [global_smem];
	mul.rn.f32 	%f222, %f221, 0f3A800000;
	// begin inline asm
	mov.u32 %r152, 0x0;
	ld.global.b32 { %r152 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f223, %r152;
	add.rn.f32 	%f224, %f222, %f223;
	rsqrt.approx.f32 	%f225, %f224;
	mul.rn.f32 	%f226, %f161, %f225;
	mul.rn.f32 	%f227, %f162, %f225;
	mul.rn.f32 	%f228, %f163, %f225;
	mul.rn.f32 	%f229, %f164, %f225;
	mul.rn.f32 	%f230, %f165, %f225;
	mul.rn.f32 	%f231, %f166, %f225;
	mul.rn.f32 	%f232, %f167, %f225;
	mul.rn.f32 	%f233, %f168, %f225;
	mul.rn.f32 	%f234, %f169, %f225;
	mul.rn.f32 	%f235, %f170, %f225;
	mul.rn.f32 	%f236, %f171, %f225;
	mul.rn.f32 	%f237, %f172, %f225;
	mul.rn.f32 	%f238, %f173, %f225;
	mul.rn.f32 	%f239, %f174, %f225;
	mul.rn.f32 	%f240, %f175, %f225;
	mul.rn.f32 	%f241, %f176, %f225;
	add.s64 	%rd14, %rd30, %rd33;
	add.s64 	%rd15, %rd14, 1024;
	// begin inline asm
	mov.u32 %r153, 0x0;
	mov.u32 %r154, 0x0;
	mov.u32 %r155, 0x0;
	mov.u32 %r156, 0x0;
	ld.global.v4.b32 { %r153, %r154, %r155, %r156 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r153;
	mov.b32 	{%rs99, %rs100}, %r154;
	mov.b32 	{%rs101, %rs102}, %r155;
	mov.b32 	{%rs103, %rs104}, %r156;
	// begin inline asm
	mov.u32 %r157, 0x0;
	mov.u32 %r158, 0x0;
	mov.u32 %r159, 0x0;
	mov.u32 %r160, 0x0;
	ld.global.v4.b32 { %r157, %r158, %r159, %r160 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r157;
	mov.b32 	{%rs107, %rs108}, %r158;
	mov.b32 	{%rs109, %rs110}, %r159;
	mov.b32 	{%rs111, %rs112}, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs97;
	// end inline asm
	mov.b32 	%f242, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs98;
	// end inline asm
	mov.b32 	%f243, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs99;
	// end inline asm
	mov.b32 	%f244, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs100;
	// end inline asm
	mov.b32 	%f245, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs101;
	// end inline asm
	mov.b32 	%f246, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs102;
	// end inline asm
	mov.b32 	%f247, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs103;
	// end inline asm
	mov.b32 	%f248, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs104;
	// end inline asm
	mov.b32 	%f249, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs105;
	// end inline asm
	mov.b32 	%f250, %r169;
	// begin inline asm
	cvt.f32.bf16 %r170, %rs106;
	// end inline asm
	mov.b32 	%f251, %r170;
	// begin inline asm
	cvt.f32.bf16 %r171, %rs107;
	// end inline asm
	mov.b32 	%f252, %r171;
	// begin inline asm
	cvt.f32.bf16 %r172, %rs108;
	// end inline asm
	mov.b32 	%f253, %r172;
	// begin inline asm
	cvt.f32.bf16 %r173, %rs109;
	// end inline asm
	mov.b32 	%f254, %r173;
	// begin inline asm
	cvt.f32.bf16 %r174, %rs110;
	// end inline asm
	mov.b32 	%f255, %r174;
	// begin inline asm
	cvt.f32.bf16 %r175, %rs111;
	// end inline asm
	mov.b32 	%f256, %r175;
	// begin inline asm
	cvt.f32.bf16 %r176, %rs112;
	// end inline asm
	mov.b32 	%f257, %r176;
	mul.rn.f32 	%f258, %f226, %f242;
	mul.rn.f32 	%f259, %f227, %f243;
	mul.rn.f32 	%f260, %f228, %f244;
	mul.rn.f32 	%f261, %f229, %f245;
	mul.rn.f32 	%f262, %f230, %f246;
	mul.rn.f32 	%f263, %f231, %f247;
	mul.rn.f32 	%f264, %f232, %f248;
	mul.rn.f32 	%f265, %f233, %f249;
	mul.rn.f32 	%f266, %f234, %f250;
	mul.rn.f32 	%f267, %f235, %f251;
	mul.rn.f32 	%f268, %f236, %f252;
	mul.rn.f32 	%f269, %f237, %f253;
	mul.rn.f32 	%f270, %f238, %f254;
	mul.rn.f32 	%f271, %f239, %f255;
	mul.rn.f32 	%f272, %f240, %f256;
	mul.rn.f32 	%f273, %f241, %f257;
	mov.b32 	%r177, %f258;
	// begin inline asm
	cvt.rn.bf16.f32 %rs113, %r177;
	// end inline asm
	mov.b32 	%r178, %f259;
	// begin inline asm
	cvt.rn.bf16.f32 %rs114, %r178;
	// end inline asm
	mov.b32 	%r179, %f260;
	// begin inline asm
	cvt.rn.bf16.f32 %rs115, %r179;
	// end inline asm
	mov.b32 	%r180, %f261;
	// begin inline asm
	cvt.rn.bf16.f32 %rs116, %r180;
	// end inline asm
	mov.b32 	%r181, %f262;
	// begin inline asm
	cvt.rn.bf16.f32 %rs117, %r181;
	// end inline asm
	mov.b32 	%r182, %f263;
	// begin inline asm
	cvt.rn.bf16.f32 %rs118, %r182;
	// end inline asm
	mov.b32 	%r183, %f264;
	// begin inline asm
	cvt.rn.bf16.f32 %rs119, %r183;
	// end inline asm
	mov.b32 	%r184, %f265;
	// begin inline asm
	cvt.rn.bf16.f32 %rs120, %r184;
	// end inline asm
	mov.b32 	%r185, %f266;
	// begin inline asm
	cvt.rn.bf16.f32 %rs121, %r185;
	// end inline asm
	mov.b32 	%r186, %f267;
	// begin inline asm
	cvt.rn.bf16.f32 %rs122, %r186;
	// end inline asm
	mov.b32 	%r187, %f268;
	// begin inline asm
	cvt.rn.bf16.f32 %rs123, %r187;
	// end inline asm
	mov.b32 	%r188, %f269;
	// begin inline asm
	cvt.rn.bf16.f32 %rs124, %r188;
	// end inline asm
	mov.b32 	%r189, %f270;
	// begin inline asm
	cvt.rn.bf16.f32 %rs125, %r189;
	// end inline asm
	mov.b32 	%r190, %f271;
	// begin inline asm
	cvt.rn.bf16.f32 %rs126, %r190;
	// end inline asm
	mov.b32 	%r191, %f272;
	// begin inline asm
	cvt.rn.bf16.f32 %rs127, %r191;
	// end inline asm
	mov.b32 	%r192, %f273;
	// begin inline asm
	cvt.rn.bf16.f32 %rs128, %r192;
	// end inline asm
	add.s64 	%rd45, %rd20, %rd36;
	add.s64 	%rd16, %rd45, %rd33;
	add.s64 	%rd17, %rd16, 1024;
	mov.b32 	%r193, {%rs113, %rs114};
	mov.b32 	%r194, {%rs115, %rs116};
	mov.b32 	%r195, {%rs117, %rs118};
	mov.b32 	%r196, {%rs119, %rs120};
	// begin inline asm
	st.global.v4.b32 [ %rd16 + 0 ], { %r193, %r194, %r195, %r196 };
	// end inline asm
	mov.b32 	%r197, {%rs121, %rs122};
	mov.b32 	%r198, {%rs123, %rs124};
	mov.b32 	%r199, {%rs125, %rs126};
	mov.b32 	%r200, {%rs127, %rs128};
	// begin inline asm
	st.global.v4.b32 [ %rd17 + 0 ], { %r197, %r198, %r199, %r200 };
	// end inline asm
	ret;

}
	// .globl	fusion_104
.visible .entry fusion_104(
	.param .u64 .ptr .align 16 fusion_104_param_0,
	.param .u64 .ptr .align 128 fusion_104_param_1,
	.param .u64 .ptr .align 128 fusion_104_param_2,
	.param .u64 .ptr .align 16 fusion_104_param_3,
	.param .u64 .ptr .align 128 fusion_104_param_4,
	.param .u64 .ptr .align 128 fusion_104_param_5,
	.param .u64 .ptr .align 128 fusion_104_param_6,
	.param .u64 .ptr .align 128 fusion_104_param_7
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<161>;
	.reg .b32 	%r<269>;
	.reg .f32 	%f<338>;
	.reg .b64 	%rd<53>;

	ld.param.u64 	%rd22, [fusion_104_param_0];
	ld.param.u64 	%rd23, [fusion_104_param_7];
	cvta.to.global.u64 	%rd24, %rd23;
	ld.param.u64 	%rd25, [fusion_104_param_1];
	ld.param.u64 	%rd26, [fusion_104_param_6];
	cvta.to.global.u64 	%rd27, %rd26;
	ld.param.u64 	%rd28, [fusion_104_param_2];
	ld.param.u64 	%rd29, [fusion_104_param_5];
	cvta.to.global.u64 	%rd30, %rd29;
	ld.param.u64 	%rd31, [fusion_104_param_3];
	ld.param.u64 	%rd32, [fusion_104_param_4];
	cvta.to.global.u64 	%rd33, %rd32;
	cvta.to.global.u64 	%rd34, %rd31;
	cvta.to.global.u64 	%rd35, %rd28;
	cvta.to.global.u64 	%rd36, %rd25;
	cvta.to.global.u64 	%rd17, %rd22;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd37, %r1, 14336;
	add.s64 	%rd38, %rd35, %rd37;
	mov.u32 	%r249, %tid.x;
	and.b32  	%r250, %r249, 31;
	shl.b32 	%r251, %r249, 3;
	and.b32  	%r252, %r251, 248;
	setp.lt.u32 	%p4, %r249, 32;
	selp.b32 	%r253, 0, 256, %p4;
	or.b32  	%r254, %r252, %r253;
	mul.wide.u32 	%rd39, %r254, 2;
	add.s64 	%rd40, %rd38, %rd39;
	add.s64 	%rd1, %rd40, 6144;
	add.s64 	%rd2, %rd40, 7168;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd41, %r1, 1024;
	shl.b64 	%rd42, %rd41, 1;
	add.s64 	%rd43, %rd36, %rd42;
	add.s64 	%rd3, %rd43, %rd39;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd40, 8192;
	add.s64 	%rd6, %rd40, 9216;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd44, %rd27, %rd42;
	add.s64 	%rd7, %rd44, %rd39;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd9, %rd40, 10240;
	add.s64 	%rd10, %rd40, 11264;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	add.s64 	%rd45, %rd30, %rd42;
	add.s64 	%rd11, %rd45, %rd39;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r122;
	mov.b32 	{%rs83, %rs84}, %r123;
	mov.b32 	{%rs85, %rs86}, %r124;
	mov.b32 	{%rs87, %rs88}, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r126;
	mov.b32 	{%rs91, %rs92}, %r127;
	mov.b32 	{%rs93, %rs94}, %r128;
	mov.b32 	{%rs95, %rs96}, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs81;
	// end inline asm
	mov.b32 	%f81, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs82;
	// end inline asm
	mov.b32 	%f82, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs83;
	// end inline asm
	mov.b32 	%f83, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs84;
	// end inline asm
	mov.b32 	%f84, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs85;
	// end inline asm
	mov.b32 	%f85, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs86;
	// end inline asm
	mov.b32 	%f86, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs87;
	// end inline asm
	mov.b32 	%f87, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs88;
	// end inline asm
	mov.b32 	%f88, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs89;
	// end inline asm
	mov.b32 	%f89, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs90;
	// end inline asm
	mov.b32 	%f90, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs91;
	// end inline asm
	mov.b32 	%f91, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs92;
	// end inline asm
	mov.b32 	%f92, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs93;
	// end inline asm
	mov.b32 	%f93, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs94;
	// end inline asm
	mov.b32 	%f94, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs95;
	// end inline asm
	mov.b32 	%f95, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs96;
	// end inline asm
	mov.b32 	%f96, %r145;
	add.s64 	%rd13, %rd40, 12288;
	add.s64 	%rd14, %rd40, 13312;
	// begin inline asm
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	mov.u32 %r149, 0x0;
	ld.global.v4.b32 { %r146, %r147, %r148, %r149 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs97, %rs98}, %r146;
	mov.b32 	{%rs99, %rs100}, %r147;
	mov.b32 	{%rs101, %rs102}, %r148;
	mov.b32 	{%rs103, %rs104}, %r149;
	// begin inline asm
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	mov.u32 %r153, 0x0;
	ld.global.v4.b32 { %r150, %r151, %r152, %r153 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs105, %rs106}, %r150;
	mov.b32 	{%rs107, %rs108}, %r151;
	mov.b32 	{%rs109, %rs110}, %r152;
	mov.b32 	{%rs111, %rs112}, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs97;
	// end inline asm
	mov.b32 	%f97, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs98;
	// end inline asm
	mov.b32 	%f98, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs99;
	// end inline asm
	mov.b32 	%f99, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs100;
	// end inline asm
	mov.b32 	%f100, %r157;
	// begin inline asm
	cvt.f32.bf16 %r158, %rs101;
	// end inline asm
	mov.b32 	%f101, %r158;
	// begin inline asm
	cvt.f32.bf16 %r159, %rs102;
	// end inline asm
	mov.b32 	%f102, %r159;
	// begin inline asm
	cvt.f32.bf16 %r160, %rs103;
	// end inline asm
	mov.b32 	%f103, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs104;
	// end inline asm
	mov.b32 	%f104, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs105;
	// end inline asm
	mov.b32 	%f105, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs106;
	// end inline asm
	mov.b32 	%f106, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs107;
	// end inline asm
	mov.b32 	%f107, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs108;
	// end inline asm
	mov.b32 	%f108, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs109;
	// end inline asm
	mov.b32 	%f109, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs110;
	// end inline asm
	mov.b32 	%f110, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs111;
	// end inline asm
	mov.b32 	%f111, %r168;
	// begin inline asm
	cvt.f32.bf16 %r169, %rs112;
	// end inline asm
	mov.b32 	%f112, %r169;
	add.s64 	%rd46, %rd33, %rd42;
	add.s64 	%rd15, %rd46, %rd39;
	add.s64 	%rd16, %rd15, 1024;
	// begin inline asm
	mov.u32 %r170, 0x0;
	mov.u32 %r171, 0x0;
	mov.u32 %r172, 0x0;
	mov.u32 %r173, 0x0;
	ld.global.v4.b32 { %r170, %r171, %r172, %r173 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs113, %rs114}, %r170;
	mov.b32 	{%rs115, %rs116}, %r171;
	mov.b32 	{%rs117, %rs118}, %r172;
	mov.b32 	{%rs119, %rs120}, %r173;
	// begin inline asm
	mov.u32 %r174, 0x0;
	mov.u32 %r175, 0x0;
	mov.u32 %r176, 0x0;
	mov.u32 %r177, 0x0;
	ld.global.v4.b32 { %r174, %r175, %r176, %r177 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs121, %rs122}, %r174;
	mov.b32 	{%rs123, %rs124}, %r175;
	mov.b32 	{%rs125, %rs126}, %r176;
	mov.b32 	{%rs127, %rs128}, %r177;
	// begin inline asm
	cvt.f32.bf16 %r178, %rs113;
	// end inline asm
	mov.b32 	%f113, %r178;
	// begin inline asm
	cvt.f32.bf16 %r179, %rs114;
	// end inline asm
	mov.b32 	%f114, %r179;
	// begin inline asm
	cvt.f32.bf16 %r180, %rs115;
	// end inline asm
	mov.b32 	%f115, %r180;
	// begin inline asm
	cvt.f32.bf16 %r181, %rs116;
	// end inline asm
	mov.b32 	%f116, %r181;
	// begin inline asm
	cvt.f32.bf16 %r182, %rs117;
	// end inline asm
	mov.b32 	%f117, %r182;
	// begin inline asm
	cvt.f32.bf16 %r183, %rs118;
	// end inline asm
	mov.b32 	%f118, %r183;
	// begin inline asm
	cvt.f32.bf16 %r184, %rs119;
	// end inline asm
	mov.b32 	%f119, %r184;
	// begin inline asm
	cvt.f32.bf16 %r185, %rs120;
	// end inline asm
	mov.b32 	%f120, %r185;
	// begin inline asm
	cvt.f32.bf16 %r186, %rs121;
	// end inline asm
	mov.b32 	%f121, %r186;
	// begin inline asm
	cvt.f32.bf16 %r187, %rs122;
	// end inline asm
	mov.b32 	%f122, %r187;
	// begin inline asm
	cvt.f32.bf16 %r188, %rs123;
	// end inline asm
	mov.b32 	%f123, %r188;
	// begin inline asm
	cvt.f32.bf16 %r189, %rs124;
	// end inline asm
	mov.b32 	%f124, %r189;
	// begin inline asm
	cvt.f32.bf16 %r190, %rs125;
	// end inline asm
	mov.b32 	%f125, %r190;
	// begin inline asm
	cvt.f32.bf16 %r191, %rs126;
	// end inline asm
	mov.b32 	%f126, %r191;
	// begin inline asm
	cvt.f32.bf16 %r192, %rs127;
	// end inline asm
	mov.b32 	%f127, %r192;
	// begin inline asm
	cvt.f32.bf16 %r193, %rs128;
	// end inline asm
	mov.b32 	%f128, %r193;
	add.rn.f32 	%f129, %f97, %f113;
	add.rn.f32 	%f130, %f98, %f114;
	add.rn.f32 	%f131, %f99, %f115;
	add.rn.f32 	%f132, %f100, %f116;
	add.rn.f32 	%f133, %f101, %f117;
	add.rn.f32 	%f134, %f102, %f118;
	add.rn.f32 	%f135, %f103, %f119;
	add.rn.f32 	%f136, %f104, %f120;
	add.rn.f32 	%f137, %f105, %f121;
	add.rn.f32 	%f138, %f106, %f122;
	add.rn.f32 	%f139, %f107, %f123;
	add.rn.f32 	%f140, %f108, %f124;
	add.rn.f32 	%f141, %f109, %f125;
	add.rn.f32 	%f142, %f110, %f126;
	add.rn.f32 	%f143, %f111, %f127;
	add.rn.f32 	%f144, %f112, %f128;
	add.rn.f32 	%f145, %f81, %f129;
	add.rn.f32 	%f146, %f82, %f130;
	add.rn.f32 	%f147, %f83, %f131;
	add.rn.f32 	%f148, %f84, %f132;
	add.rn.f32 	%f149, %f85, %f133;
	add.rn.f32 	%f150, %f86, %f134;
	add.rn.f32 	%f151, %f87, %f135;
	add.rn.f32 	%f152, %f88, %f136;
	add.rn.f32 	%f153, %f89, %f137;
	add.rn.f32 	%f154, %f90, %f138;
	add.rn.f32 	%f155, %f91, %f139;
	add.rn.f32 	%f156, %f92, %f140;
	add.rn.f32 	%f157, %f93, %f141;
	add.rn.f32 	%f158, %f94, %f142;
	add.rn.f32 	%f159, %f95, %f143;
	add.rn.f32 	%f160, %f96, %f144;
	add.rn.f32 	%f161, %f65, %f145;
	add.rn.f32 	%f162, %f66, %f146;
	add.rn.f32 	%f163, %f67, %f147;
	add.rn.f32 	%f164, %f68, %f148;
	add.rn.f32 	%f165, %f69, %f149;
	add.rn.f32 	%f166, %f70, %f150;
	add.rn.f32 	%f167, %f71, %f151;
	add.rn.f32 	%f168, %f72, %f152;
	add.rn.f32 	%f169, %f73, %f153;
	add.rn.f32 	%f170, %f74, %f154;
	add.rn.f32 	%f171, %f75, %f155;
	add.rn.f32 	%f172, %f76, %f156;
	add.rn.f32 	%f173, %f77, %f157;
	add.rn.f32 	%f174, %f78, %f158;
	add.rn.f32 	%f175, %f79, %f159;
	add.rn.f32 	%f176, %f80, %f160;
	add.rn.f32 	%f177, %f49, %f161;
	add.rn.f32 	%f178, %f50, %f162;
	add.rn.f32 	%f179, %f51, %f163;
	add.rn.f32 	%f180, %f52, %f164;
	add.rn.f32 	%f181, %f53, %f165;
	add.rn.f32 	%f182, %f54, %f166;
	add.rn.f32 	%f183, %f55, %f167;
	add.rn.f32 	%f184, %f56, %f168;
	add.rn.f32 	%f185, %f57, %f169;
	add.rn.f32 	%f186, %f58, %f170;
	add.rn.f32 	%f187, %f59, %f171;
	add.rn.f32 	%f188, %f60, %f172;
	add.rn.f32 	%f189, %f61, %f173;
	add.rn.f32 	%f190, %f62, %f174;
	add.rn.f32 	%f191, %f63, %f175;
	add.rn.f32 	%f192, %f64, %f176;
	add.rn.f32 	%f193, %f33, %f177;
	add.rn.f32 	%f194, %f34, %f178;
	add.rn.f32 	%f195, %f35, %f179;
	add.rn.f32 	%f196, %f36, %f180;
	add.rn.f32 	%f197, %f37, %f181;
	add.rn.f32 	%f198, %f38, %f182;
	add.rn.f32 	%f199, %f39, %f183;
	add.rn.f32 	%f200, %f40, %f184;
	add.rn.f32 	%f201, %f41, %f185;
	add.rn.f32 	%f202, %f42, %f186;
	add.rn.f32 	%f203, %f43, %f187;
	add.rn.f32 	%f204, %f44, %f188;
	add.rn.f32 	%f205, %f45, %f189;
	add.rn.f32 	%f206, %f46, %f190;
	add.rn.f32 	%f207, %f47, %f191;
	add.rn.f32 	%f208, %f48, %f192;
	add.rn.f32 	%f209, %f17, %f193;
	add.rn.f32 	%f210, %f18, %f194;
	add.rn.f32 	%f211, %f19, %f195;
	add.rn.f32 	%f212, %f20, %f196;
	add.rn.f32 	%f213, %f21, %f197;
	add.rn.f32 	%f214, %f22, %f198;
	add.rn.f32 	%f215, %f23, %f199;
	add.rn.f32 	%f216, %f24, %f200;
	add.rn.f32 	%f217, %f25, %f201;
	add.rn.f32 	%f218, %f26, %f202;
	add.rn.f32 	%f219, %f27, %f203;
	add.rn.f32 	%f220, %f28, %f204;
	add.rn.f32 	%f221, %f29, %f205;
	add.rn.f32 	%f222, %f30, %f206;
	add.rn.f32 	%f223, %f31, %f207;
	add.rn.f32 	%f224, %f32, %f208;
	add.rn.f32 	%f225, %f1, %f209;
	add.rn.f32 	%f226, %f2, %f210;
	add.rn.f32 	%f227, %f3, %f211;
	add.rn.f32 	%f228, %f4, %f212;
	add.rn.f32 	%f229, %f5, %f213;
	add.rn.f32 	%f230, %f6, %f214;
	add.rn.f32 	%f231, %f7, %f215;
	add.rn.f32 	%f232, %f8, %f216;
	add.rn.f32 	%f233, %f9, %f217;
	add.rn.f32 	%f234, %f10, %f218;
	add.rn.f32 	%f235, %f11, %f219;
	add.rn.f32 	%f236, %f12, %f220;
	add.rn.f32 	%f237, %f13, %f221;
	add.rn.f32 	%f238, %f14, %f222;
	add.rn.f32 	%f239, %f15, %f223;
	add.rn.f32 	%f240, %f16, %f224;
	mul.rn.f32 	%f241, %f225, %f225;
	mul.rn.f32 	%f242, %f226, %f226;
	mul.rn.f32 	%f243, %f227, %f227;
	mul.rn.f32 	%f244, %f228, %f228;
	mul.rn.f32 	%f245, %f229, %f229;
	mul.rn.f32 	%f246, %f230, %f230;
	mul.rn.f32 	%f247, %f231, %f231;
	mul.rn.f32 	%f248, %f232, %f232;
	mul.rn.f32 	%f249, %f233, %f233;
	mul.rn.f32 	%f250, %f234, %f234;
	mul.rn.f32 	%f251, %f235, %f235;
	mul.rn.f32 	%f252, %f236, %f236;
	mul.rn.f32 	%f253, %f237, %f237;
	mul.rn.f32 	%f254, %f238, %f238;
	mul.rn.f32 	%f255, %f239, %f239;
	mul.rn.f32 	%f256, %f240, %f240;
	add.rn.f32 	%f257, %f241, %f242;
	add.rn.f32 	%f258, %f257, %f243;
	add.rn.f32 	%f259, %f258, %f244;
	add.rn.f32 	%f260, %f259, %f245;
	add.rn.f32 	%f261, %f260, %f246;
	add.rn.f32 	%f262, %f261, %f247;
	add.rn.f32 	%f263, %f262, %f248;
	add.rn.f32 	%f264, %f263, %f249;
	add.rn.f32 	%f265, %f264, %f250;
	add.rn.f32 	%f266, %f265, %f251;
	add.rn.f32 	%f267, %f266, %f252;
	add.rn.f32 	%f268, %f267, %f253;
	add.rn.f32 	%f269, %f268, %f254;
	add.rn.f32 	%f270, %f269, %f255;
	add.rn.f32 	%f271, %f270, %f256;
	mov.b32 	%r255, %f271;
	shfl.sync.bfly.b32	%r256, %r255, 16, 31, -1;
	mov.b32 	%f272, %r256;
	add.rn.f32 	%f273, %f271, %f272;
	mov.b32 	%r257, %f273;
	shfl.sync.bfly.b32	%r258, %r257, 8, 31, -1;
	mov.b32 	%f274, %r258;
	add.rn.f32 	%f275, %f273, %f274;
	mov.b32 	%r259, %f275;
	shfl.sync.bfly.b32	%r260, %r259, 4, 31, -1;
	mov.b32 	%f276, %r260;
	add.rn.f32 	%f277, %f275, %f276;
	mov.b32 	%r261, %f277;
	shfl.sync.bfly.b32	%r262, %r261, 2, 31, -1;
	mov.b32 	%f278, %r262;
	add.rn.f32 	%f279, %f277, %f278;
	mov.b32 	%r263, %f279;
	shfl.sync.bfly.b32	%r264, %r263, 1, 31, -1;
	mov.b32 	%f280, %r264;
	add.rn.f32 	%f281, %f279, %f280;
	setp.eq.s32 	%p1, %r250, 0;
	shr.u32 	%r265, %r249, 3;
	and.b32  	%r266, %r265, 4;
	cvt.u64.u32 	%rd47, %r266;
	mov.u64 	%rd48, global_smem;
	add.s64 	%rd49, %rd48, %rd47;
	mov.b32 	%r195, %f281;
	cvt.u32.u64 	%r194, %rd49;
	// begin inline asm
	@%p1 st.shared.b32 [ %r194 + 0 ], %r195;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r249, 2;
	shl.b32 	%r267, %r249, 2;
	cvt.u64.u32 	%rd50, %r267;
	add.s64 	%rd51, %rd48, %rd50;
	cvt.u32.u64 	%r197, %rd51;
	// begin inline asm
	@%p2 ld.shared.b32 %r196, [ %r197 + 0 ];
	// end inline asm
	mov.b32 	%f282, %r196;
	shfl.sync.bfly.b32	%r268, %r196, 1, 31, -1;
	mov.b32 	%f283, %r268;
	add.rn.f32 	%f284, %f282, %f283;
	setp.eq.s32 	%p3, %r249, 0;
	mov.b32 	%r199, %f284;
	// begin inline asm
	@%p3 st.shared.b32 [ %r197 + 0 ], %r199;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f285, [global_smem];
	mul.rn.f32 	%f286, %f285, 0f3A800000;
	// begin inline asm
	mov.u32 %r200, 0x0;
	ld.global.b32 { %r200 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	%f287, %r200;
	add.rn.f32 	%f288, %f286, %f287;
	rsqrt.approx.f32 	%f289, %f288;
	mul.rn.f32 	%f290, %f225, %f289;
	mul.rn.f32 	%f291, %f226, %f289;
	mul.rn.f32 	%f292, %f227, %f289;
	mul.rn.f32 	%f293, %f228, %f289;
	mul.rn.f32 	%f294, %f229, %f289;
	mul.rn.f32 	%f295, %f230, %f289;
	mul.rn.f32 	%f296, %f231, %f289;
	mul.rn.f32 	%f297, %f232, %f289;
	mul.rn.f32 	%f298, %f233, %f289;
	mul.rn.f32 	%f299, %f234, %f289;
	mul.rn.f32 	%f300, %f235, %f289;
	mul.rn.f32 	%f301, %f236, %f289;
	mul.rn.f32 	%f302, %f237, %f289;
	mul.rn.f32 	%f303, %f238, %f289;
	mul.rn.f32 	%f304, %f239, %f289;
	mul.rn.f32 	%f305, %f240, %f289;
	add.s64 	%rd18, %rd34, %rd39;
	add.s64 	%rd19, %rd18, 1024;
	// begin inline asm
	mov.u32 %r201, 0x0;
	mov.u32 %r202, 0x0;
	mov.u32 %r203, 0x0;
	mov.u32 %r204, 0x0;
	ld.global.v4.b32 { %r201, %r202, %r203, %r204 }, [ %rd18 + 0 ];
	// end inline asm
	mov.b32 	{%rs129, %rs130}, %r201;
	mov.b32 	{%rs131, %rs132}, %r202;
	mov.b32 	{%rs133, %rs134}, %r203;
	mov.b32 	{%rs135, %rs136}, %r204;
	// begin inline asm
	mov.u32 %r205, 0x0;
	mov.u32 %r206, 0x0;
	mov.u32 %r207, 0x0;
	mov.u32 %r208, 0x0;
	ld.global.v4.b32 { %r205, %r206, %r207, %r208 }, [ %rd19 + 0 ];
	// end inline asm
	mov.b32 	{%rs137, %rs138}, %r205;
	mov.b32 	{%rs139, %rs140}, %r206;
	mov.b32 	{%rs141, %rs142}, %r207;
	mov.b32 	{%rs143, %rs144}, %r208;
	// begin inline asm
	cvt.f32.bf16 %r209, %rs129;
	// end inline asm
	mov.b32 	%f306, %r209;
	// begin inline asm
	cvt.f32.bf16 %r210, %rs130;
	// end inline asm
	mov.b32 	%f307, %r210;
	// begin inline asm
	cvt.f32.bf16 %r211, %rs131;
	// end inline asm
	mov.b32 	%f308, %r211;
	// begin inline asm
	cvt.f32.bf16 %r212, %rs132;
	// end inline asm
	mov.b32 	%f309, %r212;
	// begin inline asm
	cvt.f32.bf16 %r213, %rs133;
	// end inline asm
	mov.b32 	%f310, %r213;
	// begin inline asm
	cvt.f32.bf16 %r214, %rs134;
	// end inline asm
	mov.b32 	%f311, %r214;
	// begin inline asm
	cvt.f32.bf16 %r215, %rs135;
	// end inline asm
	mov.b32 	%f312, %r215;
	// begin inline asm
	cvt.f32.bf16 %r216, %rs136;
	// end inline asm
	mov.b32 	%f313, %r216;
	// begin inline asm
	cvt.f32.bf16 %r217, %rs137;
	// end inline asm
	mov.b32 	%f314, %r217;
	// begin inline asm
	cvt.f32.bf16 %r218, %rs138;
	// end inline asm
	mov.b32 	%f315, %r218;
	// begin inline asm
	cvt.f32.bf16 %r219, %rs139;
	// end inline asm
	mov.b32 	%f316, %r219;
	// begin inline asm
	cvt.f32.bf16 %r220, %rs140;
	// end inline asm
	mov.b32 	%f317, %r220;
	// begin inline asm
	cvt.f32.bf16 %r221, %rs141;
	// end inline asm
	mov.b32 	%f318, %r221;
	// begin inline asm
	cvt.f32.bf16 %r222, %rs142;
	// end inline asm
	mov.b32 	%f319, %r222;
	// begin inline asm
	cvt.f32.bf16 %r223, %rs143;
	// end inline asm
	mov.b32 	%f320, %r223;
	// begin inline asm
	cvt.f32.bf16 %r224, %rs144;
	// end inline asm
	mov.b32 	%f321, %r224;
	mul.rn.f32 	%f322, %f290, %f306;
	mul.rn.f32 	%f323, %f291, %f307;
	mul.rn.f32 	%f324, %f292, %f308;
	mul.rn.f32 	%f325, %f293, %f309;
	mul.rn.f32 	%f326, %f294, %f310;
	mul.rn.f32 	%f327, %f295, %f311;
	mul.rn.f32 	%f328, %f296, %f312;
	mul.rn.f32 	%f329, %f297, %f313;
	mul.rn.f32 	%f330, %f298, %f314;
	mul.rn.f32 	%f331, %f299, %f315;
	mul.rn.f32 	%f332, %f300, %f316;
	mul.rn.f32 	%f333, %f301, %f317;
	mul.rn.f32 	%f334, %f302, %f318;
	mul.rn.f32 	%f335, %f303, %f319;
	mul.rn.f32 	%f336, %f304, %f320;
	mul.rn.f32 	%f337, %f305, %f321;
	mov.b32 	%r225, %f322;
	// begin inline asm
	cvt.rn.bf16.f32 %rs145, %r225;
	// end inline asm
	mov.b32 	%r226, %f323;
	// begin inline asm
	cvt.rn.bf16.f32 %rs146, %r226;
	// end inline asm
	mov.b32 	%r227, %f324;
	// begin inline asm
	cvt.rn.bf16.f32 %rs147, %r227;
	// end inline asm
	mov.b32 	%r228, %f325;
	// begin inline asm
	cvt.rn.bf16.f32 %rs148, %r228;
	// end inline asm
	mov.b32 	%r229, %f326;
	// begin inline asm
	cvt.rn.bf16.f32 %rs149, %r229;
	// end inline asm
	mov.b32 	%r230, %f327;
	// begin inline asm
	cvt.rn.bf16.f32 %rs150, %r230;
	// end inline asm
	mov.b32 	%r231, %f328;
	// begin inline asm
	cvt.rn.bf16.f32 %rs151, %r231;
	// end inline asm
	mov.b32 	%r232, %f329;
	// begin inline asm
	cvt.rn.bf16.f32 %rs152, %r232;
	// end inline asm
	mov.b32 	%r233, %f330;
	// begin inline asm
	cvt.rn.bf16.f32 %rs153, %r233;
	// end inline asm
	mov.b32 	%r234, %f331;
	// begin inline asm
	cvt.rn.bf16.f32 %rs154, %r234;
	// end inline asm
	mov.b32 	%r235, %f332;
	// begin inline asm
	cvt.rn.bf16.f32 %rs155, %r235;
	// end inline asm
	mov.b32 	%r236, %f333;
	// begin inline asm
	cvt.rn.bf16.f32 %rs156, %r236;
	// end inline asm
	mov.b32 	%r237, %f334;
	// begin inline asm
	cvt.rn.bf16.f32 %rs157, %r237;
	// end inline asm
	mov.b32 	%r238, %f335;
	// begin inline asm
	cvt.rn.bf16.f32 %rs158, %r238;
	// end inline asm
	mov.b32 	%r239, %f336;
	// begin inline asm
	cvt.rn.bf16.f32 %rs159, %r239;
	// end inline asm
	mov.b32 	%r240, %f337;
	// begin inline asm
	cvt.rn.bf16.f32 %rs160, %r240;
	// end inline asm
	add.s64 	%rd52, %rd24, %rd42;
	add.s64 	%rd20, %rd52, %rd39;
	add.s64 	%rd21, %rd20, 1024;
	mov.b32 	%r241, {%rs145, %rs146};
	mov.b32 	%r242, {%rs147, %rs148};
	mov.b32 	%r243, {%rs149, %rs150};
	mov.b32 	%r244, {%rs151, %rs152};
	// begin inline asm
	st.global.v4.b32 [ %rd20 + 0 ], { %r241, %r242, %r243, %r244 };
	// end inline asm
	mov.b32 	%r245, {%rs153, %rs154};
	mov.b32 	%r246, {%rs155, %rs156};
	mov.b32 	%r247, {%rs157, %rs158};
	mov.b32 	%r248, {%rs159, %rs160};
	// begin inline asm
	st.global.v4.b32 [ %rd21 + 0 ], { %r245, %r246, %r247, %r248 };
	// end inline asm
	ret;

}
	// .globl	loop_add_fusion
.visible .entry loop_add_fusion(
	.param .u64 .ptr .align 128 loop_add_fusion_param_0,
	.param .u64 .ptr .align 128 loop_add_fusion_param_1,
	.param .u64 .ptr .align 128 loop_add_fusion_param_2,
	.param .u64 .ptr .align 128 loop_add_fusion_param_3,
	.param .u64 .ptr .align 128 loop_add_fusion_param_4,
	.param .u64 .ptr .align 128 loop_add_fusion_param_5,
	.param .u64 .ptr .align 128 loop_add_fusion_param_6
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<9>;
	.reg .f32 	%f<20>;
	.reg .b64 	%rd<28>;

	ld.param.u64 	%rd1, [loop_add_fusion_param_0];
	ld.param.u64 	%rd2, [loop_add_fusion_param_6];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_add_fusion_param_1];
	ld.param.u64 	%rd5, [loop_add_fusion_param_5];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [loop_add_fusion_param_2];
	ld.param.u64 	%rd8, [loop_add_fusion_param_4];
	cvta.to.global.u64 	%rd9, %rd8;
	ld.param.u64 	%rd10, [loop_add_fusion_param_3];
	cvta.to.global.u64 	%rd11, %rd10;
	cvta.to.global.u64 	%rd12, %rd7;
	cvta.to.global.u64 	%rd13, %rd4;
	cvta.to.global.u64 	%rd14, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	shl.b32 	%r4, %r2, 7;
	and.b32  	%r5, %r4, 896;
	or.b32  	%r6, %r5, %r1;
	or.b32  	%r7, %r4, %r1;
	mul.wide.u32 	%rd15, %r7, 2;
	add.s64 	%rd16, %rd11, %rd15;
	ld.global.nc.u16 	%rs1, [%rd16];
	add.s64 	%rd17, %rd9, %rd15;
	ld.global.nc.u16 	%rs2, [%rd17];
	mul.lo.s32 	%r8, %r3, 7168;
	cvt.u64.u32 	%rd18, %r6;
	cvt.u64.u32 	%rd19, %r8;
	add.s64 	%rd20, %rd19, %rd18;
	shl.b64 	%rd21, %rd20, 1;
	add.s64 	%rd22, %rd14, %rd21;
	ld.global.nc.u16 	%rs3, [%rd22+12288];
	cvt.f32.bf16 	%f1, %rs3;
	cvt.f32.bf16 	%f2, %rs1;
	cvt.f32.bf16 	%f3, %rs2;
	add.rn.f32 	%f4, %f2, %f1;
	add.s64 	%rd23, %rd6, %rd15;
	ld.global.nc.u16 	%rs4, [%rd23];
	ld.global.nc.u16 	%rs5, [%rd22+10240];
	cvt.f32.bf16 	%f5, %rs5;
	add.rn.f32 	%f6, %f4, %f3;
	cvt.f32.bf16 	%f7, %rs4;
	add.rn.f32 	%f8, %f6, %f5;
	add.s64 	%rd24, %rd12, %rd15;
	ld.global.nc.u16 	%rs6, [%rd24];
	ld.global.nc.u16 	%rs7, [%rd22+8192];
	cvt.f32.bf16 	%f9, %rs7;
	add.rn.f32 	%f10, %f8, %f7;
	cvt.f32.bf16 	%f11, %rs6;
	add.rn.f32 	%f12, %f10, %f9;
	add.s64 	%rd25, %rd13, %rd15;
	ld.global.nc.u16 	%rs8, [%rd25];
	ld.global.nc.u16 	%rs9, [%rd22+6144];
	cvt.f32.bf16 	%f13, %rs9;
	add.rn.f32 	%f14, %f12, %f11;
	cvt.f32.bf16 	%f15, %rs8;
	add.rn.f32 	%f16, %f14, %f13;
	ld.global.nc.u16 	%rs10, [%rd22+4096];
	cvt.f32.bf16 	%f17, %rs10;
	add.rn.f32 	%f18, %f16, %f15;
	add.rn.f32 	%f19, %f18, %f17;
	mul.wide.u32 	%rd26, %r7, 4;
	add.s64 	%rd27, %rd3, %rd26;
	st.global.f32 	[%rd27], %f19;
	ret;

}
	// .globl	fusion_102
.visible .entry fusion_102(
	.param .u64 .ptr .align 128 fusion_102_param_0,
	.param .u64 .ptr .align 16 fusion_102_param_1,
	.param .u64 .ptr .align 16 fusion_102_param_2,
	.param .u64 .ptr .align 128 fusion_102_param_3
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<93>;
	.reg .f32 	%f<114>;
	.reg .b64 	%rd<29>;

	ld.param.u64 	%rd10, [fusion_102_param_0];
	ld.param.u64 	%rd11, [fusion_102_param_3];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_102_param_1];
	ld.param.u64 	%rd14, [fusion_102_param_2];
	cvta.to.global.u64 	%rd15, %rd14;
	cvta.to.global.u64 	%rd5, %rd13;
	cvta.to.global.u64 	%rd16, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd17, %r1, 1024;
	shl.b64 	%rd18, %rd17, 2;
	add.s64 	%rd19, %rd16, %rd18;
	mov.u32 	%r73, %tid.x;
	and.b32  	%r74, %r73, 31;
	shl.b32 	%r75, %r73, 3;
	and.b32  	%r76, %r75, 248;
	setp.lt.u32 	%p4, %r73, 32;
	selp.b32 	%r77, 0, 256, %p4;
	or.b32  	%r78, %r76, %r77;
	mul.wide.u32 	%rd20, %r78, 4;
	add.s64 	%rd1, %rd19, %rd20;
	add.s64 	%rd2, %rd1, 16;
	add.s64 	%rd3, %rd1, 2048;
	add.s64 	%rd4, %rd1, 2064;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	%f1, %r2;
	mov.b32 	%f2, %r3;
	mov.b32 	%f3, %r4;
	mov.b32 	%f4, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f5, %r6;
	mov.b32 	%f6, %r7;
	mov.b32 	%f7, %r8;
	mov.b32 	%f8, %r9;
	// begin inline asm
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	mov.u32 %r12, 0x0;
	mov.u32 %r13, 0x0;
	ld.global.v4.b32 { %r10, %r11, %r12, %r13 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	%f9, %r10;
	mov.b32 	%f10, %r11;
	mov.b32 	%f11, %r12;
	mov.b32 	%f12, %r13;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	ld.global.v4.b32 { %r14, %r15, %r16, %r17 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	%f13, %r14;
	mov.b32 	%f14, %r15;
	mov.b32 	%f15, %r16;
	mov.b32 	%f16, %r17;
	mul.rn.f32 	%f17, %f1, %f1;
	mul.rn.f32 	%f18, %f2, %f2;
	mul.rn.f32 	%f19, %f3, %f3;
	mul.rn.f32 	%f20, %f4, %f4;
	mul.rn.f32 	%f21, %f5, %f5;
	mul.rn.f32 	%f22, %f6, %f6;
	mul.rn.f32 	%f23, %f7, %f7;
	mul.rn.f32 	%f24, %f8, %f8;
	mul.rn.f32 	%f25, %f9, %f9;
	mul.rn.f32 	%f26, %f10, %f10;
	mul.rn.f32 	%f27, %f11, %f11;
	mul.rn.f32 	%f28, %f12, %f12;
	mul.rn.f32 	%f29, %f13, %f13;
	mul.rn.f32 	%f30, %f14, %f14;
	mul.rn.f32 	%f31, %f15, %f15;
	mul.rn.f32 	%f32, %f16, %f16;
	add.rn.f32 	%f33, %f17, %f18;
	add.rn.f32 	%f34, %f19, %f33;
	add.rn.f32 	%f35, %f20, %f34;
	add.rn.f32 	%f36, %f21, %f35;
	add.rn.f32 	%f37, %f22, %f36;
	add.rn.f32 	%f38, %f23, %f37;
	add.rn.f32 	%f39, %f24, %f38;
	add.rn.f32 	%f40, %f25, %f39;
	add.rn.f32 	%f41, %f26, %f40;
	add.rn.f32 	%f42, %f27, %f41;
	add.rn.f32 	%f43, %f28, %f42;
	add.rn.f32 	%f44, %f29, %f43;
	add.rn.f32 	%f45, %f30, %f44;
	add.rn.f32 	%f46, %f31, %f45;
	add.rn.f32 	%f47, %f32, %f46;
	mov.b32 	%r79, %f47;
	shfl.sync.bfly.b32	%r80, %r79, 16, 31, -1;
	mov.b32 	%f48, %r80;
	add.rn.f32 	%f49, %f47, %f48;
	mov.b32 	%r81, %f49;
	shfl.sync.bfly.b32	%r82, %r81, 8, 31, -1;
	mov.b32 	%f50, %r82;
	add.rn.f32 	%f51, %f49, %f50;
	mov.b32 	%r83, %f51;
	shfl.sync.bfly.b32	%r84, %r83, 4, 31, -1;
	mov.b32 	%f52, %r84;
	add.rn.f32 	%f53, %f51, %f52;
	mov.b32 	%r85, %f53;
	shfl.sync.bfly.b32	%r86, %r85, 2, 31, -1;
	mov.b32 	%f54, %r86;
	add.rn.f32 	%f55, %f53, %f54;
	mov.b32 	%r87, %f55;
	shfl.sync.bfly.b32	%r88, %r87, 1, 31, -1;
	mov.b32 	%f56, %r88;
	add.rn.f32 	%f57, %f55, %f56;
	setp.eq.s32 	%p1, %r74, 0;
	shr.u32 	%r89, %r73, 3;
	and.b32  	%r90, %r89, 4;
	cvt.u64.u32 	%rd21, %r90;
	mov.u64 	%rd22, global_smem;
	add.s64 	%rd23, %rd22, %rd21;
	mov.b32 	%r19, %f57;
	cvt.u32.u64 	%r18, %rd23;
	// begin inline asm
	@%p1 st.shared.b32 [ %r18 + 0 ], %r19;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r73, 2;
	shl.b32 	%r91, %r73, 2;
	cvt.u64.u32 	%rd24, %r91;
	add.s64 	%rd25, %rd22, %rd24;
	cvt.u32.u64 	%r21, %rd25;
	// begin inline asm
	@%p2 ld.shared.b32 %r20, [ %r21 + 0 ];
	// end inline asm
	mov.b32 	%f58, %r20;
	shfl.sync.bfly.b32	%r92, %r20, 1, 31, -1;
	mov.b32 	%f59, %r92;
	add.rn.f32 	%f60, %f58, %f59;
	setp.eq.s32 	%p3, %r73, 0;
	mov.b32 	%r23, %f60;
	// begin inline asm
	@%p3 st.shared.b32 [ %r21 + 0 ], %r23;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f61, [global_smem];
	mul.rn.f32 	%f62, %f61, 0f3A800000;
	// begin inline asm
	mov.u32 %r24, 0x0;
	ld.global.b32 { %r24 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f63, %r24;
	add.rn.f32 	%f64, %f62, %f63;
	rsqrt.approx.f32 	%f65, %f64;
	mul.rn.f32 	%f66, %f65, %f1;
	mul.rn.f32 	%f67, %f65, %f2;
	mul.rn.f32 	%f68, %f65, %f3;
	mul.rn.f32 	%f69, %f65, %f4;
	mul.rn.f32 	%f70, %f65, %f5;
	mul.rn.f32 	%f71, %f65, %f6;
	mul.rn.f32 	%f72, %f65, %f7;
	mul.rn.f32 	%f73, %f65, %f8;
	mul.rn.f32 	%f74, %f65, %f9;
	mul.rn.f32 	%f75, %f65, %f10;
	mul.rn.f32 	%f76, %f65, %f11;
	mul.rn.f32 	%f77, %f65, %f12;
	mul.rn.f32 	%f78, %f65, %f13;
	mul.rn.f32 	%f79, %f65, %f14;
	mul.rn.f32 	%f80, %f65, %f15;
	mul.rn.f32 	%f81, %f65, %f16;
	mul.wide.u32 	%rd26, %r78, 2;
	add.s64 	%rd6, %rd15, %rd26;
	add.s64 	%rd7, %rd6, 1024;
	// begin inline asm
	mov.u32 %r25, 0x0;
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	ld.global.v4.b32 { %r25, %r26, %r27, %r28 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r25;
	mov.b32 	{%rs3, %rs4}, %r26;
	mov.b32 	{%rs5, %rs6}, %r27;
	mov.b32 	{%rs7, %rs8}, %r28;
	// begin inline asm
	mov.u32 %r29, 0x0;
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	ld.global.v4.b32 { %r29, %r30, %r31, %r32 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r29;
	mov.b32 	{%rs11, %rs12}, %r30;
	mov.b32 	{%rs13, %rs14}, %r31;
	mov.b32 	{%rs15, %rs16}, %r32;
	// begin inline asm
	cvt.f32.bf16 %r33, %rs1;
	// end inline asm
	mov.b32 	%f82, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs2;
	// end inline asm
	mov.b32 	%f83, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs3;
	// end inline asm
	mov.b32 	%f84, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs4;
	// end inline asm
	mov.b32 	%f85, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs5;
	// end inline asm
	mov.b32 	%f86, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs6;
	// end inline asm
	mov.b32 	%f87, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs7;
	// end inline asm
	mov.b32 	%f88, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs8;
	// end inline asm
	mov.b32 	%f89, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs9;
	// end inline asm
	mov.b32 	%f90, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs10;
	// end inline asm
	mov.b32 	%f91, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs11;
	// end inline asm
	mov.b32 	%f92, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs12;
	// end inline asm
	mov.b32 	%f93, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs13;
	// end inline asm
	mov.b32 	%f94, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs14;
	// end inline asm
	mov.b32 	%f95, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs15;
	// end inline asm
	mov.b32 	%f96, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs16;
	// end inline asm
	mov.b32 	%f97, %r48;
	mul.rn.f32 	%f98, %f66, %f82;
	mul.rn.f32 	%f99, %f67, %f83;
	mul.rn.f32 	%f100, %f68, %f84;
	mul.rn.f32 	%f101, %f69, %f85;
	mul.rn.f32 	%f102, %f70, %f86;
	mul.rn.f32 	%f103, %f71, %f87;
	mul.rn.f32 	%f104, %f72, %f88;
	mul.rn.f32 	%f105, %f73, %f89;
	mul.rn.f32 	%f106, %f74, %f90;
	mul.rn.f32 	%f107, %f75, %f91;
	mul.rn.f32 	%f108, %f76, %f92;
	mul.rn.f32 	%f109, %f77, %f93;
	mul.rn.f32 	%f110, %f78, %f94;
	mul.rn.f32 	%f111, %f79, %f95;
	mul.rn.f32 	%f112, %f80, %f96;
	mul.rn.f32 	%f113, %f81, %f97;
	mov.b32 	%r49, %f98;
	// begin inline asm
	cvt.rn.bf16.f32 %rs17, %r49;
	// end inline asm
	mov.b32 	%r50, %f99;
	// begin inline asm
	cvt.rn.bf16.f32 %rs18, %r50;
	// end inline asm
	mov.b32 	%r51, %f100;
	// begin inline asm
	cvt.rn.bf16.f32 %rs19, %r51;
	// end inline asm
	mov.b32 	%r52, %f101;
	// begin inline asm
	cvt.rn.bf16.f32 %rs20, %r52;
	// end inline asm
	mov.b32 	%r53, %f102;
	// begin inline asm
	cvt.rn.bf16.f32 %rs21, %r53;
	// end inline asm
	mov.b32 	%r54, %f103;
	// begin inline asm
	cvt.rn.bf16.f32 %rs22, %r54;
	// end inline asm
	mov.b32 	%r55, %f104;
	// begin inline asm
	cvt.rn.bf16.f32 %rs23, %r55;
	// end inline asm
	mov.b32 	%r56, %f105;
	// begin inline asm
	cvt.rn.bf16.f32 %rs24, %r56;
	// end inline asm
	mov.b32 	%r57, %f106;
	// begin inline asm
	cvt.rn.bf16.f32 %rs25, %r57;
	// end inline asm
	mov.b32 	%r58, %f107;
	// begin inline asm
	cvt.rn.bf16.f32 %rs26, %r58;
	// end inline asm
	mov.b32 	%r59, %f108;
	// begin inline asm
	cvt.rn.bf16.f32 %rs27, %r59;
	// end inline asm
	mov.b32 	%r60, %f109;
	// begin inline asm
	cvt.rn.bf16.f32 %rs28, %r60;
	// end inline asm
	mov.b32 	%r61, %f110;
	// begin inline asm
	cvt.rn.bf16.f32 %rs29, %r61;
	// end inline asm
	mov.b32 	%r62, %f111;
	// begin inline asm
	cvt.rn.bf16.f32 %rs30, %r62;
	// end inline asm
	mov.b32 	%r63, %f112;
	// begin inline asm
	cvt.rn.bf16.f32 %rs31, %r63;
	// end inline asm
	mov.b32 	%r64, %f113;
	// begin inline asm
	cvt.rn.bf16.f32 %rs32, %r64;
	// end inline asm
	shl.b64 	%rd27, %rd17, 1;
	add.s64 	%rd28, %rd12, %rd27;
	add.s64 	%rd8, %rd28, %rd26;
	add.s64 	%rd9, %rd8, 1024;
	mov.b32 	%r65, {%rs17, %rs18};
	mov.b32 	%r66, {%rs19, %rs20};
	mov.b32 	%r67, {%rs21, %rs22};
	mov.b32 	%r68, {%rs23, %rs24};
	// begin inline asm
	st.global.v4.b32 [ %rd8 + 0 ], { %r65, %r66, %r67, %r68 };
	// end inline asm
	mov.b32 	%r69, {%rs25, %rs26};
	mov.b32 	%r70, {%rs27, %rs28};
	mov.b32 	%r71, {%rs29, %rs30};
	mov.b32 	%r72, {%rs31, %rs32};
	// begin inline asm
	st.global.v4.b32 [ %rd9 + 0 ], { %r69, %r70, %r71, %r72 };
	// end inline asm
	ret;

}
	// .globl	fusion_100
.visible .entry fusion_100(
	.param .u64 .ptr .align 16 fusion_100_param_0,
	.param .u64 .ptr .align 128 fusion_100_param_1,
	.param .u64 .ptr .align 128 fusion_100_param_2,
	.param .u64 .ptr .align 128 fusion_100_param_3,
	.param .u64 .ptr .align 16 fusion_100_param_4,
	.param .u64 .ptr .align 128 fusion_100_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<141>;
	.reg .f32 	%f<178>;
	.reg .b64 	%rd<41>;

	ld.param.u64 	%rd14, [fusion_100_param_0];
	ld.param.u64 	%rd15, [fusion_100_param_5];
	cvta.to.global.u64 	%rd16, %rd15;
	ld.param.u64 	%rd17, [fusion_100_param_1];
	ld.param.u64 	%rd18, [fusion_100_param_4];
	cvta.to.global.u64 	%rd19, %rd18;
	ld.param.u64 	%rd20, [fusion_100_param_2];
	ld.param.u64 	%rd21, [fusion_100_param_3];
	cvta.to.global.u64 	%rd22, %rd21;
	cvta.to.global.u64 	%rd23, %rd20;
	cvta.to.global.u64 	%rd24, %rd17;
	cvta.to.global.u64 	%rd9, %rd14;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd25, %r1, 14336;
	add.s64 	%rd26, %rd22, %rd25;
	mov.u32 	%r121, %tid.x;
	and.b32  	%r122, %r121, 31;
	shl.b32 	%r123, %r121, 3;
	and.b32  	%r124, %r123, 248;
	setp.lt.u32 	%p4, %r121, 32;
	selp.b32 	%r125, 0, 256, %p4;
	or.b32  	%r126, %r124, %r125;
	mul.wide.u32 	%rd27, %r126, 2;
	add.s64 	%rd28, %rd26, %rd27;
	add.s64 	%rd1, %rd28, 2048;
	add.s64 	%rd2, %rd28, 3072;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd29, %r1, 1024;
	shl.b64 	%rd30, %rd29, 1;
	add.s64 	%rd31, %rd23, %rd30;
	add.s64 	%rd3, %rd31, %rd27;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	shl.b64 	%rd32, %rd29, 2;
	add.s64 	%rd33, %rd24, %rd32;
	mul.wide.u32 	%rd34, %r126, 4;
	add.s64 	%rd5, %rd33, %rd34;
	add.s64 	%rd6, %rd5, 16;
	add.s64 	%rd7, %rd5, 2048;
	add.s64 	%rd8, %rd5, 2064;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r50;
	mov.b32 	%f34, %r51;
	mov.b32 	%f35, %r52;
	mov.b32 	%f36, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	%f37, %r54;
	mov.b32 	%f38, %r55;
	mov.b32 	%f39, %r56;
	mov.b32 	%f40, %r57;
	// begin inline asm
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	mov.u32 %r60, 0x0;
	mov.u32 %r61, 0x0;
	ld.global.v4.b32 { %r58, %r59, %r60, %r61 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f41, %r58;
	mov.b32 	%f42, %r59;
	mov.b32 	%f43, %r60;
	mov.b32 	%f44, %r61;
	// begin inline asm
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	mov.u32 %r65, 0x0;
	ld.global.v4.b32 { %r62, %r63, %r64, %r65 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	%f45, %r62;
	mov.b32 	%f46, %r63;
	mov.b32 	%f47, %r64;
	mov.b32 	%f48, %r65;
	add.rn.f32 	%f49, %f17, %f33;
	add.rn.f32 	%f50, %f18, %f34;
	add.rn.f32 	%f51, %f19, %f35;
	add.rn.f32 	%f52, %f20, %f36;
	add.rn.f32 	%f53, %f21, %f37;
	add.rn.f32 	%f54, %f22, %f38;
	add.rn.f32 	%f55, %f23, %f39;
	add.rn.f32 	%f56, %f24, %f40;
	add.rn.f32 	%f57, %f25, %f41;
	add.rn.f32 	%f58, %f26, %f42;
	add.rn.f32 	%f59, %f27, %f43;
	add.rn.f32 	%f60, %f28, %f44;
	add.rn.f32 	%f61, %f29, %f45;
	add.rn.f32 	%f62, %f30, %f46;
	add.rn.f32 	%f63, %f31, %f47;
	add.rn.f32 	%f64, %f32, %f48;
	add.rn.f32 	%f65, %f1, %f49;
	add.rn.f32 	%f66, %f2, %f50;
	add.rn.f32 	%f67, %f3, %f51;
	add.rn.f32 	%f68, %f4, %f52;
	add.rn.f32 	%f69, %f5, %f53;
	add.rn.f32 	%f70, %f6, %f54;
	add.rn.f32 	%f71, %f7, %f55;
	add.rn.f32 	%f72, %f8, %f56;
	add.rn.f32 	%f73, %f9, %f57;
	add.rn.f32 	%f74, %f10, %f58;
	add.rn.f32 	%f75, %f11, %f59;
	add.rn.f32 	%f76, %f12, %f60;
	add.rn.f32 	%f77, %f13, %f61;
	add.rn.f32 	%f78, %f14, %f62;
	add.rn.f32 	%f79, %f15, %f63;
	add.rn.f32 	%f80, %f16, %f64;
	mul.rn.f32 	%f81, %f65, %f65;
	mul.rn.f32 	%f82, %f66, %f66;
	mul.rn.f32 	%f83, %f67, %f67;
	mul.rn.f32 	%f84, %f68, %f68;
	mul.rn.f32 	%f85, %f69, %f69;
	mul.rn.f32 	%f86, %f70, %f70;
	mul.rn.f32 	%f87, %f71, %f71;
	mul.rn.f32 	%f88, %f72, %f72;
	mul.rn.f32 	%f89, %f73, %f73;
	mul.rn.f32 	%f90, %f74, %f74;
	mul.rn.f32 	%f91, %f75, %f75;
	mul.rn.f32 	%f92, %f76, %f76;
	mul.rn.f32 	%f93, %f77, %f77;
	mul.rn.f32 	%f94, %f78, %f78;
	mul.rn.f32 	%f95, %f79, %f79;
	mul.rn.f32 	%f96, %f80, %f80;
	add.rn.f32 	%f97, %f81, %f82;
	add.rn.f32 	%f98, %f83, %f97;
	add.rn.f32 	%f99, %f84, %f98;
	add.rn.f32 	%f100, %f85, %f99;
	add.rn.f32 	%f101, %f86, %f100;
	add.rn.f32 	%f102, %f87, %f101;
	add.rn.f32 	%f103, %f88, %f102;
	add.rn.f32 	%f104, %f89, %f103;
	add.rn.f32 	%f105, %f90, %f104;
	add.rn.f32 	%f106, %f91, %f105;
	add.rn.f32 	%f107, %f92, %f106;
	add.rn.f32 	%f108, %f93, %f107;
	add.rn.f32 	%f109, %f94, %f108;
	add.rn.f32 	%f110, %f95, %f109;
	add.rn.f32 	%f111, %f96, %f110;
	mov.b32 	%r127, %f111;
	shfl.sync.bfly.b32	%r128, %r127, 16, 31, -1;
	mov.b32 	%f112, %r128;
	add.rn.f32 	%f113, %f111, %f112;
	mov.b32 	%r129, %f113;
	shfl.sync.bfly.b32	%r130, %r129, 8, 31, -1;
	mov.b32 	%f114, %r130;
	add.rn.f32 	%f115, %f113, %f114;
	mov.b32 	%r131, %f115;
	shfl.sync.bfly.b32	%r132, %r131, 4, 31, -1;
	mov.b32 	%f116, %r132;
	add.rn.f32 	%f117, %f115, %f116;
	mov.b32 	%r133, %f117;
	shfl.sync.bfly.b32	%r134, %r133, 2, 31, -1;
	mov.b32 	%f118, %r134;
	add.rn.f32 	%f119, %f117, %f118;
	mov.b32 	%r135, %f119;
	shfl.sync.bfly.b32	%r136, %r135, 1, 31, -1;
	mov.b32 	%f120, %r136;
	add.rn.f32 	%f121, %f119, %f120;
	setp.eq.s32 	%p1, %r122, 0;
	shr.u32 	%r137, %r121, 3;
	and.b32  	%r138, %r137, 4;
	cvt.u64.u32 	%rd35, %r138;
	mov.u64 	%rd36, global_smem;
	add.s64 	%rd37, %rd36, %rd35;
	mov.b32 	%r67, %f121;
	cvt.u32.u64 	%r66, %rd37;
	// begin inline asm
	@%p1 st.shared.b32 [ %r66 + 0 ], %r67;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r121, 2;
	shl.b32 	%r139, %r121, 2;
	cvt.u64.u32 	%rd38, %r139;
	add.s64 	%rd39, %rd36, %rd38;
	cvt.u32.u64 	%r69, %rd39;
	// begin inline asm
	@%p2 ld.shared.b32 %r68, [ %r69 + 0 ];
	// end inline asm
	mov.b32 	%f122, %r68;
	shfl.sync.bfly.b32	%r140, %r68, 1, 31, -1;
	mov.b32 	%f123, %r140;
	add.rn.f32 	%f124, %f122, %f123;
	setp.eq.s32 	%p3, %r121, 0;
	mov.b32 	%r71, %f124;
	// begin inline asm
	@%p3 st.shared.b32 [ %r69 + 0 ], %r71;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f125, [global_smem];
	mul.rn.f32 	%f126, %f125, 0f3A800000;
	// begin inline asm
	mov.u32 %r72, 0x0;
	ld.global.b32 { %r72 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f127, %r72;
	add.rn.f32 	%f128, %f126, %f127;
	rsqrt.approx.f32 	%f129, %f128;
	mul.rn.f32 	%f130, %f65, %f129;
	mul.rn.f32 	%f131, %f66, %f129;
	mul.rn.f32 	%f132, %f67, %f129;
	mul.rn.f32 	%f133, %f68, %f129;
	mul.rn.f32 	%f134, %f69, %f129;
	mul.rn.f32 	%f135, %f70, %f129;
	mul.rn.f32 	%f136, %f71, %f129;
	mul.rn.f32 	%f137, %f72, %f129;
	mul.rn.f32 	%f138, %f73, %f129;
	mul.rn.f32 	%f139, %f74, %f129;
	mul.rn.f32 	%f140, %f75, %f129;
	mul.rn.f32 	%f141, %f76, %f129;
	mul.rn.f32 	%f142, %f77, %f129;
	mul.rn.f32 	%f143, %f78, %f129;
	mul.rn.f32 	%f144, %f79, %f129;
	mul.rn.f32 	%f145, %f80, %f129;
	add.s64 	%rd10, %rd19, %rd27;
	add.s64 	%rd11, %rd10, 1024;
	// begin inline asm
	mov.u32 %r73, 0x0;
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	ld.global.v4.b32 { %r73, %r74, %r75, %r76 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r73;
	mov.b32 	{%rs35, %rs36}, %r74;
	mov.b32 	{%rs37, %rs38}, %r75;
	mov.b32 	{%rs39, %rs40}, %r76;
	// begin inline asm
	mov.u32 %r77, 0x0;
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	ld.global.v4.b32 { %r77, %r78, %r79, %r80 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r77;
	mov.b32 	{%rs43, %rs44}, %r78;
	mov.b32 	{%rs45, %rs46}, %r79;
	mov.b32 	{%rs47, %rs48}, %r80;
	// begin inline asm
	cvt.f32.bf16 %r81, %rs33;
	// end inline asm
	mov.b32 	%f146, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs34;
	// end inline asm
	mov.b32 	%f147, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs35;
	// end inline asm
	mov.b32 	%f148, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs36;
	// end inline asm
	mov.b32 	%f149, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs37;
	// end inline asm
	mov.b32 	%f150, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs38;
	// end inline asm
	mov.b32 	%f151, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs39;
	// end inline asm
	mov.b32 	%f152, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs40;
	// end inline asm
	mov.b32 	%f153, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs41;
	// end inline asm
	mov.b32 	%f154, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs42;
	// end inline asm
	mov.b32 	%f155, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs43;
	// end inline asm
	mov.b32 	%f156, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs44;
	// end inline asm
	mov.b32 	%f157, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs45;
	// end inline asm
	mov.b32 	%f158, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs46;
	// end inline asm
	mov.b32 	%f159, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs47;
	// end inline asm
	mov.b32 	%f160, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs48;
	// end inline asm
	mov.b32 	%f161, %r96;
	mul.rn.f32 	%f162, %f130, %f146;
	mul.rn.f32 	%f163, %f131, %f147;
	mul.rn.f32 	%f164, %f132, %f148;
	mul.rn.f32 	%f165, %f133, %f149;
	mul.rn.f32 	%f166, %f134, %f150;
	mul.rn.f32 	%f167, %f135, %f151;
	mul.rn.f32 	%f168, %f136, %f152;
	mul.rn.f32 	%f169, %f137, %f153;
	mul.rn.f32 	%f170, %f138, %f154;
	mul.rn.f32 	%f171, %f139, %f155;
	mul.rn.f32 	%f172, %f140, %f156;
	mul.rn.f32 	%f173, %f141, %f157;
	mul.rn.f32 	%f174, %f142, %f158;
	mul.rn.f32 	%f175, %f143, %f159;
	mul.rn.f32 	%f176, %f144, %f160;
	mul.rn.f32 	%f177, %f145, %f161;
	mov.b32 	%r97, %f162;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r97;
	// end inline asm
	mov.b32 	%r98, %f163;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r98;
	// end inline asm
	mov.b32 	%r99, %f164;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r99;
	// end inline asm
	mov.b32 	%r100, %f165;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r100;
	// end inline asm
	mov.b32 	%r101, %f166;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r101;
	// end inline asm
	mov.b32 	%r102, %f167;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r102;
	// end inline asm
	mov.b32 	%r103, %f168;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r103;
	// end inline asm
	mov.b32 	%r104, %f169;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r104;
	// end inline asm
	mov.b32 	%r105, %f170;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r105;
	// end inline asm
	mov.b32 	%r106, %f171;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r106;
	// end inline asm
	mov.b32 	%r107, %f172;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r107;
	// end inline asm
	mov.b32 	%r108, %f173;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r108;
	// end inline asm
	mov.b32 	%r109, %f174;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r109;
	// end inline asm
	mov.b32 	%r110, %f175;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r110;
	// end inline asm
	mov.b32 	%r111, %f176;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r111;
	// end inline asm
	mov.b32 	%r112, %f177;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r112;
	// end inline asm
	add.s64 	%rd40, %rd16, %rd30;
	add.s64 	%rd12, %rd40, %rd27;
	add.s64 	%rd13, %rd12, 1024;
	mov.b32 	%r113, {%rs49, %rs50};
	mov.b32 	%r114, {%rs51, %rs52};
	mov.b32 	%r115, {%rs53, %rs54};
	mov.b32 	%r116, {%rs55, %rs56};
	// begin inline asm
	st.global.v4.b32 [ %rd12 + 0 ], { %r113, %r114, %r115, %r116 };
	// end inline asm
	mov.b32 	%r117, {%rs57, %rs58};
	mov.b32 	%r118, {%rs59, %rs60};
	mov.b32 	%r119, {%rs61, %rs62};
	mov.b32 	%r120, {%rs63, %rs64};
	// begin inline asm
	st.global.v4.b32 [ %rd13 + 0 ], { %r117, %r118, %r119, %r120 };
	// end inline asm
	ret;

}
	// .globl	fusion_98
.visible .entry fusion_98(
	.param .u64 .ptr .align 16 fusion_98_param_0,
	.param .u64 .ptr .align 16 fusion_98_param_1,
	.param .u64 .ptr .align 128 fusion_98_param_2,
	.param .u64 .ptr .align 128 fusion_98_param_3,
	.param .u64 .ptr .align 128 fusion_98_param_4,
	.param .u64 .ptr .align 128 fusion_98_param_5,
	.param .u64 .ptr .align 128 fusion_98_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<189>;
	.reg .f32 	%f<242>;
	.reg .b64 	%rd<47>;

	ld.param.u64 	%rd18, [fusion_98_param_0];
	ld.param.u64 	%rd19, [fusion_98_param_6];
	cvta.to.global.u64 	%rd20, %rd19;
	ld.param.u64 	%rd21, [fusion_98_param_1];
	ld.param.u64 	%rd22, [fusion_98_param_5];
	cvta.to.global.u64 	%rd23, %rd22;
	ld.param.u64 	%rd24, [fusion_98_param_2];
	ld.param.u64 	%rd25, [fusion_98_param_4];
	cvta.to.global.u64 	%rd26, %rd25;
	ld.param.u64 	%rd27, [fusion_98_param_3];
	cvta.to.global.u64 	%rd28, %rd27;
	cvta.to.global.u64 	%rd29, %rd24;
	cvta.to.global.u64 	%rd30, %rd21;
	cvta.to.global.u64 	%rd13, %rd18;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd31, %r1, 14336;
	add.s64 	%rd32, %rd26, %rd31;
	mov.u32 	%r169, %tid.x;
	and.b32  	%r170, %r169, 31;
	shl.b32 	%r171, %r169, 3;
	and.b32  	%r172, %r171, 248;
	setp.lt.u32 	%p4, %r169, 32;
	selp.b32 	%r173, 0, 256, %p4;
	or.b32  	%r174, %r172, %r173;
	mul.wide.u32 	%rd33, %r174, 2;
	add.s64 	%rd1, %rd32, %rd33;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd34, %r1, 1024;
	shl.b64 	%rd35, %rd34, 1;
	add.s64 	%rd36, %rd23, %rd35;
	add.s64 	%rd3, %rd36, %rd33;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd5, %rd1, 2048;
	add.s64 	%rd6, %rd1, 3072;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd37, %rd28, %rd35;
	add.s64 	%rd7, %rd37, %rd33;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	shl.b64 	%rd38, %rd34, 2;
	add.s64 	%rd39, %rd29, %rd38;
	mul.wide.u32 	%rd40, %r174, 4;
	add.s64 	%rd9, %rd39, %rd40;
	add.s64 	%rd10, %rd9, 16;
	add.s64 	%rd11, %rd9, 2048;
	add.s64 	%rd12, %rd9, 2064;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f65, %r98;
	mov.b32 	%f66, %r99;
	mov.b32 	%f67, %r100;
	mov.b32 	%f68, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	%f69, %r102;
	mov.b32 	%f70, %r103;
	mov.b32 	%f71, %r104;
	mov.b32 	%f72, %r105;
	// begin inline asm
	mov.u32 %r106, 0x0;
	mov.u32 %r107, 0x0;
	mov.u32 %r108, 0x0;
	mov.u32 %r109, 0x0;
	ld.global.v4.b32 { %r106, %r107, %r108, %r109 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	%f73, %r106;
	mov.b32 	%f74, %r107;
	mov.b32 	%f75, %r108;
	mov.b32 	%f76, %r109;
	// begin inline asm
	mov.u32 %r110, 0x0;
	mov.u32 %r111, 0x0;
	mov.u32 %r112, 0x0;
	mov.u32 %r113, 0x0;
	ld.global.v4.b32 { %r110, %r111, %r112, %r113 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	%f77, %r110;
	mov.b32 	%f78, %r111;
	mov.b32 	%f79, %r112;
	mov.b32 	%f80, %r113;
	add.rn.f32 	%f81, %f49, %f65;
	add.rn.f32 	%f82, %f50, %f66;
	add.rn.f32 	%f83, %f51, %f67;
	add.rn.f32 	%f84, %f52, %f68;
	add.rn.f32 	%f85, %f53, %f69;
	add.rn.f32 	%f86, %f54, %f70;
	add.rn.f32 	%f87, %f55, %f71;
	add.rn.f32 	%f88, %f56, %f72;
	add.rn.f32 	%f89, %f57, %f73;
	add.rn.f32 	%f90, %f58, %f74;
	add.rn.f32 	%f91, %f59, %f75;
	add.rn.f32 	%f92, %f60, %f76;
	add.rn.f32 	%f93, %f61, %f77;
	add.rn.f32 	%f94, %f62, %f78;
	add.rn.f32 	%f95, %f63, %f79;
	add.rn.f32 	%f96, %f64, %f80;
	add.rn.f32 	%f97, %f33, %f81;
	add.rn.f32 	%f98, %f34, %f82;
	add.rn.f32 	%f99, %f35, %f83;
	add.rn.f32 	%f100, %f36, %f84;
	add.rn.f32 	%f101, %f37, %f85;
	add.rn.f32 	%f102, %f38, %f86;
	add.rn.f32 	%f103, %f39, %f87;
	add.rn.f32 	%f104, %f40, %f88;
	add.rn.f32 	%f105, %f41, %f89;
	add.rn.f32 	%f106, %f42, %f90;
	add.rn.f32 	%f107, %f43, %f91;
	add.rn.f32 	%f108, %f44, %f92;
	add.rn.f32 	%f109, %f45, %f93;
	add.rn.f32 	%f110, %f46, %f94;
	add.rn.f32 	%f111, %f47, %f95;
	add.rn.f32 	%f112, %f48, %f96;
	add.rn.f32 	%f113, %f17, %f97;
	add.rn.f32 	%f114, %f18, %f98;
	add.rn.f32 	%f115, %f19, %f99;
	add.rn.f32 	%f116, %f20, %f100;
	add.rn.f32 	%f117, %f21, %f101;
	add.rn.f32 	%f118, %f22, %f102;
	add.rn.f32 	%f119, %f23, %f103;
	add.rn.f32 	%f120, %f24, %f104;
	add.rn.f32 	%f121, %f25, %f105;
	add.rn.f32 	%f122, %f26, %f106;
	add.rn.f32 	%f123, %f27, %f107;
	add.rn.f32 	%f124, %f28, %f108;
	add.rn.f32 	%f125, %f29, %f109;
	add.rn.f32 	%f126, %f30, %f110;
	add.rn.f32 	%f127, %f31, %f111;
	add.rn.f32 	%f128, %f32, %f112;
	add.rn.f32 	%f129, %f1, %f113;
	add.rn.f32 	%f130, %f2, %f114;
	add.rn.f32 	%f131, %f3, %f115;
	add.rn.f32 	%f132, %f4, %f116;
	add.rn.f32 	%f133, %f5, %f117;
	add.rn.f32 	%f134, %f6, %f118;
	add.rn.f32 	%f135, %f7, %f119;
	add.rn.f32 	%f136, %f8, %f120;
	add.rn.f32 	%f137, %f9, %f121;
	add.rn.f32 	%f138, %f10, %f122;
	add.rn.f32 	%f139, %f11, %f123;
	add.rn.f32 	%f140, %f12, %f124;
	add.rn.f32 	%f141, %f13, %f125;
	add.rn.f32 	%f142, %f14, %f126;
	add.rn.f32 	%f143, %f15, %f127;
	add.rn.f32 	%f144, %f16, %f128;
	mul.rn.f32 	%f145, %f129, %f129;
	mul.rn.f32 	%f146, %f130, %f130;
	mul.rn.f32 	%f147, %f131, %f131;
	mul.rn.f32 	%f148, %f132, %f132;
	mul.rn.f32 	%f149, %f133, %f133;
	mul.rn.f32 	%f150, %f134, %f134;
	mul.rn.f32 	%f151, %f135, %f135;
	mul.rn.f32 	%f152, %f136, %f136;
	mul.rn.f32 	%f153, %f137, %f137;
	mul.rn.f32 	%f154, %f138, %f138;
	mul.rn.f32 	%f155, %f139, %f139;
	mul.rn.f32 	%f156, %f140, %f140;
	mul.rn.f32 	%f157, %f141, %f141;
	mul.rn.f32 	%f158, %f142, %f142;
	mul.rn.f32 	%f159, %f143, %f143;
	mul.rn.f32 	%f160, %f144, %f144;
	add.rn.f32 	%f161, %f145, %f146;
	add.rn.f32 	%f162, %f147, %f161;
	add.rn.f32 	%f163, %f148, %f162;
	add.rn.f32 	%f164, %f149, %f163;
	add.rn.f32 	%f165, %f150, %f164;
	add.rn.f32 	%f166, %f151, %f165;
	add.rn.f32 	%f167, %f152, %f166;
	add.rn.f32 	%f168, %f153, %f167;
	add.rn.f32 	%f169, %f154, %f168;
	add.rn.f32 	%f170, %f155, %f169;
	add.rn.f32 	%f171, %f156, %f170;
	add.rn.f32 	%f172, %f157, %f171;
	add.rn.f32 	%f173, %f158, %f172;
	add.rn.f32 	%f174, %f159, %f173;
	add.rn.f32 	%f175, %f160, %f174;
	mov.b32 	%r175, %f175;
	shfl.sync.bfly.b32	%r176, %r175, 16, 31, -1;
	mov.b32 	%f176, %r176;
	add.rn.f32 	%f177, %f175, %f176;
	mov.b32 	%r177, %f177;
	shfl.sync.bfly.b32	%r178, %r177, 8, 31, -1;
	mov.b32 	%f178, %r178;
	add.rn.f32 	%f179, %f177, %f178;
	mov.b32 	%r179, %f179;
	shfl.sync.bfly.b32	%r180, %r179, 4, 31, -1;
	mov.b32 	%f180, %r180;
	add.rn.f32 	%f181, %f179, %f180;
	mov.b32 	%r181, %f181;
	shfl.sync.bfly.b32	%r182, %r181, 2, 31, -1;
	mov.b32 	%f182, %r182;
	add.rn.f32 	%f183, %f181, %f182;
	mov.b32 	%r183, %f183;
	shfl.sync.bfly.b32	%r184, %r183, 1, 31, -1;
	mov.b32 	%f184, %r184;
	add.rn.f32 	%f185, %f183, %f184;
	setp.eq.s32 	%p1, %r170, 0;
	shr.u32 	%r185, %r169, 3;
	and.b32  	%r186, %r185, 4;
	cvt.u64.u32 	%rd41, %r186;
	mov.u64 	%rd42, global_smem;
	add.s64 	%rd43, %rd42, %rd41;
	mov.b32 	%r115, %f185;
	cvt.u32.u64 	%r114, %rd43;
	// begin inline asm
	@%p1 st.shared.b32 [ %r114 + 0 ], %r115;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r169, 2;
	shl.b32 	%r187, %r169, 2;
	cvt.u64.u32 	%rd44, %r187;
	add.s64 	%rd45, %rd42, %rd44;
	cvt.u32.u64 	%r117, %rd45;
	// begin inline asm
	@%p2 ld.shared.b32 %r116, [ %r117 + 0 ];
	// end inline asm
	mov.b32 	%f186, %r116;
	shfl.sync.bfly.b32	%r188, %r116, 1, 31, -1;
	mov.b32 	%f187, %r188;
	add.rn.f32 	%f188, %f186, %f187;
	setp.eq.s32 	%p3, %r169, 0;
	mov.b32 	%r119, %f188;
	// begin inline asm
	@%p3 st.shared.b32 [ %r117 + 0 ], %r119;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f189, [global_smem];
	mul.rn.f32 	%f190, %f189, 0f3A800000;
	// begin inline asm
	mov.u32 %r120, 0x0;
	ld.global.b32 { %r120 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f191, %r120;
	add.rn.f32 	%f192, %f190, %f191;
	rsqrt.approx.f32 	%f193, %f192;
	mul.rn.f32 	%f194, %f129, %f193;
	mul.rn.f32 	%f195, %f130, %f193;
	mul.rn.f32 	%f196, %f131, %f193;
	mul.rn.f32 	%f197, %f132, %f193;
	mul.rn.f32 	%f198, %f133, %f193;
	mul.rn.f32 	%f199, %f134, %f193;
	mul.rn.f32 	%f200, %f135, %f193;
	mul.rn.f32 	%f201, %f136, %f193;
	mul.rn.f32 	%f202, %f137, %f193;
	mul.rn.f32 	%f203, %f138, %f193;
	mul.rn.f32 	%f204, %f139, %f193;
	mul.rn.f32 	%f205, %f140, %f193;
	mul.rn.f32 	%f206, %f141, %f193;
	mul.rn.f32 	%f207, %f142, %f193;
	mul.rn.f32 	%f208, %f143, %f193;
	mul.rn.f32 	%f209, %f144, %f193;
	add.s64 	%rd14, %rd30, %rd33;
	add.s64 	%rd15, %rd14, 1024;
	// begin inline asm
	mov.u32 %r121, 0x0;
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	ld.global.v4.b32 { %r121, %r122, %r123, %r124 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r121;
	mov.b32 	{%rs67, %rs68}, %r122;
	mov.b32 	{%rs69, %rs70}, %r123;
	mov.b32 	{%rs71, %rs72}, %r124;
	// begin inline asm
	mov.u32 %r125, 0x0;
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	ld.global.v4.b32 { %r125, %r126, %r127, %r128 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r125;
	mov.b32 	{%rs75, %rs76}, %r126;
	mov.b32 	{%rs77, %rs78}, %r127;
	mov.b32 	{%rs79, %rs80}, %r128;
	// begin inline asm
	cvt.f32.bf16 %r129, %rs65;
	// end inline asm
	mov.b32 	%f210, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs66;
	// end inline asm
	mov.b32 	%f211, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs67;
	// end inline asm
	mov.b32 	%f212, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs68;
	// end inline asm
	mov.b32 	%f213, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs69;
	// end inline asm
	mov.b32 	%f214, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs70;
	// end inline asm
	mov.b32 	%f215, %r134;
	// begin inline asm
	cvt.f32.bf16 %r135, %rs71;
	// end inline asm
	mov.b32 	%f216, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs72;
	// end inline asm
	mov.b32 	%f217, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs73;
	// end inline asm
	mov.b32 	%f218, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs74;
	// end inline asm
	mov.b32 	%f219, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs75;
	// end inline asm
	mov.b32 	%f220, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs76;
	// end inline asm
	mov.b32 	%f221, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs77;
	// end inline asm
	mov.b32 	%f222, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs78;
	// end inline asm
	mov.b32 	%f223, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs79;
	// end inline asm
	mov.b32 	%f224, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs80;
	// end inline asm
	mov.b32 	%f225, %r144;
	mul.rn.f32 	%f226, %f194, %f210;
	mul.rn.f32 	%f227, %f195, %f211;
	mul.rn.f32 	%f228, %f196, %f212;
	mul.rn.f32 	%f229, %f197, %f213;
	mul.rn.f32 	%f230, %f198, %f214;
	mul.rn.f32 	%f231, %f199, %f215;
	mul.rn.f32 	%f232, %f200, %f216;
	mul.rn.f32 	%f233, %f201, %f217;
	mul.rn.f32 	%f234, %f202, %f218;
	mul.rn.f32 	%f235, %f203, %f219;
	mul.rn.f32 	%f236, %f204, %f220;
	mul.rn.f32 	%f237, %f205, %f221;
	mul.rn.f32 	%f238, %f206, %f222;
	mul.rn.f32 	%f239, %f207, %f223;
	mul.rn.f32 	%f240, %f208, %f224;
	mul.rn.f32 	%f241, %f209, %f225;
	mov.b32 	%r145, %f226;
	// begin inline asm
	cvt.rn.bf16.f32 %rs81, %r145;
	// end inline asm
	mov.b32 	%r146, %f227;
	// begin inline asm
	cvt.rn.bf16.f32 %rs82, %r146;
	// end inline asm
	mov.b32 	%r147, %f228;
	// begin inline asm
	cvt.rn.bf16.f32 %rs83, %r147;
	// end inline asm
	mov.b32 	%r148, %f229;
	// begin inline asm
	cvt.rn.bf16.f32 %rs84, %r148;
	// end inline asm
	mov.b32 	%r149, %f230;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r149;
	// end inline asm
	mov.b32 	%r150, %f231;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r150;
	// end inline asm
	mov.b32 	%r151, %f232;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r151;
	// end inline asm
	mov.b32 	%r152, %f233;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r152;
	// end inline asm
	mov.b32 	%r153, %f234;
	// begin inline asm
	cvt.rn.bf16.f32 %rs89, %r153;
	// end inline asm
	mov.b32 	%r154, %f235;
	// begin inline asm
	cvt.rn.bf16.f32 %rs90, %r154;
	// end inline asm
	mov.b32 	%r155, %f236;
	// begin inline asm
	cvt.rn.bf16.f32 %rs91, %r155;
	// end inline asm
	mov.b32 	%r156, %f237;
	// begin inline asm
	cvt.rn.bf16.f32 %rs92, %r156;
	// end inline asm
	mov.b32 	%r157, %f238;
	// begin inline asm
	cvt.rn.bf16.f32 %rs93, %r157;
	// end inline asm
	mov.b32 	%r158, %f239;
	// begin inline asm
	cvt.rn.bf16.f32 %rs94, %r158;
	// end inline asm
	mov.b32 	%r159, %f240;
	// begin inline asm
	cvt.rn.bf16.f32 %rs95, %r159;
	// end inline asm
	mov.b32 	%r160, %f241;
	// begin inline asm
	cvt.rn.bf16.f32 %rs96, %r160;
	// end inline asm
	add.s64 	%rd46, %rd20, %rd35;
	add.s64 	%rd16, %rd46, %rd33;
	add.s64 	%rd17, %rd16, 1024;
	mov.b32 	%r161, {%rs81, %rs82};
	mov.b32 	%r162, {%rs83, %rs84};
	mov.b32 	%r163, {%rs85, %rs86};
	mov.b32 	%r164, {%rs87, %rs88};
	// begin inline asm
	st.global.v4.b32 [ %rd16 + 0 ], { %r161, %r162, %r163, %r164 };
	// end inline asm
	mov.b32 	%r165, {%rs89, %rs90};
	mov.b32 	%r166, {%rs91, %rs92};
	mov.b32 	%r167, {%rs93, %rs94};
	mov.b32 	%r168, {%rs95, %rs96};
	// begin inline asm
	st.global.v4.b32 [ %rd17 + 0 ], { %r165, %r166, %r167, %r168 };
	// end inline asm
	ret;

}
	// .globl	fusion_96
.visible .entry fusion_96(
	.param .u64 .ptr .align 16 fusion_96_param_0,
	.param .u64 .ptr .align 128 fusion_96_param_1,
	.param .u64 .ptr .align 16 fusion_96_param_2,
	.param .u64 .ptr .align 128 fusion_96_param_3,
	.param .u64 .ptr .align 128 fusion_96_param_4,
	.param .u64 .ptr .align 128 fusion_96_param_5,
	.param .u64 .ptr .align 128 fusion_96_param_6,
	.param .u64 .ptr .align 128 fusion_96_param_7
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<113>;
	.reg .b32 	%r<213>;
	.reg .f32 	%f<274>;
	.reg .b64 	%rd<52>;

	ld.param.u64 	%rd20, [fusion_96_param_0];
	ld.param.u64 	%rd21, [fusion_96_param_7];
	cvta.to.global.u64 	%rd22, %rd21;
	ld.param.u64 	%rd23, [fusion_96_param_1];
	ld.param.u64 	%rd24, [fusion_96_param_6];
	cvta.to.global.u64 	%rd25, %rd24;
	ld.param.u64 	%rd26, [fusion_96_param_2];
	ld.param.u64 	%rd27, [fusion_96_param_5];
	cvta.to.global.u64 	%rd28, %rd27;
	ld.param.u64 	%rd29, [fusion_96_param_3];
	ld.param.u64 	%rd30, [fusion_96_param_4];
	cvta.to.global.u64 	%rd31, %rd30;
	cvta.to.global.u64 	%rd32, %rd29;
	cvta.to.global.u64 	%rd33, %rd26;
	cvta.to.global.u64 	%rd34, %rd23;
	cvta.to.global.u64 	%rd15, %rd20;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd35, %r1, 1024;
	shl.b64 	%rd36, %rd35, 1;
	add.s64 	%rd37, %rd34, %rd36;
	mov.u32 	%r193, %tid.x;
	and.b32  	%r194, %r193, 31;
	shl.b32 	%r195, %r193, 3;
	and.b32  	%r196, %r195, 248;
	setp.lt.u32 	%p4, %r193, 32;
	selp.b32 	%r197, 0, 256, %p4;
	or.b32  	%r198, %r196, %r197;
	mul.wide.u32 	%rd38, %r198, 2;
	add.s64 	%rd1, %rd37, %rd38;
	add.s64 	%rd2, %rd1, 1024;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v4.b32 { %r6, %r7, %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r6;
	mov.b32 	{%rs11, %rs12}, %r7;
	mov.b32 	{%rs13, %rs14}, %r8;
	mov.b32 	{%rs15, %rs16}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs1;
	// end inline asm
	mov.b32 	%f1, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs2;
	// end inline asm
	mov.b32 	%f2, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs3;
	// end inline asm
	mov.b32 	%f3, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs4;
	// end inline asm
	mov.b32 	%f4, %r13;
	// begin inline asm
	cvt.f32.bf16 %r14, %rs5;
	// end inline asm
	mov.b32 	%f5, %r14;
	// begin inline asm
	cvt.f32.bf16 %r15, %rs6;
	// end inline asm
	mov.b32 	%f6, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs7;
	// end inline asm
	mov.b32 	%f7, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs8;
	// end inline asm
	mov.b32 	%f8, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs9;
	// end inline asm
	mov.b32 	%f9, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs10;
	// end inline asm
	mov.b32 	%f10, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs11;
	// end inline asm
	mov.b32 	%f11, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs12;
	// end inline asm
	mov.b32 	%f12, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	mul.wide.s32 	%rd39, %r1, 14336;
	add.s64 	%rd40, %rd28, %rd39;
	add.s64 	%rd3, %rd40, %rd38;
	add.s64 	%rd4, %rd3, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f17, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f18, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f19, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f20, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f21, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f22, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f23, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f24, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f25, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f26, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f27, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f28, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f32, %r49;
	add.s64 	%rd41, %rd25, %rd36;
	add.s64 	%rd5, %rd41, %rd38;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f33, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f34, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f35, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f36, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f37, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f38, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f39, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f40, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f41, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f42, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f43, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f44, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f45, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f46, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f47, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f48, %r73;
	add.s64 	%rd7, %rd3, 2048;
	add.s64 	%rd8, %rd3, 3072;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f49, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f50, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f51, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f52, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f53, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f54, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f55, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f56, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f57, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f58, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f59, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f60, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f61, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f62, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f63, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f64, %r97;
	add.s64 	%rd42, %rd31, %rd36;
	add.s64 	%rd9, %rd42, %rd38;
	add.s64 	%rd10, %rd9, 1024;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f65, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f66, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f67, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f68, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f69, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f70, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f71, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f72, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f73, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f74, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f75, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f76, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f77, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f78, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f79, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f80, %r121;
	shl.b64 	%rd43, %rd35, 2;
	add.s64 	%rd44, %rd32, %rd43;
	mul.wide.u32 	%rd45, %r198, 4;
	add.s64 	%rd11, %rd44, %rd45;
	add.s64 	%rd12, %rd11, 16;
	add.s64 	%rd13, %rd11, 2048;
	add.s64 	%rd14, %rd11, 2064;
	// begin inline asm
	mov.u32 %r122, 0x0;
	mov.u32 %r123, 0x0;
	mov.u32 %r124, 0x0;
	mov.u32 %r125, 0x0;
	ld.global.v4.b32 { %r122, %r123, %r124, %r125 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	%f81, %r122;
	mov.b32 	%f82, %r123;
	mov.b32 	%f83, %r124;
	mov.b32 	%f84, %r125;
	// begin inline asm
	mov.u32 %r126, 0x0;
	mov.u32 %r127, 0x0;
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	ld.global.v4.b32 { %r126, %r127, %r128, %r129 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	%f85, %r126;
	mov.b32 	%f86, %r127;
	mov.b32 	%f87, %r128;
	mov.b32 	%f88, %r129;
	// begin inline asm
	mov.u32 %r130, 0x0;
	mov.u32 %r131, 0x0;
	mov.u32 %r132, 0x0;
	mov.u32 %r133, 0x0;
	ld.global.v4.b32 { %r130, %r131, %r132, %r133 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f89, %r130;
	mov.b32 	%f90, %r131;
	mov.b32 	%f91, %r132;
	mov.b32 	%f92, %r133;
	// begin inline asm
	mov.u32 %r134, 0x0;
	mov.u32 %r135, 0x0;
	mov.u32 %r136, 0x0;
	mov.u32 %r137, 0x0;
	ld.global.v4.b32 { %r134, %r135, %r136, %r137 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	%f93, %r134;
	mov.b32 	%f94, %r135;
	mov.b32 	%f95, %r136;
	mov.b32 	%f96, %r137;
	add.rn.f32 	%f97, %f65, %f81;
	add.rn.f32 	%f98, %f66, %f82;
	add.rn.f32 	%f99, %f67, %f83;
	add.rn.f32 	%f100, %f68, %f84;
	add.rn.f32 	%f101, %f69, %f85;
	add.rn.f32 	%f102, %f70, %f86;
	add.rn.f32 	%f103, %f71, %f87;
	add.rn.f32 	%f104, %f72, %f88;
	add.rn.f32 	%f105, %f73, %f89;
	add.rn.f32 	%f106, %f74, %f90;
	add.rn.f32 	%f107, %f75, %f91;
	add.rn.f32 	%f108, %f76, %f92;
	add.rn.f32 	%f109, %f77, %f93;
	add.rn.f32 	%f110, %f78, %f94;
	add.rn.f32 	%f111, %f79, %f95;
	add.rn.f32 	%f112, %f80, %f96;
	add.rn.f32 	%f113, %f49, %f97;
	add.rn.f32 	%f114, %f50, %f98;
	add.rn.f32 	%f115, %f51, %f99;
	add.rn.f32 	%f116, %f52, %f100;
	add.rn.f32 	%f117, %f53, %f101;
	add.rn.f32 	%f118, %f54, %f102;
	add.rn.f32 	%f119, %f55, %f103;
	add.rn.f32 	%f120, %f56, %f104;
	add.rn.f32 	%f121, %f57, %f105;
	add.rn.f32 	%f122, %f58, %f106;
	add.rn.f32 	%f123, %f59, %f107;
	add.rn.f32 	%f124, %f60, %f108;
	add.rn.f32 	%f125, %f61, %f109;
	add.rn.f32 	%f126, %f62, %f110;
	add.rn.f32 	%f127, %f63, %f111;
	add.rn.f32 	%f128, %f64, %f112;
	add.rn.f32 	%f129, %f33, %f113;
	add.rn.f32 	%f130, %f34, %f114;
	add.rn.f32 	%f131, %f35, %f115;
	add.rn.f32 	%f132, %f36, %f116;
	add.rn.f32 	%f133, %f37, %f117;
	add.rn.f32 	%f134, %f38, %f118;
	add.rn.f32 	%f135, %f39, %f119;
	add.rn.f32 	%f136, %f40, %f120;
	add.rn.f32 	%f137, %f41, %f121;
	add.rn.f32 	%f138, %f42, %f122;
	add.rn.f32 	%f139, %f43, %f123;
	add.rn.f32 	%f140, %f44, %f124;
	add.rn.f32 	%f141, %f45, %f125;
	add.rn.f32 	%f142, %f46, %f126;
	add.rn.f32 	%f143, %f47, %f127;
	add.rn.f32 	%f144, %f48, %f128;
	add.rn.f32 	%f145, %f17, %f129;
	add.rn.f32 	%f146, %f18, %f130;
	add.rn.f32 	%f147, %f19, %f131;
	add.rn.f32 	%f148, %f20, %f132;
	add.rn.f32 	%f149, %f21, %f133;
	add.rn.f32 	%f150, %f22, %f134;
	add.rn.f32 	%f151, %f23, %f135;
	add.rn.f32 	%f152, %f24, %f136;
	add.rn.f32 	%f153, %f25, %f137;
	add.rn.f32 	%f154, %f26, %f138;
	add.rn.f32 	%f155, %f27, %f139;
	add.rn.f32 	%f156, %f28, %f140;
	add.rn.f32 	%f157, %f29, %f141;
	add.rn.f32 	%f158, %f30, %f142;
	add.rn.f32 	%f159, %f31, %f143;
	add.rn.f32 	%f160, %f32, %f144;
	add.rn.f32 	%f161, %f1, %f145;
	add.rn.f32 	%f162, %f2, %f146;
	add.rn.f32 	%f163, %f3, %f147;
	add.rn.f32 	%f164, %f4, %f148;
	add.rn.f32 	%f165, %f5, %f149;
	add.rn.f32 	%f166, %f6, %f150;
	add.rn.f32 	%f167, %f7, %f151;
	add.rn.f32 	%f168, %f8, %f152;
	add.rn.f32 	%f169, %f9, %f153;
	add.rn.f32 	%f170, %f10, %f154;
	add.rn.f32 	%f171, %f11, %f155;
	add.rn.f32 	%f172, %f12, %f156;
	add.rn.f32 	%f173, %f13, %f157;
	add.rn.f32 	%f174, %f14, %f158;
	add.rn.f32 	%f175, %f15, %f159;
	add.rn.f32 	%f176, %f16, %f160;
	mul.rn.f32 	%f177, %f161, %f161;
	mul.rn.f32 	%f178, %f162, %f162;
	mul.rn.f32 	%f179, %f163, %f163;
	mul.rn.f32 	%f180, %f164, %f164;
	mul.rn.f32 	%f181, %f165, %f165;
	mul.rn.f32 	%f182, %f166, %f166;
	mul.rn.f32 	%f183, %f167, %f167;
	mul.rn.f32 	%f184, %f168, %f168;
	mul.rn.f32 	%f185, %f169, %f169;
	mul.rn.f32 	%f186, %f170, %f170;
	mul.rn.f32 	%f187, %f171, %f171;
	mul.rn.f32 	%f188, %f172, %f172;
	mul.rn.f32 	%f189, %f173, %f173;
	mul.rn.f32 	%f190, %f174, %f174;
	mul.rn.f32 	%f191, %f175, %f175;
	mul.rn.f32 	%f192, %f176, %f176;
	add.rn.f32 	%f193, %f177, %f178;
	add.rn.f32 	%f194, %f179, %f193;
	add.rn.f32 	%f195, %f180, %f194;
	add.rn.f32 	%f196, %f181, %f195;
	add.rn.f32 	%f197, %f182, %f196;
	add.rn.f32 	%f198, %f183, %f197;
	add.rn.f32 	%f199, %f184, %f198;
	add.rn.f32 	%f200, %f185, %f199;
	add.rn.f32 	%f201, %f186, %f200;
	add.rn.f32 	%f202, %f187, %f201;
	add.rn.f32 	%f203, %f188, %f202;
	add.rn.f32 	%f204, %f189, %f203;
	add.rn.f32 	%f205, %f190, %f204;
	add.rn.f32 	%f206, %f191, %f205;
	add.rn.f32 	%f207, %f192, %f206;
	mov.b32 	%r199, %f207;
	shfl.sync.bfly.b32	%r200, %r199, 16, 31, -1;
	mov.b32 	%f208, %r200;
	add.rn.f32 	%f209, %f207, %f208;
	mov.b32 	%r201, %f209;
	shfl.sync.bfly.b32	%r202, %r201, 8, 31, -1;
	mov.b32 	%f210, %r202;
	add.rn.f32 	%f211, %f209, %f210;
	mov.b32 	%r203, %f211;
	shfl.sync.bfly.b32	%r204, %r203, 4, 31, -1;
	mov.b32 	%f212, %r204;
	add.rn.f32 	%f213, %f211, %f212;
	mov.b32 	%r205, %f213;
	shfl.sync.bfly.b32	%r206, %r205, 2, 31, -1;
	mov.b32 	%f214, %r206;
	add.rn.f32 	%f215, %f213, %f214;
	mov.b32 	%r207, %f215;
	shfl.sync.bfly.b32	%r208, %r207, 1, 31, -1;
	mov.b32 	%f216, %r208;
	add.rn.f32 	%f217, %f215, %f216;
	setp.eq.s32 	%p1, %r194, 0;
	shr.u32 	%r209, %r193, 3;
	and.b32  	%r210, %r209, 4;
	cvt.u64.u32 	%rd46, %r210;
	mov.u64 	%rd47, global_smem;
	add.s64 	%rd48, %rd47, %rd46;
	mov.b32 	%r139, %f217;
	cvt.u32.u64 	%r138, %rd48;
	// begin inline asm
	@%p1 st.shared.b32 [ %r138 + 0 ], %r139;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r193, 2;
	shl.b32 	%r211, %r193, 2;
	cvt.u64.u32 	%rd49, %r211;
	add.s64 	%rd50, %rd47, %rd49;
	cvt.u32.u64 	%r141, %rd50;
	// begin inline asm
	@%p2 ld.shared.b32 %r140, [ %r141 + 0 ];
	// end inline asm
	mov.b32 	%f218, %r140;
	shfl.sync.bfly.b32	%r212, %r140, 1, 31, -1;
	mov.b32 	%f219, %r212;
	add.rn.f32 	%f220, %f218, %f219;
	setp.eq.s32 	%p3, %r193, 0;
	mov.b32 	%r143, %f220;
	// begin inline asm
	@%p3 st.shared.b32 [ %r141 + 0 ], %r143;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f221, [global_smem];
	mul.rn.f32 	%f222, %f221, 0f3A800000;
	// begin inline asm
	mov.u32 %r144, 0x0;
	ld.global.b32 { %r144 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	%f223, %r144;
	add.rn.f32 	%f224, %f222, %f223;
	rsqrt.approx.f32 	%f225, %f224;
	mul.rn.f32 	%f226, %f161, %f225;
	mul.rn.f32 	%f227, %f162, %f225;
	mul.rn.f32 	%f228, %f163, %f225;
	mul.rn.f32 	%f229, %f164, %f225;
	mul.rn.f32 	%f230, %f165, %f225;
	mul.rn.f32 	%f231, %f166, %f225;
	mul.rn.f32 	%f232, %f167, %f225;
	mul.rn.f32 	%f233, %f168, %f225;
	mul.rn.f32 	%f234, %f169, %f225;
	mul.rn.f32 	%f235, %f170, %f225;
	mul.rn.f32 	%f236, %f171, %f225;
	mul.rn.f32 	%f237, %f172, %f225;
	mul.rn.f32 	%f238, %f173, %f225;
	mul.rn.f32 	%f239, %f174, %f225;
	mul.rn.f32 	%f240, %f175, %f225;
	mul.rn.f32 	%f241, %f176, %f225;
	add.s64 	%rd16, %rd33, %rd38;
	add.s64 	%rd17, %rd16, 1024;
	// begin inline asm
	mov.u32 %r145, 0x0;
	mov.u32 %r146, 0x0;
	mov.u32 %r147, 0x0;
	mov.u32 %r148, 0x0;
	ld.global.v4.b32 { %r145, %r146, %r147, %r148 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r145;
	mov.b32 	{%rs83, %rs84}, %r146;
	mov.b32 	{%rs85, %rs86}, %r147;
	mov.b32 	{%rs87, %rs88}, %r148;
	// begin inline asm
	mov.u32 %r149, 0x0;
	mov.u32 %r150, 0x0;
	mov.u32 %r151, 0x0;
	mov.u32 %r152, 0x0;
	ld.global.v4.b32 { %r149, %r150, %r151, %r152 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r149;
	mov.b32 	{%rs91, %rs92}, %r150;
	mov.b32 	{%rs93, %rs94}, %r151;
	mov.b32 	{%rs95, %rs96}, %r152;
	// begin inline asm
	cvt.f32.bf16 %r153, %rs81;
	// end inline asm
	mov.b32 	%f242, %r153;
	// begin inline asm
	cvt.f32.bf16 %r154, %rs82;
	// end inline asm
	mov.b32 	%f243, %r154;
	// begin inline asm
	cvt.f32.bf16 %r155, %rs83;
	// end inline asm
	mov.b32 	%f244, %r155;
	// begin inline asm
	cvt.f32.bf16 %r156, %rs84;
	// end inline asm
	mov.b32 	%f245, %r156;
	// begin inline asm
	cvt.f32.bf16 %r157, %rs85;
	// end inline asm
	mov.b32 	%f246, %r157;
	// begin inline asm
	cvt.f32.bf16 %r158, %rs86;
	// end inline asm
	mov.b32 	%f247, %r158;
	// begin inline asm
	cvt.f32.bf16 %r159, %rs87;
	// end inline asm
	mov.b32 	%f248, %r159;
	// begin inline asm
	cvt.f32.bf16 %r160, %rs88;
	// end inline asm
	mov.b32 	%f249, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs89;
	// end inline asm
	mov.b32 	%f250, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs90;
	// end inline asm
	mov.b32 	%f251, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs91;
	// end inline asm
	mov.b32 	%f252, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs92;
	// end inline asm
	mov.b32 	%f253, %r164;
	// begin inline asm
	cvt.f32.bf16 %r165, %rs93;
	// end inline asm
	mov.b32 	%f254, %r165;
	// begin inline asm
	cvt.f32.bf16 %r166, %rs94;
	// end inline asm
	mov.b32 	%f255, %r166;
	// begin inline asm
	cvt.f32.bf16 %r167, %rs95;
	// end inline asm
	mov.b32 	%f256, %r167;
	// begin inline asm
	cvt.f32.bf16 %r168, %rs96;
	// end inline asm
	mov.b32 	%f257, %r168;
	mul.rn.f32 	%f258, %f226, %f242;
	mul.rn.f32 	%f259, %f227, %f243;
	mul.rn.f32 	%f260, %f228, %f244;
	mul.rn.f32 	%f261, %f229, %f245;
	mul.rn.f32 	%f262, %f230, %f246;
	mul.rn.f32 	%f263, %f231, %f247;
	mul.rn.f32 	%f264, %f232, %f248;
	mul.rn.f32 	%f265, %f233, %f249;
	mul.rn.f32 	%f266, %f234, %f250;
	mul.rn.f32 	%f267, %f235, %f251;
	mul.rn.f32 	%f268, %f236, %f252;
	mul.rn.f32 	%f269, %f237, %f253;
	mul.rn.f32 	%f270, %f238, %f254;
	mul.rn.f32 	%f271, %f239, %f255;
	mul.rn.f32 	%f272, %f240, %f256;
	mul.rn.f32 	%f273, %f241, %f257;
	mov.b32 	%r169, %f258;
	// begin inline asm
	cvt.rn.bf16.f32 %rs97, %r169;
	// end inline asm
	mov.b32 	%r170, %f259;
	// begin inline asm
	cvt.rn.bf16.f32 %rs98, %r170;
	// end inline asm
	mov.b32 	%r171, %f260;
	// begin inline asm
	cvt.rn.bf16.f32 %rs99, %r171;
	// end inline asm
	mov.b32 	%r172, %f261;
	// begin inline asm
	cvt.rn.bf16.f32 %rs100, %r172;
	// end inline asm
	mov.b32 	%r173, %f262;
	// begin inline asm
	cvt.rn.bf16.f32 %rs101, %r173;
	// end inline asm
	mov.b32 	%r174, %f263;
	// begin inline asm
	cvt.rn.bf16.f32 %rs102, %r174;
	// end inline asm
	mov.b32 	%r175, %f264;
	// begin inline asm
	cvt.rn.bf16.f32 %rs103, %r175;
	// end inline asm
	mov.b32 	%r176, %f265;
	// begin inline asm
	cvt.rn.bf16.f32 %rs104, %r176;
	// end inline asm
	mov.b32 	%r177, %f266;
	// begin inline asm
	cvt.rn.bf16.f32 %rs105, %r177;
	// end inline asm
	mov.b32 	%r178, %f267;
	// begin inline asm
	cvt.rn.bf16.f32 %rs106, %r178;
	// end inline asm
	mov.b32 	%r179, %f268;
	// begin inline asm
	cvt.rn.bf16.f32 %rs107, %r179;
	// end inline asm
	mov.b32 	%r180, %f269;
	// begin inline asm
	cvt.rn.bf16.f32 %rs108, %r180;
	// end inline asm
	mov.b32 	%r181, %f270;
	// begin inline asm
	cvt.rn.bf16.f32 %rs109, %r181;
	// end inline asm
	mov.b32 	%r182, %f271;
	// begin inline asm
	cvt.rn.bf16.f32 %rs110, %r182;
	// end inline asm
	mov.b32 	%r183, %f272;
	// begin inline asm
	cvt.rn.bf16.f32 %rs111, %r183;
	// end inline asm
	mov.b32 	%r184, %f273;
	// begin inline asm
	cvt.rn.bf16.f32 %rs112, %r184;
	// end inline asm
	add.s64 	%rd51, %rd22, %rd36;
	add.s64 	%rd18, %rd51, %rd38;
	add.s64 	%rd19, %rd18, 1024;
	mov.b32 	%r185, {%rs97, %rs98};
	mov.b32 	%r186, {%rs99, %rs100};
	mov.b32 	%r187, {%rs101, %rs102};
	mov.b32 	%r188, {%rs103, %rs104};
	// begin inline asm
	st.global.v4.b32 [ %rd18 + 0 ], { %r185, %r186, %r187, %r188 };
	// end inline asm
	mov.b32 	%r189, {%rs105, %rs106};
	mov.b32 	%r190, {%rs107, %rs108};
	mov.b32 	%r191, {%rs109, %rs110};
	mov.b32 	%r192, {%rs111, %rs112};
	// begin inline asm
	st.global.v4.b32 [ %rd19 + 0 ], { %r189, %r190, %r191, %r192 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 520192;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	triton_softmax_9_0
.visible .entry triton_softmax_9_0(
	.param .u64 .ptr .align 16 triton_softmax_9_0_param_0,
	.param .u64 .ptr .align 128 triton_softmax_9_0_param_1,
	.param .u64 .ptr .align 128 triton_softmax_9_0_param_2
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<59>;
	.reg .f32 	%f<44>;
	.reg .b64 	%rd<36>;

	ld.param.u64 	%rd5, [triton_softmax_9_0_param_0];
	ld.param.u64 	%rd6, [triton_softmax_9_0_param_2];
	cvta.to.global.u64 	%rd7, %rd6;
	ld.param.u64 	%rd8, [triton_softmax_9_0_param_1];
	cvta.to.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd2, %rd5;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r33, %r1, 9;
	cvt.u64.u32 	%rd10, %r33;
	and.b64  	%rd11, %rd10, 512;
	mul.wide.s32 	%rd12, %r1, 2048;
	or.b64  	%rd13, %rd12, %rd11;
	shl.b64 	%rd14, %rd13, 1;
	or.b64  	%rd15, %rd14, 4096;
	add.s64 	%rd16, %rd9, %rd15;
	mov.u32 	%r34, %tid.x;
	shl.b32 	%r35, %r34, 3;
	and.b32  	%r36, %r35, 248;
	setp.gt.u32 	%p3, %r34, 31;
	selp.b32 	%r37, 256, 0, %p3;
	or.b32  	%r38, %r36, %r37;
	mul.wide.u32 	%rd17, %r38, 2;
	add.s64 	%rd1, %rd16, %rd17;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	mov.b32 	{%rs5, %rs6}, %r4;
	mov.b32 	{%rs7, %rs8}, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs1;
	// end inline asm
	mov.b32 	%f1, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs2;
	// end inline asm
	mov.b32 	%f2, %r7;
	// begin inline asm
	cvt.f32.bf16 %r8, %rs3;
	// end inline asm
	mov.b32 	%f3, %r8;
	// begin inline asm
	cvt.f32.bf16 %r9, %rs4;
	// end inline asm
	mov.b32 	%f4, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	mul.rn.f32 	%f9, %f1, %f1;
	mul.rn.f32 	%f10, %f2, %f2;
	mul.rn.f32 	%f11, %f3, %f3;
	mul.rn.f32 	%f12, %f4, %f4;
	mul.rn.f32 	%f13, %f5, %f5;
	mul.rn.f32 	%f14, %f6, %f6;
	mul.rn.f32 	%f15, %f7, %f7;
	mul.rn.f32 	%f16, %f8, %f8;
	add.rn.f32 	%f17, %f9, %f10;
	add.rn.f32 	%f18, %f17, %f11;
	add.rn.f32 	%f19, %f18, %f12;
	add.rn.f32 	%f20, %f19, %f13;
	add.rn.f32 	%f21, %f20, %f14;
	add.rn.f32 	%f22, %f21, %f15;
	add.rn.f32 	%f23, %f22, %f16;
	mov.b32 	%r39, %f23;
	shfl.sync.bfly.b32	%r40, %r39, 8, 31, -1;
	mov.b32 	%f24, %r40;
	add.rn.f32 	%f25, %f23, %f24;
	mov.b32 	%r41, %f25;
	shfl.sync.bfly.b32	%r42, %r41, 4, 31, -1;
	mov.b32 	%f26, %r42;
	add.rn.f32 	%f27, %f25, %f26;
	mov.b32 	%r43, %f27;
	shfl.sync.bfly.b32	%r44, %r43, 2, 31, -1;
	mov.b32 	%f28, %r44;
	add.rn.f32 	%f29, %f27, %f28;
	mov.b32 	%r45, %f29;
	shfl.sync.bfly.b32	%r46, %r45, 1, 31, -1;
	mov.b32 	%f30, %r46;
	add.rn.f32 	%f31, %f29, %f30;
	mul.rn.f32 	%f32, %f31, 0f3C000000;
	// begin inline asm
	mov.u32 %r14, 0x0;
	ld.global.b32 { %r14 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r14;
	add.rn.f32 	%f34, %f32, %f33;
	rsqrt.approx.f32 	%f35, %f34;
	mul.rn.f32 	%f36, %f1, %f35;
	mul.rn.f32 	%f37, %f2, %f35;
	mul.rn.f32 	%f38, %f3, %f35;
	mul.rn.f32 	%f39, %f4, %f35;
	mul.rn.f32 	%f40, %f5, %f35;
	mul.rn.f32 	%f41, %f6, %f35;
	mul.rn.f32 	%f42, %f7, %f35;
	mul.rn.f32 	%f43, %f8, %f35;
	add.s64 	%rd18, %rd7, %rd12;
	selp.b64 	%rd19, 128, 0, %p3;
	selp.b64 	%rd20, 384, 256, %p3;
	shl.b32 	%r47, %r34, 2;
	and.b32  	%r48, %r47, 124;
	cvt.u64.u32 	%rd21, %r48;
	or.b64  	%rd22, %rd19, %rd21;
	or.b64  	%rd23, %rd20, %rd21;
	shl.b64 	%rd24, %rd22, 2;
	add.s64 	%rd3, %rd18, %rd24;
	shl.b64 	%rd25, %rd23, 2;
	add.s64 	%rd4, %rd18, %rd25;
	selp.b32 	%r49, 128, 0, %p3;
	or.b32  	%r50, %r48, %r49;
	shr.u32 	%r51, %r38, 4;
	and.b32  	%r52, %r51, 24;
	add.s32 	%r53, %r52, %r38;
	shl.b32 	%r54, %r53, 2;
	cvt.u64.u32 	%rd26, %r54;
	mov.u64 	%rd27, global_smem;
	add.s64 	%rd28, %rd27, %rd26;
	mov.b32 	%r16, %f36;
	mov.b32 	%r17, %f37;
	mov.b32 	%r18, %f38;
	mov.b32 	%r19, %f39;
	mov.b32 	%r21, %f40;
	mov.b32 	%r22, %f41;
	mov.b32 	%r23, %f42;
	mov.b32 	%r24, %f43;
	cvt.u32.u64 	%r15, %rd28;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r15 + 0 ], { %r16, %r17, %r18, %r19 };
	// end inline asm
	add.s32 	%r20, %r15, 16;
	// begin inline asm
	@%p1 st.shared.v4.b32 [ %r20 + 0 ], { %r21, %r22, %r23, %r24 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r55, %r49, 4;
	add.s32 	%r56, %r55, %r50;
	mul.wide.u32 	%rd29, %r56, 4;
	add.s64 	%rd30, %rd27, %rd29;
	or.b32  	%r57, %r49, 256;
	shr.u32 	%r58, %r57, 4;
	cvt.u64.u32 	%rd31, %r58;
	cvt.u64.u32 	%rd32, %r50;
	add.s64 	%rd33, %rd31, %rd32;
	shl.b64 	%rd34, %rd33, 2;
	add.s64 	%rd35, %rd27, %rd34;
	ld.shared.v4.u32 	{%r29, %r30, %r31, %r32}, [%rd35+1024];
	ld.shared.v4.u32 	{%r25, %r26, %r27, %r28}, [%rd30];
	// begin inline asm
	st.global.v4.b32 [ %rd3 + 0 ], { %r25, %r26, %r27, %r28 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd4 + 0 ], { %r29, %r30, %r31, %r32 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_3,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_4
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<7>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<15>;
	.reg .b64 	%rd<25>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_4];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd9, %rd4;
	cvta.to.global.u64 	%rd10, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd11, %r8, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	mul.wide.u32 	%rd13, %r3, 2;
	add.s64 	%rd14, %rd9, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd15, %r9;
	add.s64 	%rd16, %rd6, %rd15;
	ld.global.nc.u32 	%r10, [%rd16];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd17, %r14, 2;
	add.s64 	%rd18, %rd8, %rd17;
	ld.global.nc.u16 	%rs2, [%rd18];
	cvt.f32.bf16 	%f4, %rs2;
	mul.rn.f32 	%f5, %f3, %f4;
	or.b32  	%r15, %r1, 64;
	ld.global.nc.f32 	%f6, [%rd12+256];
	mul.wide.u32 	%rd19, %r15, 2;
	add.s64 	%rd20, %rd9, %rd19;
	ld.global.nc.u16 	%rs3, [%rd20];
	cvt.f32.bf16 	%f7, %rs3;
	mul.rn.f32 	%f8, %f6, %f7;
	or.b32  	%r16, %r13, %r15;
	mul.wide.u32 	%rd21, %r16, 2;
	add.s64 	%rd22, %rd8, %rd21;
	ld.global.nc.u16 	%rs4, [%rd22];
	cvt.f32.bf16 	%f9, %rs4;
	mul.rn.f32 	%f10, %f8, %f9;
	sub.rn.f32 	%f11, %f5, %f10;
	cvt.rn.bf16.f32 	%rs5, %f11;
	mul.wide.u32 	%rd23, %r8, 2;
	add.s64 	%rd24, %rd3, %rd23;
	st.global.b16 	[%rd24], %rs5;
	mul.rn.f32 	%f12, %f8, %f4;
	mul.rn.f32 	%f13, %f3, %f9;
	add.rn.f32 	%f14, %f12, %f13;
	cvt.rn.bf16.f32 	%rs6, %f14;
	st.global.b16 	[%rd24+128], %rs6;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

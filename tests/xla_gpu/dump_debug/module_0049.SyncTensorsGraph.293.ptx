//
// Generated by LLVM NVPTX Back-End
//

.version 8.5
.target sm_80
.address_size 64

	// .globl	loop_gather_fusion
.extern .shared .align 16 .b8 global_smem[];

.visible .entry loop_gather_fusion(
	.param .u64 .ptr .align 16 loop_gather_fusion_param_0,
	.param .u64 .ptr .align 16 loop_gather_fusion_param_1,
	.param .u64 .ptr .align 128 loop_gather_fusion_param_2
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;

	ld.param.u64 	%rd1, [loop_gather_fusion_param_0];
	ld.param.u64 	%rd2, [loop_gather_fusion_param_2];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [loop_gather_fusion_param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shr.u32 	%r3, %r2, 3;
	mul.wide.u32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd5, %rd7;
	ld.global.nc.u32 	%r4, [%rd8];
	min.u32 	%r5, %r4, 151935;
	shl.b32 	%r6, %r2, 7;
	and.b32  	%r7, %r6, 896;
	shl.b32 	%r8, %r5, 10;
	or.b32  	%r9, %r8, %r7;
	or.b32  	%r10, %r9, %r1;
	mul.wide.u32 	%rd9, %r10, 2;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.nc.u16 	%rs1, [%rd10];
	or.b32  	%r11, %r6, %r1;
	mul.wide.u32 	%rd11, %r11, 2;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.b16 	[%rd12], %rs1;
	ret;

}
	// .globl	gemm_fusion_dot_7_0
.visible .entry gemm_fusion_dot_7_0(
	.param .u64 .ptr .align 16 gemm_fusion_dot_7_0_param_0,
	.param .u64 .ptr .align 16 gemm_fusion_dot_7_0_param_1,
	.param .u64 .ptr .align 128 gemm_fusion_dot_7_0_param_2
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<12>;
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<383>;
	.reg .f32 	%f<149>;
	.reg .b64 	%rd<164>;

	ld.param.u64 	%rd46, [gemm_fusion_dot_7_0_param_0];
	ld.param.u64 	%rd47, [gemm_fusion_dot_7_0_param_2];
	cvta.to.global.u64 	%rd1, %rd47;
	ld.param.u64 	%rd48, [gemm_fusion_dot_7_0_param_1];
	cvta.to.global.u64 	%rd49, %rd48;
	cvta.to.global.u64 	%rd50, %rd46;
	// begin inline asm
	mov.u32 %r14, %ctaid.x;
	// end inline asm
	shr.s32 	%r34, %r14, 31;
	shr.u32 	%r35, %r34, 29;
	add.s32 	%r36, %r14, %r35;
	shr.s32 	%r2, %r36, 3;
	and.b32  	%r37, %r36, -8;
	sub.s32 	%r38, 128, %r37;
	min.s32 	%r3, %r38, 8;
	rem.s32 	%r39, %r14, %r3;
	add.s32 	%r40, %r37, %r39;
	shl.b32 	%r4, %r40, 4;
	setp.lt.s32 	%p1, %r4, 1024;
	selp.b64 	%rd51, %rd50, %rd49, %p1;
	add.s32 	%r41, %r4, -1024;
	selp.b32 	%r42, %r4, %r41, %p1;
	cvt.s64.s32 	%rd52, %r42;
	mov.u32 	%r5, %tid.x;
	and.b32  	%r6, %r5, 32;
	bfe.s32 	%r43, %r5, 5, 1;
	bfe.u32 	%r44, %r5, 5, 1;
	setp.lt.u32 	%p2, %r5, 64;
	selp.b32 	%r45, 0, 2, %p2;
	or.b32  	%r46, %r44, %r45;
	or.b32  	%r47, %r46, 4;
	or.b32  	%r48, %r46, 8;
	or.b32  	%r49, %r46, 12;
	cvt.u64.u32 	%rd53, %r46;
	cvt.u64.u32 	%rd54, %r47;
	cvt.u64.u32 	%rd55, %r48;
	cvt.u64.u32 	%rd56, %r49;
	or.b64  	%rd57, %rd52, %rd53;
	or.b64  	%rd58, %rd52, %rd54;
	or.b64  	%rd59, %rd52, %rd55;
	or.b64  	%rd60, %rd52, %rd56;
	and.b32  	%r50, %r5, 1;
	neg.s32 	%r51, %r50;
	bfe.s32 	%r52, %r5, 1, 1;
	shl.b32 	%r53, %r5, 3;
	and.b32  	%r54, %r53, 24;
	bfe.s32 	%r55, %r5, 2, 1;
	and.b32  	%r56, %r5, 4;
	shl.b32 	%r57, %r56, 3;
	or.b32  	%r58, %r54, %r57;
	and.b32  	%r59, %r5, 8;
	shl.b32 	%r60, %r59, 3;
	or.b32  	%r61, %r58, %r60;
	and.b32  	%r7, %r5, 16;
	shl.b32 	%r62, %r7, 3;
	or.b32  	%r63, %r61, %r62;
	shl.b64 	%rd61, %rd57, 12;
	mul.wide.u32 	%rd62, %r63, 2;
	add.s64 	%rd63, %rd61, %rd51;
	add.s64 	%rd37, %rd63, %rd62;
	shl.b64 	%rd64, %rd58, 12;
	add.s64 	%rd65, %rd64, %rd51;
	add.s64 	%rd38, %rd65, %rd62;
	shl.b64 	%rd66, %rd59, 12;
	add.s64 	%rd67, %rd66, %rd51;
	add.s64 	%rd39, %rd67, %rd62;
	shl.b64 	%rd68, %rd60, 12;
	add.s64 	%rd69, %rd68, %rd51;
	add.s64 	%rd40, %rd69, %rd62;
	and.b32  	%r64, %r43, 264;
	selp.b32 	%r65, 0, 528, %p2;
	or.b32  	%r66, %r64, %r65;
	xor.b32  	%r67, %r66, %r63;
	cvt.u64.u32 	%rd2, %r67;
	mul.wide.u32 	%rd70, %r67, 2;
	mov.u64 	%rd45, global_smem;
	add.s64 	%rd71, %rd45, %rd70;
	or.b32  	%r68, %r54, 1056;
	xor.b32  	%r69, %r68, %r57;
	or.b32  	%r70, %r60, %r69;
	or.b32  	%r71, %r70, %r62;
	xor.b32  	%r72, %r66, %r71;
	cvt.u64.u32 	%rd3, %r72;
	mul.wide.u32 	%rd72, %r72, 2;
	add.s64 	%rd73, %rd45, %rd72;
	or.b32  	%r73, %r63, 2048;
	xor.b32  	%r74, %r66, %r73;
	cvt.u64.u32 	%rd4, %r74;
	mul.wide.u32 	%rd74, %r74, 2;
	add.s64 	%rd75, %rd45, %rd74;
	or.b32  	%r75, %r54, 3104;
	xor.b32  	%r76, %r75, %r57;
	or.b32  	%r77, %r60, %r76;
	or.b32  	%r78, %r77, %r62;
	xor.b32  	%r79, %r66, %r78;
	cvt.u64.u32 	%rd5, %r79;
	mul.wide.u32 	%rd76, %r79, 2;
	add.s64 	%rd77, %rd45, %rd76;
	cvt.u32.u64 	%r15, %rd71;
	mov.b32 	%r16, 16;
	// begin inline asm
	cp.async.cg.shared.global [ %r15 + 0 ], [ %rd37 + 0 ], 0x10, %r16;
	// end inline asm
	cvt.u32.u64 	%r17, %rd73;
	// begin inline asm
	cp.async.cg.shared.global [ %r17 + 0 ], [ %rd38 + 0 ], 0x10, %r16;
	// end inline asm
	cvt.u32.u64 	%r19, %rd75;
	// begin inline asm
	cp.async.cg.shared.global [ %r19 + 0 ], [ %rd39 + 0 ], 0x10, %r16;
	// end inline asm
	cvt.u32.u64 	%r21, %rd77;
	// begin inline asm
	cp.async.cg.shared.global [ %r21 + 0 ], [ %rd40 + 0 ], 0x10, %r16;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s64 	%rd41, %rd37, 512;
	add.s64 	%rd42, %rd38, 512;
	add.s64 	%rd43, %rd39, 512;
	add.s64 	%rd44, %rd40, 512;
	bar.sync 	0;
	add.s64 	%rd78, %rd45, 8192;
	add.s64 	%rd79, %rd78, %rd70;
	add.s64 	%rd80, %rd78, %rd72;
	add.s64 	%rd81, %rd78, %rd74;
	add.s64 	%rd82, %rd78, %rd76;
	cvt.u32.u64 	%r23, %rd79;
	// begin inline asm
	cp.async.cg.shared.global [ %r23 + 0 ], [ %rd41 + 0 ], 0x10, %r16;
	// end inline asm
	cvt.u32.u64 	%r25, %rd80;
	// begin inline asm
	cp.async.cg.shared.global [ %r25 + 0 ], [ %rd42 + 0 ], 0x10, %r16;
	// end inline asm
	cvt.u32.u64 	%r27, %rd81;
	// begin inline asm
	cp.async.cg.shared.global [ %r27 + 0 ], [ %rd43 + 0 ], 0x10, %r16;
	// end inline asm
	cvt.u32.u64 	%r29, %rd82;
	// begin inline asm
	cp.async.cg.shared.global [ %r29 + 0 ], [ %rd44 + 0 ], 0x10, %r16;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x1;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r80, %r51, 264;
	and.b32  	%r81, %r52, 528;
	or.b32  	%r82, %r80, %r81;
	and.b32  	%r83, %r55, 1056;
	shl.b32 	%r84, %r59, 8;
	or.b32  	%r85, %r83, %r84;
	or.b32  	%r86, %r85, %r82;
	shr.u32 	%r87, %r7, 1;
	xor.b32  	%r88, %r86, %r87;
	cvt.u64.u32 	%rd6, %r88;
	or.b32  	%r89, %r80, 16;
	xor.b32  	%r90, %r89, %r81;
	or.b32  	%r91, %r84, %r90;
	or.b32  	%r92, %r91, %r83;
	xor.b32  	%r93, %r92, %r87;
	cvt.u64.u32 	%rd7, %r93;
	or.b32  	%r94, %r82, 32;
	xor.b32  	%r95, %r94, %r83;
	or.b32  	%r96, %r95, %r84;
	xor.b32  	%r97, %r96, %r87;
	cvt.u64.u32 	%rd8, %r97;
	or.b32  	%r98, %r80, 48;
	or.b32  	%r99, %r83, %r81;
	xor.b32  	%r100, %r99, %r98;
	or.b32  	%r101, %r100, %r84;
	xor.b32  	%r102, %r101, %r87;
	cvt.u64.u32 	%rd9, %r102;
	or.b32  	%r103, %r86, 64;
	xor.b32  	%r104, %r103, %r87;
	cvt.u64.u32 	%rd10, %r104;
	or.b32  	%r105, %r80, 80;
	xor.b32  	%r106, %r105, %r81;
	or.b32  	%r107, %r84, %r106;
	or.b32  	%r108, %r107, %r83;
	xor.b32  	%r109, %r108, %r87;
	cvt.u64.u32 	%rd11, %r109;
	or.b32  	%r110, %r82, 96;
	xor.b32  	%r111, %r110, %r83;
	or.b32  	%r112, %r111, %r84;
	xor.b32  	%r113, %r112, %r87;
	cvt.u64.u32 	%rd12, %r113;
	or.b32  	%r114, %r80, 112;
	xor.b32  	%r115, %r99, %r114;
	or.b32  	%r116, %r115, %r84;
	xor.b32  	%r117, %r116, %r87;
	cvt.u64.u32 	%rd13, %r117;
	or.b32  	%r118, %r86, 128;
	xor.b32  	%r119, %r118, %r87;
	cvt.u64.u32 	%rd14, %r119;
	or.b32  	%r120, %r80, 144;
	xor.b32  	%r121, %r120, %r81;
	or.b32  	%r122, %r84, %r121;
	or.b32  	%r123, %r122, %r83;
	xor.b32  	%r124, %r123, %r87;
	cvt.u64.u32 	%rd15, %r124;
	or.b32  	%r125, %r82, 160;
	xor.b32  	%r126, %r125, %r83;
	or.b32  	%r127, %r126, %r84;
	xor.b32  	%r128, %r127, %r87;
	cvt.u64.u32 	%rd16, %r128;
	or.b32  	%r129, %r80, 176;
	xor.b32  	%r130, %r99, %r129;
	or.b32  	%r131, %r130, %r84;
	xor.b32  	%r132, %r131, %r87;
	cvt.u64.u32 	%rd17, %r132;
	or.b32  	%r133, %r86, 192;
	xor.b32  	%r134, %r133, %r87;
	cvt.u64.u32 	%rd18, %r134;
	or.b32  	%r135, %r80, 208;
	xor.b32  	%r136, %r135, %r81;
	or.b32  	%r137, %r84, %r136;
	or.b32  	%r138, %r137, %r83;
	xor.b32  	%r139, %r138, %r87;
	cvt.u64.u32 	%rd19, %r139;
	or.b32  	%r140, %r82, 224;
	xor.b32  	%r141, %r140, %r83;
	or.b32  	%r142, %r141, %r84;
	xor.b32  	%r143, %r142, %r87;
	cvt.u64.u32 	%rd20, %r143;
	or.b32  	%r144, %r80, 240;
	xor.b32  	%r145, %r99, %r144;
	or.b32  	%r146, %r145, %r84;
	xor.b32  	%r147, %r146, %r87;
	cvt.u64.u32 	%rd21, %r147;
	or.b32  	%r148, %r62, %r60;
	or.b32  	%r149, %r148, %r57;
	or.b32  	%r150, %r149, %r54;
	mul.wide.u32 	%rd22, %r150, 2;
	add.s64 	%rd162, %rd69, 1024;
	add.s64 	%rd161, %rd67, 1024;
	add.s64 	%rd160, %rd65, 1024;
	add.s64 	%rd159, %rd63, 1024;
	mov.f32 	%f145, 0f00000000;
	mov.b32 	%r382, 1;
	mov.b32 	%r235, 0;
	mov.b32 	%r380, -256;
	shl.b64 	%rd87, %rd6, 1;
	shl.b64 	%rd89, %rd7, 1;
	shl.b64 	%rd91, %rd8, 1;
	shl.b64 	%rd93, %rd9, 1;
	shl.b64 	%rd95, %rd10, 1;
	shl.b64 	%rd97, %rd11, 1;
	shl.b64 	%rd99, %rd12, 1;
	shl.b64 	%rd101, %rd13, 1;
	shl.b64 	%rd103, %rd14, 1;
	shl.b64 	%rd105, %rd15, 1;
	shl.b64 	%rd107, %rd16, 1;
	shl.b64 	%rd109, %rd17, 1;
	shl.b64 	%rd111, %rd18, 1;
	shl.b64 	%rd113, %rd19, 1;
	shl.b64 	%rd115, %rd20, 1;
	shl.b64 	%rd117, %rd21, 1;
	shl.b64 	%rd122, %rd2, 1;
	shl.b64 	%rd124, %rd3, 1;
	shl.b64 	%rd126, %rd4, 1;
	shl.b64 	%rd128, %rd5, 1;
	mov.u64 	%rd163, %rd45;
	mov.u32 	%r381, %r235;
	mov.f32 	%f146, %f145;
	mov.f32 	%f147, %f145;
	mov.f32 	%f148, %f145;
$L__BB1_1:
	add.s32 	%r380, %r380, 256;
	setp.lt.u32 	%p3, %r380, 1536;
	add.s64 	%rd88, %rd163, %rd87;
	cvt.u32.u64 	%r155, %rd88;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r151, %r152, %r153, %r154}, [%r155];
	// end inline asm
	add.s64 	%rd90, %rd163, %rd89;
	cvt.u32.u64 	%r160, %rd90;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r156, %r157, %r158, %r159}, [%r160];
	// end inline asm
	add.s64 	%rd92, %rd163, %rd91;
	cvt.u32.u64 	%r165, %rd92;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r161, %r162, %r163, %r164}, [%r165];
	// end inline asm
	add.s64 	%rd94, %rd163, %rd93;
	cvt.u32.u64 	%r170, %rd94;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r166, %r167, %r168, %r169}, [%r170];
	// end inline asm
	add.s64 	%rd96, %rd163, %rd95;
	cvt.u32.u64 	%r175, %rd96;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r171, %r172, %r173, %r174}, [%r175];
	// end inline asm
	add.s64 	%rd98, %rd163, %rd97;
	cvt.u32.u64 	%r180, %rd98;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r176, %r177, %r178, %r179}, [%r180];
	// end inline asm
	add.s64 	%rd100, %rd163, %rd99;
	cvt.u32.u64 	%r185, %rd100;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r181, %r182, %r183, %r184}, [%r185];
	// end inline asm
	add.s64 	%rd102, %rd163, %rd101;
	cvt.u32.u64 	%r190, %rd102;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r186, %r187, %r188, %r189}, [%r190];
	// end inline asm
	add.s64 	%rd104, %rd163, %rd103;
	cvt.u32.u64 	%r195, %rd104;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r191, %r192, %r193, %r194}, [%r195];
	// end inline asm
	add.s64 	%rd106, %rd163, %rd105;
	cvt.u32.u64 	%r200, %rd106;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r196, %r197, %r198, %r199}, [%r200];
	// end inline asm
	add.s64 	%rd108, %rd163, %rd107;
	cvt.u32.u64 	%r205, %rd108;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r201, %r202, %r203, %r204}, [%r205];
	// end inline asm
	add.s64 	%rd110, %rd163, %rd109;
	cvt.u32.u64 	%r210, %rd110;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r206, %r207, %r208, %r209}, [%r210];
	// end inline asm
	add.s64 	%rd112, %rd163, %rd111;
	cvt.u32.u64 	%r215, %rd112;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r211, %r212, %r213, %r214}, [%r215];
	// end inline asm
	add.s64 	%rd114, %rd163, %rd113;
	cvt.u32.u64 	%r220, %rd114;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r216, %r217, %r218, %r219}, [%r220];
	// end inline asm
	add.s64 	%rd116, %rd163, %rd115;
	cvt.u32.u64 	%r225, %rd116;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r221, %r222, %r223, %r224}, [%r225];
	// end inline asm
	add.s64 	%rd118, %rd163, %rd117;
	cvt.u32.u64 	%r230, %rd118;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r226, %r227, %r228, %r229}, [%r230];
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r151, %r152, %r153, %r154 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r156, %r157, %r158, %r159 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r161, %r162, %r163, %r164 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r166, %r167, %r168, %r169 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r171, %r172, %r173, %r174 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r176, %r177, %r178, %r179 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r181, %r182, %r183, %r184 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r186, %r187, %r188, %r189 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r191, %r192, %r193, %r194 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r196, %r197, %r198, %r199 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r201, %r202, %r203, %r204 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r206, %r207, %r208, %r209 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r211, %r212, %r213, %r214 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r216, %r217, %r218, %r219 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r221, %r222, %r223, %r224 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f145, %f146, %f147, %f148 }, { %r226, %r227, %r228, %r229 }, { %r235, %r235 }, { %f145, %f146, %f147, %f148 };
	// end inline asm
	add.s32 	%r335, %r382, 1;
	setp.lt.s32 	%p4, %r335, 2;
	selp.b32 	%r382, %r335, 0, %p4;
	add.s64 	%rd83, %rd159, %rd22;
	add.s64 	%rd84, %rd160, %rd22;
	add.s64 	%rd85, %rd161, %rd22;
	add.s64 	%rd86, %rd162, %rd22;
	shl.b32 	%r336, %r382, 12;
	mul.wide.s32 	%rd119, %r336, 2;
	add.s64 	%rd121, %rd45, %rd119;
	bar.sync 	0;
	add.s64 	%rd123, %rd121, %rd122;
	add.s64 	%rd125, %rd121, %rd124;
	add.s64 	%rd127, %rd121, %rd126;
	add.s64 	%rd129, %rd121, %rd128;
	selp.b32 	%r328, 16, 0, %p3;
	cvt.u32.u64 	%r327, %rd123;
	// begin inline asm
	cp.async.cg.shared.global [ %r327 + 0 ], [ %rd83 + 0 ], 0x10, %r328;
	// end inline asm
	cvt.u32.u64 	%r329, %rd125;
	// begin inline asm
	cp.async.cg.shared.global [ %r329 + 0 ], [ %rd84 + 0 ], 0x10, %r328;
	// end inline asm
	cvt.u32.u64 	%r331, %rd127;
	// begin inline asm
	cp.async.cg.shared.global [ %r331 + 0 ], [ %rd85 + 0 ], 0x10, %r328;
	// end inline asm
	cvt.u32.u64 	%r333, %rd129;
	// begin inline asm
	cp.async.cg.shared.global [ %r333 + 0 ], [ %rd86 + 0 ], 0x10, %r328;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	add.s32 	%r337, %r381, 1;
	setp.lt.s32 	%p5, %r337, 2;
	selp.b32 	%r381, %r337, 0, %p5;
	// begin inline asm
	cp.async.wait_group 0x1;
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r338, %r381, 12;
	mul.wide.s32 	%rd130, %r338, 2;
	add.s64 	%rd163, %rd45, %rd130;
	add.s64 	%rd162, %rd162, 512;
	add.s64 	%rd161, %rd161, 512;
	add.s64 	%rd160, %rd160, 512;
	add.s64 	%rd159, %rd159, 512;
	setp.lt.u32 	%p6, %r380, 1792;
	@%p6 bra 	$L__BB1_1;
	shl.b32 	%r348, %r2, 3;
	sub.s32 	%r349, %r14, %r348;
	div.s32 	%r350, %r349, %r3;
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	mov.b32 	%r339, %f145;
	// begin inline asm
	cvt.rn.bf16.f32 %rs5, %r339;
	// end inline asm
	mov.b32 	%r340, %f146;
	// begin inline asm
	cvt.rn.bf16.f32 %rs6, %r340;
	// end inline asm
	mov.b32 	%r341, %f147;
	// begin inline asm
	cvt.rn.bf16.f32 %rs7, %r341;
	// end inline asm
	mov.b32 	%r342, %f148;
	// begin inline asm
	cvt.rn.bf16.f32 %rs8, %r342;
	// end inline asm
	shl.b32 	%r351, %r350, 4;
	cvt.s64.s32 	%rd132, %r4;
	cvt.s64.s32 	%rd133, %r351;
	shl.b32 	%r352, %r5, 1;
	and.b32  	%r353, %r352, 14;
	bfe.u32 	%r354, %r5, 3, 3;
	selp.b32 	%r355, 0, 8, %p2;
	or.b32  	%r356, %r354, %r355;
	cvt.u64.u32 	%rd134, %r353;
	cvt.u64.u32 	%rd135, %r356;
	or.b64  	%rd136, %rd132, %rd134;
	or.b64  	%rd137, %rd133, %rd135;
	shl.b64 	%rd138, %rd136, 1;
	add.s64 	%rd139, %rd1, %rd138;
	shl.b64 	%rd140, %rd137, 12;
	add.s64 	%rd131, %rd139, %rd140;
	shl.b32 	%r357, %r5, 5;
	shr.u32 	%r358, %r5, 2;
	or.b32  	%r359, %r358, %r357;
	and.b32  	%r360, %r359, 99;
	shr.u32 	%r361, %r7, 2;
	or.b32  	%r362, %r360, %r361;
	shl.b32 	%r363, %r6, 2;
	or.b32  	%r364, %r362, %r363;
	and.b32  	%r365, %r352, 126;
	selp.b32 	%r366, 0, 128, %p2;
	or.b32  	%r367, %r365, %r366;
	shr.u32 	%r368, %r364, 3;
	add.s32 	%r369, %r368, %r364;
	shl.b32 	%r370, %r369, 1;
	cvt.u64.u32 	%rd141, %r370;
	mov.u64 	%rd142, global_smem;
	add.s64 	%rd143, %rd142, %rd141;
	cvt.u32.u64 	%r343, %rd143;
	mov.pred 	%p7, -1;
	// begin inline asm
	@%p7 st.shared.b16 [ %r343 + 0 ], %rs5;
	// end inline asm
	or.b32  	%r371, %r364, 16;
	shr.u32 	%r372, %r371, 3;
	cvt.u64.u32 	%rd144, %r372;
	cvt.u64.u32 	%rd145, %r364;
	add.s64 	%rd146, %rd144, %rd145;
	shl.b64 	%rd147, %rd146, 1;
	add.s64 	%rd148, %rd142, %rd147;
	cvt.u32.u64 	%r373, %rd148;
	add.s32 	%r344, %r373, 32;
	// begin inline asm
	@%p7 st.shared.b16 [ %r344 + 0 ], %rs6;
	// end inline asm
	cvt.u64.u32 	%rd149, %r368;
	add.s64 	%rd150, %rd145, %rd149;
	shl.b64 	%rd151, %rd150, 1;
	add.s64 	%rd152, %rd142, %rd151;
	cvt.u32.u64 	%r374, %rd152;
	add.s32 	%r345, %r374, 16;
	// begin inline asm
	@%p7 st.shared.b16 [ %r345 + 0 ], %rs7;
	// end inline asm
	and.b32  	%r375, %r372, 30;
	cvt.u64.u32 	%rd153, %r375;
	add.s64 	%rd154, %rd153, %rd145;
	shl.b64 	%rd155, %rd154, 1;
	add.s64 	%rd156, %rd142, %rd155;
	cvt.u32.u64 	%r376, %rd156;
	add.s32 	%r346, %r376, 48;
	// begin inline asm
	@%p7 st.shared.b16 [ %r346 + 0 ], %rs8;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r377, %r367, 3;
	and.b32  	%r378, %r377, 30;
	add.s32 	%r379, %r378, %r367;
	mul.wide.u32 	%rd157, %r379, 2;
	add.s64 	%rd158, %rd142, %rd157;
	ld.shared.u32 	%r347, [%rd158];
	// begin inline asm
	st.global.b32 [ %rd131 + 0 ], { %r347 };
	// end inline asm
	ret;

}
	// .globl	fusion_38
.visible .entry fusion_38(
	.param .u64 .ptr .align 16 fusion_38_param_0,
	.param .u64 .ptr .align 128 fusion_38_param_1,
	.param .u64 .ptr .align 128 fusion_38_param_2,
	.param .u64 .ptr .align 16 fusion_38_param_3,
	.param .u64 .ptr .align 128 fusion_38_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<49>;
	.reg .b32 	%r<104>;
	.reg .f32 	%f<122>;
	.reg .b64 	%rd<43>;

	ld.param.u64 	%rd10, [fusion_38_param_0];
	ld.param.u64 	%rd11, [fusion_38_param_4];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.param.u64 	%rd13, [fusion_38_param_1];
	ld.param.u64 	%rd14, [fusion_38_param_3];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.param.u64 	%rd16, [fusion_38_param_2];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd13;
	cvta.to.global.u64 	%rd7, %rd10;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	mul.wide.s32 	%rd19, %r1, 256;
	and.b64  	%rd20, %rd19, 768;
	mul.wide.s32 	%rd21, %r1, 512;
	and.b64  	%rd22, %rd21, -2048;
	or.b64  	%rd23, %rd22, %rd20;
	shl.b64 	%rd24, %rd23, 1;
	add.s64 	%rd25, %rd17, %rd24;
	mov.u32 	%r81, %tid.x;
	and.b32  	%r82, %r81, 31;
	shl.b32 	%r83, %r81, 2;
	and.b32  	%r84, %r83, 124;
	setp.lt.u32 	%p4, %r81, 32;
	selp.b32 	%r85, 0, 128, %p4;
	or.b32  	%r86, %r84, %r85;
	mul.wide.u32 	%rd26, %r86, 2;
	add.s64 	%rd27, %rd25, %rd26;
	add.s64 	%rd1, %rd27, 2048;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	shl.b64 	%rd28, %rd19, 1;
	add.s64 	%rd29, %rd18, %rd28;
	add.s64 	%rd2, %rd29, %rd26;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.rn.f32 	%f9, %f1, %f5;
	add.rn.f32 	%f10, %f2, %f6;
	add.rn.f32 	%f11, %f3, %f7;
	add.rn.f32 	%f12, %f4, %f8;
	shl.b64 	%rd30, %rd22, 1;
	add.s64 	%rd31, %rd17, %rd30;
	shl.b32 	%r87, %r81, 3;
	and.b32  	%r88, %r87, 248;
	selp.b32 	%r89, 0, 256, %p4;
	or.b32  	%r90, %r88, %r89;
	mul.wide.u32 	%rd32, %r90, 2;
	add.s64 	%rd33, %rd31, %rd32;
	add.s64 	%rd3, %rd33, 2048;
	add.s64 	%rd4, %rd33, 3072;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	ld.global.v4.b32 { %r14, %r15, %r16, %r17 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	mov.b32 	{%rs13, %rs14}, %r16;
	mov.b32 	{%rs15, %rs16}, %r17;
	// begin inline asm
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v4.b32 { %r18, %r19, %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r18;
	mov.b32 	{%rs19, %rs20}, %r19;
	mov.b32 	{%rs21, %rs22}, %r20;
	mov.b32 	{%rs23, %rs24}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs9;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs10;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs11;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs12;
	// end inline asm
	mov.b32 	%f16, %r25;
	// begin inline asm
	cvt.f32.bf16 %r26, %rs13;
	// end inline asm
	mov.b32 	%f17, %r26;
	// begin inline asm
	cvt.f32.bf16 %r27, %rs14;
	// end inline asm
	mov.b32 	%f18, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs15;
	// end inline asm
	mov.b32 	%f19, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs16;
	// end inline asm
	mov.b32 	%f20, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs17;
	// end inline asm
	mov.b32 	%f21, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs18;
	// end inline asm
	mov.b32 	%f22, %r31;
	// begin inline asm
	cvt.f32.bf16 %r32, %rs19;
	// end inline asm
	mov.b32 	%f23, %r32;
	// begin inline asm
	cvt.f32.bf16 %r33, %rs20;
	// end inline asm
	mov.b32 	%f24, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs21;
	// end inline asm
	mov.b32 	%f25, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs22;
	// end inline asm
	mov.b32 	%f26, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs23;
	// end inline asm
	mov.b32 	%f27, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs24;
	// end inline asm
	mov.b32 	%f28, %r37;
	add.s64 	%rd34, %rd18, %rd22;
	add.s64 	%rd5, %rd34, %rd32;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	mov.u32 %r41, 0x0;
	ld.global.v4.b32 { %r38, %r39, %r40, %r41 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r38;
	mov.b32 	{%rs27, %rs28}, %r39;
	mov.b32 	{%rs29, %rs30}, %r40;
	mov.b32 	{%rs31, %rs32}, %r41;
	// begin inline asm
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	mov.u32 %r45, 0x0;
	ld.global.v4.b32 { %r42, %r43, %r44, %r45 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r42;
	mov.b32 	{%rs35, %rs36}, %r43;
	mov.b32 	{%rs37, %rs38}, %r44;
	mov.b32 	{%rs39, %rs40}, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs25;
	// end inline asm
	mov.b32 	%f29, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs26;
	// end inline asm
	mov.b32 	%f30, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs27;
	// end inline asm
	mov.b32 	%f31, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs28;
	// end inline asm
	mov.b32 	%f32, %r49;
	// begin inline asm
	cvt.f32.bf16 %r50, %rs29;
	// end inline asm
	mov.b32 	%f33, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs30;
	// end inline asm
	mov.b32 	%f34, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs31;
	// end inline asm
	mov.b32 	%f35, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs32;
	// end inline asm
	mov.b32 	%f36, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs33;
	// end inline asm
	mov.b32 	%f37, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs34;
	// end inline asm
	mov.b32 	%f38, %r55;
	// begin inline asm
	cvt.f32.bf16 %r56, %rs35;
	// end inline asm
	mov.b32 	%f39, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs36;
	// end inline asm
	mov.b32 	%f40, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs37;
	// end inline asm
	mov.b32 	%f41, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs38;
	// end inline asm
	mov.b32 	%f42, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs39;
	// end inline asm
	mov.b32 	%f43, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs40;
	// end inline asm
	mov.b32 	%f44, %r61;
	add.rn.f32 	%f45, %f13, %f29;
	add.rn.f32 	%f46, %f14, %f30;
	add.rn.f32 	%f47, %f15, %f31;
	add.rn.f32 	%f48, %f16, %f32;
	add.rn.f32 	%f49, %f17, %f33;
	add.rn.f32 	%f50, %f18, %f34;
	add.rn.f32 	%f51, %f19, %f35;
	add.rn.f32 	%f52, %f20, %f36;
	add.rn.f32 	%f53, %f21, %f37;
	add.rn.f32 	%f54, %f22, %f38;
	add.rn.f32 	%f55, %f23, %f39;
	add.rn.f32 	%f56, %f24, %f40;
	add.rn.f32 	%f57, %f25, %f41;
	add.rn.f32 	%f58, %f26, %f42;
	add.rn.f32 	%f59, %f27, %f43;
	add.rn.f32 	%f60, %f28, %f44;
	mul.rn.f32 	%f61, %f45, %f45;
	mul.rn.f32 	%f62, %f46, %f46;
	mul.rn.f32 	%f63, %f47, %f47;
	mul.rn.f32 	%f64, %f48, %f48;
	mul.rn.f32 	%f65, %f49, %f49;
	mul.rn.f32 	%f66, %f50, %f50;
	mul.rn.f32 	%f67, %f51, %f51;
	mul.rn.f32 	%f68, %f52, %f52;
	mul.rn.f32 	%f69, %f53, %f53;
	mul.rn.f32 	%f70, %f54, %f54;
	mul.rn.f32 	%f71, %f55, %f55;
	mul.rn.f32 	%f72, %f56, %f56;
	mul.rn.f32 	%f73, %f57, %f57;
	mul.rn.f32 	%f74, %f58, %f58;
	mul.rn.f32 	%f75, %f59, %f59;
	mul.rn.f32 	%f76, %f60, %f60;
	add.rn.f32 	%f77, %f61, %f62;
	add.rn.f32 	%f78, %f77, %f63;
	add.rn.f32 	%f79, %f78, %f64;
	add.rn.f32 	%f80, %f79, %f65;
	add.rn.f32 	%f81, %f80, %f66;
	add.rn.f32 	%f82, %f81, %f67;
	add.rn.f32 	%f83, %f82, %f68;
	add.rn.f32 	%f84, %f83, %f69;
	add.rn.f32 	%f85, %f84, %f70;
	add.rn.f32 	%f86, %f85, %f71;
	add.rn.f32 	%f87, %f86, %f72;
	add.rn.f32 	%f88, %f87, %f73;
	add.rn.f32 	%f89, %f88, %f74;
	add.rn.f32 	%f90, %f89, %f75;
	add.rn.f32 	%f91, %f90, %f76;
	mov.b32 	%r91, %f91;
	shfl.sync.bfly.b32	%r92, %r91, 16, 31, -1;
	mov.b32 	%f92, %r92;
	add.rn.f32 	%f93, %f91, %f92;
	mov.b32 	%r93, %f93;
	shfl.sync.bfly.b32	%r94, %r93, 8, 31, -1;
	mov.b32 	%f94, %r94;
	add.rn.f32 	%f95, %f93, %f94;
	mov.b32 	%r95, %f95;
	shfl.sync.bfly.b32	%r96, %r95, 4, 31, -1;
	mov.b32 	%f96, %r96;
	add.rn.f32 	%f97, %f95, %f96;
	mov.b32 	%r97, %f97;
	shfl.sync.bfly.b32	%r98, %r97, 2, 31, -1;
	mov.b32 	%f98, %r98;
	add.rn.f32 	%f99, %f97, %f98;
	mov.b32 	%r99, %f99;
	shfl.sync.bfly.b32	%r100, %r99, 1, 31, -1;
	mov.b32 	%f100, %r100;
	add.rn.f32 	%f101, %f99, %f100;
	setp.eq.s32 	%p1, %r82, 0;
	shr.u32 	%r101, %r81, 3;
	and.b32  	%r102, %r101, 4;
	cvt.u64.u32 	%rd35, %r102;
	mov.u64 	%rd36, global_smem;
	add.s64 	%rd37, %rd36, %rd35;
	mov.b32 	%r63, %f101;
	cvt.u32.u64 	%r62, %rd37;
	// begin inline asm
	@%p1 st.shared.b32 [ %r62 + 0 ], %r63;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r81, 2;
	cvt.u64.u32 	%rd38, %r83;
	add.s64 	%rd39, %rd36, %rd38;
	cvt.u32.u64 	%r65, %rd39;
	// begin inline asm
	@%p2 ld.shared.b32 %r64, [ %r65 + 0 ];
	// end inline asm
	mov.b32 	%f102, %r64;
	shfl.sync.bfly.b32	%r103, %r64, 1, 31, -1;
	mov.b32 	%f103, %r103;
	add.rn.f32 	%f104, %f102, %f103;
	setp.eq.s32 	%p3, %r81, 0;
	mov.b32 	%r67, %f104;
	// begin inline asm
	@%p3 st.shared.b32 [ %r65 + 0 ], %r67;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f105, [global_smem];
	mul.rn.f32 	%f106, %f105, 0f3A800000;
	// begin inline asm
	mov.u32 %r68, 0x0;
	ld.global.b32 { %r68 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f107, %r68;
	add.rn.f32 	%f108, %f106, %f107;
	rsqrt.approx.f32 	%f109, %f108;
	mul.rn.f32 	%f110, %f9, %f109;
	mul.rn.f32 	%f111, %f10, %f109;
	mul.rn.f32 	%f112, %f11, %f109;
	mul.rn.f32 	%f113, %f12, %f109;
	shl.b64 	%rd40, %rd20, 1;
	add.s64 	%rd41, %rd15, %rd40;
	add.s64 	%rd8, %rd41, %rd26;
	// begin inline asm
	mov.u32 %r69, 0x0;
	mov.u32 %r70, 0x0;
	ld.global.v2.b32 { %r69, %r70 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r69;
	mov.b32 	{%rs43, %rs44}, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs41;
	// end inline asm
	mov.b32 	%f114, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs42;
	// end inline asm
	mov.b32 	%f115, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs43;
	// end inline asm
	mov.b32 	%f116, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs44;
	// end inline asm
	mov.b32 	%f117, %r74;
	mul.rn.f32 	%f118, %f110, %f114;
	mul.rn.f32 	%f119, %f111, %f115;
	mul.rn.f32 	%f120, %f112, %f116;
	mul.rn.f32 	%f121, %f113, %f117;
	mov.b32 	%r75, %f118;
	// begin inline asm
	cvt.rn.bf16.f32 %rs45, %r75;
	// end inline asm
	mov.b32 	%r76, %f119;
	// begin inline asm
	cvt.rn.bf16.f32 %rs46, %r76;
	// end inline asm
	mov.b32 	%r77, %f120;
	// begin inline asm
	cvt.rn.bf16.f32 %rs47, %r77;
	// end inline asm
	mov.b32 	%r78, %f121;
	// begin inline asm
	cvt.rn.bf16.f32 %rs48, %r78;
	// end inline asm
	add.s64 	%rd42, %rd12, %rd28;
	add.s64 	%rd9, %rd42, %rd26;
	mov.b32 	%r79, {%rs45, %rs46};
	mov.b32 	%r80, {%rs47, %rs48};
	// begin inline asm
	st.global.v2.b32 [ %rd9 + 0 ], { %r79, %r80 };
	// end inline asm
	ret;

}
	// .globl	loop_convert_fusion_1
.visible .entry loop_convert_fusion_1(
	.param .u64 .ptr .align 128 loop_convert_fusion_1_param_0,
	.param .u64 .ptr .align 128 loop_convert_fusion_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [loop_convert_fusion_1_param_0];
	ld.param.u64 	%rd2, [loop_convert_fusion_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	cvt.u16.u32 	%rs1, %r2;
	mul.hi.u16 	%rs2, %rs1, -21845;
	shr.u16 	%rs3, %rs2, 4;
	mul.lo.s16 	%rs4, %rs3, 24;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 7;
	cvt.u32.u16 	%r3, %rs6;
	or.b32  	%r4, %r1, %r3;
	mul.wide.u16 	%r5, %rs3, 6144;
	add.s32 	%r6, %r4, %r5;
	mul.wide.u32 	%rd5, %r6, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs7, [%rd6];
	cvt.f32.bf16 	%f1, %rs7;
	mul.rn.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.f32 	%f3, %f2;
	cvt.rn.bf16.f32 	%rs8, %f3;
	cvt.f32.bf16 	%f4, %rs8;
	add.rn.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.f32 	%f6, %f5;
	ld.global.nc.u16 	%rs9, [%rd6+6144];
	mul.rn.f32 	%f7, %f6, %f1;
	cvt.f32.bf16 	%f8, %rs9;
	mul.rn.f32 	%f9, %f7, %f8;
	cvt.rn.bf16.f32 	%rs10, %f9;
	shl.b32 	%r7, %r2, 7;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd7, %r8, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs10;
	ret;

}
	// .globl	fusion_36
.visible .entry fusion_36(
	.param .u64 .ptr .align 16 fusion_36_param_0,
	.param .u64 .ptr .align 16 fusion_36_param_1,
	.param .u64 .ptr .align 128 fusion_36_param_2,
	.param .u64 .ptr .align 128 fusion_36_param_3,
	.param .u64 .ptr .align 128 fusion_36_param_4,
	.param .u64 .ptr .align 128 fusion_36_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<89>;
	.reg .b32 	%r<164>;
	.reg .f32 	%f<202>;
	.reg .b64 	%rd<52>;

	ld.param.u64 	%rd16, [fusion_36_param_0];
	ld.param.u64 	%rd17, [fusion_36_param_5];
	cvta.to.global.u64 	%rd18, %rd17;
	ld.param.u64 	%rd19, [fusion_36_param_1];
	ld.param.u64 	%rd20, [fusion_36_param_4];
	cvta.to.global.u64 	%rd21, %rd20;
	ld.param.u64 	%rd22, [fusion_36_param_2];
	ld.param.u64 	%rd23, [fusion_36_param_3];
	cvta.to.global.u64 	%rd24, %rd23;
	cvta.to.global.u64 	%rd25, %rd22;
	cvta.to.global.u64 	%rd26, %rd19;
	cvta.to.global.u64 	%rd13, %rd16;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	cvt.s64.s32 	%rd27, %r1;
	shr.u64 	%rd28, %rd27, 2;
	mul.wide.s32 	%rd29, %r1, 256;
	and.b64  	%rd30, %rd29, 768;
	shl.b64 	%rd31, %rd28, 11;
	or.b64  	%rd32, %rd30, %rd31;
	shl.b64 	%rd33, %rd32, 1;
	add.s64 	%rd34, %rd24, %rd33;
	mov.u32 	%r141, %tid.x;
	and.b32  	%r142, %r141, 31;
	shl.b32 	%r143, %r141, 2;
	and.b32  	%r144, %r143, 124;
	setp.lt.u32 	%p4, %r141, 32;
	selp.b32 	%r145, 0, 128, %p4;
	or.b32  	%r146, %r144, %r145;
	mul.wide.u32 	%rd35, %r146, 2;
	add.s64 	%rd1, %rd34, %rd35;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	shl.b64 	%rd36, %rd29, 1;
	add.s64 	%rd37, %rd21, %rd36;
	add.s64 	%rd2, %rd37, %rd35;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.s64 	%rd3, %rd1, 2048;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	ld.global.v2.b32 { %r14, %r15 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs9;
	// end inline asm
	mov.b32 	%f9, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs10;
	// end inline asm
	mov.b32 	%f10, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs11;
	// end inline asm
	mov.b32 	%f11, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs12;
	// end inline asm
	mov.b32 	%f12, %r19;
	add.s64 	%rd38, %rd25, %rd36;
	add.s64 	%rd4, %rd38, %rd35;
	// begin inline asm
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v2.b32 { %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs13, %rs14}, %r20;
	mov.b32 	{%rs15, %rs16}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	add.rn.f32 	%f17, %f9, %f13;
	add.rn.f32 	%f18, %f10, %f14;
	add.rn.f32 	%f19, %f11, %f15;
	add.rn.f32 	%f20, %f12, %f16;
	add.rn.f32 	%f21, %f5, %f17;
	add.rn.f32 	%f22, %f6, %f18;
	add.rn.f32 	%f23, %f7, %f19;
	add.rn.f32 	%f24, %f8, %f20;
	add.rn.f32 	%f25, %f1, %f21;
	add.rn.f32 	%f26, %f2, %f22;
	add.rn.f32 	%f27, %f3, %f23;
	add.rn.f32 	%f28, %f4, %f24;
	shl.b64 	%rd39, %rd28, 12;
	add.s64 	%rd40, %rd24, %rd39;
	shl.b32 	%r147, %r141, 3;
	and.b32  	%r148, %r147, 248;
	selp.b32 	%r149, 0, 256, %p4;
	or.b32  	%r150, %r148, %r149;
	mul.wide.u32 	%rd41, %r150, 2;
	add.s64 	%rd5, %rd40, %rd41;
	add.s64 	%rd6, %rd5, 1024;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	mov.b32 	{%rs21, %rs22}, %r28;
	mov.b32 	{%rs23, %rs24}, %r29;
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	ld.global.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r30;
	mov.b32 	{%rs27, %rs28}, %r31;
	mov.b32 	{%rs29, %rs30}, %r32;
	mov.b32 	{%rs31, %rs32}, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs17;
	// end inline asm
	mov.b32 	%f29, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs18;
	// end inline asm
	mov.b32 	%f30, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs19;
	// end inline asm
	mov.b32 	%f31, %r36;
	// begin inline asm
	cvt.f32.bf16 %r37, %rs20;
	// end inline asm
	mov.b32 	%f32, %r37;
	// begin inline asm
	cvt.f32.bf16 %r38, %rs21;
	// end inline asm
	mov.b32 	%f33, %r38;
	// begin inline asm
	cvt.f32.bf16 %r39, %rs22;
	// end inline asm
	mov.b32 	%f34, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs23;
	// end inline asm
	mov.b32 	%f35, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs24;
	// end inline asm
	mov.b32 	%f36, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs25;
	// end inline asm
	mov.b32 	%f37, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs26;
	// end inline asm
	mov.b32 	%f38, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs27;
	// end inline asm
	mov.b32 	%f39, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs28;
	// end inline asm
	mov.b32 	%f40, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs29;
	// end inline asm
	mov.b32 	%f41, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs30;
	// end inline asm
	mov.b32 	%f42, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs31;
	// end inline asm
	mov.b32 	%f43, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs32;
	// end inline asm
	mov.b32 	%f44, %r49;
	add.s64 	%rd42, %rd21, %rd31;
	add.s64 	%rd7, %rd42, %rd41;
	add.s64 	%rd8, %rd7, 1024;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r50;
	mov.b32 	{%rs35, %rs36}, %r51;
	mov.b32 	{%rs37, %rs38}, %r52;
	mov.b32 	{%rs39, %rs40}, %r53;
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r54;
	mov.b32 	{%rs43, %rs44}, %r55;
	mov.b32 	{%rs45, %rs46}, %r56;
	mov.b32 	{%rs47, %rs48}, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs33;
	// end inline asm
	mov.b32 	%f45, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs34;
	// end inline asm
	mov.b32 	%f46, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs35;
	// end inline asm
	mov.b32 	%f47, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs36;
	// end inline asm
	mov.b32 	%f48, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs37;
	// end inline asm
	mov.b32 	%f49, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs38;
	// end inline asm
	mov.b32 	%f50, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs39;
	// end inline asm
	mov.b32 	%f51, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs40;
	// end inline asm
	mov.b32 	%f52, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs41;
	// end inline asm
	mov.b32 	%f53, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs42;
	// end inline asm
	mov.b32 	%f54, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs43;
	// end inline asm
	mov.b32 	%f55, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs44;
	// end inline asm
	mov.b32 	%f56, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs45;
	// end inline asm
	mov.b32 	%f57, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs46;
	// end inline asm
	mov.b32 	%f58, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs47;
	// end inline asm
	mov.b32 	%f59, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs48;
	// end inline asm
	mov.b32 	%f60, %r73;
	add.s64 	%rd9, %rd5, 2048;
	add.s64 	%rd10, %rd5, 3072;
	// begin inline asm
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	ld.global.v4.b32 { %r74, %r75, %r76, %r77 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r74;
	mov.b32 	{%rs51, %rs52}, %r75;
	mov.b32 	{%rs53, %rs54}, %r76;
	mov.b32 	{%rs55, %rs56}, %r77;
	// begin inline asm
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	ld.global.v4.b32 { %r78, %r79, %r80, %r81 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r78;
	mov.b32 	{%rs59, %rs60}, %r79;
	mov.b32 	{%rs61, %rs62}, %r80;
	mov.b32 	{%rs63, %rs64}, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs49;
	// end inline asm
	mov.b32 	%f61, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs50;
	// end inline asm
	mov.b32 	%f62, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs51;
	// end inline asm
	mov.b32 	%f63, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs52;
	// end inline asm
	mov.b32 	%f64, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs53;
	// end inline asm
	mov.b32 	%f65, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs54;
	// end inline asm
	mov.b32 	%f66, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs55;
	// end inline asm
	mov.b32 	%f67, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs56;
	// end inline asm
	mov.b32 	%f68, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs57;
	// end inline asm
	mov.b32 	%f69, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs58;
	// end inline asm
	mov.b32 	%f70, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs59;
	// end inline asm
	mov.b32 	%f71, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs60;
	// end inline asm
	mov.b32 	%f72, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs61;
	// end inline asm
	mov.b32 	%f73, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs62;
	// end inline asm
	mov.b32 	%f74, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs63;
	// end inline asm
	mov.b32 	%f75, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs64;
	// end inline asm
	mov.b32 	%f76, %r97;
	add.s64 	%rd43, %rd25, %rd31;
	add.s64 	%rd11, %rd43, %rd41;
	add.s64 	%rd12, %rd11, 1024;
	// begin inline asm
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	ld.global.v4.b32 { %r98, %r99, %r100, %r101 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs65, %rs66}, %r98;
	mov.b32 	{%rs67, %rs68}, %r99;
	mov.b32 	{%rs69, %rs70}, %r100;
	mov.b32 	{%rs71, %rs72}, %r101;
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	ld.global.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs73, %rs74}, %r102;
	mov.b32 	{%rs75, %rs76}, %r103;
	mov.b32 	{%rs77, %rs78}, %r104;
	mov.b32 	{%rs79, %rs80}, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs65;
	// end inline asm
	mov.b32 	%f77, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs66;
	// end inline asm
	mov.b32 	%f78, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs67;
	// end inline asm
	mov.b32 	%f79, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs68;
	// end inline asm
	mov.b32 	%f80, %r109;
	// begin inline asm
	cvt.f32.bf16 %r110, %rs69;
	// end inline asm
	mov.b32 	%f81, %r110;
	// begin inline asm
	cvt.f32.bf16 %r111, %rs70;
	// end inline asm
	mov.b32 	%f82, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs71;
	// end inline asm
	mov.b32 	%f83, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs72;
	// end inline asm
	mov.b32 	%f84, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs73;
	// end inline asm
	mov.b32 	%f85, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs74;
	// end inline asm
	mov.b32 	%f86, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs75;
	// end inline asm
	mov.b32 	%f87, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs76;
	// end inline asm
	mov.b32 	%f88, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs77;
	// end inline asm
	mov.b32 	%f89, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs78;
	// end inline asm
	mov.b32 	%f90, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs79;
	// end inline asm
	mov.b32 	%f91, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs80;
	// end inline asm
	mov.b32 	%f92, %r121;
	add.rn.f32 	%f93, %f61, %f77;
	add.rn.f32 	%f94, %f62, %f78;
	add.rn.f32 	%f95, %f63, %f79;
	add.rn.f32 	%f96, %f64, %f80;
	add.rn.f32 	%f97, %f65, %f81;
	add.rn.f32 	%f98, %f66, %f82;
	add.rn.f32 	%f99, %f67, %f83;
	add.rn.f32 	%f100, %f68, %f84;
	add.rn.f32 	%f101, %f69, %f85;
	add.rn.f32 	%f102, %f70, %f86;
	add.rn.f32 	%f103, %f71, %f87;
	add.rn.f32 	%f104, %f72, %f88;
	add.rn.f32 	%f105, %f73, %f89;
	add.rn.f32 	%f106, %f74, %f90;
	add.rn.f32 	%f107, %f75, %f91;
	add.rn.f32 	%f108, %f76, %f92;
	add.rn.f32 	%f109, %f45, %f93;
	add.rn.f32 	%f110, %f46, %f94;
	add.rn.f32 	%f111, %f47, %f95;
	add.rn.f32 	%f112, %f48, %f96;
	add.rn.f32 	%f113, %f49, %f97;
	add.rn.f32 	%f114, %f50, %f98;
	add.rn.f32 	%f115, %f51, %f99;
	add.rn.f32 	%f116, %f52, %f100;
	add.rn.f32 	%f117, %f53, %f101;
	add.rn.f32 	%f118, %f54, %f102;
	add.rn.f32 	%f119, %f55, %f103;
	add.rn.f32 	%f120, %f56, %f104;
	add.rn.f32 	%f121, %f57, %f105;
	add.rn.f32 	%f122, %f58, %f106;
	add.rn.f32 	%f123, %f59, %f107;
	add.rn.f32 	%f124, %f60, %f108;
	add.rn.f32 	%f125, %f29, %f109;
	add.rn.f32 	%f126, %f30, %f110;
	add.rn.f32 	%f127, %f31, %f111;
	add.rn.f32 	%f128, %f32, %f112;
	add.rn.f32 	%f129, %f33, %f113;
	add.rn.f32 	%f130, %f34, %f114;
	add.rn.f32 	%f131, %f35, %f115;
	add.rn.f32 	%f132, %f36, %f116;
	add.rn.f32 	%f133, %f37, %f117;
	add.rn.f32 	%f134, %f38, %f118;
	add.rn.f32 	%f135, %f39, %f119;
	add.rn.f32 	%f136, %f40, %f120;
	add.rn.f32 	%f137, %f41, %f121;
	add.rn.f32 	%f138, %f42, %f122;
	add.rn.f32 	%f139, %f43, %f123;
	add.rn.f32 	%f140, %f44, %f124;
	mul.rn.f32 	%f141, %f125, %f125;
	mul.rn.f32 	%f142, %f126, %f126;
	mul.rn.f32 	%f143, %f127, %f127;
	mul.rn.f32 	%f144, %f128, %f128;
	mul.rn.f32 	%f145, %f129, %f129;
	mul.rn.f32 	%f146, %f130, %f130;
	mul.rn.f32 	%f147, %f131, %f131;
	mul.rn.f32 	%f148, %f132, %f132;
	mul.rn.f32 	%f149, %f133, %f133;
	mul.rn.f32 	%f150, %f134, %f134;
	mul.rn.f32 	%f151, %f135, %f135;
	mul.rn.f32 	%f152, %f136, %f136;
	mul.rn.f32 	%f153, %f137, %f137;
	mul.rn.f32 	%f154, %f138, %f138;
	mul.rn.f32 	%f155, %f139, %f139;
	mul.rn.f32 	%f156, %f140, %f140;
	add.rn.f32 	%f157, %f141, %f142;
	add.rn.f32 	%f158, %f157, %f143;
	add.rn.f32 	%f159, %f158, %f144;
	add.rn.f32 	%f160, %f159, %f145;
	add.rn.f32 	%f161, %f160, %f146;
	add.rn.f32 	%f162, %f161, %f147;
	add.rn.f32 	%f163, %f162, %f148;
	add.rn.f32 	%f164, %f163, %f149;
	add.rn.f32 	%f165, %f164, %f150;
	add.rn.f32 	%f166, %f165, %f151;
	add.rn.f32 	%f167, %f166, %f152;
	add.rn.f32 	%f168, %f167, %f153;
	add.rn.f32 	%f169, %f168, %f154;
	add.rn.f32 	%f170, %f169, %f155;
	add.rn.f32 	%f171, %f170, %f156;
	mov.b32 	%r151, %f171;
	shfl.sync.bfly.b32	%r152, %r151, 16, 31, -1;
	mov.b32 	%f172, %r152;
	add.rn.f32 	%f173, %f171, %f172;
	mov.b32 	%r153, %f173;
	shfl.sync.bfly.b32	%r154, %r153, 8, 31, -1;
	mov.b32 	%f174, %r154;
	add.rn.f32 	%f175, %f173, %f174;
	mov.b32 	%r155, %f175;
	shfl.sync.bfly.b32	%r156, %r155, 4, 31, -1;
	mov.b32 	%f176, %r156;
	add.rn.f32 	%f177, %f175, %f176;
	mov.b32 	%r157, %f177;
	shfl.sync.bfly.b32	%r158, %r157, 2, 31, -1;
	mov.b32 	%f178, %r158;
	add.rn.f32 	%f179, %f177, %f178;
	mov.b32 	%r159, %f179;
	shfl.sync.bfly.b32	%r160, %r159, 1, 31, -1;
	mov.b32 	%f180, %r160;
	add.rn.f32 	%f181, %f179, %f180;
	setp.eq.s32 	%p1, %r142, 0;
	shr.u32 	%r161, %r141, 3;
	and.b32  	%r162, %r161, 4;
	cvt.u64.u32 	%rd44, %r162;
	mov.u64 	%rd45, global_smem;
	add.s64 	%rd46, %rd45, %rd44;
	mov.b32 	%r123, %f181;
	cvt.u32.u64 	%r122, %rd46;
	// begin inline asm
	@%p1 st.shared.b32 [ %r122 + 0 ], %r123;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r141, 2;
	cvt.u64.u32 	%rd47, %r143;
	add.s64 	%rd48, %rd45, %rd47;
	cvt.u32.u64 	%r125, %rd48;
	// begin inline asm
	@%p2 ld.shared.b32 %r124, [ %r125 + 0 ];
	// end inline asm
	mov.b32 	%f182, %r124;
	shfl.sync.bfly.b32	%r163, %r124, 1, 31, -1;
	mov.b32 	%f183, %r163;
	add.rn.f32 	%f184, %f182, %f183;
	setp.eq.s32 	%p3, %r141, 0;
	mov.b32 	%r127, %f184;
	// begin inline asm
	@%p3 st.shared.b32 [ %r125 + 0 ], %r127;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f185, [global_smem];
	mul.rn.f32 	%f186, %f185, 0f3A800000;
	// begin inline asm
	mov.u32 %r128, 0x0;
	ld.global.b32 { %r128 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	%f187, %r128;
	add.rn.f32 	%f188, %f186, %f187;
	rsqrt.approx.f32 	%f189, %f188;
	mul.rn.f32 	%f190, %f25, %f189;
	mul.rn.f32 	%f191, %f26, %f189;
	mul.rn.f32 	%f192, %f27, %f189;
	mul.rn.f32 	%f193, %f28, %f189;
	shl.b64 	%rd49, %rd30, 1;
	add.s64 	%rd50, %rd26, %rd49;
	add.s64 	%rd14, %rd50, %rd35;
	// begin inline asm
	mov.u32 %r129, 0x0;
	mov.u32 %r130, 0x0;
	ld.global.v2.b32 { %r129, %r130 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs81, %rs82}, %r129;
	mov.b32 	{%rs83, %rs84}, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs81;
	// end inline asm
	mov.b32 	%f194, %r131;
	// begin inline asm
	cvt.f32.bf16 %r132, %rs82;
	// end inline asm
	mov.b32 	%f195, %r132;
	// begin inline asm
	cvt.f32.bf16 %r133, %rs83;
	// end inline asm
	mov.b32 	%f196, %r133;
	// begin inline asm
	cvt.f32.bf16 %r134, %rs84;
	// end inline asm
	mov.b32 	%f197, %r134;
	mul.rn.f32 	%f198, %f190, %f194;
	mul.rn.f32 	%f199, %f191, %f195;
	mul.rn.f32 	%f200, %f192, %f196;
	mul.rn.f32 	%f201, %f193, %f197;
	mov.b32 	%r135, %f198;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r135;
	// end inline asm
	mov.b32 	%r136, %f199;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r136;
	// end inline asm
	mov.b32 	%r137, %f200;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r137;
	// end inline asm
	mov.b32 	%r138, %f201;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r138;
	// end inline asm
	add.s64 	%rd51, %rd18, %rd36;
	add.s64 	%rd15, %rd51, %rd35;
	mov.b32 	%r139, {%rs85, %rs86};
	mov.b32 	%r140, {%rs87, %rs88};
	// begin inline asm
	st.global.v2.b32 [ %rd15 + 0 ], { %r139, %r140 };
	// end inline asm
	ret;

}
	// .globl	fusion_34
.visible .entry fusion_34(
	.param .u64 .ptr .align 16 fusion_34_param_0,
	.param .u64 .ptr .align 128 fusion_34_param_1,
	.param .u64 .ptr .align 16 fusion_34_param_2,
	.param .u64 .ptr .align 128 fusion_34_param_3,
	.param .u64 .ptr .align 128 fusion_34_param_4,
	.param .u64 .ptr .align 128 fusion_34_param_5,
	.param .u64 .ptr .align 128 fusion_34_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<109>;
	.reg .b32 	%r<194>;
	.reg .f32 	%f<242>;
	.reg .b64 	%rd<59>;

	ld.param.u64 	%rd19, [fusion_34_param_0];
	ld.param.u64 	%rd20, [fusion_34_param_6];
	cvta.to.global.u64 	%rd21, %rd20;
	ld.param.u64 	%rd22, [fusion_34_param_1];
	ld.param.u64 	%rd23, [fusion_34_param_5];
	cvta.to.global.u64 	%rd24, %rd23;
	ld.param.u64 	%rd25, [fusion_34_param_2];
	ld.param.u64 	%rd26, [fusion_34_param_4];
	cvta.to.global.u64 	%rd27, %rd26;
	ld.param.u64 	%rd28, [fusion_34_param_3];
	cvta.to.global.u64 	%rd29, %rd28;
	cvta.to.global.u64 	%rd30, %rd25;
	cvta.to.global.u64 	%rd31, %rd22;
	cvta.to.global.u64 	%rd16, %rd19;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	cvt.s64.s32 	%rd32, %r1;
	shr.u64 	%rd33, %rd32, 2;
	mul.wide.s32 	%rd34, %r1, 256;
	and.b64  	%rd35, %rd34, 768;
	shl.b64 	%rd36, %rd34, 1;
	add.s64 	%rd37, %rd31, %rd36;
	mov.u32 	%r171, %tid.x;
	and.b32  	%r172, %r171, 31;
	shl.b32 	%r173, %r171, 2;
	and.b32  	%r174, %r173, 124;
	setp.lt.u32 	%p4, %r171, 32;
	selp.b32 	%r175, 0, 128, %p4;
	or.b32  	%r176, %r174, %r175;
	mul.wide.u32 	%rd38, %r176, 2;
	add.s64 	%rd1, %rd37, %rd38;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	shl.b64 	%rd39, %rd33, 11;
	or.b64  	%rd40, %rd35, %rd39;
	shl.b64 	%rd41, %rd40, 1;
	add.s64 	%rd42, %rd27, %rd41;
	add.s64 	%rd2, %rd42, %rd38;
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	ld.global.v2.b32 { %r8, %r9 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	{%rs5, %rs6}, %r8;
	mov.b32 	{%rs7, %rs8}, %r9;
	// begin inline asm
	cvt.f32.bf16 %r10, %rs5;
	// end inline asm
	mov.b32 	%f5, %r10;
	// begin inline asm
	cvt.f32.bf16 %r11, %rs6;
	// end inline asm
	mov.b32 	%f6, %r11;
	// begin inline asm
	cvt.f32.bf16 %r12, %rs7;
	// end inline asm
	mov.b32 	%f7, %r12;
	// begin inline asm
	cvt.f32.bf16 %r13, %rs8;
	// end inline asm
	mov.b32 	%f8, %r13;
	add.s64 	%rd43, %rd24, %rd36;
	add.s64 	%rd3, %rd43, %rd38;
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	ld.global.v2.b32 { %r14, %r15 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r14;
	mov.b32 	{%rs11, %rs12}, %r15;
	// begin inline asm
	cvt.f32.bf16 %r16, %rs9;
	// end inline asm
	mov.b32 	%f9, %r16;
	// begin inline asm
	cvt.f32.bf16 %r17, %rs10;
	// end inline asm
	mov.b32 	%f10, %r17;
	// begin inline asm
	cvt.f32.bf16 %r18, %rs11;
	// end inline asm
	mov.b32 	%f11, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs12;
	// end inline asm
	mov.b32 	%f12, %r19;
	add.s64 	%rd4, %rd2, 2048;
	// begin inline asm
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	ld.global.v2.b32 { %r20, %r21 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	{%rs13, %rs14}, %r20;
	mov.b32 	{%rs15, %rs16}, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs13;
	// end inline asm
	mov.b32 	%f13, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs14;
	// end inline asm
	mov.b32 	%f14, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs15;
	// end inline asm
	mov.b32 	%f15, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs16;
	// end inline asm
	mov.b32 	%f16, %r25;
	add.s64 	%rd44, %rd29, %rd36;
	add.s64 	%rd5, %rd44, %rd38;
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	ld.global.v2.b32 { %r26, %r27 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	{%rs17, %rs18}, %r26;
	mov.b32 	{%rs19, %rs20}, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs17;
	// end inline asm
	mov.b32 	%f17, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs18;
	// end inline asm
	mov.b32 	%f18, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs19;
	// end inline asm
	mov.b32 	%f19, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs20;
	// end inline asm
	mov.b32 	%f20, %r31;
	add.rn.f32 	%f21, %f13, %f17;
	add.rn.f32 	%f22, %f14, %f18;
	add.rn.f32 	%f23, %f15, %f19;
	add.rn.f32 	%f24, %f16, %f20;
	add.rn.f32 	%f25, %f9, %f21;
	add.rn.f32 	%f26, %f10, %f22;
	add.rn.f32 	%f27, %f11, %f23;
	add.rn.f32 	%f28, %f12, %f24;
	add.rn.f32 	%f29, %f5, %f25;
	add.rn.f32 	%f30, %f6, %f26;
	add.rn.f32 	%f31, %f7, %f27;
	add.rn.f32 	%f32, %f8, %f28;
	add.rn.f32 	%f33, %f1, %f29;
	add.rn.f32 	%f34, %f2, %f30;
	add.rn.f32 	%f35, %f3, %f31;
	add.rn.f32 	%f36, %f4, %f32;
	add.s64 	%rd45, %rd31, %rd39;
	shl.b32 	%r177, %r171, 3;
	and.b32  	%r178, %r177, 248;
	selp.b32 	%r179, 0, 256, %p4;
	or.b32  	%r180, %r178, %r179;
	mul.wide.u32 	%rd46, %r180, 2;
	add.s64 	%rd6, %rd45, %rd46;
	add.s64 	%rd7, %rd6, 1024;
	// begin inline asm
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	mov.u32 %r34, 0x0;
	mov.u32 %r35, 0x0;
	ld.global.v4.b32 { %r32, %r33, %r34, %r35 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	{%rs21, %rs22}, %r32;
	mov.b32 	{%rs23, %rs24}, %r33;
	mov.b32 	{%rs25, %rs26}, %r34;
	mov.b32 	{%rs27, %rs28}, %r35;
	// begin inline asm
	mov.u32 %r36, 0x0;
	mov.u32 %r37, 0x0;
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	ld.global.v4.b32 { %r36, %r37, %r38, %r39 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	{%rs29, %rs30}, %r36;
	mov.b32 	{%rs31, %rs32}, %r37;
	mov.b32 	{%rs33, %rs34}, %r38;
	mov.b32 	{%rs35, %rs36}, %r39;
	// begin inline asm
	cvt.f32.bf16 %r40, %rs21;
	// end inline asm
	mov.b32 	%f37, %r40;
	// begin inline asm
	cvt.f32.bf16 %r41, %rs22;
	// end inline asm
	mov.b32 	%f38, %r41;
	// begin inline asm
	cvt.f32.bf16 %r42, %rs23;
	// end inline asm
	mov.b32 	%f39, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs24;
	// end inline asm
	mov.b32 	%f40, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs25;
	// end inline asm
	mov.b32 	%f41, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs26;
	// end inline asm
	mov.b32 	%f42, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs27;
	// end inline asm
	mov.b32 	%f43, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs28;
	// end inline asm
	mov.b32 	%f44, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs29;
	// end inline asm
	mov.b32 	%f45, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs30;
	// end inline asm
	mov.b32 	%f46, %r49;
	// begin inline asm
	cvt.f32.bf16 %r50, %rs31;
	// end inline asm
	mov.b32 	%f47, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs32;
	// end inline asm
	mov.b32 	%f48, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs33;
	// end inline asm
	mov.b32 	%f49, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs34;
	// end inline asm
	mov.b32 	%f50, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs35;
	// end inline asm
	mov.b32 	%f51, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs36;
	// end inline asm
	mov.b32 	%f52, %r55;
	shl.b64 	%rd47, %rd33, 12;
	add.s64 	%rd48, %rd27, %rd47;
	add.s64 	%rd8, %rd48, %rd46;
	add.s64 	%rd9, %rd8, 1024;
	// begin inline asm
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	ld.global.v4.b32 { %r56, %r57, %r58, %r59 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	{%rs37, %rs38}, %r56;
	mov.b32 	{%rs39, %rs40}, %r57;
	mov.b32 	{%rs41, %rs42}, %r58;
	mov.b32 	{%rs43, %rs44}, %r59;
	// begin inline asm
	mov.u32 %r60, 0x0;
	mov.u32 %r61, 0x0;
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	ld.global.v4.b32 { %r60, %r61, %r62, %r63 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	{%rs45, %rs46}, %r60;
	mov.b32 	{%rs47, %rs48}, %r61;
	mov.b32 	{%rs49, %rs50}, %r62;
	mov.b32 	{%rs51, %rs52}, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs37;
	// end inline asm
	mov.b32 	%f53, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs38;
	// end inline asm
	mov.b32 	%f54, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs39;
	// end inline asm
	mov.b32 	%f55, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs40;
	// end inline asm
	mov.b32 	%f56, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs41;
	// end inline asm
	mov.b32 	%f57, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs42;
	// end inline asm
	mov.b32 	%f58, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs43;
	// end inline asm
	mov.b32 	%f59, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs44;
	// end inline asm
	mov.b32 	%f60, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs45;
	// end inline asm
	mov.b32 	%f61, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs46;
	// end inline asm
	mov.b32 	%f62, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs47;
	// end inline asm
	mov.b32 	%f63, %r74;
	// begin inline asm
	cvt.f32.bf16 %r75, %rs48;
	// end inline asm
	mov.b32 	%f64, %r75;
	// begin inline asm
	cvt.f32.bf16 %r76, %rs49;
	// end inline asm
	mov.b32 	%f65, %r76;
	// begin inline asm
	cvt.f32.bf16 %r77, %rs50;
	// end inline asm
	mov.b32 	%f66, %r77;
	// begin inline asm
	cvt.f32.bf16 %r78, %rs51;
	// end inline asm
	mov.b32 	%f67, %r78;
	// begin inline asm
	cvt.f32.bf16 %r79, %rs52;
	// end inline asm
	mov.b32 	%f68, %r79;
	add.s64 	%rd49, %rd24, %rd39;
	add.s64 	%rd10, %rd49, %rd46;
	add.s64 	%rd11, %rd10, 1024;
	// begin inline asm
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	mov.u32 %r82, 0x0;
	mov.u32 %r83, 0x0;
	ld.global.v4.b32 { %r80, %r81, %r82, %r83 }, [ %rd10 + 0 ];
	// end inline asm
	mov.b32 	{%rs53, %rs54}, %r80;
	mov.b32 	{%rs55, %rs56}, %r81;
	mov.b32 	{%rs57, %rs58}, %r82;
	mov.b32 	{%rs59, %rs60}, %r83;
	// begin inline asm
	mov.u32 %r84, 0x0;
	mov.u32 %r85, 0x0;
	mov.u32 %r86, 0x0;
	mov.u32 %r87, 0x0;
	ld.global.v4.b32 { %r84, %r85, %r86, %r87 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	{%rs61, %rs62}, %r84;
	mov.b32 	{%rs63, %rs64}, %r85;
	mov.b32 	{%rs65, %rs66}, %r86;
	mov.b32 	{%rs67, %rs68}, %r87;
	// begin inline asm
	cvt.f32.bf16 %r88, %rs53;
	// end inline asm
	mov.b32 	%f69, %r88;
	// begin inline asm
	cvt.f32.bf16 %r89, %rs54;
	// end inline asm
	mov.b32 	%f70, %r89;
	// begin inline asm
	cvt.f32.bf16 %r90, %rs55;
	// end inline asm
	mov.b32 	%f71, %r90;
	// begin inline asm
	cvt.f32.bf16 %r91, %rs56;
	// end inline asm
	mov.b32 	%f72, %r91;
	// begin inline asm
	cvt.f32.bf16 %r92, %rs57;
	// end inline asm
	mov.b32 	%f73, %r92;
	// begin inline asm
	cvt.f32.bf16 %r93, %rs58;
	// end inline asm
	mov.b32 	%f74, %r93;
	// begin inline asm
	cvt.f32.bf16 %r94, %rs59;
	// end inline asm
	mov.b32 	%f75, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs60;
	// end inline asm
	mov.b32 	%f76, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs61;
	// end inline asm
	mov.b32 	%f77, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs62;
	// end inline asm
	mov.b32 	%f78, %r97;
	// begin inline asm
	cvt.f32.bf16 %r98, %rs63;
	// end inline asm
	mov.b32 	%f79, %r98;
	// begin inline asm
	cvt.f32.bf16 %r99, %rs64;
	// end inline asm
	mov.b32 	%f80, %r99;
	// begin inline asm
	cvt.f32.bf16 %r100, %rs65;
	// end inline asm
	mov.b32 	%f81, %r100;
	// begin inline asm
	cvt.f32.bf16 %r101, %rs66;
	// end inline asm
	mov.b32 	%f82, %r101;
	// begin inline asm
	cvt.f32.bf16 %r102, %rs67;
	// end inline asm
	mov.b32 	%f83, %r102;
	// begin inline asm
	cvt.f32.bf16 %r103, %rs68;
	// end inline asm
	mov.b32 	%f84, %r103;
	add.s64 	%rd12, %rd8, 2048;
	add.s64 	%rd13, %rd8, 3072;
	// begin inline asm
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	mov.u32 %r106, 0x0;
	mov.u32 %r107, 0x0;
	ld.global.v4.b32 { %r104, %r105, %r106, %r107 }, [ %rd12 + 0 ];
	// end inline asm
	mov.b32 	{%rs69, %rs70}, %r104;
	mov.b32 	{%rs71, %rs72}, %r105;
	mov.b32 	{%rs73, %rs74}, %r106;
	mov.b32 	{%rs75, %rs76}, %r107;
	// begin inline asm
	mov.u32 %r108, 0x0;
	mov.u32 %r109, 0x0;
	mov.u32 %r110, 0x0;
	mov.u32 %r111, 0x0;
	ld.global.v4.b32 { %r108, %r109, %r110, %r111 }, [ %rd13 + 0 ];
	// end inline asm
	mov.b32 	{%rs77, %rs78}, %r108;
	mov.b32 	{%rs79, %rs80}, %r109;
	mov.b32 	{%rs81, %rs82}, %r110;
	mov.b32 	{%rs83, %rs84}, %r111;
	// begin inline asm
	cvt.f32.bf16 %r112, %rs69;
	// end inline asm
	mov.b32 	%f85, %r112;
	// begin inline asm
	cvt.f32.bf16 %r113, %rs70;
	// end inline asm
	mov.b32 	%f86, %r113;
	// begin inline asm
	cvt.f32.bf16 %r114, %rs71;
	// end inline asm
	mov.b32 	%f87, %r114;
	// begin inline asm
	cvt.f32.bf16 %r115, %rs72;
	// end inline asm
	mov.b32 	%f88, %r115;
	// begin inline asm
	cvt.f32.bf16 %r116, %rs73;
	// end inline asm
	mov.b32 	%f89, %r116;
	// begin inline asm
	cvt.f32.bf16 %r117, %rs74;
	// end inline asm
	mov.b32 	%f90, %r117;
	// begin inline asm
	cvt.f32.bf16 %r118, %rs75;
	// end inline asm
	mov.b32 	%f91, %r118;
	// begin inline asm
	cvt.f32.bf16 %r119, %rs76;
	// end inline asm
	mov.b32 	%f92, %r119;
	// begin inline asm
	cvt.f32.bf16 %r120, %rs77;
	// end inline asm
	mov.b32 	%f93, %r120;
	// begin inline asm
	cvt.f32.bf16 %r121, %rs78;
	// end inline asm
	mov.b32 	%f94, %r121;
	// begin inline asm
	cvt.f32.bf16 %r122, %rs79;
	// end inline asm
	mov.b32 	%f95, %r122;
	// begin inline asm
	cvt.f32.bf16 %r123, %rs80;
	// end inline asm
	mov.b32 	%f96, %r123;
	// begin inline asm
	cvt.f32.bf16 %r124, %rs81;
	// end inline asm
	mov.b32 	%f97, %r124;
	// begin inline asm
	cvt.f32.bf16 %r125, %rs82;
	// end inline asm
	mov.b32 	%f98, %r125;
	// begin inline asm
	cvt.f32.bf16 %r126, %rs83;
	// end inline asm
	mov.b32 	%f99, %r126;
	// begin inline asm
	cvt.f32.bf16 %r127, %rs84;
	// end inline asm
	mov.b32 	%f100, %r127;
	add.s64 	%rd50, %rd29, %rd39;
	add.s64 	%rd14, %rd50, %rd46;
	add.s64 	%rd15, %rd14, 1024;
	// begin inline asm
	mov.u32 %r128, 0x0;
	mov.u32 %r129, 0x0;
	mov.u32 %r130, 0x0;
	mov.u32 %r131, 0x0;
	ld.global.v4.b32 { %r128, %r129, %r130, %r131 }, [ %rd14 + 0 ];
	// end inline asm
	mov.b32 	{%rs85, %rs86}, %r128;
	mov.b32 	{%rs87, %rs88}, %r129;
	mov.b32 	{%rs89, %rs90}, %r130;
	mov.b32 	{%rs91, %rs92}, %r131;
	// begin inline asm
	mov.u32 %r132, 0x0;
	mov.u32 %r133, 0x0;
	mov.u32 %r134, 0x0;
	mov.u32 %r135, 0x0;
	ld.global.v4.b32 { %r132, %r133, %r134, %r135 }, [ %rd15 + 0 ];
	// end inline asm
	mov.b32 	{%rs93, %rs94}, %r132;
	mov.b32 	{%rs95, %rs96}, %r133;
	mov.b32 	{%rs97, %rs98}, %r134;
	mov.b32 	{%rs99, %rs100}, %r135;
	// begin inline asm
	cvt.f32.bf16 %r136, %rs85;
	// end inline asm
	mov.b32 	%f101, %r136;
	// begin inline asm
	cvt.f32.bf16 %r137, %rs86;
	// end inline asm
	mov.b32 	%f102, %r137;
	// begin inline asm
	cvt.f32.bf16 %r138, %rs87;
	// end inline asm
	mov.b32 	%f103, %r138;
	// begin inline asm
	cvt.f32.bf16 %r139, %rs88;
	// end inline asm
	mov.b32 	%f104, %r139;
	// begin inline asm
	cvt.f32.bf16 %r140, %rs89;
	// end inline asm
	mov.b32 	%f105, %r140;
	// begin inline asm
	cvt.f32.bf16 %r141, %rs90;
	// end inline asm
	mov.b32 	%f106, %r141;
	// begin inline asm
	cvt.f32.bf16 %r142, %rs91;
	// end inline asm
	mov.b32 	%f107, %r142;
	// begin inline asm
	cvt.f32.bf16 %r143, %rs92;
	// end inline asm
	mov.b32 	%f108, %r143;
	// begin inline asm
	cvt.f32.bf16 %r144, %rs93;
	// end inline asm
	mov.b32 	%f109, %r144;
	// begin inline asm
	cvt.f32.bf16 %r145, %rs94;
	// end inline asm
	mov.b32 	%f110, %r145;
	// begin inline asm
	cvt.f32.bf16 %r146, %rs95;
	// end inline asm
	mov.b32 	%f111, %r146;
	// begin inline asm
	cvt.f32.bf16 %r147, %rs96;
	// end inline asm
	mov.b32 	%f112, %r147;
	// begin inline asm
	cvt.f32.bf16 %r148, %rs97;
	// end inline asm
	mov.b32 	%f113, %r148;
	// begin inline asm
	cvt.f32.bf16 %r149, %rs98;
	// end inline asm
	mov.b32 	%f114, %r149;
	// begin inline asm
	cvt.f32.bf16 %r150, %rs99;
	// end inline asm
	mov.b32 	%f115, %r150;
	// begin inline asm
	cvt.f32.bf16 %r151, %rs100;
	// end inline asm
	mov.b32 	%f116, %r151;
	add.rn.f32 	%f117, %f85, %f101;
	add.rn.f32 	%f118, %f86, %f102;
	add.rn.f32 	%f119, %f87, %f103;
	add.rn.f32 	%f120, %f88, %f104;
	add.rn.f32 	%f121, %f89, %f105;
	add.rn.f32 	%f122, %f90, %f106;
	add.rn.f32 	%f123, %f91, %f107;
	add.rn.f32 	%f124, %f92, %f108;
	add.rn.f32 	%f125, %f93, %f109;
	add.rn.f32 	%f126, %f94, %f110;
	add.rn.f32 	%f127, %f95, %f111;
	add.rn.f32 	%f128, %f96, %f112;
	add.rn.f32 	%f129, %f97, %f113;
	add.rn.f32 	%f130, %f98, %f114;
	add.rn.f32 	%f131, %f99, %f115;
	add.rn.f32 	%f132, %f100, %f116;
	add.rn.f32 	%f133, %f69, %f117;
	add.rn.f32 	%f134, %f70, %f118;
	add.rn.f32 	%f135, %f71, %f119;
	add.rn.f32 	%f136, %f72, %f120;
	add.rn.f32 	%f137, %f73, %f121;
	add.rn.f32 	%f138, %f74, %f122;
	add.rn.f32 	%f139, %f75, %f123;
	add.rn.f32 	%f140, %f76, %f124;
	add.rn.f32 	%f141, %f77, %f125;
	add.rn.f32 	%f142, %f78, %f126;
	add.rn.f32 	%f143, %f79, %f127;
	add.rn.f32 	%f144, %f80, %f128;
	add.rn.f32 	%f145, %f81, %f129;
	add.rn.f32 	%f146, %f82, %f130;
	add.rn.f32 	%f147, %f83, %f131;
	add.rn.f32 	%f148, %f84, %f132;
	add.rn.f32 	%f149, %f53, %f133;
	add.rn.f32 	%f150, %f54, %f134;
	add.rn.f32 	%f151, %f55, %f135;
	add.rn.f32 	%f152, %f56, %f136;
	add.rn.f32 	%f153, %f57, %f137;
	add.rn.f32 	%f154, %f58, %f138;
	add.rn.f32 	%f155, %f59, %f139;
	add.rn.f32 	%f156, %f60, %f140;
	add.rn.f32 	%f157, %f61, %f141;
	add.rn.f32 	%f158, %f62, %f142;
	add.rn.f32 	%f159, %f63, %f143;
	add.rn.f32 	%f160, %f64, %f144;
	add.rn.f32 	%f161, %f65, %f145;
	add.rn.f32 	%f162, %f66, %f146;
	add.rn.f32 	%f163, %f67, %f147;
	add.rn.f32 	%f164, %f68, %f148;
	add.rn.f32 	%f165, %f37, %f149;
	add.rn.f32 	%f166, %f38, %f150;
	add.rn.f32 	%f167, %f39, %f151;
	add.rn.f32 	%f168, %f40, %f152;
	add.rn.f32 	%f169, %f41, %f153;
	add.rn.f32 	%f170, %f42, %f154;
	add.rn.f32 	%f171, %f43, %f155;
	add.rn.f32 	%f172, %f44, %f156;
	add.rn.f32 	%f173, %f45, %f157;
	add.rn.f32 	%f174, %f46, %f158;
	add.rn.f32 	%f175, %f47, %f159;
	add.rn.f32 	%f176, %f48, %f160;
	add.rn.f32 	%f177, %f49, %f161;
	add.rn.f32 	%f178, %f50, %f162;
	add.rn.f32 	%f179, %f51, %f163;
	add.rn.f32 	%f180, %f52, %f164;
	mul.rn.f32 	%f181, %f165, %f165;
	mul.rn.f32 	%f182, %f166, %f166;
	mul.rn.f32 	%f183, %f167, %f167;
	mul.rn.f32 	%f184, %f168, %f168;
	mul.rn.f32 	%f185, %f169, %f169;
	mul.rn.f32 	%f186, %f170, %f170;
	mul.rn.f32 	%f187, %f171, %f171;
	mul.rn.f32 	%f188, %f172, %f172;
	mul.rn.f32 	%f189, %f173, %f173;
	mul.rn.f32 	%f190, %f174, %f174;
	mul.rn.f32 	%f191, %f175, %f175;
	mul.rn.f32 	%f192, %f176, %f176;
	mul.rn.f32 	%f193, %f177, %f177;
	mul.rn.f32 	%f194, %f178, %f178;
	mul.rn.f32 	%f195, %f179, %f179;
	mul.rn.f32 	%f196, %f180, %f180;
	add.rn.f32 	%f197, %f181, %f182;
	add.rn.f32 	%f198, %f197, %f183;
	add.rn.f32 	%f199, %f198, %f184;
	add.rn.f32 	%f200, %f199, %f185;
	add.rn.f32 	%f201, %f200, %f186;
	add.rn.f32 	%f202, %f201, %f187;
	add.rn.f32 	%f203, %f202, %f188;
	add.rn.f32 	%f204, %f203, %f189;
	add.rn.f32 	%f205, %f204, %f190;
	add.rn.f32 	%f206, %f205, %f191;
	add.rn.f32 	%f207, %f206, %f192;
	add.rn.f32 	%f208, %f207, %f193;
	add.rn.f32 	%f209, %f208, %f194;
	add.rn.f32 	%f210, %f209, %f195;
	add.rn.f32 	%f211, %f210, %f196;
	mov.b32 	%r181, %f211;
	shfl.sync.bfly.b32	%r182, %r181, 16, 31, -1;
	mov.b32 	%f212, %r182;
	add.rn.f32 	%f213, %f211, %f212;
	mov.b32 	%r183, %f213;
	shfl.sync.bfly.b32	%r184, %r183, 8, 31, -1;
	mov.b32 	%f214, %r184;
	add.rn.f32 	%f215, %f213, %f214;
	mov.b32 	%r185, %f215;
	shfl.sync.bfly.b32	%r186, %r185, 4, 31, -1;
	mov.b32 	%f216, %r186;
	add.rn.f32 	%f217, %f215, %f216;
	mov.b32 	%r187, %f217;
	shfl.sync.bfly.b32	%r188, %r187, 2, 31, -1;
	mov.b32 	%f218, %r188;
	add.rn.f32 	%f219, %f217, %f218;
	mov.b32 	%r189, %f219;
	shfl.sync.bfly.b32	%r190, %r189, 1, 31, -1;
	mov.b32 	%f220, %r190;
	add.rn.f32 	%f221, %f219, %f220;
	setp.eq.s32 	%p1, %r172, 0;
	shr.u32 	%r191, %r171, 3;
	and.b32  	%r192, %r191, 4;
	cvt.u64.u32 	%rd51, %r192;
	mov.u64 	%rd52, global_smem;
	add.s64 	%rd53, %rd52, %rd51;
	mov.b32 	%r153, %f221;
	cvt.u32.u64 	%r152, %rd53;
	// begin inline asm
	@%p1 st.shared.b32 [ %r152 + 0 ], %r153;
	// end inline asm
	bar.sync 	0;
	setp.lt.u32 	%p2, %r171, 2;
	cvt.u64.u32 	%rd54, %r173;
	add.s64 	%rd55, %rd52, %rd54;
	cvt.u32.u64 	%r155, %rd55;
	// begin inline asm
	@%p2 ld.shared.b32 %r154, [ %r155 + 0 ];
	// end inline asm
	mov.b32 	%f222, %r154;
	shfl.sync.bfly.b32	%r193, %r154, 1, 31, -1;
	mov.b32 	%f223, %r193;
	add.rn.f32 	%f224, %f222, %f223;
	setp.eq.s32 	%p3, %r171, 0;
	mov.b32 	%r157, %f224;
	// begin inline asm
	@%p3 st.shared.b32 [ %r155 + 0 ], %r157;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f225, [global_smem];
	mul.rn.f32 	%f226, %f225, 0f3A800000;
	// begin inline asm
	mov.u32 %r158, 0x0;
	ld.global.b32 { %r158 }, [ %rd16 + 0 ];
	// end inline asm
	mov.b32 	%f227, %r158;
	add.rn.f32 	%f228, %f226, %f227;
	rsqrt.approx.f32 	%f229, %f228;
	mul.rn.f32 	%f230, %f33, %f229;
	mul.rn.f32 	%f231, %f34, %f229;
	mul.rn.f32 	%f232, %f35, %f229;
	mul.rn.f32 	%f233, %f36, %f229;
	shl.b64 	%rd56, %rd35, 1;
	add.s64 	%rd57, %rd30, %rd56;
	add.s64 	%rd17, %rd57, %rd38;
	// begin inline asm
	mov.u32 %r159, 0x0;
	mov.u32 %r160, 0x0;
	ld.global.v2.b32 { %r159, %r160 }, [ %rd17 + 0 ];
	// end inline asm
	mov.b32 	{%rs101, %rs102}, %r159;
	mov.b32 	{%rs103, %rs104}, %r160;
	// begin inline asm
	cvt.f32.bf16 %r161, %rs101;
	// end inline asm
	mov.b32 	%f234, %r161;
	// begin inline asm
	cvt.f32.bf16 %r162, %rs102;
	// end inline asm
	mov.b32 	%f235, %r162;
	// begin inline asm
	cvt.f32.bf16 %r163, %rs103;
	// end inline asm
	mov.b32 	%f236, %r163;
	// begin inline asm
	cvt.f32.bf16 %r164, %rs104;
	// end inline asm
	mov.b32 	%f237, %r164;
	mul.rn.f32 	%f238, %f230, %f234;
	mul.rn.f32 	%f239, %f231, %f235;
	mul.rn.f32 	%f240, %f232, %f236;
	mul.rn.f32 	%f241, %f233, %f237;
	mov.b32 	%r165, %f238;
	// begin inline asm
	cvt.rn.bf16.f32 %rs105, %r165;
	// end inline asm
	mov.b32 	%r166, %f239;
	// begin inline asm
	cvt.rn.bf16.f32 %rs106, %r166;
	// end inline asm
	mov.b32 	%r167, %f240;
	// begin inline asm
	cvt.rn.bf16.f32 %rs107, %r167;
	// end inline asm
	mov.b32 	%r168, %f241;
	// begin inline asm
	cvt.rn.bf16.f32 %rs108, %r168;
	// end inline asm
	add.s64 	%rd58, %rd21, %rd36;
	add.s64 	%rd18, %rd58, %rd38;
	mov.b32 	%r169, {%rs105, %rs106};
	mov.b32 	%r170, {%rs107, %rs108};
	// begin inline asm
	st.global.v2.b32 [ %rd18 + 0 ], { %r169, %r170 };
	// end inline asm
	ret;

}
	// .globl	wrapped_slice
.visible .entry wrapped_slice(
	.param .u64 .ptr .align 128 wrapped_slice_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;

	ld.param.u64 	%rd1, [wrapped_slice_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 7;
	and.b32  	%r4, %r3, 896;
	shl.b32 	%r5, %r2, 9;
	and.b32  	%r6, %r5, 61440;
	or.b32  	%r7, %r6, %r4;
	or.b32  	%r8, %r7, %r1;
	mul.wide.u32 	%rd5, %r8, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.u16 	%rs1, [%rd6+6144];
	or.b32  	%r9, %r3, %r1;
	mul.wide.u32 	%rd7, %r9, 2;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.b16 	[%rd8], %rs1;
	ret;

}
	// .globl	triton_softmax_4_0
.visible .entry triton_softmax_4_0(
	.param .u64 .ptr .align 16 triton_softmax_4_0_param_0,
	.param .u64 .ptr .align 128 triton_softmax_4_0_param_1,
	.param .u64 .ptr .align 128 triton_softmax_4_0_param_2
)
.reqntid 32, 1, 1
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<29>;
	.reg .f32 	%f<30>;
	.reg .b64 	%rd<20>;

	ld.param.u64 	%rd4, [triton_softmax_4_0_param_0];
	ld.param.u64 	%rd5, [triton_softmax_4_0_param_2];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [triton_softmax_4_0_param_1];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd2, %rd4;
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	shl.b32 	%r13, %r1, 7;
	cvt.u64.u32 	%rd9, %r13;
	and.b64  	%rd10, %rd9, 896;
	mul.wide.s32 	%rd11, %r1, 512;
	and.b64  	%rd12, %rd11, 9223372036854771712;
	or.b64  	%rd13, %rd12, %rd10;
	shl.b64 	%rd14, %rd13, 1;
	add.s64 	%rd15, %rd8, %rd14;
	mov.u32 	%r14, %tid.x;
	shl.b32 	%r15, %r14, 2;
	and.b32  	%r16, %r15, 60;
	setp.lt.u32 	%p1, %r14, 16;
	selp.b32 	%r17, 0, 64, %p1;
	or.b32  	%r18, %r16, %r17;
	mul.wide.u32 	%rd16, %r18, 2;
	add.s64 	%rd17, %rd15, %rd16;
	add.s64 	%rd1, %rd17, 4096;
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r2;
	mov.b32 	{%rs3, %rs4}, %r3;
	// begin inline asm
	cvt.f32.bf16 %r4, %rs1;
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	cvt.f32.bf16 %r5, %rs2;
	// end inline asm
	mov.b32 	%f2, %r5;
	// begin inline asm
	cvt.f32.bf16 %r6, %rs3;
	// end inline asm
	mov.b32 	%f3, %r6;
	// begin inline asm
	cvt.f32.bf16 %r7, %rs4;
	// end inline asm
	mov.b32 	%f4, %r7;
	mul.rn.f32 	%f5, %f1, %f1;
	mul.rn.f32 	%f6, %f2, %f2;
	mul.rn.f32 	%f7, %f3, %f3;
	mul.rn.f32 	%f8, %f4, %f4;
	add.rn.f32 	%f9, %f5, %f6;
	add.rn.f32 	%f10, %f9, %f7;
	add.rn.f32 	%f11, %f10, %f8;
	mov.b32 	%r19, %f11;
	shfl.sync.bfly.b32	%r20, %r19, 16, 31, -1;
	mov.b32 	%f12, %r20;
	add.rn.f32 	%f13, %f11, %f12;
	mov.b32 	%r21, %f13;
	shfl.sync.bfly.b32	%r22, %r21, 8, 31, -1;
	mov.b32 	%f14, %r22;
	add.rn.f32 	%f15, %f13, %f14;
	mov.b32 	%r23, %f15;
	shfl.sync.bfly.b32	%r24, %r23, 4, 31, -1;
	mov.b32 	%f16, %r24;
	add.rn.f32 	%f17, %f15, %f16;
	mov.b32 	%r25, %f17;
	shfl.sync.bfly.b32	%r26, %r25, 2, 31, -1;
	mov.b32 	%f18, %r26;
	add.rn.f32 	%f19, %f17, %f18;
	mov.b32 	%r27, %f19;
	shfl.sync.bfly.b32	%r28, %r27, 1, 31, -1;
	mov.b32 	%f20, %r28;
	add.rn.f32 	%f21, %f19, %f20;
	mul.rn.f32 	%f22, %f21, 0f3C000000;
	// begin inline asm
	mov.u32 %r8, 0x0;
	ld.global.b32 { %r8 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f23, %r8;
	add.rn.f32 	%f24, %f22, %f23;
	rsqrt.approx.f32 	%f25, %f24;
	mul.rn.f32 	%f26, %f1, %f25;
	mul.rn.f32 	%f27, %f2, %f25;
	mul.rn.f32 	%f28, %f3, %f25;
	mul.rn.f32 	%f29, %f4, %f25;
	add.s64 	%rd18, %rd6, %rd11;
	mul.wide.u32 	%rd19, %r18, 4;
	add.s64 	%rd3, %rd18, %rd19;
	mov.b32 	%r9, %f26;
	mov.b32 	%r10, %f27;
	mov.b32 	%r11, %f28;
	mov.b32 	%r12, %f29;
	// begin inline asm
	st.global.v4.b32 [ %rd3 + 0 ], { %r9, %r10, %r11, %r12 };
	// end inline asm
	ret;

}
	// .globl	input_concatenate_fusion
.visible .entry input_concatenate_fusion(
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_0,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_1,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_2,
	.param .u64 .ptr .align 16 input_concatenate_fusion_param_3,
	.param .u64 .ptr .align 128 input_concatenate_fusion_param_4
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<7>;
	.reg .b32 	%r<17>;
	.reg .f32 	%f<15>;
	.reg .b64 	%rd<25>;

	ld.param.u64 	%rd1, [input_concatenate_fusion_param_0];
	ld.param.u64 	%rd2, [input_concatenate_fusion_param_4];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.param.u64 	%rd4, [input_concatenate_fusion_param_1];
	ld.param.u64 	%rd5, [input_concatenate_fusion_param_3];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.param.u64 	%rd7, [input_concatenate_fusion_param_2];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd9, %rd4;
	cvta.to.global.u64 	%rd10, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r4, %r1, 1;
	and.b32  	%r5, %r4, 128;
	shl.b32 	%r6, %r2, 8;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r8, %r7, %r3;
	mul.wide.u32 	%rd11, %r8, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	mul.wide.u32 	%rd13, %r3, 2;
	add.s64 	%rd14, %rd9, %rd13;
	ld.global.nc.u16 	%rs1, [%rd14];
	cvt.f32.bf16 	%f2, %rs1;
	mul.rn.f32 	%f3, %f1, %f2;
	and.b32  	%r9, %r2, -4;
	cvt.u64.u32 	%rd15, %r9;
	add.s64 	%rd16, %rd6, %rd15;
	ld.global.nc.u32 	%r10, [%rd16];
	min.s32 	%r11, %r10, 40959;
	max.s32 	%r12, %r11, 0;
	shl.b32 	%r13, %r12, 7;
	or.b32  	%r14, %r13, %r3;
	mul.wide.u32 	%rd17, %r14, 2;
	add.s64 	%rd18, %rd8, %rd17;
	ld.global.nc.u16 	%rs2, [%rd18];
	cvt.f32.bf16 	%f4, %rs2;
	mul.rn.f32 	%f5, %f3, %f4;
	or.b32  	%r15, %r1, 64;
	ld.global.nc.f32 	%f6, [%rd12+256];
	mul.wide.u32 	%rd19, %r15, 2;
	add.s64 	%rd20, %rd9, %rd19;
	ld.global.nc.u16 	%rs3, [%rd20];
	cvt.f32.bf16 	%f7, %rs3;
	mul.rn.f32 	%f8, %f6, %f7;
	or.b32  	%r16, %r13, %r15;
	mul.wide.u32 	%rd21, %r16, 2;
	add.s64 	%rd22, %rd8, %rd21;
	ld.global.nc.u16 	%rs4, [%rd22];
	cvt.f32.bf16 	%f9, %rs4;
	mul.rn.f32 	%f10, %f8, %f9;
	sub.rn.f32 	%f11, %f5, %f10;
	cvt.rn.bf16.f32 	%rs5, %f11;
	mul.wide.u32 	%rd23, %r8, 2;
	add.s64 	%rd24, %rd3, %rd23;
	st.global.b16 	[%rd24], %rs5;
	mul.rn.f32 	%f12, %f8, %f4;
	mul.rn.f32 	%f13, %f3, %f9;
	add.rn.f32 	%f14, %f12, %f13;
	cvt.rn.bf16.f32 	%rs6, %f14;
	st.global.b16 	[%rd24+128], %rs6;
	ret;

}
	// .globl	loop_slice_fusion
.visible .entry loop_slice_fusion(
	.param .u64 .ptr .align 16 loop_slice_fusion_param_0,
	.param .u64 .ptr .align 128 loop_slice_fusion_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [loop_slice_fusion_param_0];
	ld.param.u64 	%rd2, [loop_slice_fusion_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6+138706944];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}
	// .globl	wrapped_slice_1
.visible .entry wrapped_slice_1(
	.param .u64 .ptr .align 16 wrapped_slice_1_param_0,
	.param .u64 .ptr .align 128 wrapped_slice_1_param_1
)
.reqntid 128, 1, 1
{
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;

	ld.param.u64 	%rd1, [wrapped_slice_1_param_0];
	ld.param.u64 	%rd2, [wrapped_slice_1_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r1, 2;
	shl.b32 	%r4, %r2, 9;
	or.b32  	%r5, %r3, %r4;
	mul.wide.u32 	%rd5, %r5, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd6];
	add.s64 	%rd7, %rd3, %rd5;
	st.global.v4.b16 	[%rd7], {%rs1, %rs2, %rs3, %rs4};
	ret;

}

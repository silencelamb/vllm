#indexing_map = #xla.indexing_map<"(d0) -> (0), domain: d0 in [0, 63]">
#indexing_map1 = #xla.indexing_map<"(tid_0, tid_1, tid_2) -> (0), domain: tid_0 in [0, 63], tid_1 in [0, 0], tid_2 in [0, 0]">
#indexing_map2 = #xla.indexing_map<"(tid_0, tid_1, tid_2) -> (tid_0 * 1024), domain: tid_0 in [0, 63], tid_1 in [0, 0], tid_2 in [0, 0]">
module {
  tt.func @fusion_11_impl(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32}) {
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.index_castui %1 : i64 to index
    %3 = xla.apply_indexing #indexing_map(%2)
    %4 = xla.apply_indexing #indexing_map(%2)
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %c1024_i64 = arith.constant 1024 : i64
    %5 = xla.apply_indexing #indexing_map1(%2, %3, %4)
    %6 = xla.apply_indexing #indexing_map1(%2, %3, %4)
    %c64_i64 = arith.constant 64 : i64
    %7 = arith.index_castui %2 : index to i64
    %8 = arith.subi %c64_i64, %7 : i64
    %c1_i64_0 = arith.constant 1 : i64
    %9 = arith.index_castui %5 : index to i64
    %10 = arith.subi %c1_i64_0, %9 : i64
    %c1024_i64_1 = arith.constant 1024 : i64
    %11 = arith.index_castui %6 : index to i64
    %12 = arith.subi %c1024_i64_1, %11 : i64
    %13 = xla.apply_indexing #indexing_map2(%2, %3, %4)
    %14 = arith.index_castui %13 : index to i64
    %15 = tt.addptr %arg1, %14 : !tt.ptr<bf16>, i64
    %c0_i32 = arith.constant 0 : i32
    %16 = tt.make_tensor_ptr %15, [%8, %10, %12], [%c1024_i64, %c0_i64, %c1_i64], [%c0_i32, %c0_i32, %c0_i32] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    %17 = tt.load %16 : !tt.ptr<tensor<1x1x1024xbf16>>
    %18 = arith.extf %17 : tensor<1x1x1024xbf16> to tensor<1x1x1024xf32>
    %19 = arith.mulf %18, %18 : tensor<1x1x1024xf32>
    %20 = tt.reshape %19 : tensor<1x1x1024xf32> -> tensor<1x1024xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %21 = "tt.reduce"(%20) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %62 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %62 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %cst_2 = arith.constant 9.765625E-4 : f32
    %22 = tt.splat %cst_2 : f32 -> tensor<1xf32>
    %23 = arith.mulf %21, %22 : tensor<1xf32>
    %24 = xla.apply_indexing #indexing_map1(%2, %3, %4)
    %25 = arith.index_castui %24 : index to i64
    %26 = tt.addptr %arg0, %25 : !tt.ptr<f32>, i64
    %c0_i32_3 = arith.constant 0 : i32
    %27 = tt.make_tensor_ptr %26, [], [], [] {order = array<i32>} : <tensor<f32>>
    %28 = tt.load %26 : !tt.ptr<f32>
    %29 = tt.splat %28 : f32 -> tensor<1xf32>
    %30 = arith.addf %23, %29 : tensor<1xf32>
    %31 = tt.extern_elementwise %30 {libname = "libdevice", libpath = "/usr/local/cuda-12.6/nvvm/libdevice/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1xf32>) -> tensor<1xf32>
    %32 = tt.expand_dims %31 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32>
    %33 = tt.expand_dims %32 {axis = 2 : i32} : tensor<1x1xf32> -> tensor<1x1x1xf32>
    %34 = tt.broadcast %33 : tensor<1x1x1xf32> -> tensor<1x1x1024xf32>
    %35 = arith.mulf %18, %34 : tensor<1x1x1024xf32>
    %c1_i64_4 = arith.constant 1 : i64
    %36 = xla.apply_indexing #indexing_map1(%2, %3, %4)
    %c1024_i64_5 = arith.constant 1024 : i64
    %37 = arith.index_castui %36 : index to i64
    %38 = arith.subi %c1024_i64_5, %37 : i64
    %39 = xla.apply_indexing #indexing_map1(%2, %3, %4)
    %40 = arith.index_castui %39 : index to i64
    %41 = tt.addptr %arg2, %40 : !tt.ptr<bf16>, i64
    %c0_i32_6 = arith.constant 0 : i32
    %42 = tt.make_tensor_ptr %41, [%38], [%c1_i64_4], [%c0_i32_6] {order = array<i32: 0>} : <tensor<1024xbf16>>
    %43 = tt.load %42 : !tt.ptr<tensor<1024xbf16>>
    %44 = arith.extf %43 : tensor<1024xbf16> to tensor<1024xf32>
    %45 = tt.expand_dims %44 {axis = 0 : i32} : tensor<1024xf32> -> tensor<1x1024xf32>
    %46 = tt.expand_dims %45 {axis = 1 : i32} : tensor<1x1024xf32> -> tensor<1x1x1024xf32>
    %47 = tt.broadcast %46 : tensor<1x1x1024xf32> -> tensor<1x1x1024xf32>
    %48 = arith.mulf %35, %47 : tensor<1x1x1024xf32>
    %49 = arith.truncf %48 : tensor<1x1x1024xf32> to tensor<1x1x1024xbf16>
    %c1_i64_7 = arith.constant 1 : i64
    %c1024_i64_8 = arith.constant 1024 : i64
    %c1024_i64_9 = arith.constant 1024 : i64
    %50 = xla.apply_indexing #indexing_map1(%2, %3, %4)
    %51 = xla.apply_indexing #indexing_map1(%2, %3, %4)
    %c64_i64_10 = arith.constant 64 : i64
    %52 = arith.index_castui %2 : index to i64
    %53 = arith.subi %c64_i64_10, %52 : i64
    %c1_i64_11 = arith.constant 1 : i64
    %54 = arith.index_castui %50 : index to i64
    %55 = arith.subi %c1_i64_11, %54 : i64
    %c1024_i64_12 = arith.constant 1024 : i64
    %56 = arith.index_castui %51 : index to i64
    %57 = arith.subi %c1024_i64_12, %56 : i64
    %58 = xla.apply_indexing #indexing_map2(%2, %3, %4)
    %59 = arith.index_castui %58 : index to i64
    %60 = tt.addptr %arg3, %59 : !tt.ptr<bf16>, i64
    %c0_i32_13 = arith.constant 0 : i32
    %61 = tt.make_tensor_ptr %60, [%53, %55, %57], [%c1024_i64_9, %c1024_i64_8, %c1_i64_7], [%c0_i32_13, %c0_i32_13, %c0_i32_13] {order = array<i32: 2, 1, 0>} : <tensor<1x1x1024xbf16>>
    tt.store %61, %49 : !tt.ptr<tensor<1x1x1024xbf16>>
    tt.return
  }
}
